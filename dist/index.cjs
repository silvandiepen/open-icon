var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/icons/animal-step.ts
var animal_step_exports = {};
__export(animal_step_exports, {
  IconAnimalStep: () => IconAnimalStep,
  default: () => animal_step_default
});
var IconAnimalStep, animal_step_default;
var init_animal_step = __esm({
  "lib/icons/animal-step.ts"() {
    IconAnimalStep = `<svg id="animal-step" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><ellipse cx="45.25" cy="22.76" rx="6.75" ry="8.44" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><ellipse cx="57.6" cy="35.82" rx="6.19" ry="4.95" transform="translate(-8.46 51.22) rotate(-45)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M36,56.19c-9.94,0-18,5.44-18-4.5,0-9.94,8.06-18,18-18,9.94,0,18,8.06,18,18s-8.06,4.5-18,4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><ellipse cx="26.75" cy="22.76" rx="6.75" ry="8.44" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><ellipse cx="14.4" cy="35.82" rx="4.95" ry="6.19" transform="translate(-21.11 20.67) rotate(-45)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><ellipse cx="45.25" cy="22.76" rx="6.75" ry="8.44" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><ellipse cx="57.6" cy="35.82" rx="6.19" ry="4.95" transform="translate(-8.46 51.22) rotate(-45)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,56.19c-9.94,0-18,5.44-18-4.5,0-9.94,8.06-18,18-18,9.94,0,18,8.06,18,18s-8.06,4.5-18,4.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><ellipse cx="26.75" cy="22.76" rx="6.75" ry="8.44" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><ellipse cx="14.4" cy="35.82" rx="4.95" ry="6.19" transform="translate(-21.11 20.67) rotate(-45)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    animal_step_default = IconAnimalStep;
  }
});

// lib/icons/butterfly.ts
var butterfly_exports = {};
__export(butterfly_exports, {
  IconButterfly: () => IconButterfly,
  default: () => butterfly_default
});
var IconButterfly, butterfly_default;
var init_butterfly = __esm({
  "lib/icons/butterfly.ts"() {
    IconButterfly = `<svg id="butterfly" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.39,18.81c9.21,3.68,12.54,10.29,12.54,17.41s-5.42,8.36-12.54,8.36-12.89-11.29-12.89-18.41,6.28-10.01,12.89-7.36Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M50.93,62.31c-6.58-2.63-9.21-9.64-9.21-14.73s4.12-3.68,9.21-3.68,9.21,8.07,9.21,13.15-4.49,7.15-9.21,5.26Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M21.4,62.34c6.34-2.54,8.87-9.16,8.87-14.06s-3.97-3.68-8.87-3.68-8.87,7.78-8.87,12.68,4.32,6.89,8.87,5.07Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M42.07,36.22c0,3.36,0,22.28-6.07,22.28s-6.07-18.92-6.07-22.28,2.72-6.07,6.07-6.07,6.07,2.72,6.07,6.07Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="24.07" r="6.07" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M54.61,18.12c-9.21,3.68-12.54,10.98-12.54,18.1s5.42,7.67,12.54,7.67c7.12,0,12.89-11.29,12.89-18.41s-6.28-10.01-12.89-7.36Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M50.93,62.31c-6.58-2.63-9.21-9.64-9.21-14.73" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36,18c3.36,0,6.07,2.72,6.07,6.07" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><g><line x1="38.17" y1="18.4" x2="45" y2="8.16" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><line x1="27" y1="8.16" x2="33.83" y2="18.41" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><path d="M17.39,18.81c9.21,3.68,12.54,10.29,12.54,17.41s-5.42,8.36-12.54,8.36-12.89-11.29-12.89-18.41,6.28-10.01,12.89-7.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M50.93,62.31c-6.58-2.63-9.21-9.64-9.21-14.73s4.12-3.68,9.21-3.68,9.21,8.07,9.21,13.15-4.49,7.15-9.21,5.26Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M21.4,62.34c6.34-2.54,8.87-9.16,8.87-14.06s-3.97-3.68-8.87-3.68-8.87,7.78-8.87,12.68,4.32,6.89,8.87,5.07Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M42.07,36.22c0,3.36,0,22.28-6.07,22.28s-6.07-18.92-6.07-22.28,2.72-6.07,6.07-6.07,6.07,2.72,6.07,6.07Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="24.07" r="6.07" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54.61,18.12c-9.21,3.68-12.54,10.98-12.54,18.1s5.42,7.67,12.54,7.67c7.12,0,12.89-11.29,12.89-18.41s-6.28-10.01-12.89-7.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><path d="M17.39,44.59c-7.12,0-12.89-11.29-12.89-18.41" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M50.93,62.31c-6.58-2.63-9.21-9.64-9.21-14.73" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M12.53,57.26c0,4.9,4.32,6.89,8.87,5.07,6.34-2.54,8.87-9.16,8.87-14.06" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M42.07,36.22c0,3.36,0,22.28-6.07,22.28s-6.07-18.92-6.07-22.28" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,18c3.36,0,6.07,2.72,6.07,6.07" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54.61,18.12c-9.21,3.68-12.54,10.98-12.54,18.1" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    butterfly_default = IconButterfly;
  }
});

// lib/icons/cat-head.ts
var cat_head_exports = {};
__export(cat_head_exports, {
  IconCatHead: () => IconCatHead,
  default: () => cat_head_default
});
var IconCatHead, cat_head_default;
var init_cat_head = __esm({
  "lib/icons/cat-head.ts"() {
    IconCatHead = `<svg id="cat-head" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M57.68,36.41c0,12.2-9.89,22.09-22.09,22.09s-22.09-9.89-22.09-22.09V13.5l14.73,10.64h14.73s14.73-10.64,14.73-10.64v22.91Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cat_head_default = IconCatHead;
  }
});

// lib/icons/cat-head2.ts
var cat_head2_exports = {};
__export(cat_head2_exports, {
  IconCatHead2: () => IconCatHead2,
  default: () => cat_head2_default
});
var IconCatHead2, cat_head2_default;
var init_cat_head2 = __esm({
  "lib/icons/cat-head2.ts"() {
    IconCatHead2 = `<svg id="cat-head2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M58.5,39.65l-11.8-10.62c-6.08-5.48-15.32-5.48-21.41,0l-11.8,10.62,11.8,10.62c6.08,5.48,15.32,5.48,21.41,0l11.8-10.62Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M25.3,29.04c.54-.49,1.12-.92,1.7-1.32v-10.09l-4.5,4.5c-2.88,2.88-4.5,6.79-4.5,10.86v2.62l7.3-6.57Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M46.7,29.04l7.3,6.57v-2.62c0-4.07-1.62-7.98-4.5-10.86l-4.5-4.5v10.1c.58.4,1.16.83,1.7,1.31Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    cat_head2_default = IconCatHead2;
  }
});

// lib/icons/cat.ts
var cat_exports = {};
__export(cat_exports, {
  IconCat: () => IconCat,
  default: () => cat_default
});
var IconCat, cat_default;
var init_cat = __esm({
  "lib/icons/cat.ts"() {
    IconCat = `<svg id="cat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.5,58.5v-13.5c0-7.46,6.04-13.5,13.5-13.5h0c4.97,0,9-4.03,9-9v-2.3c0-3.7,3-6.7,6.7-6.7h0c1.49,0,2.94.5,4.11,1.41l2.69,2.09,4.5,1v4.5l-4.5,4.5h0c0,5.92-1.38,11.76-4.02,17.05l-.48.95v4.5h0c2.49,0,4.5,2.01,4.5,4.5h0c0,2.49-2.01,4.5-4.5,4.5h-9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,40.5h0c4.97,0,9,4.03,9,9h0s0,0,0,0h4.5c2.49,0,4.5,2.01,4.5,4.5h0c0,2.49-2.01,4.5-4.5,4.5h-28.97c-3.7,0-6.92-2.85-7.03-6.54-.11-3.82,2.95-6.96,6.75-6.96" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="47.58 14.93 48.5 10.56 51.7 13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cat_default = IconCat;
  }
});

// lib/icons/cat2.ts
var cat2_exports = {};
__export(cat2_exports, {
  IconCat2: () => IconCat2,
  default: () => cat2_default
});
var IconCat2, cat2_default;
var init_cat2 = __esm({
  "lib/icons/cat2.ts"() {
    IconCat2 = `<svg id="cat2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,39.21c-3.2,0-5.79,2.59-5.79,5.79v13.5h11.57v-13.5c0-3.2-2.59-5.79-5.79-5.79Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M46.64,20.45c0,6.1-4.95,11.05-11.05,11.05s-11.05-4.95-11.05-11.05v-11.45s7.36,5.32,7.36,5.32h7.36l7.36-5.32v11.45Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,58.5h9c4.97,0,9-4.03,9-9v-18c0-4.97,4.03-9,9-9h0" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45.28,30.77l-1.47-2.95c-2.02,2.25-4.95,3.68-8.21,3.68-2.99,0-5.69-1.19-7.68-3.11l-1.19,2.38c-2.78,5.55-4.22,11.68-4.22,17.89v5.84c0,2.21,1.79,4,4,4h19c2.21,0,4-1.79,4-4v-5.84c0-6.21-1.45-12.33-4.22-17.89Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cat2_default = IconCat2;
  }
});

// lib/icons/cat3.ts
var cat3_exports = {};
__export(cat3_exports, {
  IconCat3: () => IconCat3,
  default: () => cat3_default
});
var IconCat3, cat3_default;
var init_cat3 = __esm({
  "lib/icons/cat3.ts"() {
    IconCat3 = `<svg id="cat3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,43.71c-3.2,0-5.79,2.59-5.79,5.79v13.5h11.57v-13.5c0-3.2-2.59-5.79-5.79-5.79Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M48.96,22.5v-1.89c0-2.93-1.16-5.74-3.24-7.81l-3.24-3.24v7.26c-3.9-2.66-9.05-2.67-12.95,0,0,0,0-7.26,0-7.26l-3.24,3.24c-2.07,2.07-3.24,4.88-3.24,7.81v1.88l-3.24,2.91,8.48,7.64c4.38,3.94,11.02,3.94,15.4,0l8.48-7.64-3.23-2.91Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M44.02,32.76l-.32.29c-4.38,3.94-11.02,3.94-15.4,0l-.33-.29-1.26,2.52c-2.78,5.55-4.22,11.68-4.22,17.89v5.84c0,2.21,1.79,4,4,4h19c2.21,0,4-1.79,4-4v-5.84c0-6.21-1.45-12.33-4.22-17.89l-1.25-2.51Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,49.5l.04-.04c2.47-2.47,6.46-2.47,8.93,0h0c2.49,2.49,6.55,2.46,9-.07l.04-.04" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cat3_default = IconCat3;
  }
});

// lib/icons/fish.ts
var fish_exports = {};
__export(fish_exports, {
  IconFish: () => IconFish,
  default: () => fish_default
});
var IconFish, fish_default;
var init_fish = __esm({
  "lib/icons/fish.ts"() {
    IconFish = `<svg id="fish" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M9,27h0c5.52,0,10.56,3.12,13.02,8.05l.48.95-.48.95c-2.47,4.93-7.51,8.05-13.02,8.05h0c0-4.97,0-4.5,4.5-9h0,0c-4.5-4.5-4.5-4.03-4.5-9h0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M22.5,36l4.68-7.02c2.7-4.05,7.25-6.48,12.12-6.48h2.41c4.87,0,9.42,2.43,12.12,6.48l4.68,7.02-4.68,7.02c-2.7,4.05-7.25,6.48-12.12,6.48h-2.41c-4.87,0-9.42-2.43-12.12-6.48l-4.68-7.02Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M27,13.5h4.5c4.97,0,9,4.03,9,9h0s-4.5,0-4.5,0c-4.97,0-9-4.03-9-9h0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M27,58.5h4.5c4.97,0,9-4.03,9-9h0s-4.5,0-4.5,0c-4.97,0-9,4.03-9,9h0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="45" y1="36" x2="45" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,27h0c5.52,0,10.56,3.12,13.02,8.05l.48.95-.48.95c-2.47,4.93-7.51,8.05-13.02,8.05h0c0-4.97,0-4.5,4.5-9h0,0c-4.5-4.5-4.5-4.03-4.5-9h0Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,36l4.68-7.02c2.7-4.05,7.25-6.48,12.12-6.48h2.41c4.87,0,9.42,2.43,12.12,6.48l4.68,7.02-4.68,7.02c-2.7,4.05-7.25,6.48-12.12,6.48h-2.41c-4.87,0-9.42-2.43-12.12-6.48l-4.68-7.02Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,13.5h4.5c4.97,0,9,4.03,9,9h0s-4.5,0-4.5,0c-4.97,0-9-4.03-9-9h0Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,58.5h4.5c4.97,0,9-4.03,9-9h0s-4.5,0-4.5,0c-4.97,0-9,4.03-9,9h0Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    fish_default = IconFish;
  }
});

// lib/icons/fish2.ts
var fish2_exports = {};
__export(fish2_exports, {
  IconFish2: () => IconFish2,
  default: () => fish2_default
});
var IconFish2, fish2_default;
var init_fish2 = __esm({
  "lib/icons/fish2.ts"() {
    IconFish2 = `<svg id="fish2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.5,36l8-8c3.52-3.52,8.29-5.5,13.27-5.5h2.46c4.98,0,9.75,1.98,13.27,5.5h0c4.42,4.42,4.42,11.59,0,16.01h0c-3.52,3.52-8.29,5.5-13.27,5.5h-2.46c-4.98,0-9.75-1.98-13.27-5.5l-8-8Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M27,16.5h3c3.31,0,6,2.69,6,6h0s-3,0-3,0c-3.31,0-6-2.69-6-6h0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M44.24,11.84h0c4.86,1.02,7.98,5.8,6.95,10.66h0s-8.81-1.85-8.81-1.85c-2.43-.51-3.99-2.9-3.48-5.33h0c.51-2.43,2.9-3.99,5.33-3.48Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M27,55.5h3c3.31,0,6-2.69,6-6h0s-3,0-3,0c-3.31,0-6,2.69-6,6h0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M46.63,60.98h0c4.69-1.65,7.15-6.8,5.49-11.48h0s-8.49,3-8.49,3c-2.34.83-3.57,3.4-2.75,5.74h0c.83,2.34,3.4,3.57,5.74,2.75Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M14.56,27h0c-3.07,0-5.56,2.49-5.56,5.56v6.88c0,3.07,2.49,5.56,5.56,5.56h0c2.11,0,4.03-1.19,4.98-3.07l2.96-5.93-2.96-5.93c-.94-1.88-2.87-3.07-4.98-3.07Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="31.58" y1="27" x2="31.58" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.58" y1="22.78" x2="40.58" y2="49.22" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="31.5" x2="49.5" y2="31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,36l8-8c3.52-3.52,8.29-5.5,13.27-5.5h2.46c4.98,0,9.75,1.98,13.27,5.5h0c4.42,4.42,4.42,11.59,0,16.01h0c-3.52,3.52-8.29,5.5-13.27,5.5h-2.46c-4.98,0-9.75-1.98-13.27-5.5l-8-8Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,16.5h3c3.31,0,6,2.69,6,6h0s-3,0-3,0c-3.31,0-6-2.69-6-6h0Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M44.24,11.84h0c4.86,1.02,7.98,5.8,6.95,10.66h0s-8.81-1.85-8.81-1.85c-2.43-.51-3.99-2.9-3.48-5.33h0c.51-2.43,2.9-3.99,5.33-3.48Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,55.5h3c3.31,0,6-2.69,6-6h0s-3,0-3,0c-3.31,0-6,2.69-6,6h0Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M46.63,60.98h0c4.69-1.65,7.15-6.8,5.49-11.48h0s-8.49,3-8.49,3c-2.34.83-3.57,3.4-2.75,5.74h0c.83,2.34,3.4,3.57,5.74,2.75Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M14.56,27h0c-3.07,0-5.56,2.49-5.56,5.56v6.88c0,3.07,2.49,5.56,5.56,5.56h0c2.11,0,4.03-1.19,4.98-3.07l2.96-5.93-2.96-5.93c-.94-1.88-2.87-3.07-4.98-3.07Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    fish2_default = IconFish2;
  }
});

// lib/icons/jellyfish.ts
var jellyfish_exports = {};
__export(jellyfish_exports, {
  IconJellyfish: () => IconJellyfish,
  default: () => jellyfish_default
});
var IconJellyfish, jellyfish_default;
var init_jellyfish = __esm({
  "lib/icons/jellyfish.ts"() {
    IconJellyfish = `<svg id="jellyfish" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M53.01,25.38c-.21,0-.42.02-.63.03v-.03c0-9.05-7.33-16.38-16.38-16.38s-16.38,7.33-16.38,16.38v.03c-.21-.02-.42-.03-.63-.03-4.17,0-7.56,3.38-7.56,7.56s3.38,7.56,7.56,7.56c2.26,0,4.28-1,5.67-2.57,1.39,1.57,3.41,2.57,5.67,2.57s4.28-1,5.67-2.57c1.39,1.57,3.41,2.57,5.67,2.57s4.28-1,5.67-2.57c1.39,1.57,3.41,2.57,5.67,2.57,4.17,0,7.56-3.38,7.56-7.56s-3.38-7.56-7.56-7.56Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M31.5,40.41v13.59c0,3.73-3.02,6.75-6.75,6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,39.63v5.37c0,2.49-2.01,4.5-4.5,4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,39.63v5.37c0,2.49,2.01,4.5,4.5,4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,40.41v13.59c0,3.73,3.02,6.75,6.75,6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M53.01,25.38c-.21,0-.42.02-.63.03v-.03c0-9.05-7.33-16.38-16.38-16.38s-16.38,7.33-16.38,16.38v.03c-.21-.02-.42-.03-.63-.03-4.17,0-7.56,3.38-7.56,7.56s3.38,7.56,7.56,7.56c2.26,0,4.28-1,5.67-2.57,1.39,1.57,3.41,2.57,5.67,2.57s4.28-1,5.67-2.57c1.39,1.57,3.41,2.57,5.67,2.57s4.28-1,5.67-2.57c1.39,1.57,3.41,2.57,5.67,2.57,4.17,0,7.56-3.38,7.56-7.56s-3.38-7.56-7.56-7.56Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    jellyfish_default = IconJellyfish;
  }
});

// lib/icons/lobster.ts
var lobster_exports = {};
__export(lobster_exports, {
  IconLobster: () => IconLobster,
  default: () => lobster_default
});
var IconLobster, lobster_default;
var init_lobster = __esm({
  "lib/icons/lobster.ts"() {
    IconLobster = `<svg id="lobster" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M32.52,12.86l-1.13-4.54c-.56-2.24-2.58-3.82-4.89-3.82h0" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M39.48,12.86l1.13-4.54c.56-2.24,2.58-3.82,4.89-3.82h0" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="15.11" y1="37.93" x2="27.64" y2="37.93" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="44.36" y1="37.93" x2="56.89" y2="37.93" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="31.82 42.11 19.29 46.46 15.11 54.82" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="40.18 42.11 52.71 46.46 56.89 54.82" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13 26 18 31.5 29.73 33.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="60.3 25.2 55.73 31.5 44 33.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="27.64" y="33.75" width="16.71" height="8.36" rx="4.18" ry="4.18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="27.64" y="42.11" width="16.71" height="8.36" rx="4.18" ry="4.18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M41.77,50.46h-11.55c-1.58,0-3.03.89-3.74,2.31l-1.01,2.02c-.93,1.85.42,4.03,2.49,4.03h3.85c0,2.31,1.87,4.18,4.18,4.18s4.18-1.87,4.18-4.18h3.85c2.07,0,3.42-2.18,2.49-4.03l-1.01-2.02c-.71-1.42-2.15-2.31-3.74-2.31Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M32.52,12.86h6.96l3.29,3.7c4.41,4.96,4.19,12.5-.51,17.19h0s-12.54,0-12.54,0h0c-4.69-4.69-4.91-12.23-.51-17.19l3.29-3.7Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M13,11.6c3.98,0,7.2,3.22,7.2,7.2s-3.22,7.2-7.2,7.2-7.2-3.22-7.2-7.2,3.22-10.8,7.2-10.8v10.8" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M60.3,10.8c-3.98,0-7.2,3.22-7.2,7.2s3.22,7.2,7.2,7.2,7.2-3.22,7.2-7.2-3.22-10.8-7.2-10.8v10.8" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="27.64" y="33.75" width="16.71" height="8.36" rx="4.18" ry="4.18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="27.64" y="42.11" width="16.71" height="8.36" rx="4.18" ry="4.18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M41.77,50.46h-11.55c-1.58,0-3.03.89-3.74,2.31l-1.01,2.02c-.93,1.85.42,4.03,2.49,4.03h3.85c0,2.31,1.87,4.18,4.18,4.18s4.18-1.87,4.18-4.18h3.85c2.07,0,3.42-2.18,2.49-4.03l-1.01-2.02c-.71-1.42-2.15-2.31-3.74-2.31Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M32.52,12.86h6.96l3.29,3.7c4.41,4.96,4.19,12.5-.51,17.19h0s-12.54,0-12.54,0h0c-4.69-4.69-4.91-12.23-.51-17.19l3.29-3.7Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13,11.6c3.98,0,7.2,3.22,7.2,7.2s-3.22,7.2-7.2,7.2-7.2-3.22-7.2-7.2,3.22-10.8,7.2-10.8v10.8" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M60.3,10.8c-3.98,0-7.2,3.22-7.2,7.2s3.22,7.2,7.2,7.2,7.2-3.22,7.2-7.2-3.22-10.8-7.2-10.8v10.8" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    lobster_default = IconLobster;
  }
});

// lib/icons/pufferfish.ts
var pufferfish_exports = {};
__export(pufferfish_exports, {
  IconPufferfish: () => IconPufferfish,
  default: () => pufferfish_default
});
var IconPufferfish, pufferfish_default;
var init_pufferfish = __esm({
  "lib/icons/pufferfish.ts"() {
    IconPufferfish = `<svg id="pufferfish" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18,32.4l-9-5.4h0c-2.83,5.67-2.83,12.33,0,18h0s9-5.4,9-5.4v-7.2Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M46.46,37.54c-3.57,0-7.03,1.25-9.77,3.52-2.71,2.25-6.11,3.49-9.64,3.52l-6.86.02c2.86,5.22,8.23,8.9,14.4,9.37,10.06.76,18.55-6.75,19.35-16.45h-7.47Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M20.19,44.61l6.87-.06c3.52-.03,6.93-1.28,9.64-3.52h0c2.75-2.28,6.2-3.52,9.77-3.52h8.41" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="54" x2="36" y2="58.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="13.5" x2="36" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="20.09" y1="20.09" x2="23.27" y2="23.27" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="48.73" y1="23.27" x2="51.91" y2="20.09" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27.39" y1="15.21" x2="29.11" y2="19.37" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.89" y1="19.37" x2="44.61" y2="15.21" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="52.63" y1="42.89" x2="56.79" y2="44.61" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="48.73" y1="48.73" x2="51.91" y2="51.91" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="52.63" y1="29.11" x2="56.79" y2="27.39" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.89" y1="52.63" x2="44.61" y2="56.79" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="20.09" y1="51.91" x2="23.27" y2="48.73" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27.39" y1="56.79" x2="29.11" y2="52.63" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,32.4l-9-5.4h0c-2.83,5.67-2.83,12.33,0,18h0s9-5.4,9-5.4v-7.2Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M32.41,31.5l-4.17.19h0c-1.31,2.63-1.31,5.72,0,8.34h0s4.17.47,4.17.47" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="31.5" x2="40.5" y2="31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M57,37.5h-3.06c-.8,9.69-9.28,17.21-19.35,16.45-8.52-.65-15.54-7.41-16.48-15.9-1.2-10.86,7.27-20.05,17.89-20.05,8.07,0,14.9,5.31,17.18,12.63l2.71.45c1.51.25,2.61,1.55,2.61,3.08v1.85h0c0,.83-.67,1.5-1.5,1.5Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    pufferfish_default = IconPufferfish;
  }
});

// lib/icons/sea-star.ts
var sea_star_exports = {};
__export(sea_star_exports, {
  IconSeaStar: () => IconSeaStar,
  default: () => sea_star_default
});
var IconSeaStar, sea_star_default;
var init_sea_star = __esm({
  "lib/icons/sea-star.ts"() {
    IconSeaStar = `<svg id="sea-star" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.57,10.55l4.57,9.26c.74,1.51,2.18,2.55,3.84,2.79l10.22,1.48c4.18.61,5.85,5.75,2.83,8.7l-7.39,7.21c-1.2,1.17-1.75,2.86-1.47,4.51l1.75,10.18c.71,4.17-3.66,7.34-7.4,5.38l-9.14-4.8c-1.49-.78-3.26-.78-4.75,0l-9.14,4.8c-3.74,1.97-8.11-1.21-7.4-5.38l1.75-10.18c.28-1.65-.26-3.34-1.47-4.51l-7.39-7.21c-3.03-2.95-1.36-8.09,2.83-8.7l10.22-1.48c1.66-.24,3.1-1.28,3.84-2.79l4.57-9.26c1.87-3.79,7.28-3.79,9.15,0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.57,10.55l4.57,9.26c.74,1.51,2.18,2.55,3.84,2.79l10.22,1.48c4.18.61,5.85,5.75,2.83,8.7l-7.39,7.21c-1.2,1.17-1.75,2.86-1.47,4.51l1.75,10.18c.71,4.17-3.66,7.34-7.4,5.38l-9.14-4.8c-1.49-.78-3.26-.78-4.75,0l-9.14,4.8c-3.74,1.97-8.11-1.21-7.4-5.38l1.75-10.18c.28-1.65-.26-3.34-1.47-4.51l-7.39-7.21c-3.03-2.95-1.36-8.09,2.83-8.7l10.22-1.48c1.66-.24,3.1-1.28,3.84-2.79l4.57-9.26c1.87-3.79,7.28-3.79,9.15,0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="36" y1="36" x2="36" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="32.92" y1="40.24" x2="28.3" y2="46.6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-dasharray: 0 0 0 5.24; stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="26.76" y1="48.72" x2="26.76" y2="48.72" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g><line x1="50.95" y1="31.14" x2="50.95" y2="31.14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45.97" y1="32.76" x2="38.49" y2="35.19" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-dasharray: 0 0 0 5.24; stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="39.08" y1="40.24" x2="43.7" y2="46.6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-dasharray: 0 0 0 5.24; stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45.24" y1="48.72" x2="45.24" y2="48.72" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g><line x1="36" y1="20.28" x2="36" y2="20.28" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="25.52" x2="36" y2="33.38" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-dasharray: 0 0 0 5.24; stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g><line x1="21.05" y1="31.14" x2="21.05" y2="31.14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="26.03" y1="32.76" x2="33.51" y2="35.19" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-dasharray: 0 0 0 5.24; stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    sea_star_default = IconSeaStar;
  }
});

// lib/icons/squid.ts
var squid_exports = {};
__export(squid_exports, {
  IconSquid: () => IconSquid,
  default: () => squid_default
});
var IconSquid, squid_default;
var init_squid = __esm({
  "lib/icons/squid.ts"() {
    IconSquid = `<svg id="squid" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M31.5,40.5v2.25c0,3.73-3.02,6.75-6.75,6.75h0c-3.73,0-6.75-3.02-6.75-6.75v-2.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,40.5v2.25c0,3.73-3.02,6.75-6.75,6.75h0c-3.73,0-6.75-3.02-6.75-6.75v-2.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="58.5" x2="31.5" y2="40.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="58.5" x2="40.5" y2="40.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,40.5h9l4.07-10.55c2.24-5.23,1.04-10.98-3.21-15.39l-5.36-5.56-5.36,5.56c-4.25,4.41-5.45,10.16-3.21,15.39l4.07,10.55Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M31.5,40.5h9l4.07-10.55c2.24-5.23,1.04-10.98-3.21-15.39l-5.36-5.56-5.36,5.56c-4.25,4.41-5.45,10.16-3.21,15.39l4.07,10.55Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M40.11,10.6l-4.11-1.6,5.36,5.56c2.96,3.07,4.44,6.79,4.31,10.53.09-.03.19-.05.28-.08l7.6-2.36h0c-2.25-5.24-7.08-9.58-13.43-12.05Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18.45,22.65h0l7.6,2.36c.09.03.19.05.28.08-.13-3.74,1.35-7.46,4.31-10.53l5.36-5.56-4.11,1.6c-6.35,2.47-11.19,6.81-13.43,12.05Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><path d="M40.5,45c0,2.49-2.01,4.5-4.5,4.5s-4.5-2.01-4.5-4.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    squid_default = IconSquid;
  }
});

// lib/icons/stingray.ts
var stingray_exports = {};
__export(stingray_exports, {
  IconStingray: () => IconStingray,
  default: () => stingray_default
});
var IconStingray, stingray_default;
var init_stingray = __esm({
  "lib/icons/stingray.ts"() {
    IconStingray = `<svg id="stingray" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M49.26,24.87c.16-.76.25-1.55.25-2.37,0-3.93-1.89-7.26-4.53-8.49-.27,4.73-4.18,8.49-8.97,8.49s-8.71-3.76-8.97-8.49c-2.63,1.23-4.53,4.56-4.53,8.49,0,.82.09,1.62.25,2.37-8.2,3.3-13.75,10.03-13.75,20.13h13.5c4.5,0,4.5,9,13.5,9s9-9,13.5-9h13.5c0-10.09-5.54-16.83-13.74-20.13Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M27,31.5s0,9,4.5,13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,31.5s0,9-4.5,13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,54v2.25c0,3.73,3.02,6.75,6.75,6.75h0c3.73,0,6.75-3.02,6.75-6.75v-2.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.26,24.87c.16-.76.25-1.55.25-2.37,0-3.93-1.89-7.26-4.53-8.49-.27,4.73-4.18,8.49-8.97,8.49s-8.71-3.76-8.97-8.49c-2.63,1.23-4.53,4.56-4.53,8.49,0,.82.09,1.62.25,2.37-8.2,3.3-13.75,10.03-13.75,20.13h13.5c4.5,0,4.5,9,13.5,9s9-9,13.5-9h13.5c0-10.09-5.54-16.83-13.74-20.13Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    stingray_default = IconStingray;
  }
});

// lib/icons/turtle.ts
var turtle_exports = {};
__export(turtle_exports, {
  IconTurtle: () => IconTurtle,
  default: () => turtle_default
});
var IconTurtle, turtle_default;
var init_turtle = __esm({
  "lib/icons/turtle.ts"() {
    IconTurtle = `<svg id="turtle" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M50.06,47.4c-12.73,12.73-28.64,3.18-28.64,3.18,0,0-9.55-15.91,3.18-28.64,7.03-7.03,18.43-7.03,25.46,0,7.03,7.03,7.03,18.43,0,25.46Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><g><g><path d="M50.06,47.4c-12.73,12.73-28.64,3.18-28.64,3.18,0,0-9.55-15.91,3.18-28.64,7.03-7.03,18.43-7.03,25.46,0,7.03,7.03,7.03,18.43,0,25.46Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M50.06,21.94c1.25,1.25,2.26,2.64,3.07,4.11,2.7-1.23,5.27-2.91,6.48-4.11,2.64-2.64,2.64-6.91,0-9.55s-6.91-2.64-9.55,0c-1.2,1.2-2.89,3.78-4.11,6.48,1.48.81,2.87,1.82,4.11,3.07Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M37.75,8.8h-9c-4.97,0-9,4.03-9,9h0s9,0,9,0c4.97,0,9-4.03,9-9h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63.2,34.25v9c0,4.97-4.03,9-9,9h0v-9c0-4.97,4.03-9,9-9h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.8,32.11v6c0,4.97-4.03,9-9,9h0v-6c0-4.97,4.03-9,9-9h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M39.89,54.2h-6c-4.97,0-9,4.03-9,9h0s6,0,6,0c4.97,0,9-4.03,9-9h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g><polygon points="39.53 25.65 45.89 32.01 43.77 42.62 33.16 44.74 26.8 38.37 28.92 27.77 39.53 25.65" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="39.53" y1="25.65" x2="41.21" y2="17.2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54.33" y1="30.32" x2="45.89" y2="32.01" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="23.43" y1="22.28" x2="28.92" y2="27.77" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="43.77" y1="42.62" x2="49.25" y2="48.1" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="33.16" y1="44.74" x2="31.21" y2="54.48" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="26.8" y1="38.37" x2="17.67" y2="40.2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></g></svg>`;
    turtle_default = IconTurtle;
  }
});

// lib/icons/whale.ts
var whale_exports = {};
__export(whale_exports, {
  IconWhale: () => IconWhale,
  default: () => whale_default
});
var IconWhale, whale_default;
var init_whale = __esm({
  "lib/icons/whale.ts"() {
    IconWhale = `<svg id="whale" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M49.5,40.5h13.5v-4.5c0-2.49-2.01-4.5-4.5-4.5h-31.5c-4.97,0-9-4.03-9-9h-4.5v9c0,12.43,5.57,18,18,18h9c4.97,0,9-4.03,9-9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,49.5c4.97,0,9-4.03,9-9h13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,18c0,2.49,2.01,4.5,4.5,4.5h4.5c2.49,0,4.5-2.01,4.5-4.5v-9h0c-3.73,0-6.75,9-6.75,9,0,0-3.02-9-6.75-9h0v9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M31.5,49.5v9c4.97,0,9-4.03,9-9h-9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,31.5h-31.5c-4.97,0-9-4.03-9-9h-4.5v9c0,12.43,5.57,18,18,18h22.5c4.97,0,9-4.03,9-9v-4.5c0-2.49-2.01-4.5-4.5-4.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="40.5" x2="40.5" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,18c0,2.49,2.01,4.5,4.5,4.5h4.5c2.49,0,4.5-2.01,4.5-4.5v-9h0c-3.73,0-6.75,9-6.75,9,0,0-3.02-9-6.75-9h0v9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,49.5v9c4.97,0,9-4.03,9-9h-9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    whale_default = IconWhale;
  }
});

// lib/icons/icon24.ts
var icon24_exports = {};
__export(icon24_exports, {
  IconIcon24: () => IconIcon24,
  default: () => icon24_default
});
var IconIcon24, icon24_default;
var init_icon24 = __esm({
  "lib/icons/icon24.ts"() {
    IconIcon24 = `<svg id="Artboard_25" data-name="Artboard 25" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="64.09" y1="36" x2="45" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="36" x2="7.91" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="7.91" x2="36" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="45" x2="36" y2="64.09" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="18 45 27 36 18 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="54 27 45 36 54 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 54 36 45 27 54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 18 36 27 45 18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    icon24_default = IconIcon24;
  }
});

// lib/icons/arrow-corner-down.ts
var arrow_corner_down_exports = {};
__export(arrow_corner_down_exports, {
  IconArrowCornerDown: () => IconArrowCornerDown,
  default: () => arrow_corner_down_default
});
var IconArrowCornerDown, arrow_corner_down_default;
var init_arrow_corner_down = __esm({
  "lib/icons/arrow-corner-down.ts"() {
    IconArrowCornerDown = `<svg id="arrow-corner-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.5,58.5v-25c0-11.05,8.95-20,20-20h16" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 49.5 22.5 58.5 31.5 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_corner_down_default = IconArrowCornerDown;
  }
});

// lib/icons/arrow-corner-left.ts
var arrow_corner_left_exports = {};
__export(arrow_corner_left_exports, {
  IconArrowCornerLeft: () => IconArrowCornerLeft,
  default: () => arrow_corner_left_default
});
var IconArrowCornerLeft, arrow_corner_left_default;
var init_arrow_corner_left = __esm({
  "lib/icons/arrow-corner-left.ts"() {
    IconArrowCornerLeft = `<svg id="arrow-corner-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.5,22.5h25c11.05,0,20,8.95,20,20v16" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 13.5 13.5 22.5 22.5 31.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_corner_left_default = IconArrowCornerLeft;
  }
});

// lib/icons/arrow-corner-right.ts
var arrow_corner_right_exports = {};
__export(arrow_corner_right_exports, {
  IconArrowCornerRight: () => IconArrowCornerRight,
  default: () => arrow_corner_right_default
});
var IconArrowCornerRight, arrow_corner_right_default;
var init_arrow_corner_right = __esm({
  "lib/icons/arrow-corner-right.ts"() {
    IconArrowCornerRight = `<svg id="arrow-corner-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M58.5,49.5h-25c-11.05,0-20-8.95-20-20V13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 58.5 58.5 49.5 49.5 40.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_corner_right_default = IconArrowCornerRight;
  }
});

// lib/icons/arrow-corner-up.ts
var arrow_corner_up_exports = {};
__export(arrow_corner_up_exports, {
  IconArrowCornerUp: () => IconArrowCornerUp,
  default: () => arrow_corner_up_default
});
var IconArrowCornerUp, arrow_corner_up_default;
var init_arrow_corner_up = __esm({
  "lib/icons/arrow-corner-up.ts"() {
    IconArrowCornerUp = `<svg id="arrow-corner-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M49.5,13.5v25c0,11.05-8.95,20-20,20H13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.5 22.5 49.5 13.5 40.5 22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_corner_up_default = IconArrowCornerUp;
  }
});

// lib/icons/arrow-diagonal-bl-tr-stop.ts
var arrow_diagonal_bl_tr_stop_exports = {};
__export(arrow_diagonal_bl_tr_stop_exports, {
  IconArrowDiagonalBlTrStop: () => IconArrowDiagonalBlTrStop,
  default: () => arrow_diagonal_bl_tr_stop_default
});
var IconArrowDiagonalBlTrStop, arrow_diagonal_bl_tr_stop_default;
var init_arrow_diagonal_bl_tr_stop = __esm({
  "lib/icons/arrow-diagonal-bl-tr-stop.ts"() {
    IconArrowDiagonalBlTrStop = `<svg id="arrow-diagonal-bl-tr-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><polyline points="25.59 59.14 25.59 46.41 12.86 46.41" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="46.41 12.86 46.41 25.59 59.14 25.59" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="59.91" y1="12.09" x2="46.41" y2="25.59" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="25.59" y1="46.41" x2="12.09" y2="59.91" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="27" y1="27" x2="45" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_diagonal_bl_tr_stop_default = IconArrowDiagonalBlTrStop;
  }
});

// lib/icons/arrow-diagonal-br-tl-stop.ts
var arrow_diagonal_br_tl_stop_exports = {};
__export(arrow_diagonal_br_tl_stop_exports, {
  IconArrowDiagonalBrTlStop: () => IconArrowDiagonalBrTlStop,
  default: () => arrow_diagonal_br_tl_stop_default
});
var IconArrowDiagonalBrTlStop, arrow_diagonal_br_tl_stop_default;
var init_arrow_diagonal_br_tl_stop = __esm({
  "lib/icons/arrow-diagonal-br-tl-stop.ts"() {
    IconArrowDiagonalBrTlStop = `<svg id="arrow-diagonal-br-tl-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><polyline points="59.14 46.41 46.41 46.41 46.41 59.14" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="12.86 25.59 25.59 25.59 25.59 12.86" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="12.09" y1="12.09" x2="25.59" y2="25.59" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="46.41" y1="46.41" x2="59.91" y2="59.91" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="27" y1="45" x2="45" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_diagonal_br_tl_stop_default = IconArrowDiagonalBrTlStop;
  }
});

// lib/icons/arrow-diagonal-in-lt-br.ts
var arrow_diagonal_in_lt_br_exports = {};
__export(arrow_diagonal_in_lt_br_exports, {
  IconArrowDiagonalInLtBr: () => IconArrowDiagonalInLtBr,
  default: () => arrow_diagonal_in_lt_br_default
});
var IconArrowDiagonalInLtBr, arrow_diagonal_in_lt_br_default;
var init_arrow_diagonal_in_lt_br = __esm({
  "lib/icons/arrow-diagonal-in-lt-br.ts"() {
    IconArrowDiagonalInLtBr = `<svg id="arrow-diagonal-in-lt-br" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><polyline points="17.36 30.09 30.09 30.09 30.09 17.36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="13.5" x2="30.09" y2="30.09" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g><polyline points="54.64 41.91 41.91 41.91 41.91 54.64" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="58.5" x2="41.91" y2="41.91" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    arrow_diagonal_in_lt_br_default = IconArrowDiagonalInLtBr;
  }
});

// lib/icons/arrow-diagonal-in-tr-bl.ts
var arrow_diagonal_in_tr_bl_exports = {};
__export(arrow_diagonal_in_tr_bl_exports, {
  IconArrowDiagonalInTrBl: () => IconArrowDiagonalInTrBl,
  default: () => arrow_diagonal_in_tr_bl_default
});
var IconArrowDiagonalInTrBl, arrow_diagonal_in_tr_bl_default;
var init_arrow_diagonal_in_tr_bl = __esm({
  "lib/icons/arrow-diagonal-in-tr-bl.ts"() {
    IconArrowDiagonalInTrBl = `<svg id="arrow-diagonal-in-tr-bl" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><polyline points="30.09 54.64 30.09 41.91 17.36 41.91" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="58.5" x2="30.09" y2="41.91" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g><polyline points="41.91 17.36 41.91 30.09 54.64 30.09" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="13.5" x2="41.91" y2="30.09" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    arrow_diagonal_in_tr_bl_default = IconArrowDiagonalInTrBl;
  }
});

// lib/icons/arrow-diagonal-tl-br-split.ts
var arrow_diagonal_tl_br_split_exports = {};
__export(arrow_diagonal_tl_br_split_exports, {
  IconArrowDiagonalTlBrSplit: () => IconArrowDiagonalTlBrSplit,
  default: () => arrow_diagonal_tl_br_split_default
});
var IconArrowDiagonalTlBrSplit, arrow_diagonal_tl_br_split_default;
var init_arrow_diagonal_tl_br_split = __esm({
  "lib/icons/arrow-diagonal-tl-br-split.ts"() {
    IconArrowDiagonalTlBrSplit = `<svg id="arrow-diagonal-tl-br-split" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="45" y1="45" x2="58.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="13.5" x2="27" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="26.23 13.5 13.5 13.5 13.5 26.23" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45.77 58.5 58.5 58.5 58.5 45.77" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_diagonal_tl_br_split_default = IconArrowDiagonalTlBrSplit;
  }
});

// lib/icons/arrow-diagonal-tl-br-stop.ts
var arrow_diagonal_tl_br_stop_exports = {};
__export(arrow_diagonal_tl_br_stop_exports, {
  IconArrowDiagonalTlBrStop: () => IconArrowDiagonalTlBrStop,
  default: () => arrow_diagonal_tl_br_stop_default
});
var IconArrowDiagonalTlBrStop, arrow_diagonal_tl_br_stop_default;
var init_arrow_diagonal_tl_br_stop = __esm({
  "lib/icons/arrow-diagonal-tl-br-stop.ts"() {
    IconArrowDiagonalTlBrStop = `<svg id="arrow-diagonal-tl-br-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><polyline points="26.23 13.5 13.5 13.5 13.5 26.23" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45.77 58.5 58.5 58.5 58.5 45.77" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="45" x2="58.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="13.5" x2="27" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="45" y1="27" x2="27" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_diagonal_tl_br_stop_default = IconArrowDiagonalTlBrStop;
  }
});

// lib/icons/arrow-diagonal-tl-br.ts
var arrow_diagonal_tl_br_exports = {};
__export(arrow_diagonal_tl_br_exports, {
  IconArrowDiagonalTlBr: () => IconArrowDiagonalTlBr,
  default: () => arrow_diagonal_tl_br_default
});
var IconArrowDiagonalTlBr, arrow_diagonal_tl_br_default;
var init_arrow_diagonal_tl_br = __esm({
  "lib/icons/arrow-diagonal-tl-br.ts"() {
    IconArrowDiagonalTlBr = `<svg id="arrow-diagonal-tl-br" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="13.5" x2="58.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="26.23 13.5 13.5 13.5 13.5 26.23" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45.77 58.5 58.5 58.5 58.5 45.77" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_diagonal_tl_br_default = IconArrowDiagonalTlBr;
  }
});

// lib/icons/arrow-diagonal-tr-bl-split.ts
var arrow_diagonal_tr_bl_split_exports = {};
__export(arrow_diagonal_tr_bl_split_exports, {
  IconArrowDiagonalTrBlSplit: () => IconArrowDiagonalTrBlSplit,
  default: () => arrow_diagonal_tr_bl_split_default
});
var IconArrowDiagonalTrBlSplit, arrow_diagonal_tr_bl_split_default;
var init_arrow_diagonal_tr_bl_split = __esm({
  "lib/icons/arrow-diagonal-tr-bl-split.ts"() {
    IconArrowDiagonalTrBlSplit = `<svg id="arrow-diagonal-tr-bl-split" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="27" y1="45" x2="13.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="27" x2="58.5" y2="13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.5 26.23 58.5 13.5 45.77 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 45.77 13.5 58.5 26.23 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_diagonal_tr_bl_split_default = IconArrowDiagonalTrBlSplit;
  }
});

// lib/icons/arrow-diagonal-tr-bl-stop.ts
var arrow_diagonal_tr_bl_stop_exports = {};
__export(arrow_diagonal_tr_bl_stop_exports, {
  IconArrowDiagonalTrBlStop: () => IconArrowDiagonalTrBlStop,
  default: () => arrow_diagonal_tr_bl_stop_default
});
var IconArrowDiagonalTrBlStop, arrow_diagonal_tr_bl_stop_default;
var init_arrow_diagonal_tr_bl_stop = __esm({
  "lib/icons/arrow-diagonal-tr-bl-stop.ts"() {
    IconArrowDiagonalTrBlStop = `<svg id="arrow-diagonal-tr-bl-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><polyline points="58.5 26.23 58.5 13.5 45.77 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 45.77 13.5 58.5 26.23 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="45" x2="13.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="13.5" x2="45" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="27" y1="27" x2="45" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_diagonal_tr_bl_stop_default = IconArrowDiagonalTrBlStop;
  }
});

// lib/icons/arrow-diagonal-tr-bl.ts
var arrow_diagonal_tr_bl_exports = {};
__export(arrow_diagonal_tr_bl_exports, {
  IconArrowDiagonalTrBl: () => IconArrowDiagonalTrBl,
  default: () => arrow_diagonal_tr_bl_default
});
var IconArrowDiagonalTrBl, arrow_diagonal_tr_bl_default;
var init_arrow_diagonal_tr_bl = __esm({
  "lib/icons/arrow-diagonal-tr-bl.ts"() {
    IconArrowDiagonalTrBl = `<svg id="arrow-diagonal-tr-bl" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="58.5" x2="58.5" y2="13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 45.77 13.5 58.5 26.23 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.5 26.23 58.5 13.5 45.77 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_diagonal_tr_bl_default = IconArrowDiagonalTrBl;
  }
});

// lib/icons/arrow-down-copy.ts
var arrow_down_copy_exports = {};
__export(arrow_down_copy_exports, {
  IconArrowDownCopy: () => IconArrowDownCopy,
  default: () => arrow_down_copy_default
});
var IconArrowDownCopy, arrow_down_copy_default;
var init_arrow_down_copy = __esm({
  "lib/icons/arrow-down-copy.ts"() {
    IconArrowDownCopy = `<svg id="arrow-down_copy" data-name="arrow-down copy" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="13.5" x2="36" y2="49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="58.5" x2="49.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 36 36 49.5 22.5 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_down_copy_default = IconArrowDownCopy;
  }
});

// lib/icons/arrow-down-left.ts
var arrow_down_left_exports = {};
__export(arrow_down_left_exports, {
  IconArrowDownLeft: () => IconArrowDownLeft,
  default: () => arrow_down_left_default
});
var IconArrowDownLeft, arrow_down_left_default;
var init_arrow_down_left = __esm({
  "lib/icons/arrow-down-left.ts"() {
    IconArrowDownLeft = `<svg id="arrow-down-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="49.82" y1="22.18" x2="18" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="18 34.91 18 54 37.09 54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_down_left_default = IconArrowDownLeft;
  }
});

// lib/icons/arrow-down-right.ts
var arrow_down_right_exports = {};
__export(arrow_down_right_exports, {
  IconArrowDownRight: () => IconArrowDownRight,
  default: () => arrow_down_right_default
});
var IconArrowDownRight, arrow_down_right_default;
var init_arrow_down_right = __esm({
  "lib/icons/arrow-down-right.ts"() {
    IconArrowDownRight = `<svg id="arrow-down-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="22.18" y1="22.18" x2="54" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="34.91 54 54 54 54 34.91" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_down_right_default = IconArrowDownRight;
  }
});

// lib/icons/arrow-down.ts
var arrow_down_exports = {};
__export(arrow_down_exports, {
  IconArrowDown: () => IconArrowDown,
  default: () => arrow_down_default
});
var IconArrowDown, arrow_down_default;
var init_arrow_down = __esm({
  "lib/icons/arrow-down.ts"() {
    IconArrowDown = `<svg id="arrow-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="13.5" x2="36" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 45 36 58.5 49.5 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_down_default = IconArrowDown;
  }
});

// lib/icons/arrow-download.ts
var arrow_download_exports = {};
__export(arrow_download_exports, {
  IconArrowDownload: () => IconArrowDownload,
  default: () => arrow_download_default
});
var IconArrowDownload, arrow_download_default;
var init_arrow_download = __esm({
  "lib/icons/arrow-download.ts"() {
    IconArrowDownload = `<svg id="arrow-download" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="13.5" x2="36" y2="49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,49.5l-1.74,3.47c-1.69,3.39-5.16,5.53-8.94,5.53H19.68c-3.79,0-7.25-2.14-8.94-5.53l-1.74-3.47" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 36 36 49.5 49.5 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_download_default = IconArrowDownload;
  }
});

// lib/icons/arrow-headed-corner-down.ts
var arrow_headed_corner_down_exports = {};
__export(arrow_headed_corner_down_exports, {
  IconArrowHeadedCornerDown: () => IconArrowHeadedCornerDown,
  default: () => arrow_headed_corner_down_default
});
var IconArrowHeadedCornerDown, arrow_headed_corner_down_default;
var init_arrow_headed_corner_down = __esm({
  "lib/icons/arrow-headed-corner-down.ts"() {
    IconArrowHeadedCornerDown = `<svg id="arrow-headed-corner-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="31.5 49.5 22.5 58.5 13.5 49.5 31.5 49.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="31.5 49.5 22.5 58.5 13.5 49.5 31.5 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,49.5v-16c0-11.05,8.95-20,20-20h16" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_corner_down_default = IconArrowHeadedCornerDown;
  }
});

// lib/icons/arrow-headed-corner-left.ts
var arrow_headed_corner_left_exports = {};
__export(arrow_headed_corner_left_exports, {
  IconArrowHeadedCornerLeft: () => IconArrowHeadedCornerLeft,
  default: () => arrow_headed_corner_left_default
});
var IconArrowHeadedCornerLeft, arrow_headed_corner_left_default;
var init_arrow_headed_corner_left = __esm({
  "lib/icons/arrow-headed-corner-left.ts"() {
    IconArrowHeadedCornerLeft = `<svg id="arrow-headed-corner-left-" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="22.5 13.5 13.5 22.5 22.5 31.5 22.5 13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="22.5 13.5 13.5 22.5 22.5 31.5 22.5 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,22.5h16c11.05,0,20,8.95,20,20v16" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_corner_left_default = IconArrowHeadedCornerLeft;
  }
});

// lib/icons/arrow-headed-corner-right.ts
var arrow_headed_corner_right_exports = {};
__export(arrow_headed_corner_right_exports, {
  IconArrowHeadedCornerRight: () => IconArrowHeadedCornerRight,
  default: () => arrow_headed_corner_right_default
});
var IconArrowHeadedCornerRight, arrow_headed_corner_right_default;
var init_arrow_headed_corner_right = __esm({
  "lib/icons/arrow-headed-corner-right.ts"() {
    IconArrowHeadedCornerRight = `<svg id="arrow-headed-corner-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="49.5 58.5 58.5 49.5 49.5 40.5 49.5 58.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="49.5 58.5 58.5 49.5 49.5 40.5 49.5 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,49.5h-16c-11.05,0-20-8.95-20-20V13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_corner_right_default = IconArrowHeadedCornerRight;
  }
});

// lib/icons/arrow-headed-corner-up.ts
var arrow_headed_corner_up_exports = {};
__export(arrow_headed_corner_up_exports, {
  IconArrowHeadedCornerUp: () => IconArrowHeadedCornerUp,
  default: () => arrow_headed_corner_up_default
});
var IconArrowHeadedCornerUp, arrow_headed_corner_up_default;
var init_arrow_headed_corner_up = __esm({
  "lib/icons/arrow-headed-corner-up.ts"() {
    IconArrowHeadedCornerUp = `<svg id="arrow-headed-corner-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="58.5 22.5 49.5 13.5 40.5 22.5 58.5 22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="58.5 22.5 49.5 13.5 40.5 22.5 58.5 22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,22.5v16c0,11.05-8.95,20-20,20H13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_corner_up_default = IconArrowHeadedCornerUp;
  }
});

// lib/icons/arrow-headed-diagonal-bl-tr-stop.ts
var arrow_headed_diagonal_bl_tr_stop_exports = {};
__export(arrow_headed_diagonal_bl_tr_stop_exports, {
  IconArrowHeadedDiagonalBlTrStop: () => IconArrowHeadedDiagonalBlTrStop,
  default: () => arrow_headed_diagonal_bl_tr_stop_default
});
var IconArrowHeadedDiagonalBlTrStop, arrow_headed_diagonal_bl_tr_stop_default;
var init_arrow_headed_diagonal_bl_tr_stop = __esm({
  "lib/icons/arrow-headed-diagonal-bl-tr-stop.ts"() {
    IconArrowHeadedDiagonalBlTrStop = `<svg id="arrow-headed-diagonal-bl-tr-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><line x1="59.91" y1="12.09" x2="52.78" y2="19.22" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="19.22" y1="52.78" x2="12.09" y2="59.91" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="27" y1="27" x2="45" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="25.59 46.41 12.86 46.41 25.59 59.14 25.59 46.41" style="fill: red;"/><polygon points="46.41 12.86 46.41 25.59 59.14 25.59 46.41 12.86" style="fill: red;"/><polygon points="25.59 46.41 12.86 46.41 25.59 59.14 25.59 46.41" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="46.41 12.86 46.41 25.59 59.14 25.59 46.41 12.86" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_diagonal_bl_tr_stop_default = IconArrowHeadedDiagonalBlTrStop;
  }
});

// lib/icons/arrow-headed-diagonal-br-tl-stop.ts
var arrow_headed_diagonal_br_tl_stop_exports = {};
__export(arrow_headed_diagonal_br_tl_stop_exports, {
  IconArrowHeadedDiagonalBrTlStop: () => IconArrowHeadedDiagonalBrTlStop,
  default: () => arrow_headed_diagonal_br_tl_stop_default
});
var IconArrowHeadedDiagonalBrTlStop, arrow_headed_diagonal_br_tl_stop_default;
var init_arrow_headed_diagonal_br_tl_stop = __esm({
  "lib/icons/arrow-headed-diagonal-br-tl-stop.ts"() {
    IconArrowHeadedDiagonalBrTlStop = `<svg id="arrow-headed-diagonal-br-tl-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><line x1="12.09" y1="12.09" x2="19.22" y2="19.22" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="52.78" y1="52.78" x2="59.91" y2="59.91" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="27" y1="45" x2="45" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="46.41 46.41 46.41 59.14 59.14 46.41 46.41 46.41" style="fill: red;"/><polygon points="12.86 25.59 25.59 25.59 25.59 12.86 12.86 25.59" style="fill: red;"/><polygon points="46.41 46.41 46.41 59.14 59.14 46.41 46.41 46.41" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="12.86 25.59 25.59 25.59 25.59 12.86 12.86 25.59" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_diagonal_br_tl_stop_default = IconArrowHeadedDiagonalBrTlStop;
  }
});

// lib/icons/arrow-headed-diagonal-in-lt-br.ts
var arrow_headed_diagonal_in_lt_br_exports = {};
__export(arrow_headed_diagonal_in_lt_br_exports, {
  IconArrowHeadedDiagonalInLtBr: () => IconArrowHeadedDiagonalInLtBr,
  default: () => arrow_headed_diagonal_in_lt_br_default
});
var IconArrowHeadedDiagonalInLtBr, arrow_headed_diagonal_in_lt_br_default;
var init_arrow_headed_diagonal_in_lt_br = __esm({
  "lib/icons/arrow-headed-diagonal-in-lt-br.ts"() {
    IconArrowHeadedDiagonalInLtBr = `<svg id="arrow-headed-diagonal-in-lt-br" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="13.5" x2="23.72" y2="23.72" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="58.5" x2="48.28" y2="48.28" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="17.36 30.09 30.09 30.09 30.09 17.36 17.36 30.09" style="fill: red;"/><polygon points="41.91 41.91 41.91 54.64 54.64 41.91 41.91 41.91" style="fill: red;"/><polygon points="17.36 30.09 30.09 30.09 30.09 17.36 17.36 30.09" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="41.91 41.91 41.91 54.64 54.64 41.91 41.91 41.91" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_diagonal_in_lt_br_default = IconArrowHeadedDiagonalInLtBr;
  }
});

// lib/icons/arrow-headed-diagonal-in-tr-bl.ts
var arrow_headed_diagonal_in_tr_bl_exports = {};
__export(arrow_headed_diagonal_in_tr_bl_exports, {
  IconArrowHeadedDiagonalInTrBl: () => IconArrowHeadedDiagonalInTrBl,
  default: () => arrow_headed_diagonal_in_tr_bl_default
});
var IconArrowHeadedDiagonalInTrBl, arrow_headed_diagonal_in_tr_bl_default;
var init_arrow_headed_diagonal_in_tr_bl = __esm({
  "lib/icons/arrow-headed-diagonal-in-tr-bl.ts"() {
    IconArrowHeadedDiagonalInTrBl = `<svg id="arrow-headed-diagonal-in-tr-bl" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="58.5" x2="23.72" y2="48.28" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="13.5" x2="48.28" y2="23.72" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="17.36 41.91 30.09 54.64 30.09 41.91 17.36 41.91" style="fill: red;"/><polygon points="41.91 30.09 54.64 30.09 41.91 17.36 41.91 30.09" style="fill: red;"/><polygon points="17.36 41.91 30.09 54.64 30.09 41.91 17.36 41.91" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="41.91 30.09 54.64 30.09 41.91 17.36 41.91 30.09" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_diagonal_in_tr_bl_default = IconArrowHeadedDiagonalInTrBl;
  }
});

// lib/icons/arrow-headed-diagonal-tl-br-split.ts
var arrow_headed_diagonal_tl_br_split_exports = {};
__export(arrow_headed_diagonal_tl_br_split_exports, {
  IconArrowHeadedDiagonalTlBrSplit: () => IconArrowHeadedDiagonalTlBrSplit,
  default: () => arrow_headed_diagonal_tl_br_split_default
});
var IconArrowHeadedDiagonalTlBrSplit, arrow_headed_diagonal_tl_br_split_default;
var init_arrow_headed_diagonal_tl_br_split = __esm({
  "lib/icons/arrow-headed-diagonal-tl-br-split.ts"() {
    IconArrowHeadedDiagonalTlBrSplit = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g id="arrow-headed-diagonal-tl-br-split"><g><line x1="45" y1="45" x2="52.14" y2="52.14" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="19.86" y1="19.86" x2="27" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></g><g id="arrow-headed-left-right"><polygon points="13.5 13.5 13.5 26.23 26.23 13.5 13.5 13.5" style="fill: red;"/><polygon points="45.77 58.5 58.5 58.5 58.5 45.77 45.77 58.5" style="fill: red;"/><polygon points="13.5 13.5 13.5 26.23 26.23 13.5 13.5 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45.77 58.5 58.5 58.5 58.5 45.77 45.77 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    arrow_headed_diagonal_tl_br_split_default = IconArrowHeadedDiagonalTlBrSplit;
  }
});

// lib/icons/arrow-headed-diagonal-tl-br-stop.ts
var arrow_headed_diagonal_tl_br_stop_exports = {};
__export(arrow_headed_diagonal_tl_br_stop_exports, {
  IconArrowHeadedDiagonalTlBrStop: () => IconArrowHeadedDiagonalTlBrStop,
  default: () => arrow_headed_diagonal_tl_br_stop_default
});
var IconArrowHeadedDiagonalTlBrStop, arrow_headed_diagonal_tl_br_stop_default;
var init_arrow_headed_diagonal_tl_br_stop = __esm({
  "lib/icons/arrow-headed-diagonal-tl-br-stop.ts"() {
    IconArrowHeadedDiagonalTlBrStop = `<svg id="arrow-headed-diagonal-tl-br-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><line x1="45" y1="45" x2="52.14" y2="52.14" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="19.86" y1="19.86" x2="27" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="45" y1="27" x2="27" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="26.23 13.5 13.5 13.5 13.5 26.23 26.23 13.5" style="fill: red;"/><polygon points="45.77 58.5 58.5 58.5 58.5 45.77 45.77 58.5" style="fill: red;"/><polygon points="26.23 13.5 13.5 13.5 13.5 26.23 26.23 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45.77 58.5 58.5 58.5 58.5 45.77 45.77 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_diagonal_tl_br_stop_default = IconArrowHeadedDiagonalTlBrStop;
  }
});

// lib/icons/arrow-headed-diagonal-tl-br.ts
var arrow_headed_diagonal_tl_br_exports = {};
__export(arrow_headed_diagonal_tl_br_exports, {
  IconArrowHeadedDiagonalTlBr: () => IconArrowHeadedDiagonalTlBr,
  default: () => arrow_headed_diagonal_tl_br_default
});
var IconArrowHeadedDiagonalTlBr, arrow_headed_diagonal_tl_br_default;
var init_arrow_headed_diagonal_tl_br = __esm({
  "lib/icons/arrow-headed-diagonal-tl-br.ts"() {
    IconArrowHeadedDiagonalTlBr = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g id="arrow-headed-diagonal-tl-br"><polyline points="26.23 13.5 13.5 13.5 13.5 26.23" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45.77 58.5 58.5 58.5 58.5 45.77" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="19.86" y1="19.86" x2="52.14" y2="52.14" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g id="arrow-headed-diagonal-tr-bl"><polygon points="13.5 13.5 13.5 26.23 26.23 13.5 13.5 13.5" style="fill: red;"/><polygon points="45.77 58.5 58.5 58.5 58.5 45.77 45.77 58.5" style="fill: red;"/><polygon points="13.5 13.5 13.5 26.23 26.23 13.5 13.5 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45.77 58.5 58.5 58.5 58.5 45.77 45.77 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    arrow_headed_diagonal_tl_br_default = IconArrowHeadedDiagonalTlBr;
  }
});

// lib/icons/arrow-headed-diagonal-tr-bl-split.ts
var arrow_headed_diagonal_tr_bl_split_exports = {};
__export(arrow_headed_diagonal_tr_bl_split_exports, {
  IconArrowHeadedDiagonalTrBlSplit: () => IconArrowHeadedDiagonalTrBlSplit,
  default: () => arrow_headed_diagonal_tr_bl_split_default
});
var IconArrowHeadedDiagonalTrBlSplit, arrow_headed_diagonal_tr_bl_split_default;
var init_arrow_headed_diagonal_tr_bl_split = __esm({
  "lib/icons/arrow-headed-diagonal-tr-bl-split.ts"() {
    IconArrowHeadedDiagonalTrBlSplit = `<svg id="arrow-headed-diagonal-tr-bl-split" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><polygon points="58.5 13.5 45.77 13.5 58.5 26.23 58.5 13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><polygon points="13.5 58.5 26.23 58.5 13.5 45.77 13.5 58.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><g><polygon points="58.5 13.5 45.77 13.5 58.5 26.23 58.5 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="13.5 58.5 26.23 58.5 13.5 45.77 13.5 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="27" y1="45" x2="20.25" y2="51.75" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="52.14" y1="19.86" x2="45" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    arrow_headed_diagonal_tr_bl_split_default = IconArrowHeadedDiagonalTrBlSplit;
  }
});

// lib/icons/arrow-headed-diagonal-tr-bl-stop.ts
var arrow_headed_diagonal_tr_bl_stop_exports = {};
__export(arrow_headed_diagonal_tr_bl_stop_exports, {
  IconArrowHeadedDiagonalTrBlStop: () => IconArrowHeadedDiagonalTrBlStop,
  default: () => arrow_headed_diagonal_tr_bl_stop_default
});
var IconArrowHeadedDiagonalTrBlStop, arrow_headed_diagonal_tr_bl_stop_default;
var init_arrow_headed_diagonal_tr_bl_stop = __esm({
  "lib/icons/arrow-headed-diagonal-tr-bl-stop.ts"() {
    IconArrowHeadedDiagonalTrBlStop = `<svg id="arrow-headed-diagonal-tr-bl-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><line x1="27" y1="45" x2="19.86" y2="52.14" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="52.14" y1="19.86" x2="45" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="27" y1="27" x2="45" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45.77 13.5 58.5 26.23 58.5 13.5 45.77 13.5" style="fill: red;"/><polygon points="26.23 58.5 13.5 45.77 13.5 58.5 26.23 58.5" style="fill: red;"/><polygon points="45.77 13.5 58.5 26.23 58.5 13.5 45.77 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="26.23 58.5 13.5 45.77 13.5 58.5 26.23 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_diagonal_tr_bl_stop_default = IconArrowHeadedDiagonalTrBlStop;
  }
});

// lib/icons/arrow-headed-diagonal-tr-bl.ts
var arrow_headed_diagonal_tr_bl_exports = {};
__export(arrow_headed_diagonal_tr_bl_exports, {
  IconArrowHeadedDiagonalTrBl: () => IconArrowHeadedDiagonalTrBl,
  default: () => arrow_headed_diagonal_tr_bl_default
});
var IconArrowHeadedDiagonalTrBl, arrow_headed_diagonal_tr_bl_default;
var init_arrow_headed_diagonal_tr_bl = __esm({
  "lib/icons/arrow-headed-diagonal-tr-bl.ts"() {
    IconArrowHeadedDiagonalTrBl = `<svg id="arrow-headed-diagonal-tr-bl" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="13.5 45.77 13.5 58.5 26.23 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.5 26.23 58.5 13.5 45.77 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="19.48" y1="51.75" x2="52.14" y2="19.86" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="13.5 58.5 26.23 58.5 13.5 45.77 13.5 58.5" style="fill: red;"/><polygon points="45.77 13.5 58.5 26.23 58.5 13.5 45.77 13.5" style="fill: red;"/><polygon points="13.5 58.5 26.23 58.5 13.5 45.77 13.5 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45.77 13.5 58.5 26.23 58.5 13.5 45.77 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_diagonal_tr_bl_default = IconArrowHeadedDiagonalTrBl;
  }
});

// lib/icons/arrow-headed-down-left.ts
var arrow_headed_down_left_exports = {};
__export(arrow_headed_down_left_exports, {
  IconArrowHeadedDownLeft: () => IconArrowHeadedDownLeft,
  default: () => arrow_headed_down_left_default
});
var IconArrowHeadedDownLeft, arrow_headed_down_left_default;
var init_arrow_headed_down_left = __esm({
  "lib/icons/arrow-headed-down-left.ts"() {
    IconArrowHeadedDownLeft = `<svg id="arrow-headed-down-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="18 34.91 18 54 37.09 54 18 34.91" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="49.82" y1="22.18" x2="27.55" y2="44.45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="18 34.91 18 54 37.09 54 18 34.91" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_down_left_default = IconArrowHeadedDownLeft;
  }
});

// lib/icons/arrow-headed-down-right.ts
var arrow_headed_down_right_exports = {};
__export(arrow_headed_down_right_exports, {
  IconArrowHeadedDownRight: () => IconArrowHeadedDownRight,
  default: () => arrow_headed_down_right_default
});
var IconArrowHeadedDownRight, arrow_headed_down_right_default;
var init_arrow_headed_down_right = __esm({
  "lib/icons/arrow-headed-down-right.ts"() {
    IconArrowHeadedDownRight = `<svg id="arrow-headed-down-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="22.18" y1="22.18" x2="44.45" y2="44.45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="54 34.91 54 54 34.91 54 54 34.91" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="54 34.91 54 54 34.91 54 54 34.91" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_down_right_default = IconArrowHeadedDownRight;
  }
});

// lib/icons/arrow-headed-down-stop.ts
var arrow_headed_down_stop_exports = {};
__export(arrow_headed_down_stop_exports, {
  IconArrowHeadedDownStop: () => IconArrowHeadedDownStop,
  default: () => arrow_headed_down_stop_default
});
var IconArrowHeadedDownStop, arrow_headed_down_stop_default;
var init_arrow_headed_down_stop = __esm({
  "lib/icons/arrow-headed-down-stop.ts"() {
    IconArrowHeadedDownStop = `<svg id="arrow-headed-down-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="49.5 36 36 49.5 22.5 36 49.5 36" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="49.5 36 36 49.5 22.5 36 49.5 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="13.5" x2="36" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="58.5" x2="22.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_down_stop_default = IconArrowHeadedDownStop;
  }
});

// lib/icons/arrow-headed-down.ts
var arrow_headed_down_exports = {};
__export(arrow_headed_down_exports, {
  IconArrowHeadedDown: () => IconArrowHeadedDown,
  default: () => arrow_headed_down_default
});
var IconArrowHeadedDown, arrow_headed_down_default;
var init_arrow_headed_down = __esm({
  "lib/icons/arrow-headed-down.ts"() {
    IconArrowHeadedDown = `<svg id="arrow-headed-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="13.5" x2="36" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="49.5 45 36 58.5 22.5 45 49.5 45" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="49.5 45 36 58.5 22.5 45 49.5 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_down_default = IconArrowHeadedDown;
  }
});

// lib/icons/arrow-headed-download.ts
var arrow_headed_download_exports = {};
__export(arrow_headed_download_exports, {
  IconArrowHeadedDownload: () => IconArrowHeadedDownload,
  default: () => arrow_headed_download_default
});
var IconArrowHeadedDownload, arrow_headed_download_default;
var init_arrow_headed_download = __esm({
  "lib/icons/arrow-headed-download.ts"() {
    IconArrowHeadedDownload = `<svg id="arrow-headed-download" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="49.5 36 36 49.5 22.5 36 49.5 36" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="49.5 36 36 49.5 22.5 36 49.5 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="13.5" x2="36" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,49.5l-1.74,3.47c-1.69,3.39-5.16,5.53-8.94,5.53H19.68c-3.79,0-7.25-2.14-8.94-5.53l-1.74-3.47" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_download_default = IconArrowHeadedDownload;
  }
});

// lib/icons/arrow-headed-in-center.ts
var arrow_headed_in_center_exports = {};
__export(arrow_headed_in_center_exports, {
  IconArrowHeadedInCenter: () => IconArrowHeadedInCenter,
  default: () => arrow_headed_in_center_default
});
var IconArrowHeadedInCenter, arrow_headed_in_center_default;
var init_arrow_headed_in_center = __esm({
  "lib/icons/arrow-headed-in-center.ts"() {
    IconArrowHeadedInCenter = `<svg id="arrow-headed-in-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="58.5" y1="13.5" x2="51.75" y2="20.25" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="20.64" y1="51.36" x2="13.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="13.5" x2="20.64" y2="20.64" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="51.36" y1="51.36" x2="58.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="4.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="14.27 45 27 57.73 27 45 14.27 45" style="fill: red;"/><polygon points="57.73 27 45 14.27 45 27 57.73 27" style="fill: red;"/><polygon points="45 45 45 57.73 57.73 45 45 45" style="fill: red;"/><polygon points="14.27 27 27 27 27 14.27 14.27 27" style="fill: red;"/><polygon points="14.27 45 27 57.73 27 45 14.27 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="57.73 27 45 14.27 45 27 57.73 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45 45 45 57.73 57.73 45 45 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="14.27 27 27 27 27 14.27 14.27 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_in_center_default = IconArrowHeadedInCenter;
  }
});

// lib/icons/arrow-headed-in-diagonal.ts
var arrow_headed_in_diagonal_exports = {};
__export(arrow_headed_in_diagonal_exports, {
  IconArrowHeadedInDiagonal: () => IconArrowHeadedInDiagonal,
  default: () => arrow_headed_in_diagonal_default
});
var IconArrowHeadedInDiagonal, arrow_headed_in_diagonal_default;
var init_arrow_headed_in_diagonal = __esm({
  "lib/icons/arrow-headed-in-diagonal.ts"() {
    IconArrowHeadedInDiagonal = `<svg id="arrow-headed-in-diagonal" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="27 57.73 27 45 14.27 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 14.27 45 27 57.73 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="13.5" x2="51.36" y2="20.64" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="20.64" y1="51.36" x2="13.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="57.73 45 45 45 45 57.73" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="14.27 27 27 27 27 14.27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="13.5" x2="20.25" y2="20.25" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="51.36" y1="51.36" x2="58.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="14.27 45 27 57.73 27 45 14.27 45" style="fill: red;"/><polygon points="57.73 27 45 14.27 45 27 57.73 27" style="fill: red;"/><polygon points="45 45 45 57.73 57.73 45 45 45" style="fill: red;"/><polygon points="14.27 27 27 27 27 14.27 14.27 27" style="fill: red;"/><polygon points="14.27 45 27 57.73 27 45 14.27 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="57.73 27 45 14.27 45 27 57.73 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45 45 45 57.73 57.73 45 45 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="14.27 27 27 27 27 14.27 14.27 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_in_diagonal_default = IconArrowHeadedInDiagonal;
  }
});

// lib/icons/arrow-headed-in.ts
var arrow_headed_in_exports = {};
__export(arrow_headed_in_exports, {
  IconArrowHeadedIn: () => IconArrowHeadedIn,
  default: () => arrow_headed_in_default
});
var IconArrowHeadedIn, arrow_headed_in_default;
var init_arrow_headed_in = __esm({
  "lib/icons/arrow-headed-in.ts"() {
    IconArrowHeadedIn = `<svg id="arrow-headed-in" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="18 45 27 36 18 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="54 27 45 36 54 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="64.09" y1="36" x2="54.55" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="36" x2="7.91" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 54 36 45 27 54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 18 36 27 45 18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="7.91" x2="36" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="54" x2="36" y2="64.09" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="27 36 18 27 18 45 27 36" style="fill: red;"/><polygon points="54 45 54 27 45 36 54 45" style="fill: red;"/><polygon points="36 45 27 54 45 54 36 45" style="fill: red;"/><polygon points="36 27 45 18 27 18 36 27" style="fill: red;"/><polygon points="27 36 18 27 18 45 27 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="54 45 54 27 45 36 54 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="36 45 27 54 45 54 36 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="36 27 45 18 27 18 36 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_in_default = IconArrowHeadedIn;
  }
});

// lib/icons/arrow-headed-left-right-split.ts
var arrow_headed_left_right_split_exports = {};
__export(arrow_headed_left_right_split_exports, {
  IconArrowHeadedLeftRightSplit: () => IconArrowHeadedLeftRightSplit,
  default: () => arrow_headed_left_right_split_default
});
var IconArrowHeadedLeftRightSplit, arrow_headed_left_right_split_default;
var init_arrow_headed_left_right_split = __esm({
  "lib/icons/arrow-headed-left-right-split.ts"() {
    IconArrowHeadedLeftRightSplit = `<svg id="arrow-headed-left-right-split" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="45" y1="36" x2="54" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18.12" y1="36" x2="27" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="17.88 26.88 9 36 18.12 44.88 17.88 26.88" style="fill: red;"/><polygon points="53.88 27.12 54.12 45.12 63 36 53.88 27.12" style="fill: red;"/><polygon points="17.88 26.88 9 36 18.12 44.88 17.88 26.88" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="53.88 27.12 54.12 45.12 63 36 53.88 27.12" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_left_right_split_default = IconArrowHeadedLeftRightSplit;
  }
});

// lib/icons/arrow-headed-left-right-stop.ts
var arrow_headed_left_right_stop_exports = {};
__export(arrow_headed_left_right_stop_exports, {
  IconArrowHeadedLeftRightStop: () => IconArrowHeadedLeftRightStop,
  default: () => arrow_headed_left_right_stop_default
});
var IconArrowHeadedLeftRightStop, arrow_headed_left_right_stop_default;
var init_arrow_headed_left_right_stop = __esm({
  "lib/icons/arrow-headed-left-right-stop.ts"() {
    IconArrowHeadedLeftRightStop = `<svg id="arrow-headed-left-right-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="45" y1="36" x2="53.88" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="36" x2="27" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="9 36 18.12 44.88 17.88 26.88 9 36" style="fill: red;"/><polygon points="53.88 27.12 54.12 45.12 63 36 53.88 27.12" style="fill: red;"/><polygon points="9 36 18.12 44.88 17.88 26.88 9 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="53.88 27.12 54.12 45.12 63 36 53.88 27.12" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_left_right_stop_default = IconArrowHeadedLeftRightStop;
  }
});

// lib/icons/arrow-headed-left-right.ts
var arrow_headed_left_right_exports = {};
__export(arrow_headed_left_right_exports, {
  IconArrowHeadedLeftRight: () => IconArrowHeadedLeftRight,
  default: () => arrow_headed_left_right_default
});
var IconArrowHeadedLeftRight, arrow_headed_left_right_default;
var init_arrow_headed_left_right = __esm({
  "lib/icons/arrow-headed-left-right.ts"() {
    IconArrowHeadedLeftRight = `<svg id="arrow-headed-left-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="18.12" y1="36" x2="53.88" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="17.88 26.88 9 36 18.12 44.88 17.88 26.88" style="fill: red;"/><polygon points="53.88 27.12 54.12 45.12 63 36 53.88 27.12" style="fill: red;"/><polygon points="17.88 26.88 9 36 18.12 44.88 17.88 26.88" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="53.88 27.12 54.12 45.12 63 36 53.88 27.12" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_left_right_default = IconArrowHeadedLeftRight;
  }
});

// lib/icons/arrow-headed-left-stop.ts
var arrow_headed_left_stop_exports = {};
__export(arrow_headed_left_stop_exports, {
  IconArrowHeadedLeftStop: () => IconArrowHeadedLeftStop,
  default: () => arrow_headed_left_stop_default
});
var IconArrowHeadedLeftStop, arrow_headed_left_stop_default;
var init_arrow_headed_left_stop = __esm({
  "lib/icons/arrow-headed-left-stop.ts"() {
    IconArrowHeadedLeftStop = `<svg id="arrow-headed-left-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="36 49.5 22.5 36 36 22.5 36 49.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="36 49.5 22.5 36 36 22.5 36 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="36" x2="36" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="22.5" x2="13.5" y2="49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_left_stop_default = IconArrowHeadedLeftStop;
  }
});

// lib/icons/arrow-headed-left.ts
var arrow_headed_left_exports = {};
__export(arrow_headed_left_exports, {
  IconArrowHeadedLeft: () => IconArrowHeadedLeft,
  default: () => arrow_headed_left_default
});
var IconArrowHeadedLeft, arrow_headed_left_default;
var init_arrow_headed_left = __esm({
  "lib/icons/arrow-headed-left.ts"() {
    IconArrowHeadedLeft = `<svg id="arrow-headed-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="27 49.5 13.5 36 27 22.5 27 49.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="27 49.5 13.5 36 27 22.5 27 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="36" x2="27" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_left_default = IconArrowHeadedLeft;
  }
});

// lib/icons/arrow-headed-out-center.ts
var arrow_headed_out_center_exports = {};
__export(arrow_headed_out_center_exports, {
  IconArrowHeadedOutCenter: () => IconArrowHeadedOutCenter,
  default: () => arrow_headed_out_center_default
});
var IconArrowHeadedOutCenter, arrow_headed_out_center_default;
var init_arrow_headed_out_center = __esm({
  "lib/icons/arrow-headed-out-center.ts"() {
    IconArrowHeadedOutCenter = `<svg id="arrow-headed-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="45" y1="27" x2="52.14" y2="19.86" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="19.86" y1="52.14" x2="27" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="27" x2="19.86" y2="19.86" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="52.14" y1="52.14" x2="45" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="4.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="26.23 58.5 13.5 45.77 13.5 58.5 26.23 58.5" style="fill: red;"/><polygon points="58.5 13.5 45.77 13.5 58.5 26.23 58.5 13.5" style="fill: red;"/><polygon points="45.77 58.5 58.5 58.5 58.5 45.77 45.77 58.5" style="fill: red;"/><polygon points="26.23 13.5 13.5 13.5 13.5 26.23 26.23 13.5" style="fill: red;"/><polygon points="26.23 58.5 13.5 45.77 13.5 58.5 26.23 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="58.5 13.5 45.77 13.5 58.5 26.23 58.5 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45.77 58.5 58.5 58.5 58.5 45.77 45.77 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="26.23 13.5 13.5 13.5 13.5 26.23 26.23 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_out_center_default = IconArrowHeadedOutCenter;
  }
});

// lib/icons/arrow-headed-reload-down-up.ts
var arrow_headed_reload_down_up_exports = {};
__export(arrow_headed_reload_down_up_exports, {
  IconArrowHeadedReloadDownUp: () => IconArrowHeadedReloadDownUp,
  default: () => arrow_headed_reload_down_up_default
});
var IconArrowHeadedReloadDownUp, arrow_headed_reload_down_up_default;
var init_arrow_headed_reload_down_up = __esm({
  "lib/icons/arrow-headed-reload-down-up.ts"() {
    IconArrowHeadedReloadDownUp = `<svg id="arrow-headed-reload-down-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="27 49.5 18 58.5 9 49.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polyline points="45 22.5 63 22.5 54 13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="27 49.5 18 58.5 9 49.5 27 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,49.5v-16c0-11.05,8.95-20,20-20" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="63 22.5 54 13.5 45 22.5 63 22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,22.5v16c0,11.05-8.95,20-20,20" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_reload_down_up_default = IconArrowHeadedReloadDownUp;
  }
});

// lib/icons/arrow-headed-reload-left-right.ts
var arrow_headed_reload_left_right_exports = {};
__export(arrow_headed_reload_left_right_exports, {
  IconArrowHeadedReloadLeftRight: () => IconArrowHeadedReloadLeftRight,
  default: () => arrow_headed_reload_left_right_default
});
var IconArrowHeadedReloadLeftRight, arrow_headed_reload_left_right_default;
var init_arrow_headed_reload_left_right = __esm({
  "lib/icons/arrow-headed-reload-left-right.ts"() {
    IconArrowHeadedReloadLeftRight = `<svg id="arrow-headed-reload-left-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="22.5 9 22.5 27 13.5 18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polyline points="49.5 63 58.5 54 49.5 45" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="22.5 27 13.5 18 22.5 9 22.5 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,18h16c11.05,0,20,8.95,20,20" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="49.5 63 58.5 54 49.5 45 49.5 63" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,54h-16c-11.05,0-20-8.95-20-20" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_reload_left_right_default = IconArrowHeadedReloadLeftRight;
  }
});

// lib/icons/arrow-headed-reload-right-left.ts
var arrow_headed_reload_right_left_exports = {};
__export(arrow_headed_reload_right_left_exports, {
  IconArrowHeadedReloadRightLeft: () => IconArrowHeadedReloadRightLeft,
  default: () => arrow_headed_reload_right_left_default
});
var IconArrowHeadedReloadRightLeft, arrow_headed_reload_right_left_default;
var init_arrow_headed_reload_right_left = __esm({
  "lib/icons/arrow-headed-reload-right-left.ts"() {
    IconArrowHeadedReloadRightLeft = `<svg id="arrow-headed-reload-right-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="49.5 27 58.5 18 49.5 9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polyline points="22.5 63 13.5 54 22.5 45" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="49.5 27 58.5 18 49.5 9 49.5 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,18h-16c-11.05,0-20,8.95-20,20" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="22.5 63 13.5 54 22.5 45 22.5 63" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,54h16c11.05,0,20-8.95,20-20" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_reload_right_left_default = IconArrowHeadedReloadRightLeft;
  }
});

// lib/icons/arrow-headed-reload-up-down.ts
var arrow_headed_reload_up_down_exports = {};
__export(arrow_headed_reload_up_down_exports, {
  IconArrowHeadedReloadUpDown: () => IconArrowHeadedReloadUpDown,
  default: () => arrow_headed_reload_up_down_default
});
var IconArrowHeadedReloadUpDown, arrow_headed_reload_up_down_default;
var init_arrow_headed_reload_up_down = __esm({
  "lib/icons/arrow-headed-reload-up-down.ts"() {
    IconArrowHeadedReloadUpDown = `<svg id="arrow-headed-reload-up-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="63 49.5 54 58.5 45 49.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polyline points="9 22.5 18 13.5 27 22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="63 49.5 54 58.5 45 49.5 63 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,49.5v-16c0-11.05-8.95-20-20-20" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="9 22.5 18 13.5 27 22.5 9 22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,22.5v16c0,11.05,8.95,20,20,20" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_reload_up_down_default = IconArrowHeadedReloadUpDown;
  }
});

// lib/icons/arrow-headed-return-down.ts
var arrow_headed_return_down_exports = {};
__export(arrow_headed_return_down_exports, {
  IconArrowHeadedReturnDown: () => IconArrowHeadedReturnDown,
  default: () => arrow_headed_return_down_default
});
var IconArrowHeadedReturnDown, arrow_headed_return_down_default;
var init_arrow_headed_return_down = __esm({
  "lib/icons/arrow-headed-return-down.ts"() {
    IconArrowHeadedReturnDown = `<svg id="arrow-headed-return-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="54 36 45 45 36 36 54 36" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M45,36v-9c0-7.46-6.04-13.5-13.5-13.5h0c-7.46,0-13.5,6.04-13.5,13.5v27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="54 36 45 45 36 36 54 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_return_down_default = IconArrowHeadedReturnDown;
  }
});

// lib/icons/arrow-headed-return-left.ts
var arrow_headed_return_left_exports = {};
__export(arrow_headed_return_left_exports, {
  IconArrowHeadedReturnLeft: () => IconArrowHeadedReturnLeft,
  default: () => arrow_headed_return_left_default
});
var IconArrowHeadedReturnLeft, arrow_headed_return_left_default;
var init_arrow_headed_return_left = __esm({
  "lib/icons/arrow-headed-return-left.ts"() {
    IconArrowHeadedReturnLeft = `<svg id="arrow-headed-return-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="36 54 27 45 36 36 36 54" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M36,45h9c7.46,0,13.5-6.04,13.5-13.5h0c0-7.46-6.04-13.5-13.5-13.5h-27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="36 54 27 45 36 36 36 54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_return_left_default = IconArrowHeadedReturnLeft;
  }
});

// lib/icons/arrow-headed-return-right.ts
var arrow_headed_return_right_exports = {};
__export(arrow_headed_return_right_exports, {
  IconArrowHeadedReturnRight: () => IconArrowHeadedReturnRight,
  default: () => arrow_headed_return_right_default
});
var IconArrowHeadedReturnRight, arrow_headed_return_right_default;
var init_arrow_headed_return_right = __esm({
  "lib/icons/arrow-headed-return-right.ts"() {
    IconArrowHeadedReturnRight = `<svg id="arrow-headed-return-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="36 36 45 27 36 18 36 36" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M36,27h-9c-7.46,0-13.5,6.04-13.5,13.5h0c0,7.46,6.04,13.5,13.5,13.5h27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="36 36 45 27 36 18 36 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_return_right_default = IconArrowHeadedReturnRight;
  }
});

// lib/icons/arrow-headed-return-up.ts
var arrow_headed_return_up_exports = {};
__export(arrow_headed_return_up_exports, {
  IconArrowHeadedReturnUp: () => IconArrowHeadedReturnUp,
  default: () => arrow_headed_return_up_default
});
var IconArrowHeadedReturnUp, arrow_headed_return_up_default;
var init_arrow_headed_return_up = __esm({
  "lib/icons/arrow-headed-return-up.ts"() {
    IconArrowHeadedReturnUp = `<svg id="arrow-headed-return-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="36 36 27 27 18 36 36 36" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M27,36v9c0,7.46,6.04,13.5,13.5,13.5h0c7.46,0,13.5-6.04,13.5-13.5v-27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="36 36 27 27 18 36 36 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_return_up_default = IconArrowHeadedReturnUp;
  }
});

// lib/icons/arrow-headed-right.ts
var arrow_headed_right_exports = {};
__export(arrow_headed_right_exports, {
  IconArrowHeadedRight: () => IconArrowHeadedRight,
  default: () => arrow_headed_right_default
});
var IconArrowHeadedRight, arrow_headed_right_default;
var init_arrow_headed_right = __esm({
  "lib/icons/arrow-headed-right.ts"() {
    IconArrowHeadedRight = `<svg id="arrow-headed-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="45 49.5 58.5 36 45 22.5 45 49.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="45 49.5 58.5 36 45 22.5 45 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="36" x2="45" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_right_default = IconArrowHeadedRight;
  }
});

// lib/icons/arrow-headed-rotate-bottom-left.ts
var arrow_headed_rotate_bottom_left_exports = {};
__export(arrow_headed_rotate_bottom_left_exports, {
  IconArrowHeadedRotateBottomLeft: () => IconArrowHeadedRotateBottomLeft,
  default: () => arrow_headed_rotate_bottom_left_default
});
var IconArrowHeadedRotateBottomLeft, arrow_headed_rotate_bottom_left_default;
var init_arrow_headed_rotate_bottom_left = __esm({
  "lib/icons/arrow-headed-rotate-bottom-left.ts"() {
    IconArrowHeadedRotateBottomLeft = `<svg id="arrow-headed-rotate-bottom-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="36 45 27 54 36 63" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,36c0-9.94,8.06-18,18-18s18,8.06,18,18-8.06,18-18,18h0" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="36 63 36 45 27 54 36 63" style="fill: red;"/><polygon points="36 63 36 45 27 54 36 63" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_rotate_bottom_left_default = IconArrowHeadedRotateBottomLeft;
  }
});

// lib/icons/arrow-headed-rotate-bottom-right.ts
var arrow_headed_rotate_bottom_right_exports = {};
__export(arrow_headed_rotate_bottom_right_exports, {
  IconArrowHeadedRotateBottomRight: () => IconArrowHeadedRotateBottomRight,
  default: () => arrow_headed_rotate_bottom_right_default
});
var IconArrowHeadedRotateBottomRight, arrow_headed_rotate_bottom_right_default;
var init_arrow_headed_rotate_bottom_right = __esm({
  "lib/icons/arrow-headed-rotate-bottom-right.ts"() {
    IconArrowHeadedRotateBottomRight = `<svg id="arrow-headed-rotate-bottom-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="36 45 45 54 36 63" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,36c0-9.94-8.06-18-18-18s-18,8.06-18,18c0,9.94,8.06,18,18,18h0" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="36 45 36 63 45 54 36 45" style="fill: red;"/><polygon points="36 45 36 63 45 54 36 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_rotate_bottom_right_default = IconArrowHeadedRotateBottomRight;
  }
});

// lib/icons/arrow-headed-rotate-top-left.ts
var arrow_headed_rotate_top_left_exports = {};
__export(arrow_headed_rotate_top_left_exports, {
  IconArrowHeadedRotateTopLeft: () => IconArrowHeadedRotateTopLeft,
  default: () => arrow_headed_rotate_top_left_default
});
var IconArrowHeadedRotateTopLeft, arrow_headed_rotate_top_left_default;
var init_arrow_headed_rotate_top_left = __esm({
  "lib/icons/arrow-headed-rotate-top-left.ts"() {
    IconArrowHeadedRotateTopLeft = `<svg id="arrow-headed-rotate-top-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="36 27 27 18 36 9" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,36c0,9.94,8.06,18,18,18s18-8.06,18-18c0-9.94-8.06-18-18-18h0" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="36 9 27 18 36 27 36 9" style="fill: red;"/><polygon points="36 9 27 18 36 27 36 9" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_rotate_top_left_default = IconArrowHeadedRotateTopLeft;
  }
});

// lib/icons/arrow-headed-rotate-top-right.ts
var arrow_headed_rotate_top_right_exports = {};
__export(arrow_headed_rotate_top_right_exports, {
  IconArrowHeadedRotateTopRight: () => IconArrowHeadedRotateTopRight,
  default: () => arrow_headed_rotate_top_right_default
});
var IconArrowHeadedRotateTopRight, arrow_headed_rotate_top_right_default;
var init_arrow_headed_rotate_top_right = __esm({
  "lib/icons/arrow-headed-rotate-top-right.ts"() {
    IconArrowHeadedRotateTopRight = `<svg id="arrow-headed-rotate-top-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="36 27 45 18 36 9" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,36c0,9.94-8.06,18-18,18s-18-8.06-18-18,8.06-18,18-18h0" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="36 9 36 27 45 18 36 9" style="fill: red;"/><polygon points="36 9 36 27 45 18 36 9" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_rotate_top_right_default = IconArrowHeadedRotateTopRight;
  }
});

// lib/icons/arrow-headed-rounded-left-up.ts
var arrow_headed_rounded_left_up_exports = {};
__export(arrow_headed_rounded_left_up_exports, {
  IconArrowHeadedRoundedLeftUp: () => IconArrowHeadedRoundedLeftUp,
  default: () => arrow_headed_rounded_left_up_default
});
var IconArrowHeadedRoundedLeftUp, arrow_headed_rounded_left_up_default;
var init_arrow_headed_rounded_left_up = __esm({
  "lib/icons/arrow-headed-rounded-left-up.ts"() {
    IconArrowHeadedRoundedLeftUp = `<svg id="arrow-headed-rounded-left-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="58.5 22.5 49.5 13.5 40.5 22.5 58.5 22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="22.5 58.5 13.5 49.5 22.5 40.5 22.5 58.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="58.5 22.5 49.5 13.5 40.5 22.5 58.5 22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,22.5v7c0,11.05-8.95,20-20,20h-7" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="22.5 58.5 13.5 49.5 22.5 40.5 22.5 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_rounded_left_up_default = IconArrowHeadedRoundedLeftUp;
  }
});

// lib/icons/arrow-headed-rounded-right-down.ts
var arrow_headed_rounded_right_down_exports = {};
__export(arrow_headed_rounded_right_down_exports, {
  IconArrowHeadedRoundedRightDown: () => IconArrowHeadedRoundedRightDown,
  default: () => arrow_headed_rounded_right_down_default
});
var IconArrowHeadedRoundedRightDown, arrow_headed_rounded_right_down_default;
var init_arrow_headed_rounded_right_down = __esm({
  "lib/icons/arrow-headed-rounded-right-down.ts"() {
    IconArrowHeadedRoundedRightDown = `<svg id="arrow-headed-rounded-right-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="31.5 49.5 22.5 58.5 13.5 49.5 31.5 49.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="49.5 31.5 58.5 22.5 49.5 13.5 49.5 31.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="31.5 49.5 22.5 58.5 13.5 49.5 31.5 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,49.5v-7c0-11.05,8.95-20,20-20h7" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="49.5 31.5 58.5 22.5 49.5 13.5 49.5 31.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_rounded_right_down_default = IconArrowHeadedRoundedRightDown;
  }
});

// lib/icons/arrow-headed-rounded-right-up.ts
var arrow_headed_rounded_right_up_exports = {};
__export(arrow_headed_rounded_right_up_exports, {
  IconArrowHeadedRoundedRightUp: () => IconArrowHeadedRoundedRightUp,
  default: () => arrow_headed_rounded_right_up_default
});
var IconArrowHeadedRoundedRightUp, arrow_headed_rounded_right_up_default;
var init_arrow_headed_rounded_right_up = __esm({
  "lib/icons/arrow-headed-rounded-right-up.ts"() {
    IconArrowHeadedRoundedRightUp = `<svg id="arrow-headed-rounded-right-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="49.5 58.5 58.5 49.5 49.5 40.5 49.5 58.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="31.5 22.5 22.5 13.5 13.5 22.5 31.5 22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="49.5 58.5 58.5 49.5 49.5 40.5 49.5 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,49.5h-7c-11.05,0-20-8.95-20-20v-7" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="31.5 22.5 22.5 13.5 13.5 22.5 31.5 22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_rounded_right_up_default = IconArrowHeadedRoundedRightUp;
  }
});

// lib/icons/arrow-headed-rouned-left-down.ts
var arrow_headed_rouned_left_down_exports = {};
__export(arrow_headed_rouned_left_down_exports, {
  IconArrowHeadedRounedLeftDown: () => IconArrowHeadedRounedLeftDown,
  default: () => arrow_headed_rouned_left_down_default
});
var IconArrowHeadedRounedLeftDown, arrow_headed_rouned_left_down_default;
var init_arrow_headed_rouned_left_down = __esm({
  "lib/icons/arrow-headed-rouned-left-down.ts"() {
    IconArrowHeadedRounedLeftDown = `<svg id="arrow-headed-rouned-left-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="22.5 31.5 13.5 22.5 22.5 13.5 22.5 31.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="58.5 49.5 49.5 58.5 40.5 49.5 58.5 49.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="22.5 31.5 13.5 22.5 22.5 13.5 22.5 31.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,22.5h7c11.05,0,20,8.95,20,20v7" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="58.5 49.5 49.5 58.5 40.5 49.5 58.5 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_rouned_left_down_default = IconArrowHeadedRounedLeftDown;
  }
});

// lib/icons/arrow-headed-share.ts
var arrow_headed_share_exports = {};
__export(arrow_headed_share_exports, {
  IconArrowHeadedShare: () => IconArrowHeadedShare,
  default: () => arrow_headed_share_default
});
var IconArrowHeadedShare, arrow_headed_share_default;
var init_arrow_headed_share = __esm({
  "lib/icons/arrow-headed-share.ts"() {
    IconArrowHeadedShare = `<svg id="arrow-headed-share" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="27 31.5 18 22.5 27 13.5 27 31.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M63,49.5l-1.74,3.47c-1.69,3.39-5.16,5.53-8.94,5.53H19.68c-3.79,0-7.25-2.14-8.94-5.53l-1.74-3.47" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="27 31.5 18 22.5 27 13.5 27 31.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,22.5h2.5c11.05,0,20,8.95,20,20v7" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_share_default = IconArrowHeadedShare;
  }
});

// lib/icons/arrow-headed-spread-split.ts
var arrow_headed_spread_split_exports = {};
__export(arrow_headed_spread_split_exports, {
  IconArrowHeadedSpreadSplit: () => IconArrowHeadedSpreadSplit,
  default: () => arrow_headed_spread_split_default
});
var IconArrowHeadedSpreadSplit, arrow_headed_spread_split_default;
var init_arrow_headed_spread_split = __esm({
  "lib/icons/arrow-headed-spread-split.ts"() {
    IconArrowHeadedSpreadSplit = `<svg id="arrow-headed-spread-split" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="13.5 45.77 13.5 58.5 26.23 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.5 26.23 58.5 13.5 45.77 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="27" x2="52.14" y2="19.86" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="19.86" y1="52.14" x2="27" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45.77 58.5 58.5 58.5 58.5 45.77" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="26.23 13.5 13.5 13.5 13.5 26.23" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="27" x2="19.86" y2="19.86" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="51.75" y1="51.75" x2="45" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="13.5 58.5 26.23 58.5 13.5 45.77 13.5 58.5" style="fill: red;"/><polygon points="45.77 13.5 58.5 26.23 58.5 13.5 45.77 13.5" style="fill: red;"/><polygon points="45.77 58.5 58.5 58.5 58.5 45.77 45.77 58.5" style="fill: red;"/><polygon points="13.5 13.5 13.5 26.23 26.23 13.5 13.5 13.5" style="fill: red;"/><polygon points="13.5 58.5 26.23 58.5 13.5 45.77 13.5 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45.77 13.5 58.5 26.23 58.5 13.5 45.77 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45.77 58.5 58.5 58.5 58.5 45.77 45.77 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="13.5 13.5 13.5 26.23 26.23 13.5 13.5 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_spread_split_default = IconArrowHeadedSpreadSplit;
  }
});

// lib/icons/arrow-headed-spread.ts
var arrow_headed_spread_exports = {};
__export(arrow_headed_spread_exports, {
  IconArrowHeadedSpread: () => IconArrowHeadedSpread,
  default: () => arrow_headed_spread_default
});
var IconArrowHeadedSpread, arrow_headed_spread_default;
var init_arrow_headed_spread = __esm({
  "lib/icons/arrow-headed-spread.ts"() {
    IconArrowHeadedSpread = `<svg id="arrow-headed-spread" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="13.5 45.77 13.5 58.5 26.23 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.5 26.23 58.5 13.5 45.77 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="19.86" y1="52.14" x2="52.14" y2="19.86" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45.77 58.5 58.5 58.5 58.5 45.77" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="26.23 13.5 13.5 13.5 13.5 26.23" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="52.14" y1="52.14" x2="19.86" y2="19.86" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="13.5 58.5 26.23 58.5 13.5 45.77 13.5 58.5" style="fill: red;"/><polygon points="45.77 13.5 58.5 26.23 58.5 13.5 45.77 13.5" style="fill: red;"/><polygon points="45.77 58.5 58.5 58.5 58.5 45.77 45.77 58.5" style="fill: red;"/><polygon points="13.5 13.5 13.5 26.23 26.23 13.5 13.5 13.5" style="fill: red;"/><polygon points="13.5 58.5 26.23 58.5 13.5 45.77 13.5 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45.77 13.5 58.5 26.23 58.5 13.5 45.77 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45.77 58.5 58.5 58.5 58.5 45.77 45.77 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="13.5 13.5 13.5 26.23 26.23 13.5 13.5 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_spread_default = IconArrowHeadedSpread;
  }
});

// lib/icons/arrow-headed-twoway-diagonal-lr.ts
var arrow_headed_twoway_diagonal_lr_exports = {};
__export(arrow_headed_twoway_diagonal_lr_exports, {
  IconArrowHeadedTwowayDiagonalLr: () => IconArrowHeadedTwowayDiagonalLr,
  default: () => arrow_headed_twoway_diagonal_lr_default
});
var IconArrowHeadedTwowayDiagonalLr, arrow_headed_twoway_diagonal_lr_default;
var init_arrow_headed_twoway_diagonal_lr = __esm({
  "lib/icons/arrow-headed-twoway-diagonal-lr.ts"() {
    IconArrowHeadedTwowayDiagonalLr = `<svg id="arrow-headed-twoway-diagonal-lr" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><polygon points="28.43 11.75 27.95 27.95 43.86 12.04 28.43 11.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><polygon points="44.05 44.05 28.14 59.96 43.57 60.25 44.05 44.05" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><line x1="60.25" y1="43.57" x2="36.29" y2="19.61" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><polygon points="28.43 11.75 27.95 27.95 43.86 12.04 28.43 11.75" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="44.05 44.05 28.14 59.96 43.57 60.25 44.05 44.05" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="11.75" y1="28.43" x2="35.71" y2="52.39" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_twoway_diagonal_lr_default = IconArrowHeadedTwowayDiagonalLr;
  }
});

// lib/icons/arrow-headed-twoway-diagonal-rl.ts
var arrow_headed_twoway_diagonal_rl_exports = {};
__export(arrow_headed_twoway_diagonal_rl_exports, {
  IconArrowHeadedTwowayDiagonalRl: () => IconArrowHeadedTwowayDiagonalRl,
  default: () => arrow_headed_twoway_diagonal_rl_default
});
var IconArrowHeadedTwowayDiagonalRl, arrow_headed_twoway_diagonal_rl_default;
var init_arrow_headed_twoway_diagonal_rl = __esm({
  "lib/icons/arrow-headed-twoway-diagonal-rl.ts"() {
    IconArrowHeadedTwowayDiagonalRl = `<svg id="arrow-headed-twoway-diagonal-rl" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="11.75 43.57 27.95 44.05 12.04 28.14 11.75 43.57" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="60.25 28.43 44.05 27.95 59.96 43.86 60.25 28.43" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="43.57" y1="11.75" x2="19.61" y2="35.71" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="28.43" y1="60.25" x2="52.39" y2="36.29" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="11.75 43.57 27.95 44.05 12.04 28.14 11.75 43.57" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="60.25 28.43 44.05 27.95 59.96 43.86 60.25 28.43" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_twoway_diagonal_rl_default = IconArrowHeadedTwowayDiagonalRl;
  }
});

// lib/icons/arrow-headed-twoway-horizontal.ts
var arrow_headed_twoway_horizontal_exports = {};
__export(arrow_headed_twoway_horizontal_exports, {
  IconArrowHeadedTwowayHorizontal: () => IconArrowHeadedTwowayHorizontal,
  default: () => arrow_headed_twoway_horizontal_default
});
var IconArrowHeadedTwowayHorizontal, arrow_headed_twoway_horizontal_default;
var init_arrow_headed_twoway_horizontal = __esm({
  "lib/icons/arrow-headed-twoway-horizontal.ts"() {
    IconArrowHeadedTwowayHorizontal = `<svg id="arrow-headed-twoway-horizontal" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.5,14.78c-3.23,2.05-9,9.42-9,9.42l11.12,11.8V13.5s-.87.48-2.12,1.28Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="47.38 36 47.38 58.5 58.5 47.8 47.38 36" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M22.5,14.78c-3.23,2.05-9,9.42-9,9.42l11.12,11.8V13.5s-.87.48-2.12,1.28Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="24.2" x2="24.62" y2="24.2" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="47.38 36 47.38 58.5 58.5 47.8 47.38 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="47.8" x2="47.25" y2="47.8" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_twoway_horizontal_default = IconArrowHeadedTwowayHorizontal;
  }
});

// lib/icons/arrow-headed-twoway-vertical.ts
var arrow_headed_twoway_vertical_exports = {};
__export(arrow_headed_twoway_vertical_exports, {
  IconArrowHeadedTwowayVertical: () => IconArrowHeadedTwowayVertical,
  default: () => arrow_headed_twoway_vertical_default
});
var IconArrowHeadedTwowayVertical, arrow_headed_twoway_vertical_default;
var init_arrow_headed_twoway_vertical = __esm({
  "lib/icons/arrow-headed-twoway-vertical.ts"() {
    IconArrowHeadedTwowayVertical = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g id="arrow-headed-twoway-vertical"><polygon points="24.2 58.5 36 47.38 13.5 47.38 24.2 58.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="47.8 13.5 36 24.62 58.5 24.62 47.8 13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="24.2" y1="13.5" x2="24.2" y2="47.38" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.8" y1="58.5" x2="47.8" y2="24.62" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g id="arrow-headed-twoway-diagonal-rl"><polygon points="24.2 58.5 36 47.38 13.5 47.38 24.2 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="47.8 13.5 36 24.62 58.5 24.62 47.8 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    arrow_headed_twoway_vertical_default = IconArrowHeadedTwowayVertical;
  }
});

// lib/icons/arrow-headed-up-down-split.ts
var arrow_headed_up_down_split_exports = {};
__export(arrow_headed_up_down_split_exports, {
  IconArrowHeadedUpDownSplit: () => IconArrowHeadedUpDownSplit,
  default: () => arrow_headed_up_down_split_default
});
var IconArrowHeadedUpDownSplit, arrow_headed_up_down_split_default;
var init_arrow_headed_up_down_split = __esm({
  "lib/icons/arrow-headed-up-down-split.ts"() {
    IconArrowHeadedUpDownSplit = `<svg id="arrow-headed-up-down-split" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="27" x2="36" y2="18.24" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="54" x2="36" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="26.88 54.24 36 63.12 44.88 54 26.88 54.24" style="fill: red;"/><polygon points="36 9.12 27.12 18.24 45.12 18 36 9.12" style="fill: red;"/><polygon points="26.88 54.24 36 63.12 44.88 54 26.88 54.24" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="36 9.12 27.12 18.24 45.12 18 36 9.12" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_up_down_split_default = IconArrowHeadedUpDownSplit;
  }
});

// lib/icons/arrow-headed-up-down-stop.ts
var arrow_headed_up_down_stop_exports = {};
__export(arrow_headed_up_down_stop_exports, {
  IconArrowHeadedUpDownStop: () => IconArrowHeadedUpDownStop,
  default: () => arrow_headed_up_down_stop_default
});
var IconArrowHeadedUpDownStop, arrow_headed_up_down_stop_default;
var init_arrow_headed_up_down_stop = __esm({
  "lib/icons/arrow-headed-up-down-stop.ts"() {
    IconArrowHeadedUpDownStop = `<svg id="arrow-headed-up-down-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="27" x2="36" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="54" x2="36" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="36" x2="49.5" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="36 63.12 44.88 54 26.88 54.24 36 63.12" style="fill: red;"/><polygon points="36 9.12 27.12 18.24 45.12 18 36 9.12" style="fill: red;"/><polygon points="36 63.12 44.88 54 26.88 54.24 36 63.12" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="36 9.12 27.12 18.24 45.12 18 36 9.12" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_up_down_stop_default = IconArrowHeadedUpDownStop;
  }
});

// lib/icons/arrow-headed-up-down.ts
var arrow_headed_up_down_exports = {};
__export(arrow_headed_up_down_exports, {
  IconArrowHeadedUpDown: () => IconArrowHeadedUpDown,
  default: () => arrow_headed_up_down_default
});
var IconArrowHeadedUpDown, arrow_headed_up_down_default;
var init_arrow_headed_up_down = __esm({
  "lib/icons/arrow-headed-up-down.ts"() {
    IconArrowHeadedUpDown = `<svg id="arrow-headed-up-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="54.12" x2="36" y2="18.12" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="26.88 54.24 36 63.12 44.88 54 26.88 54.24" style="fill: red;"/><polygon points="36 9.12 27.12 18.24 45.12 18 36 9.12" style="fill: red;"/><polygon points="26.88 54.24 36 63.12 44.88 54 26.88 54.24" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="36 9.12 27.12 18.24 45.12 18 36 9.12" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_up_down_default = IconArrowHeadedUpDown;
  }
});

// lib/icons/arrow-headed-up-left.ts
var arrow_headed_up_left_exports = {};
__export(arrow_headed_up_left_exports, {
  IconArrowHeadedUpLeft: () => IconArrowHeadedUpLeft,
  default: () => arrow_headed_up_left_default
});
var IconArrowHeadedUpLeft, arrow_headed_up_left_default;
var init_arrow_headed_up_left = __esm({
  "lib/icons/arrow-headed-up-left.ts"() {
    IconArrowHeadedUpLeft = `<svg id="arrow-headed-up-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="18 37.09 18 18 37.09 18 18 37.09" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="18 37.09 18 18 37.09 18 18 37.09" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.82" y1="49.82" x2="27.55" y2="27.55" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_up_left_default = IconArrowHeadedUpLeft;
  }
});

// lib/icons/arrow-headed-up-right.ts
var arrow_headed_up_right_exports = {};
__export(arrow_headed_up_right_exports, {
  IconArrowHeadedUpRight: () => IconArrowHeadedUpRight,
  default: () => arrow_headed_up_right_default
});
var IconArrowHeadedUpRight, arrow_headed_up_right_default;
var init_arrow_headed_up_right = __esm({
  "lib/icons/arrow-headed-up-right.ts"() {
    IconArrowHeadedUpRight = `<svg id="arrow-headed-up-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="54 37.09 54 18 34.91 18 54 37.09" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="54 37.09 54 18 34.91 18 54 37.09" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.18" y1="49.82" x2="44.45" y2="27.55" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_up_right_default = IconArrowHeadedUpRight;
  }
});

// lib/icons/arrow-headed-up-stop76.ts
var arrow_headed_up_stop76_exports = {};
__export(arrow_headed_up_stop76_exports, {
  IconArrowHeadedUpStop76: () => IconArrowHeadedUpStop76,
  default: () => arrow_headed_up_stop76_default
});
var IconArrowHeadedUpStop76, arrow_headed_up_stop76_default;
var init_arrow_headed_up_stop76 = __esm({
  "lib/icons/arrow-headed-up-stop76.ts"() {
    IconArrowHeadedUpStop76 = `<svg id="arrow-headed-up-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="36 49.5 49.5 36 36 22.5 36 49.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="36 49.5 49.5 36 36 22.5 36 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="36" x2="36" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="22.5" x2="58.5" y2="49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_up_stop76_default = IconArrowHeadedUpStop76;
  }
});

// lib/icons/arrow-headed-up-stop78.ts
var arrow_headed_up_stop78_exports = {};
__export(arrow_headed_up_stop78_exports, {
  IconArrowHeadedUpStop78: () => IconArrowHeadedUpStop78,
  default: () => arrow_headed_up_stop78_default
});
var IconArrowHeadedUpStop78, arrow_headed_up_stop78_default;
var init_arrow_headed_up_stop78 = __esm({
  "lib/icons/arrow-headed-up-stop78.ts"() {
    IconArrowHeadedUpStop78 = `<svg id="arrow-headed-up-stop-2" data-name="arrow-headed-up-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="49.5 36 36 22.5 22.5 36 49.5 36" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="49.5 36 36 22.5 22.5 36 49.5 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="58.5" x2="36" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="13.5" x2="22.5" y2="13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_up_stop78_default = IconArrowHeadedUpStop78;
  }
});

// lib/icons/arrow-headed-up.ts
var arrow_headed_up_exports = {};
__export(arrow_headed_up_exports, {
  IconArrowHeadedUp: () => IconArrowHeadedUp,
  default: () => arrow_headed_up_default
});
var IconArrowHeadedUp, arrow_headed_up_default;
var init_arrow_headed_up = __esm({
  "lib/icons/arrow-headed-up.ts"() {
    IconArrowHeadedUp = `<svg id="arrow-headed-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="49.5 27 36 13.5 22.5 27 49.5 27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="49.5 27 36 13.5 22.5 27 49.5 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="58.5" x2="36" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_headed_up_default = IconArrowHeadedUp;
  }
});

// lib/icons/arrow-headed-upload.ts
var arrow_headed_upload_exports = {};
__export(arrow_headed_upload_exports, {
  IconArrowHeadedUpload: () => IconArrowHeadedUpload,
  default: () => arrow_headed_upload_default
});
var IconArrowHeadedUpload, arrow_headed_upload_default;
var init_arrow_headed_upload = __esm({
  "lib/icons/arrow-headed-upload.ts"() {
    IconArrowHeadedUpload = `<svg id="arrow-headed-upload" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="49.5 27 36 13.5 22.5 27 49.5 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="49.5" x2="36" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,49.5l-1.74,3.47c-1.69,3.39-5.16,5.53-8.94,5.53H19.68c-3.79,0-7.25-2.14-8.94-5.53l-1.74-3.47" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="49.5 27 36 13.5 22.5 27 49.5 27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/></svg>`;
    arrow_headed_upload_default = IconArrowHeadedUpload;
  }
});

// lib/icons/arrow-in-center.ts
var arrow_in_center_exports = {};
__export(arrow_in_center_exports, {
  IconArrowInCenter: () => IconArrowInCenter,
  default: () => arrow_in_center_default
});
var IconArrowInCenter, arrow_in_center_default;
var init_arrow_in_center = __esm({
  "lib/icons/arrow-in-center.ts"() {
    IconArrowInCenter = `<svg id="arrow-in-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="27 57.73 27 45 14.27 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 14.27 45 27 57.73 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="13.5" x2="45" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="45" x2="13.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="57.73 45 45 45 45 57.73" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="14.27 27 27 27 27 14.27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="13.5" x2="27" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="45" x2="58.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="4.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_in_center_default = IconArrowInCenter;
  }
});

// lib/icons/arrow-invert.ts
var arrow_invert_exports = {};
__export(arrow_invert_exports, {
  IconArrowInvert: () => IconArrowInvert,
  default: () => arrow_invert_default
});
var IconArrowInvert, arrow_invert_default;
var init_arrow_invert = __esm({
  "lib/icons/arrow-invert.ts"() {
    IconArrowInvert = `<svg id="arrow-invert" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="58.5" y1="13.5" x2="45" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="45" x2="13.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="13.5" x2="27" y2="27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="45" x2="58.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 57.73 27 45 14.27 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 14.27 45 27 57.73 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="57.73 45 45 45 45 57.73" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="14.27 27 27 27 27 14.27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_invert_default = IconArrowInvert;
  }
});

// lib/icons/arrow-left-right-split.ts
var arrow_left_right_split_exports = {};
__export(arrow_left_right_split_exports, {
  IconArrowLeftRightSplit: () => IconArrowLeftRightSplit,
  default: () => arrow_left_right_split_default
});
var IconArrowLeftRightSplit, arrow_left_right_split_default;
var init_arrow_left_right_split = __esm({
  "lib/icons/arrow-left-right-split.ts"() {
    IconArrowLeftRightSplit = `<svg id="arrow-left-right-split" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="17.88 26.88 9 36 18.12 44.88" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="54.12 45.12 63 36 53.88 27.12" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="36" x2="63" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="36" x2="27" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_left_right_split_default = IconArrowLeftRightSplit;
  }
});

// lib/icons/arrow-left-right-stop.ts
var arrow_left_right_stop_exports = {};
__export(arrow_left_right_stop_exports, {
  IconArrowLeftRightStop: () => IconArrowLeftRightStop,
  default: () => arrow_left_right_stop_default
});
var IconArrowLeftRightStop, arrow_left_right_stop_default;
var init_arrow_left_right_stop = __esm({
  "lib/icons/arrow-left-right-stop.ts"() {
    IconArrowLeftRightStop = `<svg id="arrow-left-right-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="17.88 26.88 9 36 18.12 44.88" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="54.12 45.12 63 36 53.88 27.12" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="36" x2="63" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="36" x2="22.5" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_left_right_stop_default = IconArrowLeftRightStop;
  }
});

// lib/icons/arrow-left-right.ts
var arrow_left_right_exports = {};
__export(arrow_left_right_exports, {
  IconArrowLeftRight: () => IconArrowLeftRight,
  default: () => arrow_left_right_default
});
var IconArrowLeftRight, arrow_left_right_default;
var init_arrow_left_right = __esm({
  "lib/icons/arrow-left-right.ts"() {
    IconArrowLeftRight = `<svg id="arrow-left-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="17.88 26.88 9 36 18.12 44.88" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="54.12 45.12 63 36 53.88 27.12" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="36" x2="63" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_left_right_default = IconArrowLeftRight;
  }
});

// lib/icons/arrow-left-stop.ts
var arrow_left_stop_exports = {};
__export(arrow_left_stop_exports, {
  IconArrowLeftStop: () => IconArrowLeftStop,
  default: () => arrow_left_stop_default
});
var IconArrowLeftStop, arrow_left_stop_default;
var init_arrow_left_stop = __esm({
  "lib/icons/arrow-left-stop.ts"() {
    IconArrowLeftStop = `<svg id="arrow-left-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="58.5" y1="36" x2="22.5" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="22.5" x2="13.5" y2="49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 49.5 22.5 36 36 22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_left_stop_default = IconArrowLeftStop;
  }
});

// lib/icons/arrow-left.ts
var arrow_left_exports = {};
__export(arrow_left_exports, {
  IconArrowLeft: () => IconArrowLeft,
  default: () => arrow_left_default
});
var IconArrowLeft, arrow_left_default;
var init_arrow_left = __esm({
  "lib/icons/arrow-left.ts"() {
    IconArrowLeft = `<svg id="arrow-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="58.5" y1="36" x2="13.5" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 22.5 13.5 36 27 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_left_default = IconArrowLeft;
  }
});

// lib/icons/arrow-out-center.ts
var arrow_out_center_exports = {};
__export(arrow_out_center_exports, {
  IconArrowOutCenter: () => IconArrowOutCenter,
  default: () => arrow_out_center_default
});
var IconArrowOutCenter, arrow_out_center_default;
var init_arrow_out_center = __esm({
  "lib/icons/arrow-out-center.ts"() {
    IconArrowOutCenter = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="13.5 45.77 13.5 58.5 26.23 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.5 26.23 58.5 13.5 45.77 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="27" x2="58.5" y2="13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="58.5" x2="27" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45.77 58.5 58.5 58.5 58.5 45.77" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="26.23 13.5 13.5 13.5 13.5 26.23" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="27" x2="13.5" y2="13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="58.5" x2="45" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="4.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_out_center_default = IconArrowOutCenter;
  }
});

// lib/icons/arrow-reload-down-up.ts
var arrow_reload_down_up_exports = {};
__export(arrow_reload_down_up_exports, {
  IconArrowReloadDownUp: () => IconArrowReloadDownUp,
  default: () => arrow_reload_down_up_default
});
var IconArrowReloadDownUp, arrow_reload_down_up_default;
var init_arrow_reload_down_up = __esm({
  "lib/icons/arrow-reload-down-up.ts"() {
    IconArrowReloadDownUp = `<svg id="arrow-reload-down-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18,58.5v-25c0-11.05,8.95-20,20-20" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,13.5v25c0,11.05-8.95,20-20,20" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="9 49.5 18 58.5 27 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="63 22.5 54 13.5 45 22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_reload_down_up_default = IconArrowReloadDownUp;
  }
});

// lib/icons/arrow-reload-left-right.ts
var arrow_reload_left_right_exports = {};
__export(arrow_reload_left_right_exports, {
  IconArrowReloadLeftRight: () => IconArrowReloadLeftRight,
  default: () => arrow_reload_left_right_default
});
var IconArrowReloadLeftRight, arrow_reload_left_right_default;
var init_arrow_reload_left_right = __esm({
  "lib/icons/arrow-reload-left-right.ts"() {
    IconArrowReloadLeftRight = `<svg id="arrow-reload-left-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M58.5,38c0-11.05-8.95-20-20-20H13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,34c0,11.05,8.95,20,20,20h25" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 63 58.5 54 49.5 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 9 13.5 18 22.5 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_reload_left_right_default = IconArrowReloadLeftRight;
  }
});

// lib/icons/arrow-reload-right-left.ts
var arrow_reload_right_left_exports = {};
__export(arrow_reload_right_left_exports, {
  IconArrowReloadRightLeft: () => IconArrowReloadRightLeft,
  default: () => arrow_reload_right_left_default
});
var IconArrowReloadRightLeft, arrow_reload_right_left_default;
var init_arrow_reload_right_left = __esm({
  "lib/icons/arrow-reload-right-left.ts"() {
    IconArrowReloadRightLeft = `<svg id="arrow-reload-right-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M58.5,18h-25c-11.05,0-20,8.95-20,20" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,54h25c11.05,0,20-8.95,20-20" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 9 58.5 18 49.5 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 63 13.5 54 22.5 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_reload_right_left_default = IconArrowReloadRightLeft;
  }
});

// lib/icons/arrow-reload-up-down.ts
var arrow_reload_up_down_exports = {};
__export(arrow_reload_up_down_exports, {
  IconArrowReloadUpDown: () => IconArrowReloadUpDown,
  default: () => arrow_reload_up_down_default
});
var IconArrowReloadUpDown, arrow_reload_up_down_default;
var init_arrow_reload_up_down = __esm({
  "lib/icons/arrow-reload-up-down.ts"() {
    IconArrowReloadUpDown = `<svg id="arrow-reload-up-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54,58.5v-25c0-11.05-8.95-20-20-20" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,13.5v25c0,11.05,8.95,20,20,20" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="63 49.5 54 58.5 45 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="9 22.5 18 13.5 27 22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_reload_up_down_default = IconArrowReloadUpDown;
  }
});

// lib/icons/arrow-return-down.ts
var arrow_return_down_exports = {};
__export(arrow_return_down_exports, {
  IconArrowReturnDown: () => IconArrowReturnDown,
  default: () => arrow_return_down_default
});
var IconArrowReturnDown, arrow_return_down_default;
var init_arrow_return_down = __esm({
  "lib/icons/arrow-return-down.ts"() {
    IconArrowReturnDown = `<svg id="arrow-return-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M45,45v-18c0-7.46-6.04-13.5-13.5-13.5h0c-7.46,0-13.5,6.04-13.5,13.5v27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 36 45 45 54 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_return_down_default = IconArrowReturnDown;
  }
});

// lib/icons/arrow-return-left.ts
var arrow_return_left_exports = {};
__export(arrow_return_left_exports, {
  IconArrowReturnLeft: () => IconArrowReturnLeft,
  default: () => arrow_return_left_default
});
var IconArrowReturnLeft, arrow_return_left_default;
var init_arrow_return_left = __esm({
  "lib/icons/arrow-return-left.ts"() {
    IconArrowReturnLeft = `<svg id="arrow-return-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M27,45h18c7.46,0,13.5-6.04,13.5-13.5h0c0-7.46-6.04-13.5-13.5-13.5h-27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 36 27 45 36 54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_return_left_default = IconArrowReturnLeft;
  }
});

// lib/icons/arrow-return-right.ts
var arrow_return_right_exports = {};
__export(arrow_return_right_exports, {
  IconArrowReturnRight: () => IconArrowReturnRight,
  default: () => arrow_return_right_default
});
var IconArrowReturnRight, arrow_return_right_default;
var init_arrow_return_right = __esm({
  "lib/icons/arrow-return-right.ts"() {
    IconArrowReturnRight = `<svg id="arrow-return-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M45,27h-18c-7.46,0-13.5,6.04-13.5,13.5h0c0,7.46,6.04,13.5,13.5,13.5h27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 36 45 27 36 18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_return_right_default = IconArrowReturnRight;
  }
});

// lib/icons/arrow-return-up.ts
var arrow_return_up_exports = {};
__export(arrow_return_up_exports, {
  IconArrowReturnUp: () => IconArrowReturnUp,
  default: () => arrow_return_up_default
});
var IconArrowReturnUp, arrow_return_up_default;
var init_arrow_return_up = __esm({
  "lib/icons/arrow-return-up.ts"() {
    IconArrowReturnUp = `<svg id="arrow-return-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M27,27v18c0,7.46,6.04,13.5,13.5,13.5h0c7.46,0,13.5-6.04,13.5-13.5v-27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 36 27 27 18 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_return_up_default = IconArrowReturnUp;
  }
});

// lib/icons/arrow-right-stop.ts
var arrow_right_stop_exports = {};
__export(arrow_right_stop_exports, {
  IconArrowRightStop: () => IconArrowRightStop,
  default: () => arrow_right_stop_default
});
var IconArrowRightStop, arrow_right_stop_default;
var init_arrow_right_stop = __esm({
  "lib/icons/arrow-right-stop.ts"() {
    IconArrowRightStop = `<svg id="arrow-right-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="36" x2="49.5" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="49.5" x2="58.5" y2="22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 22.5 49.5 36 36 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_right_stop_default = IconArrowRightStop;
  }
});

// lib/icons/arrow-right.ts
var arrow_right_exports = {};
__export(arrow_right_exports, {
  IconArrowRight: () => IconArrowRight,
  default: () => arrow_right_default
});
var IconArrowRight, arrow_right_default;
var init_arrow_right = __esm({
  "lib/icons/arrow-right.ts"() {
    IconArrowRight = `<svg id="arrow-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="36" x2="58.5" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 49.5 58.5 36 45 22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_right_default = IconArrowRight;
  }
});

// lib/icons/arrow-roate-bottom-right.ts
var arrow_roate_bottom_right_exports = {};
__export(arrow_roate_bottom_right_exports, {
  IconArrowRoateBottomRight: () => IconArrowRoateBottomRight,
  default: () => arrow_roate_bottom_right_default
});
var IconArrowRoateBottomRight, arrow_roate_bottom_right_default;
var init_arrow_roate_bottom_right = __esm({
  "lib/icons/arrow-roate-bottom-right.ts"() {
    IconArrowRoateBottomRight = `<svg id="arrow-roate-bottom-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54,36c0-9.94-8.06-18-18-18s-18,8.06-18,18,8.06,18,18,18h9" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 45 45 54 36 63" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_roate_bottom_right_default = IconArrowRoateBottomRight;
  }
});

// lib/icons/arrow-rotate-bottom-left.ts
var arrow_rotate_bottom_left_exports = {};
__export(arrow_rotate_bottom_left_exports, {
  IconArrowRotateBottomLeft: () => IconArrowRotateBottomLeft,
  default: () => arrow_rotate_bottom_left_default
});
var IconArrowRotateBottomLeft, arrow_rotate_bottom_left_default;
var init_arrow_rotate_bottom_left = __esm({
  "lib/icons/arrow-rotate-bottom-left.ts"() {
    IconArrowRotateBottomLeft = `<svg id="arrow-rotate-bottom-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18,36c0-9.94,8.06-18,18-18s18,8.06,18,18-8.06,18-18,18h-9" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 45 27 54 36 63" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_rotate_bottom_left_default = IconArrowRotateBottomLeft;
  }
});

// lib/icons/arrow-rotate-top-left.ts
var arrow_rotate_top_left_exports = {};
__export(arrow_rotate_top_left_exports, {
  IconArrowRotateTopLeft: () => IconArrowRotateTopLeft,
  default: () => arrow_rotate_top_left_default
});
var IconArrowRotateTopLeft, arrow_rotate_top_left_default;
var init_arrow_rotate_top_left = __esm({
  "lib/icons/arrow-rotate-top-left.ts"() {
    IconArrowRotateTopLeft = `<svg id="arrow-rotate-top-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18,36c0,9.94,8.06,18,18,18s18-8.06,18-18c0-9.94-8.06-18-18-18h-9" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 27 27 18 36 9" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_rotate_top_left_default = IconArrowRotateTopLeft;
  }
});

// lib/icons/arrow-rotate-top-right.ts
var arrow_rotate_top_right_exports = {};
__export(arrow_rotate_top_right_exports, {
  IconArrowRotateTopRight: () => IconArrowRotateTopRight,
  default: () => arrow_rotate_top_right_default
});
var IconArrowRotateTopRight, arrow_rotate_top_right_default;
var init_arrow_rotate_top_right = __esm({
  "lib/icons/arrow-rotate-top-right.ts"() {
    IconArrowRotateTopRight = `<svg id="arrow-rotate-top-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54,36c0,9.94-8.06,18-18,18s-18-8.06-18-18,8.06-18,18-18h9" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 27 45 18 36 9" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_rotate_top_right_default = IconArrowRotateTopRight;
  }
});

// lib/icons/arrow-rounded-left-down.ts
var arrow_rounded_left_down_exports = {};
__export(arrow_rounded_left_down_exports, {
  IconArrowRoundedLeftDown: () => IconArrowRoundedLeftDown,
  default: () => arrow_rounded_left_down_default
});
var IconArrowRoundedLeftDown, arrow_rounded_left_down_default;
var init_arrow_rounded_left_down = __esm({
  "lib/icons/arrow-rounded-left-down.ts"() {
    IconArrowRoundedLeftDown = `<svg id="arrow-rounded-left-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.5,22.5h16c11.05,0,20,8.95,20,20v16" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 13.5 13.5 22.5 22.5 31.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="40.5 49.5 49.5 58.5 58.5 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_rounded_left_down_default = IconArrowRoundedLeftDown;
  }
});

// lib/icons/arrow-rounded-left-up.ts
var arrow_rounded_left_up_exports = {};
__export(arrow_rounded_left_up_exports, {
  IconArrowRoundedLeftUp: () => IconArrowRoundedLeftUp,
  default: () => arrow_rounded_left_up_default
});
var IconArrowRoundedLeftUp, arrow_rounded_left_up_default;
var init_arrow_rounded_left_up = __esm({
  "lib/icons/arrow-rounded-left-up.ts"() {
    IconArrowRoundedLeftUp = `<svg id="arrow-rounded-left-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.5,49.5h16c11.05,0,20-8.95,20-20V13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.5 22.5 49.5 13.5 40.5 22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 40.5 13.5 49.5 22.5 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_rounded_left_up_default = IconArrowRoundedLeftUp;
  }
});

// lib/icons/arrow-rounded-right-down.ts
var arrow_rounded_right_down_exports = {};
__export(arrow_rounded_right_down_exports, {
  IconArrowRoundedRightDown: () => IconArrowRoundedRightDown,
  default: () => arrow_rounded_right_down_default
});
var IconArrowRoundedRightDown, arrow_rounded_right_down_default;
var init_arrow_rounded_right_down = __esm({
  "lib/icons/arrow-rounded-right-down.ts"() {
    IconArrowRoundedRightDown = `<svg id="arrow-rounded-right-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.5,58.5v-16c0-11.05,8.95-20,20-20h16" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 49.5 22.5 58.5 31.5 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 31.5 58.5 22.5 49.5 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_rounded_right_down_default = IconArrowRoundedRightDown;
  }
});

// lib/icons/arrow-rounded-right-up.ts
var arrow_rounded_right_up_exports = {};
__export(arrow_rounded_right_up_exports, {
  IconArrowRoundedRightUp: () => IconArrowRoundedRightUp,
  default: () => arrow_rounded_right_up_default
});
var IconArrowRoundedRightUp, arrow_rounded_right_up_default;
var init_arrow_rounded_right_up = __esm({
  "lib/icons/arrow-rounded-right-up.ts"() {
    IconArrowRoundedRightUp = `<svg id="arrow-rounded-right-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M58.5,49.5h-16c-11.05,0-20-8.95-20-20V13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 58.5 58.5 49.5 49.5 40.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="31.5 22.5 22.5 13.5 13.5 22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_rounded_right_up_default = IconArrowRoundedRightUp;
  }
});

// lib/icons/arrow-share.ts
var arrow_share_exports = {};
__export(arrow_share_exports, {
  IconArrowShare: () => IconArrowShare,
  default: () => arrow_share_default
});
var IconArrowShare, arrow_share_default;
var init_arrow_share = __esm({
  "lib/icons/arrow-share.ts"() {
    IconArrowShare = `<svg id="arrow-share" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M63,49.5l-1.74,3.47c-1.69,3.39-5.16,5.53-8.94,5.53H19.68c-3.79,0-7.25-2.14-8.94-5.53l-1.74-3.47" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,22.5h11.5c11.05,0,20,8.95,20,20v7" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 13.5 18 22.5 27 31.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_share_default = IconArrowShare;
  }
});

// lib/icons/arrow-spread-split.ts
var arrow_spread_split_exports = {};
__export(arrow_spread_split_exports, {
  IconArrowSpreadSplit: () => IconArrowSpreadSplit,
  default: () => arrow_spread_split_default
});
var IconArrowSpreadSplit, arrow_spread_split_default;
var init_arrow_spread_split = __esm({
  "lib/icons/arrow-spread-split.ts"() {
    IconArrowSpreadSplit = `<svg id="arrow-spread-split" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="45" y1="27" x2="58.5" y2="13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="58.5" x2="27" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="27" x2="13.5" y2="13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="58.5" x2="45" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 45.77 13.5 58.5 26.23 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.5 26.23 58.5 13.5 45.77 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45.77 58.5 58.5 58.5 58.5 45.77" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="26.23 13.5 13.5 13.5 13.5 26.23" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_spread_split_default = IconArrowSpreadSplit;
  }
});

// lib/icons/arrow-spread.ts
var arrow_spread_exports = {};
__export(arrow_spread_exports, {
  IconArrowSpread: () => IconArrowSpread,
  default: () => arrow_spread_default
});
var IconArrowSpread, arrow_spread_default;
var init_arrow_spread = __esm({
  "lib/icons/arrow-spread.ts"() {
    IconArrowSpread = `<svg id="arrow-spread" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="58.5" x2="58.5" y2="13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="58.5" x2="13.5" y2="13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 45.77 13.5 58.5 26.23 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.5 26.23 58.5 13.5 45.77 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45.77 58.5 58.5 58.5 58.5 45.77" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="26.23 13.5 13.5 13.5 13.5 26.23" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_spread_default = IconArrowSpread;
  }
});

// lib/icons/arrow-thick-bottom-left.ts
var arrow_thick_bottom_left_exports = {};
__export(arrow_thick_bottom_left_exports, {
  IconArrowThickBottomLeft: () => IconArrowThickBottomLeft,
  default: () => arrow_thick_bottom_left_default
});
var IconArrowThickBottomLeft, arrow_thick_bottom_left_default;
var init_arrow_thick_bottom_left = __esm({
  "lib/icons/arrow-thick-bottom-left.ts"() {
    IconArrowThickBottomLeft = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="43.95 43.02 56.68 30.3 43.95 17.57 31.23 30.3 21.68 20.75 21.68 52.57 53.5 52.57 43.95 43.02" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="43.95 43.02 56.68 30.3 43.95 17.57 31.23 30.3 21.68 20.75 21.68 52.57 53.5 52.57 43.95 43.02" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_bottom_left_default = IconArrowThickBottomLeft;
  }
});

// lib/icons/arrow-thick-down.ts
var arrow_thick_down_exports = {};
__export(arrow_thick_down_exports, {
  IconArrowThickDown: () => IconArrowThickDown,
  default: () => arrow_thick_down_default
});
var IconArrowThickDown, arrow_thick_down_default;
var init_arrow_thick_down = __esm({
  "lib/icons/arrow-thick-down.ts"() {
    IconArrowThickDown = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="45 36 45 18 27 18 27 36 13.5 36 36 58.5 58.5 36 45 36" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="45 36 45 18 27 18 27 36 13.5 36 36 58.5 58.5 36 45 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_down_default = IconArrowThickDown;
  }
});

// lib/icons/arrow-thick-left-top.ts
var arrow_thick_left_top_exports = {};
__export(arrow_thick_left_top_exports, {
  IconArrowThickLeftTop: () => IconArrowThickLeftTop,
  default: () => arrow_thick_left_top_default
});
var IconArrowThickLeftTop, arrow_thick_left_top_default;
var init_arrow_thick_left_top = __esm({
  "lib/icons/arrow-thick-left-top.ts"() {
    IconArrowThickLeftTop = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="31.23 46.2 43.95 58.93 56.68 46.2 43.95 33.48 53.5 23.93 21.68 23.93 21.68 55.75 31.23 46.2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="31.23 46.2 43.95 58.93 56.68 46.2 43.95 33.48 53.5 23.93 21.68 23.93 21.68 55.75 31.23 46.2" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_left_top_default = IconArrowThickLeftTop;
  }
});

// lib/icons/arrow-thick-left.ts
var arrow_thick_left_exports = {};
__export(arrow_thick_left_exports, {
  IconArrowThickLeft: () => IconArrowThickLeft,
  default: () => arrow_thick_left_default
});
var IconArrowThickLeft, arrow_thick_left_default;
var init_arrow_thick_left = __esm({
  "lib/icons/arrow-thick-left.ts"() {
    IconArrowThickLeft = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="38.25 47.25 56.25 47.25 56.25 29.25 38.25 29.25 38.25 15.75 15.75 38.25 38.25 60.75 38.25 47.25" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="38.25 47.25 56.25 47.25 56.25 29.25 38.25 29.25 38.25 15.75 15.75 38.25 38.25 60.75 38.25 47.25" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_left_default = IconArrowThickLeft;
  }
});

// lib/icons/arrow-thick-right-bottom.ts
var arrow_thick_right_bottom_exports = {};
__export(arrow_thick_right_bottom_exports, {
  IconArrowThickRightBottom: () => IconArrowThickRightBottom,
  default: () => arrow_thick_right_bottom_default
});
var IconArrowThickRightBottom, arrow_thick_right_bottom_default;
var init_arrow_thick_right_bottom = __esm({
  "lib/icons/arrow-thick-right-bottom.ts"() {
    IconArrowThickRightBottom = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="40.77 30.3 28.05 17.57 15.32 30.3 28.05 43.02 18.5 52.57 50.32 52.57 50.32 20.75 40.77 30.3" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="40.77 30.3 28.05 17.57 15.32 30.3 28.05 43.02 18.5 52.57 50.32 52.57 50.32 20.75 40.77 30.3" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_right_bottom_default = IconArrowThickRightBottom;
  }
});

// lib/icons/arrow-thick-right.ts
var arrow_thick_right_exports = {};
__export(arrow_thick_right_exports, {
  IconArrowThickRight: () => IconArrowThickRight,
  default: () => arrow_thick_right_default
});
var IconArrowThickRight, arrow_thick_right_default;
var init_arrow_thick_right = __esm({
  "lib/icons/arrow-thick-right.ts"() {
    IconArrowThickRight = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="33.75 29.25 15.75 29.25 15.75 47.25 33.75 47.25 33.75 60.75 56.25 38.25 33.75 15.75 33.75 29.25" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="33.75 29.25 15.75 29.25 15.75 47.25 33.75 47.25 33.75 60.75 56.25 38.25 33.75 15.75 33.75 29.25" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_right_default = IconArrowThickRight;
  }
});

// lib/icons/arrow-thick-tall-bottom-left.ts
var arrow_thick_tall_bottom_left_exports = {};
__export(arrow_thick_tall_bottom_left_exports, {
  IconArrowThickTallBottomLeft: () => IconArrowThickTallBottomLeft,
  default: () => arrow_thick_tall_bottom_left_default
});
var IconArrowThickTallBottomLeft, arrow_thick_tall_bottom_left_default;
var init_arrow_thick_tall_bottom_left = __esm({
  "lib/icons/arrow-thick-tall-bottom-left.ts"() {
    IconArrowThickTallBottomLeft = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="48.73 36 61.46 23.27 48.73 10.54 36 23.27 26.45 13.73 16.91 55.09 58.27 45.55 48.73 36" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="48.73 36 61.46 23.27 48.73 10.54 36 23.27 26.45 13.73 16.91 55.09 58.27 45.55 48.73 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_tall_bottom_left_default = IconArrowThickTallBottomLeft;
  }
});

// lib/icons/arrow-thick-tall-down.ts
var arrow_thick_tall_down_exports = {};
__export(arrow_thick_tall_down_exports, {
  IconArrowThickTallDown: () => IconArrowThickTallDown,
  default: () => arrow_thick_tall_down_default
});
var IconArrowThickTallDown, arrow_thick_tall_down_default;
var init_arrow_thick_tall_down = __esm({
  "lib/icons/arrow-thick-tall-down.ts"() {
    IconArrowThickTallDown = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="45 27 45 9 27 9 27 27 13.5 27 36 63 58.5 27 45 27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="45 27 45 9 27 9 27 27 13.5 27 36 63 58.5 27 45 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_tall_down_default = IconArrowThickTallDown;
  }
});

// lib/icons/arrow-thick-tall-left-top.ts
var arrow_thick_tall_left_top_exports = {};
__export(arrow_thick_tall_left_top_exports, {
  IconArrowThickTallLeftTop: () => IconArrowThickTallLeftTop,
  default: () => arrow_thick_tall_left_top_default
});
var IconArrowThickTallLeftTop, arrow_thick_tall_left_top_default;
var init_arrow_thick_tall_left_top = __esm({
  "lib/icons/arrow-thick-tall-left-top.ts"() {
    IconArrowThickTallLeftTop = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="36 48.73 48.73 61.46 61.46 48.73 48.73 36 58.27 26.45 16.91 16.91 26.45 58.27 36 48.73" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="36 48.73 48.73 61.46 61.46 48.73 48.73 36 58.27 26.45 16.91 16.91 26.45 58.27 36 48.73" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_tall_left_top_default = IconArrowThickTallLeftTop;
  }
});

// lib/icons/arrow-thick-tall-left.ts
var arrow_thick_tall_left_exports = {};
__export(arrow_thick_tall_left_exports, {
  IconArrowThickTallLeft: () => IconArrowThickTallLeft,
  default: () => arrow_thick_tall_left_default
});
var IconArrowThickTallLeft, arrow_thick_tall_left_default;
var init_arrow_thick_tall_left = __esm({
  "lib/icons/arrow-thick-tall-left.ts"() {
    IconArrowThickTallLeft = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="45 45 63 45 63 27 45 27 45 13.5 9 36 45 58.5 45 45" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="45 45 63 45 63 27 45 27 45 13.5 9 36 45 58.5 45 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_tall_left_default = IconArrowThickTallLeft;
  }
});

// lib/icons/arrow-thick-tall-right-bottom.ts
var arrow_thick_tall_right_bottom_exports = {};
__export(arrow_thick_tall_right_bottom_exports, {
  IconArrowThickTallRightBottom: () => IconArrowThickTallRightBottom,
  default: () => arrow_thick_tall_right_bottom_default
});
var IconArrowThickTallRightBottom, arrow_thick_tall_right_bottom_default;
var init_arrow_thick_tall_right_bottom = __esm({
  "lib/icons/arrow-thick-tall-right-bottom.ts"() {
    IconArrowThickTallRightBottom = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="36 23.27 23.27 10.54 10.54 23.27 23.27 36 13.73 45.55 55.09 55.09 45.55 13.73 36 23.27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="36 23.27 23.27 10.54 10.54 23.27 23.27 36 13.73 45.55 55.09 55.09 45.55 13.73 36 23.27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_tall_right_bottom_default = IconArrowThickTallRightBottom;
  }
});

// lib/icons/arrow-thick-tall-right.ts
var arrow_thick_tall_right_exports = {};
__export(arrow_thick_tall_right_exports, {
  IconArrowThickTallRight: () => IconArrowThickTallRight,
  default: () => arrow_thick_tall_right_default
});
var IconArrowThickTallRight, arrow_thick_tall_right_default;
var init_arrow_thick_tall_right = __esm({
  "lib/icons/arrow-thick-tall-right.ts"() {
    IconArrowThickTallRight = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="27 27 9 27 9 45 27 45 27 58.5 63 36 27 13.5 27 27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="27 27 9 27 9 45 27 45 27 58.5 63 36 27 13.5 27 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_tall_right_default = IconArrowThickTallRight;
  }
});

// lib/icons/arrow-thick-tall-top-right.ts
var arrow_thick_tall_top_right_exports = {};
__export(arrow_thick_tall_top_right_exports, {
  IconArrowThickTallTopRight: () => IconArrowThickTallTopRight,
  default: () => arrow_thick_tall_top_right_default
});
var IconArrowThickTallTopRight, arrow_thick_tall_top_right_default;
var init_arrow_thick_tall_top_right = __esm({
  "lib/icons/arrow-thick-tall-top-right.ts"() {
    IconArrowThickTallTopRight = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="23.27 36 10.54 48.73 23.27 61.46 36 48.73 45.55 58.27 55.09 16.91 13.73 26.45 23.27 36" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="23.27 36 10.54 48.73 23.27 61.46 36 48.73 45.55 58.27 55.09 16.91 13.73 26.45 23.27 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_tall_top_right_default = IconArrowThickTallTopRight;
  }
});

// lib/icons/arrow-thick-tall-up.ts
var arrow_thick_tall_up_exports = {};
__export(arrow_thick_tall_up_exports, {
  IconArrowThickTallUp: () => IconArrowThickTallUp,
  default: () => arrow_thick_tall_up_default
});
var IconArrowThickTallUp, arrow_thick_tall_up_default;
var init_arrow_thick_tall_up = __esm({
  "lib/icons/arrow-thick-tall-up.ts"() {
    IconArrowThickTallUp = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="27 45 27 63 45 63 45 45 58.5 45 36 9 13.5 45 27 45" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="27 45 27 63 45 63 45 45 58.5 45 36 9 13.5 45 27 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_tall_up_default = IconArrowThickTallUp;
  }
});

// lib/icons/arrow-thick-top-right.ts
var arrow_thick_top_right_exports = {};
__export(arrow_thick_top_right_exports, {
  IconArrowThickTopRight: () => IconArrowThickTopRight,
  default: () => arrow_thick_top_right_default
});
var IconArrowThickTopRight, arrow_thick_top_right_default;
var init_arrow_thick_top_right = __esm({
  "lib/icons/arrow-thick-top-right.ts"() {
    IconArrowThickTopRight = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="28.05 33.48 15.32 46.2 28.05 58.93 40.77 46.2 50.32 55.75 50.32 23.93 18.5 23.93 28.05 33.48" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="28.05 33.48 15.32 46.2 28.05 58.93 40.77 46.2 50.32 55.75 50.32 23.93 18.5 23.93 28.05 33.48" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_top_right_default = IconArrowThickTopRight;
  }
});

// lib/icons/arrow-thick-up.ts
var arrow_thick_up_exports = {};
__export(arrow_thick_up_exports, {
  IconArrowThickUp: () => IconArrowThickUp,
  default: () => arrow_thick_up_default
});
var IconArrowThickUp, arrow_thick_up_default;
var init_arrow_thick_up = __esm({
  "lib/icons/arrow-thick-up.ts"() {
    IconArrowThickUp = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="27 40.5 27 58.5 45 58.5 45 40.5 58.5 40.5 36 18 13.5 40.5 27 40.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="27 40.5 27 58.5 45 58.5 45 40.5 58.5 40.5 36 18 13.5 40.5 27 40.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_up_default = IconArrowThickUp;
  }
});

// lib/icons/arrow-thick-wide-bottom-left.ts
var arrow_thick_wide_bottom_left_exports = {};
__export(arrow_thick_wide_bottom_left_exports, {
  IconArrowThickWideBottomLeft: () => IconArrowThickWideBottomLeft,
  default: () => arrow_thick_wide_bottom_left_default
});
var IconArrowThickWideBottomLeft, arrow_thick_wide_bottom_left_default;
var init_arrow_thick_wide_bottom_left = __esm({
  "lib/icons/arrow-thick-wide-bottom-left.ts"() {
    IconArrowThickWideBottomLeft = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="47.14 46.2 59.86 33.48 40.77 14.39 28.05 27.11 18.5 17.57 21.68 52.57 56.68 55.75 47.14 46.2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="47.14 46.2 59.86 33.48 40.77 14.39 28.05 27.11 18.5 17.57 21.68 52.57 56.68 55.75 47.14 46.2" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_wide_bottom_left_default = IconArrowThickWideBottomLeft;
  }
});

// lib/icons/arrow-thick-wide-down.ts
var arrow_thick_wide_down_exports = {};
__export(arrow_thick_wide_down_exports, {
  IconArrowThickWideDown: () => IconArrowThickWideDown,
  default: () => arrow_thick_wide_down_default
});
var IconArrowThickWideDown, arrow_thick_wide_down_default;
var init_arrow_thick_wide_down = __esm({
  "lib/icons/arrow-thick-wide-down.ts"() {
    IconArrowThickWideDown = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="49.5 36 49.5 18 22.5 18 22.5 36 9 36 36 58.5 63 36 49.5 36" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="49.5 36 49.5 18 22.5 18 22.5 36 9 36 36 58.5 63 36 49.5 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_wide_down_default = IconArrowThickWideDown;
  }
});

// lib/icons/arrow-thick-wide-left-top.ts
var arrow_thick_wide_left_top_exports = {};
__export(arrow_thick_wide_left_top_exports, {
  IconArrowThickWideLeftTop: () => IconArrowThickWideLeftTop,
  default: () => arrow_thick_wide_left_top_default
});
var IconArrowThickWideLeftTop, arrow_thick_wide_left_top_default;
var init_arrow_thick_wide_left_top = __esm({
  "lib/icons/arrow-thick-wide-left-top.ts"() {
    IconArrowThickWideLeftTop = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="28.05 49.39 40.77 62.11 59.86 43.02 47.14 30.3 56.68 20.75 21.68 23.93 18.5 58.93 28.05 49.39" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="28.05 49.39 40.77 62.11 59.86 43.02 47.14 30.3 56.68 20.75 21.68 23.93 18.5 58.93 28.05 49.39" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_wide_left_top_default = IconArrowThickWideLeftTop;
  }
});

// lib/icons/arrow-thick-wide-left.ts
var arrow_thick_wide_left_exports = {};
__export(arrow_thick_wide_left_exports, {
  IconArrowThickWideLeft: () => IconArrowThickWideLeft,
  default: () => arrow_thick_wide_left_default
});
var IconArrowThickWideLeft, arrow_thick_wide_left_default;
var init_arrow_thick_wide_left = __esm({
  "lib/icons/arrow-thick-wide-left.ts"() {
    IconArrowThickWideLeft = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="38.25 51.75 56.25 51.75 56.25 24.75 38.25 24.75 38.25 11.25 15.75 38.25 38.25 65.25 38.25 51.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="38.25 51.75 56.25 51.75 56.25 24.75 38.25 24.75 38.25 11.25 15.75 38.25 38.25 65.25 38.25 51.75" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_wide_left_default = IconArrowThickWideLeft;
  }
});

// lib/icons/arrow-thick-wide-right-bottom.ts
var arrow_thick_wide_right_bottom_exports = {};
__export(arrow_thick_wide_right_bottom_exports, {
  IconArrowThickWideRightBottom: () => IconArrowThickWideRightBottom,
  default: () => arrow_thick_wide_right_bottom_default
});
var IconArrowThickWideRightBottom, arrow_thick_wide_right_bottom_default;
var init_arrow_thick_wide_right_bottom = __esm({
  "lib/icons/arrow-thick-wide-right-bottom.ts"() {
    IconArrowThickWideRightBottom = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="43.95 27.11 31.23 14.39 12.14 33.48 24.86 46.2 15.32 55.75 50.32 52.57 53.5 17.57 43.95 27.11" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="43.95 27.11 31.23 14.39 12.14 33.48 24.86 46.2 15.32 55.75 50.32 52.57 53.5 17.57 43.95 27.11" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_wide_right_bottom_default = IconArrowThickWideRightBottom;
  }
});

// lib/icons/arrow-thick-wide-right.ts
var arrow_thick_wide_right_exports = {};
__export(arrow_thick_wide_right_exports, {
  IconArrowThickWideRight: () => IconArrowThickWideRight,
  default: () => arrow_thick_wide_right_default
});
var IconArrowThickWideRight, arrow_thick_wide_right_default;
var init_arrow_thick_wide_right = __esm({
  "lib/icons/arrow-thick-wide-right.ts"() {
    IconArrowThickWideRight = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="33.75 24.75 15.75 24.75 15.75 51.75 33.75 51.75 33.75 65.25 56.25 38.25 33.75 11.25 33.75 24.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="33.75 24.75 15.75 24.75 15.75 51.75 33.75 51.75 33.75 65.25 56.25 38.25 33.75 11.25 33.75 24.75" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_wide_right_default = IconArrowThickWideRight;
  }
});

// lib/icons/arrow-thick-wide-top-right.ts
var arrow_thick_wide_top_right_exports = {};
__export(arrow_thick_wide_top_right_exports, {
  IconArrowThickWideTopRight: () => IconArrowThickWideTopRight,
  default: () => arrow_thick_wide_top_right_default
});
var IconArrowThickWideTopRight, arrow_thick_wide_top_right_default;
var init_arrow_thick_wide_top_right = __esm({
  "lib/icons/arrow-thick-wide-top-right.ts"() {
    IconArrowThickWideTopRight = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="24.86 30.3 12.14 43.02 31.23 62.11 43.95 49.39 53.5 58.93 50.32 23.93 15.32 20.75 24.86 30.3" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="24.86 30.3 12.14 43.02 31.23 62.11 43.95 49.39 53.5 58.93 50.32 23.93 15.32 20.75 24.86 30.3" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_wide_top_right_default = IconArrowThickWideTopRight;
  }
});

// lib/icons/arrow-thick-wide-up.ts
var arrow_thick_wide_up_exports = {};
__export(arrow_thick_wide_up_exports, {
  IconArrowThickWideUp: () => IconArrowThickWideUp,
  default: () => arrow_thick_wide_up_default
});
var IconArrowThickWideUp, arrow_thick_wide_up_default;
var init_arrow_thick_wide_up = __esm({
  "lib/icons/arrow-thick-wide-up.ts"() {
    IconArrowThickWideUp = `<svg id="arrow-out-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="22.5 40.5 22.5 58.5 49.5 58.5 49.5 40.5 63 40.5 36 18 9 40.5 22.5 40.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="22.5 40.5 22.5 58.5 49.5 58.5 49.5 40.5 63 40.5 36 18 9 40.5 22.5 40.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_thick_wide_up_default = IconArrowThickWideUp;
  }
});

// lib/icons/arrow-transfer-bl-tr.ts
var arrow_transfer_bl_tr_exports = {};
__export(arrow_transfer_bl_tr_exports, {
  IconArrowTransferBlTr: () => IconArrowTransferBlTr,
  default: () => arrow_transfer_bl_tr_default
});
var IconArrowTransferBlTr, arrow_transfer_bl_tr_default;
var init_arrow_transfer_bl_tr = __esm({
  "lib/icons/arrow-transfer-bl-tr.ts"() {
    IconArrowTransferBlTr = `<svg id="arrow-transfer-bl-tr" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="26.45 58.27 58.27 26.45 58.27 45.55" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.73 26.45 13.73 45.55 45.55 13.73" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_transfer_bl_tr_default = IconArrowTransferBlTr;
  }
});

// lib/icons/arrow-transfer-left-right.ts
var arrow_transfer_left_right_exports = {};
__export(arrow_transfer_left_right_exports, {
  IconArrowTransferLeftRight: () => IconArrowTransferLeftRight,
  default: () => arrow_transfer_left_right_default
});
var IconArrowTransferLeftRight, arrow_transfer_left_right_default;
var init_arrow_transfer_left_right = __esm({
  "lib/icons/arrow-transfer-left-right.ts"() {
    IconArrowTransferLeftRight = `<svg id="arrow-transfer-left-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="13.5 45 58.5 45 45 58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 13.5 13.5 27 58.5 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_transfer_left_right_default = IconArrowTransferLeftRight;
  }
});

// lib/icons/arrow-transfer-lt-br.ts
var arrow_transfer_lt_br_exports = {};
__export(arrow_transfer_lt_br_exports, {
  IconArrowTransferLtBr: () => IconArrowTransferLtBr,
  default: () => arrow_transfer_lt_br_default
});
var IconArrowTransferLtBr, arrow_transfer_lt_br_default;
var init_arrow_transfer_lt_br = __esm({
  "lib/icons/arrow-transfer-lt-br.ts"() {
    IconArrowTransferLtBr = `<svg id="arrow-transfer-lt-br" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="58.27 45.32 26.45 13.5 45.55 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="26.45 58.05 45.55 58.05 13.73 26.23" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_transfer_lt_br_default = IconArrowTransferLtBr;
  }
});

// lib/icons/arrow-transfer-up-down.ts
var arrow_transfer_up_down_exports = {};
__export(arrow_transfer_up_down_exports, {
  IconArrowTransferUpDown: () => IconArrowTransferUpDown,
  default: () => arrow_transfer_up_down_default
});
var IconArrowTransferUpDown, arrow_transfer_up_down_default;
var init_arrow_transfer_up_down = __esm({
  "lib/icons/arrow-transfer-up-down.ts"() {
    IconArrowTransferUpDown = `<svg id="arrow-transfer-up-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="45 58.5 45 13.5 58.5 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 45 27 58.5 27 13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_transfer_up_down_default = IconArrowTransferUpDown;
  }
});

// lib/icons/arrow-twoway-diagonal-lr.ts
var arrow_twoway_diagonal_lr_exports = {};
__export(arrow_twoway_diagonal_lr_exports, {
  IconArrowTwowayDiagonalLr: () => IconArrowTwowayDiagonalLr,
  default: () => arrow_twoway_diagonal_lr_default
});
var IconArrowTwowayDiagonalLr, arrow_twoway_diagonal_lr_default;
var init_arrow_twoway_diagonal_lr = __esm({
  "lib/icons/arrow-twoway-diagonal-lr.ts"() {
    IconArrowTwowayDiagonalLr = `<svg id="arrow-twoway-diagonal-lr" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.73" y1="32.82" x2="42.36" y2="61.46" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="29.64 61.46 42.36 61.46 42.36 48.73" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.27" y1="39.18" x2="29.64" y2="10.54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="42.36 10.54 29.64 10.54 29.64 23.27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_twoway_diagonal_lr_default = IconArrowTwowayDiagonalLr;
  }
});

// lib/icons/arrow-twoway-diagonal-rl.ts
var arrow_twoway_diagonal_rl_exports = {};
__export(arrow_twoway_diagonal_rl_exports, {
  IconArrowTwowayDiagonalRl: () => IconArrowTwowayDiagonalRl,
  default: () => arrow_twoway_diagonal_rl_default
});
var IconArrowTwowayDiagonalRl, arrow_twoway_diagonal_rl_default;
var init_arrow_twoway_diagonal_rl = __esm({
  "lib/icons/arrow-twoway-diagonal-rl.ts"() {
    IconArrowTwowayDiagonalRl = `<svg id="arrow-twoway-diagonal-rl" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="39.18" y1="13.73" x2="10.54" y2="42.36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="10.54 29.64 10.54 42.36 23.27 42.36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="32.82" y1="58.27" x2="61.46" y2="29.64" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="61.46 42.36 61.46 29.64 48.73 29.64" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_twoway_diagonal_rl_default = IconArrowTwowayDiagonalRl;
  }
});

// lib/icons/arrow-twoway-horizontal.ts
var arrow_twoway_horizontal_exports = {};
__export(arrow_twoway_horizontal_exports, {
  IconArrowTwowayHorizontal: () => IconArrowTwowayHorizontal,
  default: () => arrow_twoway_horizontal_default
});
var IconArrowTwowayHorizontal, arrow_twoway_horizontal_default;
var init_arrow_twoway_horizontal = __esm({
  "lib/icons/arrow-twoway-horizontal.ts"() {
    IconArrowTwowayHorizontal = `<svg id="arrow-twoway-horizontal" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="54" y1="22.5" x2="13.5" y2="22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 13.5 13.5 22.5 22.5 31.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="49.5" x2="58.5" y2="49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 58.5 58.5 49.5 49.5 40.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_twoway_horizontal_default = IconArrowTwowayHorizontal;
  }
});

// lib/icons/arrow-twoway-vertical.ts
var arrow_twoway_vertical_exports = {};
__export(arrow_twoway_vertical_exports, {
  IconArrowTwowayVertical: () => IconArrowTwowayVertical,
  default: () => arrow_twoway_vertical_default
});
var IconArrowTwowayVertical, arrow_twoway_vertical_default;
var init_arrow_twoway_vertical = __esm({
  "lib/icons/arrow-twoway-vertical.ts"() {
    IconArrowTwowayVertical = `<svg id="arrow-twoway-vertical" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="22.5" y1="18" x2="22.5" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 49.5 22.5 58.5 31.5 49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="54" x2="49.5" y2="13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.5 22.5 49.5 13.5 40.5 22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_twoway_vertical_default = IconArrowTwowayVertical;
  }
});

// lib/icons/arrow-up-copy.ts
var arrow_up_copy_exports = {};
__export(arrow_up_copy_exports, {
  IconArrowUpCopy: () => IconArrowUpCopy,
  default: () => arrow_up_copy_default
});
var IconArrowUpCopy, arrow_up_copy_default;
var init_arrow_up_copy = __esm({
  "lib/icons/arrow-up-copy.ts"() {
    IconArrowUpCopy = `<svg id="arrow-up_copy" data-name="arrow-up copy" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="58.5" x2="36" y2="22.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="13.5" x2="22.5" y2="13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 36 36 22.5 49.5 36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_up_copy_default = IconArrowUpCopy;
  }
});

// lib/icons/arrow-up-down-split.ts
var arrow_up_down_split_exports = {};
__export(arrow_up_down_split_exports, {
  IconArrowUpDownSplit: () => IconArrowUpDownSplit,
  default: () => arrow_up_down_split_default
});
var IconArrowUpDownSplit, arrow_up_down_split_default;
var init_arrow_up_down_split = __esm({
  "lib/icons/arrow-up-down-split.ts"() {
    IconArrowUpDownSplit = `<svg id="arrow-up-down-split" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="26.88 54.24 36 63.12 44.88 54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45.12 18 36 9.12 27.12 18.24" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="9.12" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="63.12" x2="36" y2="45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_up_down_split_default = IconArrowUpDownSplit;
  }
});

// lib/icons/arrow-up-down-stop.ts
var arrow_up_down_stop_exports = {};
__export(arrow_up_down_stop_exports, {
  IconArrowUpDownStop: () => IconArrowUpDownStop,
  default: () => arrow_up_down_stop_default
});
var IconArrowUpDownStop, arrow_up_down_stop_default;
var init_arrow_up_down_stop = __esm({
  "lib/icons/arrow-up-down-stop.ts"() {
    IconArrowUpDownStop = `<svg id="arrow-up-down-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="26.88 54.24 36 63.12 44.88 54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45.12 18 36 9.12 27.12 18.24" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="9.12" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="63.12" x2="36" y2="49.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="36" x2="49.5" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_up_down_stop_default = IconArrowUpDownStop;
  }
});

// lib/icons/arrow-up-down.ts
var arrow_up_down_exports = {};
__export(arrow_up_down_exports, {
  IconArrowUpDown: () => IconArrowUpDown,
  default: () => arrow_up_down_default
});
var IconArrowUpDown, arrow_up_down_default;
var init_arrow_up_down = __esm({
  "lib/icons/arrow-up-down.ts"() {
    IconArrowUpDown = `<svg id="arrow-up-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="26.88 54.24 36 63.12 44.88 54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45.12 18 36 9.12 27.12 18.24" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="63.12" x2="36" y2="9.12" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_up_down_default = IconArrowUpDown;
  }
});

// lib/icons/arrow-up-left.ts
var arrow_up_left_exports = {};
__export(arrow_up_left_exports, {
  IconArrowUpLeft: () => IconArrowUpLeft,
  default: () => arrow_up_left_default
});
var IconArrowUpLeft, arrow_up_left_default;
var init_arrow_up_left = __esm({
  "lib/icons/arrow-up-left.ts"() {
    IconArrowUpLeft = `<svg id="arrow-up-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="49.82" y1="49.82" x2="18" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="37.09 18 18 18 18 37.09" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_up_left_default = IconArrowUpLeft;
  }
});

// lib/icons/arrow-up-right.ts
var arrow_up_right_exports = {};
__export(arrow_up_right_exports, {
  IconArrowUpRight: () => IconArrowUpRight,
  default: () => arrow_up_right_default
});
var IconArrowUpRight, arrow_up_right_default;
var init_arrow_up_right = __esm({
  "lib/icons/arrow-up-right.ts"() {
    IconArrowUpRight = `<svg id="arrow-up-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="22.18" y1="49.82" x2="54" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="54 37.09 54 18 34.91 18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_up_right_default = IconArrowUpRight;
  }
});

// lib/icons/arrow-up.ts
var arrow_up_exports = {};
__export(arrow_up_exports, {
  IconArrowUp: () => IconArrowUp,
  default: () => arrow_up_default
});
var IconArrowUp, arrow_up_default;
var init_arrow_up = __esm({
  "lib/icons/arrow-up.ts"() {
    IconArrowUp = `<svg id="arrow-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="58.5" x2="36" y2="13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 27 36 13.5 22.5 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_up_default = IconArrowUp;
  }
});

// lib/icons/arrow-upload.ts
var arrow_upload_exports = {};
__export(arrow_upload_exports, {
  IconArrowUpload: () => IconArrowUpload,
  default: () => arrow_upload_default
});
var IconArrowUpload, arrow_upload_default;
var init_arrow_upload = __esm({
  "lib/icons/arrow-upload.ts"() {
    IconArrowUpload = `<svg id="arrow-upload" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="49.5" x2="36" y2="13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,49.5l-1.74,3.47c-1.69,3.39-5.16,5.53-8.94,5.53H19.68c-3.79,0-7.25-2.14-8.94-5.53l-1.74-3.47" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 27 36 13.5 22.5 27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    arrow_upload_default = IconArrowUpload;
  }
});

// lib/icons/chevron-connect2.ts
var chevron_connect2_exports = {};
__export(chevron_connect2_exports, {
  IconChevronConnect2: () => IconChevronConnect2,
  default: () => chevron_connect2_default
});
var IconChevronConnect2, chevron_connect2_default;
var init_chevron_connect2 = __esm({
  "lib/icons/chevron-connect2.ts"() {
    IconChevronConnect2 = `<svg id="chevron-connect_2" data-name="chevron-connect 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="9.34 13.61 27.23 31.5 45.11 13.61" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="62.66 58.16 45 40.5 27.34 58.16" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chevron_connect2_default = IconChevronConnect2;
  }
});

// lib/icons/chevron-connect.ts
var chevron_connect_exports = {};
__export(chevron_connect_exports, {
  IconChevronConnect: () => IconChevronConnect,
  default: () => chevron_connect_default
});
var IconChevronConnect, chevron_connect_default;
var init_chevron_connect = __esm({
  "lib/icons/chevron-connect.ts"() {
    IconChevronConnect = `<svg id="chevron-connect" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="58.27 9.23 40.39 27.11 58.27 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.73 62.55 31.39 44.89 13.73 27.23" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chevron_connect_default = IconChevronConnect;
  }
});

// lib/icons/chevron-disconnect2.ts
var chevron_disconnect2_exports = {};
__export(chevron_disconnect2_exports, {
  IconChevronDisconnect2: () => IconChevronDisconnect2,
  default: () => chevron_disconnect2_default
});
var IconChevronDisconnect2, chevron_disconnect2_default;
var init_chevron_disconnect2 = __esm({
  "lib/icons/chevron-disconnect2.ts"() {
    IconChevronDisconnect2 = `<svg id="chevron-disconnect_2" data-name="chevron-disconnect 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="9.23 40.27 27.11 58.16 45 40.27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="62.55 31.27 44.89 13.61 27.23 31.27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chevron_disconnect2_default = IconChevronDisconnect2;
  }
});

// lib/icons/chevron-disconnect.ts
var chevron_disconnect_exports = {};
__export(chevron_disconnect_exports, {
  IconChevronDisconnect: () => IconChevronDisconnect,
  default: () => chevron_disconnect_default
});
var IconChevronDisconnect, chevron_disconnect_default;
var init_chevron_disconnect = __esm({
  "lib/icons/chevron-disconnect.ts"() {
    IconChevronDisconnect = `<svg id="chevron-disconnect" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="31.5 9.23 13.61 27.11 31.5 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="40.5 62.55 58.16 44.89 40.5 27.23" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chevron_disconnect_default = IconChevronDisconnect;
  }
});

// lib/icons/chevron-double-down.ts
var chevron_double_down_exports = {};
__export(chevron_double_down_exports, {
  IconChevronDoubleDown: () => IconChevronDoubleDown,
  default: () => chevron_double_down_default
});
var IconChevronDoubleDown, chevron_double_down_default;
var init_chevron_double_down = __esm({
  "lib/icons/chevron-double-down.ts"() {
    IconChevronDoubleDown = `<svg id="chevron-double-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="13.95 36.23 36.23 58.5 58.5 36.23" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="16.67 21.19 36.23 40.74 55.78 21.19" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chevron_double_down_default = IconChevronDoubleDown;
  }
});

// lib/icons/chevron-double-left.ts
var chevron_double_left_exports = {};
__export(chevron_double_left_exports, {
  IconChevronDoubleLeft: () => IconChevronDoubleLeft,
  default: () => chevron_double_left_default
});
var IconChevronDoubleLeft, chevron_double_left_default;
var init_chevron_double_left = __esm({
  "lib/icons/chevron-double-left.ts"() {
    IconChevronDoubleLeft = `<svg id="chevron-double-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="35.77 13.73 13.5 36 35.77 58.27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="50.83 16.22 31.05 36 50.83 55.78" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chevron_double_left_default = IconChevronDoubleLeft;
  }
});

// lib/icons/chevron-double-right.ts
var chevron_double_right_exports = {};
__export(chevron_double_right_exports, {
  IconChevronDoubleRight: () => IconChevronDoubleRight,
  default: () => chevron_double_right_default
});
var IconChevronDoubleRight, chevron_double_right_default;
var init_chevron_double_right = __esm({
  "lib/icons/chevron-double-right.ts"() {
    IconChevronDoubleRight = `<svg id="chevron-double-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="36.23 58.5 58.5 36.23 36.23 13.95" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="21.2 55.77 40.75 36.23 21.2 16.68" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chevron_double_right_default = IconChevronDoubleRight;
  }
});

// lib/icons/chevron-double-up.ts
var chevron_double_up_exports = {};
__export(chevron_double_up_exports, {
  IconChevronDoubleUp: () => IconChevronDoubleUp,
  default: () => chevron_double_up_default
});
var IconChevronDoubleUp, chevron_double_up_default;
var init_chevron_double_up = __esm({
  "lib/icons/chevron-double-up.ts"() {
    IconChevronDoubleUp = `<svg id="chevron-double-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="56.2 51.26 36.23 31.29 16.26 51.26" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.5 35.77 36.23 13.5 13.95 35.77" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chevron_double_up_default = IconChevronDoubleUp;
  }
});

// lib/icons/chevron-down.ts
var chevron_down_exports = {};
__export(chevron_down_exports, {
  IconChevronDown: () => IconChevronDown,
  default: () => chevron_down_default
});
var IconChevronDown, chevron_down_default;
var init_chevron_down = __esm({
  "lib/icons/chevron-down.ts"() {
    IconChevronDown = `<svg id="chevron-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="13.95 27.23 36.23 49.5 58.5 27.23" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chevron_down_default = IconChevronDown;
  }
});

// lib/icons/chevron-left.ts
var chevron_left_exports = {};
__export(chevron_left_exports, {
  IconChevronLeft: () => IconChevronLeft,
  default: () => chevron_left_default
});
var IconChevronLeft, chevron_left_default;
var init_chevron_left = __esm({
  "lib/icons/chevron-left.ts"() {
    IconChevronLeft = `<svg id="chevron-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="44.77 13.73 22.5 36 44.77 58.27" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chevron_left_default = IconChevronLeft;
  }
});

// lib/icons/chevron-right.ts
var chevron_right_exports = {};
__export(chevron_right_exports, {
  IconChevronRight: () => IconChevronRight,
  default: () => chevron_right_default
});
var IconChevronRight, chevron_right_default;
var init_chevron_right = __esm({
  "lib/icons/chevron-right.ts"() {
    IconChevronRight = `<svg id="chevron-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="27.23 58.5 49.5 36.23 27.23 13.95" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chevron_right_default = IconChevronRight;
  }
});

// lib/icons/chevron-up.ts
var chevron_up_exports = {};
__export(chevron_up_exports, {
  IconChevronUp: () => IconChevronUp,
  default: () => chevron_up_default
});
var IconChevronUp, chevron_up_default;
var init_chevron_up = __esm({
  "lib/icons/chevron-up.ts"() {
    IconChevronUp = `<svg id="chevron-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="58.5 45 36.23 22.73 13.95 45" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chevron_up_default = IconChevronUp;
  }
});

// lib/icons/icon01.ts
var icon01_exports = {};
__export(icon01_exports, {
  IconIcon01: () => IconIcon01,
  default: () => icon01_default
});
var IconIcon01, icon01_default;
var init_icon01 = __esm({
  "lib/icons/icon01.ts"() {
    IconIcon01 = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 595.28 841.89"/>`;
    icon01_default = IconIcon01;
  }
});

// lib/icons/bottle.ts
var bottle_exports = {};
__export(bottle_exports, {
  IconBottle: () => IconBottle,
  default: () => bottle_default
});
var IconBottle, bottle_default;
var init_bottle = __esm({
  "lib/icons/bottle.ts"() {
    IconBottle = `<svg id="Bottle" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,28.21v-14.71h-9v14.71c-2.69,1.56-4.5,4.46-4.5,7.79v27h18v-27c0-3.33-1.81-6.23-4.5-7.79Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    bottle_default = IconBottle;
  }
});

// lib/icons/bottles.ts
var bottles_exports = {};
__export(bottles_exports, {
  IconBottles: () => IconBottles,
  default: () => bottles_default
});
var IconBottles, bottles_default;
var init_bottles = __esm({
  "lib/icons/bottles.ts"() {
    IconBottles = `<svg id="Bottles" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M27,28.21v-14.71h-9v14.71c-2.69,1.56-4.5,4.46-4.5,7.79v27h18v-27c0-3.33-1.81-6.23-4.5-7.79Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,28.21v-14.71h-9v14.71c-2.69,1.56-4.5,4.46-4.5,7.79v27h18v-27c0-3.33-1.81-6.23-4.5-7.79Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    bottles_default = IconBottles;
  }
});

// lib/icons/bread-slice.ts
var bread_slice_exports = {};
__export(bread_slice_exports, {
  IconBreadSlice: () => IconBreadSlice,
  default: () => bread_slice_default
});
var IconBreadSlice, bread_slice_default;
var init_bread_slice = __esm({
  "lib/icons/bread-slice.ts"() {
    IconBreadSlice = `<svg id="bread_slice" data-name="bread slice" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M58.5,24.75c0-6.21-5.04-11.25-11.25-11.25s-11.25,4.5-11.25,4.5c0,0-5.04-4.5-11.25-4.5s-11.25,5.04-11.25,11.25c0,4.16,2.27,7.79,5.62,9.73v24.02h33.75v-24.02c3.36-1.95,5.62-5.57,5.62-9.73Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,24.75c0-6.21-5.04-11.25-11.25-11.25s-11.25,4.5-11.25,4.5c0,0-5.04-4.5-11.25-4.5s-11.25,5.04-11.25,11.25c0,4.16,2.27,7.79,5.62,9.73v24.02h33.75v-24.02c3.36-1.95,5.62-5.57,5.62-9.73Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    bread_slice_default = IconBreadSlice;
  }
});

// lib/icons/coffee-cup.ts
var coffee_cup_exports = {};
__export(coffee_cup_exports, {
  IconCoffeeCup: () => IconCoffeeCup,
  default: () => coffee_cup_default
});
var IconCoffeeCup, coffee_cup_default;
var init_coffee_cup = __esm({
  "lib/icons/coffee-cup.ts"() {
    IconCoffeeCup = `<svg id="coffee_cup" data-name="coffee cup" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.5,36c0,12.43,0,22.5,20.25,22.5s20.25-10.07,20.25-22.5H13.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M13.5,36c0,12.43,0,22.5,20.25,22.5s20.25-10.07,20.25-22.5H13.5Z" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M24.32,12c.31,9,6.96,6,6.96,15" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M35.79,9c.31,9,6.96,6,6.96,15" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M56.25,36h2.25c.79,0,1.55.14,2.25.38,2.62.93,4.5,3.43,4.5,6.37,0,3.73-3.02,6.75-6.75,6.75h-2.25" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    coffee_cup_default = IconCoffeeCup;
  }
});

// lib/icons/coffee-machine.ts
var coffee_machine_exports = {};
__export(coffee_machine_exports, {
  IconCoffeeMachine: () => IconCoffeeMachine,
  default: () => coffee_machine_default
});
var IconCoffeeMachine, coffee_machine_default;
var init_coffee_machine = __esm({
  "lib/icons/coffee-machine.ts"() {
    IconCoffeeMachine = `<svg id="coffee_machine" data-name="coffee machine" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18.19,49.5c-.14,1.17-.05,2.35.36,3.46,1.65,4.5,6.82,5.55,12.95,5.55s11.3-1.04,12.95-5.55c.61-1.67.53-3.51-.03-5.19l-1.61-4.82h-.68c-13.33,0-13.41,6.47-23.94,6.55Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M22.5,13v10c0,2.21,1.79,4,4,4h27.5v36H18h45V13c0-2.21-1.79-4-4-4H26.5c-2.21,0-4,1.79-4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="49.5" y1="18" x2="49.5" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,13v10c0,2.21,1.79,4,4,4h27.5v36H18h45V13c0-2.21-1.79-4-4-4H26.5c-2.21,0-4,1.79-4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M44.42,47.76c.56,1.68.64,3.53.03,5.19-1.65,4.5-6.82,5.55-12.95,5.55s-11.3-1.04-12.95-5.55c-.61-1.67-.53-3.51.03-5.19l3.92-11.76h18l3.92,11.76Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,49.5c10.73,0,10.73-6.56,24.14-6.56" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,36h-9.5c-2.21,0-4,1.79-4,4v10c0,2.21,1.79,4,4,4h5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    coffee_machine_default = IconCoffeeMachine;
  }
});

// lib/icons/coffee-beans.ts
var coffee_beans_exports = {};
__export(coffee_beans_exports, {
  IconCoffeeBeans: () => IconCoffeeBeans,
  default: () => coffee_beans_default
});
var IconCoffeeBeans, coffee_beans_default;
var init_coffee_beans = __esm({
  "lib/icons/coffee-beans.ts"() {
    IconCoffeeBeans = `<svg id="coffee-beans" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M36,27.24c0,10.41-5.04,13.46-11.25,13.46s-11.25-3.05-11.25-13.46,5.04-13.95,11.25-13.95,11.25,3.54,11.25,13.95Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M23.74,40.7c4.91-13.43-1.95-10.14,4.19-26.92" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M58.5,45.44c0,10.25-5.04,13.26-11.25,13.26s-11.25-3.01-11.25-13.26,5.04-13.74,11.25-13.74,11.25,3.49,11.25,13.74Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M46.24,58.7c4.91-13.23-1.95-9.99,4.19-26.52" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M36,27.24c0,10.41-5.04,13.46-11.25,13.46s-11.25-3.05-11.25-13.46,5.04-13.95,11.25-13.95,11.25,3.54,11.25,13.95Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M23.74,40.7c4.91-13.43-1.95-10.14,4.19-26.92" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,45.44c0,10.25-5.04,13.26-11.25,13.26s-11.25-3.01-11.25-13.26,5.04-13.74,11.25-13.74,11.25,3.49,11.25,13.74Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M46.24,58.7c4.91-13.23-1.95-9.99,4.19-26.52" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    coffee_beans_default = IconCoffeeBeans;
  }
});

// lib/icons/cognac-glass.ts
var cognac_glass_exports = {};
__export(cognac_glass_exports, {
  IconCognacGlass: () => IconCognacGlass,
  default: () => cognac_glass_default
});
var IconCognacGlass, cognac_glass_default;
var init_cognac_glass = __esm({
  "lib/icons/cognac-glass.ts"() {
    IconCognacGlass = `<svg id="cognac_glass" data-name="cognac glass" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M16.27,41.25c2.54,6.65,9.58,8.22,17.88,8.22s15.66-1.63,18.05-8.64c.26-.75.44-1.79.55-2.97.2-2.13.13-4.27-.18-6.37l-.38-.02c-19.97,0-20,9.74-35.92,9.78Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M51.56,25.93c1.35,3.79,1.94,7.9,1.56,11.96-.11,1.17-.29,2.21-.55,2.97-2.39,7.01-9.57,8.64-18.05,8.64s-15.66-1.63-18.05-8.64c-.26-.75-.44-1.79-.55-2.97-.38-4.07.21-8.18,1.56-11.96l4.43-12.43h25.2l4.43,12.43Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M16.57,41.28c16,0,16-9.78,36-9.78" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="34.57" y1="58.5" x2="34.44" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="25.57" y1="58.5" x2="43.57" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cognac_glass_default = IconCognacGlass;
  }
});

// lib/icons/espress-machine2.ts
var espress_machine2_exports = {};
__export(espress_machine2_exports, {
  IconEspressMachine2: () => IconEspressMachine2,
  default: () => espress_machine2_default
});
var IconEspressMachine2, espress_machine2_default;
var init_espress_machine2 = __esm({
  "lib/icons/espress-machine2.ts"() {
    IconEspressMachine2 = `<svg id="espress_machine_2" data-name="espress machine 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M45,27l-4.5,9h-9l-4.5-9h-13.5v36h45V27h-13.5ZM42.75,54c0,3.73-3.02,6.75-6.75,6.75s-6.75-3.02-6.75-6.75v-4.5h13.5v4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="9" width="54" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="9" width="54" height="18" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="63" x2="13.5" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="63" x2="58.5" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 27 31.5 36 40.5 36 45 27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M29.25,54v-4.5h13.5v4.5c0,3.73-3.02,6.75-6.75,6.75s-6.75-3.02-6.75-6.75Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="63" x2="63" y2="63" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="47" x2="36" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="18" x2="45" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="18" x2="54" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    espress_machine2_default = IconEspressMachine2;
  }
});

// lib/icons/espresso-machine-e61.ts
var espresso_machine_e61_exports = {};
__export(espresso_machine_e61_exports, {
  IconEspressoMachineE61: () => IconEspressoMachineE61,
  default: () => espresso_machine_e61_default
});
var IconEspressoMachineE61, espresso_machine_e61_default;
var init_espresso_machine_e61 = __esm({
  "lib/icons/espresso-machine-e61.ts"() {
    IconEspressoMachineE61 = `<svg id="espresso_machine_e61" data-name="espresso machine e61" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.5,9v45h45V9H13.5ZM42.75,36.37v5c0,2.21-1.79,4-4,4h-5.5c-2.21,0-4-1.79-4-4v-5h-.75l2.32-9.76c1.3-5.45,9.05-5.45,10.35,0l2.32,9.76h-.75Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="54" width="54" height="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="54" width="54" height="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="13.5 49.5 13.5 9 58.5 9 58.5 54 13.5 54 13.5 49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="18" x2="22.5" y2="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="18" x2="49.5" y2="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="47.25" y1="36.37" x2="24.75" y2="36.37" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M28.5,36.37l2.32-9.76c1.3-5.45,9.05-5.45,10.35,0l2.32,9.76" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M29.25,36.37h13.5v5c0,2.21-1.79,4-4,4h-5.5c-2.21,0-4-1.79-4-4v-5h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="45" y1="40.87" x2="63" y2="40.87" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    espresso_machine_e61_default = IconEspressoMachineE61;
  }
});

// lib/icons/espresso-machine.ts
var espresso_machine_exports = {};
__export(espresso_machine_exports, {
  IconEspressoMachine: () => IconEspressoMachine,
  default: () => espresso_machine_default
});
var IconEspressoMachine, espresso_machine_default;
var init_espresso_machine = __esm({
  "lib/icons/espresso-machine.ts"() {
    IconEspressoMachine = `<svg id="espresso_machine" data-name="espresso machine" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="47.25 27 47.25 36 42.75 36 42.75 45 29.25 45 29.25 36 24.75 36 24.75 27 13.5 27 18 54 54 54 58.5 27 47.25 27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="54" width="54" height="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17,9h38c4.42,0,8,3.58,8,8v10H9v-10c0-4.42,3.58-8,8-8Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="54" width="54" height="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="18" x2="18" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="18" x2="27" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17,9h38c4.42,0,8,3.58,8,8v10H9v-10c0-4.42,3.58-8,8-8Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="27" x2="18" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="27" x2="54" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="24.75" y="27" width="22.5" height="9" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="29.25" y="36" width="13.5" height="9" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.75" y1="40.5" x2="60.75" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    espresso_machine_default = IconEspressoMachine;
  }
});

// lib/icons/espresso-pistol.ts
var espresso_pistol_exports = {};
__export(espresso_pistol_exports, {
  IconEspressoPistol: () => IconEspressoPistol,
  default: () => espresso_pistol_default
});
var IconEspressoPistol, espresso_pistol_default;
var init_espresso_pistol = __esm({
  "lib/icons/espresso-pistol.ts"() {
    IconEspressoPistol = `<svg id="espresso_pistol" data-name="espresso pistol" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><circle cx="50.25" cy="21.75" r="11.25" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M30.09,32.36l9.55,9.55-19.09,19.09c-2.64,2.64-6.91,2.64-9.55,0h0c-2.64-2.64-2.64-6.91,0-9.55l19.09-19.09Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><polyline points="44.14 34.23 38.05 40.31 31.69 33.95 37.77 27.86" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><polyline points="43.88 9.03 43.88 9.03 37.52 15.39 37.52 15.39" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><polyline points="56.61 34.48 56.61 34.48 62.97 28.12 62.97 28.12" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><circle cx="50.25" cy="21.75" r="11.25" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30.09,32.36l9.55,9.55-19.09,19.09c-2.64,2.64-6.91,2.64-9.55,0h0c-2.64-2.64-2.64-6.91,0-9.55l19.09-19.09Z" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="44.14 34.23 38.05 40.31 31.69 33.95 37.77 27.86" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="43.88 9.03 43.88 9.03 37.52 15.39 37.52 15.39" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="56.61 34.48 56.61 34.48 62.97 28.12 62.97 28.12" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    espresso_pistol_default = IconEspressoPistol;
  }
});

// lib/icons/hamburger.ts
var hamburger_exports = {};
__export(hamburger_exports, {
  IconHamburger: () => IconHamburger,
  default: () => hamburger_default
});
var IconHamburger, hamburger_default;
var init_hamburger = __esm({
  "lib/icons/hamburger.ts"() {
    IconHamburger = `<svg id="hamburger" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M9,29.25h54s0-18-27-18S9,29.25,9,29.25Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M9,51.75q0,9,27,9t27-9H9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M9,28.5h54s0-18-27-18S9,28.5,9,28.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,51q0,9,27,9t27-9H9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,42c-6.75,0-6.75-3.38-13.5-3.38-6.75,0-6.75,3.38-13.5,3.38s-6.75-3.38-13.5-3.38c-6.75,0-6.75,3.38-13.5,3.38" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    hamburger_default = IconHamburger;
  }
});

// lib/icons/perculator.ts
var perculator_exports = {};
__export(perculator_exports, {
  IconPerculator: () => IconPerculator,
  default: () => perculator_default
});
var IconPerculator, perculator_default;
var init_perculator = __esm({
  "lib/icons/perculator.ts"() {
    IconPerculator = `<svg id="perculator" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="49.5 40.5 63 18 54 18 54 9 22.5 9 22.5 18 27 40.5 27 49.5 22.5 63 27 63 49.5 63 54 63 49.5 49.5 49.5 40.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="13.5 36 13.5 18 22.5 18" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="18" x2="36" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="49.5" x2="45" y2="63" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="63" x2="36" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="40.5" x2="45" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="54 18 54 9 22.5 9 22.5 18 27 40.5 27 49.5 22.5 63 27 63 49.5 63 54 63 49.5 49.5 49.5 40.5 54 18" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 18 54 18 63 18 49.5 40.5 27 40.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="49.5" x2="49.5" y2="49.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    perculator_default = IconPerculator;
  }
});

// lib/icons/wine-glass.ts
var wine_glass_exports = {};
__export(wine_glass_exports, {
  IconWineGlass: () => IconWineGlass,
  default: () => wine_glass_default
});
var IconWineGlass, wine_glass_default;
var init_wine_glass = __esm({
  "lib/icons/wine-glass.ts"() {
    IconWineGlass = `<svg id="wine_glass" data-name="wine glass" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M21.85,32.79c1.76,4.62,6.65,5.71,12.42,5.71s10.87-1.13,12.53-6c.18-.52.3-1.25.38-2.06.14-1.48.09-2.98-.13-4.44h-.26c-13.87,0-13.89,6.77-24.95,6.79Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M46.35,22.13c.94,2.63,1.35,5.48,1.09,8.31-.08.81-.2,1.54-.38,2.06-1.66,4.87-6.65,6-12.53,6s-10.87-1.13-12.53-6c-.18-.52-.3-1.25-.38-2.06-.26-2.82.15-5.68,1.09-8.31l3.08-8.63h17.5l3.08,8.63Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.05,32.79c11.11,0,11.11-6.79,25-6.79" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="34.57" y1="58.5" x2="34.43" y2="38.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="24.57" y1="58.5" x2="44.57" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    wine_glass_default = IconWineGlass;
  }
});

// lib/icons/alarm-bell2.ts
var alarm_bell2_exports = {};
__export(alarm_bell2_exports, {
  IconAlarmBell2: () => IconAlarmBell2,
  default: () => alarm_bell2_default
});
var IconAlarmBell2, alarm_bell2_default;
var init_alarm_bell2 = __esm({
  "lib/icons/alarm-bell2.ts"() {
    IconAlarmBell2 = `<svg id="alarm-bell-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M46.34,21.16c-6.33-6.33-14.44-4.89-24.18,1.27l-13.48,8.53c-1.08.69-1.25,2.2-.34,3.1l12.55,12.55,12.55,12.55c.91.91,2.42.74,3.1-.34l8.53-13.48c6.17-9.75,7.6-17.86,1.27-24.18h0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M27.25,52.98c-3.51,3.51-9.21,3.51-12.73,0s-3.51-9.21,0-12.73" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M46.34,21.16c-6.33-6.33-14.44-4.89-24.18,1.27l-13.48,8.53c-1.08.69-1.25,2.2-.34,3.1l12.55,12.55,12.55,12.55c.91.91,2.42.74,3.1-.34l8.53-13.48c6.17-9.75,7.6-17.86,1.27-24.18h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M15.05,15.33c4.98-8.2,14.71-12.71,21.74-10.08" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M52.17,52.45c8.2-4.98,12.71-14.71,10.08-21.74" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    alarm_bell2_default = IconAlarmBell2;
  }
});

// lib/icons/alarm-bell3.ts
var alarm_bell3_exports = {};
__export(alarm_bell3_exports, {
  IconAlarmBell3: () => IconAlarmBell3,
  default: () => alarm_bell3_default
});
var IconAlarmBell3, alarm_bell3_default;
var init_alarm_bell3 = __esm({
  "lib/icons/alarm-bell3.ts"() {
    IconAlarmBell3 = `<svg id="alarm-bell-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,13.5c-8.95,0-13.67,6.75-16.2,18l-3.5,15.56c-.28,1.25.67,2.44,1.95,2.44h17.75s17.75,0,17.75,0c1.28,0,2.23-1.19,1.95-2.44l-3.5-15.56c-2.53-11.25-7.25-18-16.2-18h0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M45,49.5c0,4.97-4.03,9-9,9s-9-4.03-9-9" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,13.5c-8.95,0-13.67,6.75-16.2,18l-3.5,15.56c-.28,1.25.67,2.44,1.95,2.44h17.75s17.75,0,17.75,0c1.28,0,2.23-1.19,1.95-2.44l-3.5-15.56c-2.53-11.25-7.25-18-16.2-18h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9.75,31.5c-2.28-9.32,1.41-19.39,8.25-22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M62.25,31.5c2.28-9.32-1.41-19.39-8.25-22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    alarm_bell3_default = IconAlarmBell3;
  }
});

// lib/icons/alarm-bell.ts
var alarm_bell_exports = {};
__export(alarm_bell_exports, {
  IconAlarmBell: () => IconAlarmBell,
  default: () => alarm_bell_default
});
var IconAlarmBell, alarm_bell_default;
var init_alarm_bell = __esm({
  "lib/icons/alarm-bell.ts"() {
    IconAlarmBell = `<svg id="alarm-bell" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,13.5c-8.95,0-13.67,6.75-16.2,18l-3.5,15.56c-.28,1.25.67,2.44,1.95,2.44h17.75s17.75,0,17.75,0c1.28,0,2.23-1.19,1.95-2.44l-3.5-15.56c-2.53-11.25-7.25-18-16.2-18h0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M45,49.5c0,4.97-4.03,9-9,9s-9-4.03-9-9" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,13.5c-8.95,0-13.67,6.75-16.2,18l-3.5,15.56c-.28,1.25.67,2.44,1.95,2.44h17.75s17.75,0,17.75,0c1.28,0,2.23-1.19,1.95-2.44l-3.5-15.56c-2.53-11.25-7.25-18-16.2-18h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    alarm_bell_default = IconAlarmBell;
  }
});

// lib/icons/art-supplies.ts
var art_supplies_exports = {};
__export(art_supplies_exports, {
  IconArtSupplies: () => IconArtSupplies,
  default: () => art_supplies_default
});
var IconArtSupplies, art_supplies_default;
var init_art_supplies = __esm({
  "lib/icons/art-supplies.ts"() {
    IconArtSupplies = `<svg id="art-supplies" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M46.06,37.08l15.87,15.87c.78.78.78,2.05,0,2.83l-9.79,9.79c-.78.78-2.05.78-2.83,0l-16.77-16.77" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M24.88,41.14L7.59,23.85c-.78-.78-.78-2.05,0-2.83l9.79-9.79c.78-.78,2.05-.78,2.83,0l16.39,16.39" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M46.06,37.08l15.87,15.87c.78.78.78,2.05,0,2.83l-9.79,9.79c-.78.78-2.05.78-2.83,0l-16.77-16.77" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M24.88,41.14L7.59,23.85c-.78-.78-.78-2.05,0-2.83l9.79-9.79c.78-.78,2.05-.78,2.83,0l16.39,16.39" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="53.8" y1="44.82" x2="47.44" y2="51.18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="28.35" y1="19.36" x2="21.98" y2="25.73" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g><path d="M31.47,49.62c14.81-11.11,30.33-27.26,25.1-32.5-5.24-5.24-21.39,10.29-32.5,25.1,0,0-1.85,1.85,1.85,5.55,3.7,3.7,5.55,1.85,5.55,1.85Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27.77,57.02c-5.55,5.55-9.26-1.85-14.81,3.7-1.85-5.55-1.22-9.89,1.85-12.96,3.07-3.07,8.04-3.07,11.11,0,3.07,3.07,3.7,7.4,1.85,9.26Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    art_supplies_default = IconArtSupplies;
  }
});

// lib/icons/audio-waves.ts
var audio_waves_exports = {};
__export(audio_waves_exports, {
  IconAudioWaves: () => IconAudioWaves,
  default: () => audio_waves_default
});
var IconAudioWaves, audio_waves_default;
var init_audio_waves = __esm({
  "lib/icons/audio-waves.ts"() {
    IconAudioWaves = `<svg id="audio-waves" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="9" y1="27" x2="9" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="22.5" x2="18" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="18" x2="27" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="31.5" x2="45" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="27" x2="54" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="31.5" x2="63" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    audio_waves_default = IconAudioWaves;
  }
});

// lib/icons/bluetooth.ts
var bluetooth_exports = {};
__export(bluetooth_exports, {
  IconBluetooth: () => IconBluetooth,
  default: () => bluetooth_default
});
var IconBluetooth, bluetooth_default;
var init_bluetooth = __esm({
  "lib/icons/bluetooth.ts"() {
    IconBluetooth = `<svg id="bluetooth" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="19.69 19.12 47.81 47.25 36.56 58.5 36.56 13.5 47.81 24.75 19.69 52.88" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    bluetooth_default = IconBluetooth;
  }
});

// lib/icons/camera.ts
var camera_exports = {};
__export(camera_exports, {
  IconCamera: () => IconCamera,
  default: () => camera_default
});
var IconCamera, camera_default;
var init_camera = __esm({
  "lib/icons/camera.ts"() {
    IconCamera = `<svg id="camera" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M57,18H15c-3.31,0-6,2.69-6,6v24c0,3.31,2.69,6,6,6h42c3.31,0,6-2.69,6-6v-24c0-3.31-2.69-6-6-6ZM36,45c-4.97,0-9-4.03-9-9s4.03-9,9-9,9,4.03,9,9-4.03,9-9,9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="36" r="9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31,9h10c2.21,0,4,1.79,4,4v5h-18v-5c0-2.21,1.79-4,4-4Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="9" y="18" width="54" height="36" rx="6" ry="6" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    camera_default = IconCamera;
  }
});

// lib/icons/clipboard.ts
var clipboard_exports = {};
__export(clipboard_exports, {
  IconClipboard: () => IconClipboard,
  default: () => clipboard_default
});
var IconClipboard, clipboard_default;
var init_clipboard = __esm({
  "lib/icons/clipboard.ts"() {
    IconClipboard = `<svg id="clipboard" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M50,13.5h-9.5v4.5h-9v-4.5h-9.5c-2.21,0-4,1.79-4,4v41.5c0,2.21,1.79,4,4,4h28c2.21,0,4-1.79,4-4V17.5c0-2.21-1.79-4-4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,13.5h9.5c2.21,0,4,1.79,4,4v41.5c0,2.21-1.79,4-4,4h-28c-2.21,0-4-1.79-4-4V17.5c0-2.21,1.79-4,4-4h9.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="31.5" y="9" width="9" height="9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    clipboard_default = IconClipboard;
  }
});

// lib/icons/color-pallette.ts
var color_pallette_exports = {};
__export(color_pallette_exports, {
  IconColorPallette: () => IconColorPallette,
  default: () => color_pallette_default
});
var IconColorPallette, color_pallette_default;
var init_color_pallette = __esm({
  "lib/icons/color-pallette.ts"() {
    IconColorPallette = `<svg id="color-pallette" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M63,36c0,9.97-14.18,4.84-22.5,9-9,4.5,9,18-4.5,18-14.91,0-27-12.09-27-27s12.09-27,27-27,27,12.09,27,27Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M63,36c0,9.97-14.18,4.84-22.5,9-9,4.5,9,18-4.5,18-14.91,0-27-12.09-27-27s12.09-27,27-27,27,12.09,27,27Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="18" x2="36" y2="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="22.5" y1="22.5" x2="22.5" y2="22.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="18" y1="36" x2="18" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="22.5" y1="49.5" x2="22.5" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="49.5" y1="22.5" x2="49.5" y2="22.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/></svg>`;
    color_pallette_default = IconColorPallette;
  }
});

// lib/icons/color-rgb.ts
var color_rgb_exports = {};
__export(color_rgb_exports, {
  IconColorRgb: () => IconColorRgb,
  default: () => color_rgb_default
});
var IconColorRgb, color_rgb_default;
var init_color_rgb = __esm({
  "lib/icons/color-rgb.ts"() {
    IconColorRgb = `<svg id="color-rgb" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><circle cx="26.37" cy="44.44" r="15.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="45.86" cy="44.44" r="15.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36.12" cy="27.56" r="15.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/></g><g><circle cx="35.88" cy="27.56" r="15.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="35.88" cy="27.56" r="15.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="26.14" cy="44.44" r="15.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="26.14" cy="44.44" r="15.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="45.63" cy="44.44" r="15.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="45.63" cy="44.44" r="15.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    color_rgb_default = IconColorRgb;
  }
});

// lib/icons/color-swatches.ts
var color_swatches_exports = {};
__export(color_swatches_exports, {
  IconColorSwatches: () => IconColorSwatches,
  default: () => color_swatches_default
});
var IconColorSwatches, color_swatches_default;
var init_color_swatches = __esm({
  "lib/icons/color-swatches.ts"() {
    IconColorSwatches = `<svg id="color-swatches" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="27.94" y1="19.43" x2="43.53" y2="28.43" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="23.82" y1="33.21" x2="36.53" y2="40.55" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="23.82" y1="48.22" x2="30.03" y2="51.81" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.39" y1="29.63" x2="56.39" y2="45.21" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="37.03" y1="39.68" x2="44.27" y2="52.21" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="29.52" y1="52.68" x2="33.01" y2="58.71" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M46.57,15.17l-8.66-5c-1.91-1.1-4.36-.45-5.46,1.46l-8.63,14.94v30.93c0,2.21-1.79,4-4,4,1.91,1.1,4.36.45,5.46-1.46l22.75-39.4c1.1-1.91.45-4.36-1.46-5.46Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M65.65,35.25l-5-8.66c-1.1-1.91-3.55-2.57-5.46-1.46l-14.62,8.44-15.28,26.47c-1.1,1.91-3.55,2.57-5.46,1.46h-.79l.29.5c1.1,1.91,3.55,2.57,5.46,1.46l39.4-22.75c1.91-1.1,2.57-3.55,1.46-5.46Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="5.82" y="8" width="18" height="53.5" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="5.82" y="8" width="18" height="53.5" rx="4" ry="4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="5.82" y1="21" x2="23.82" y2="21" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="5.82" y1="35" x2="23.82" y2="35" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="5.82" y1="48" x2="23.82" y2="48" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    color_swatches_default = IconColorSwatches;
  }
});

// lib/icons/desktop.ts
var desktop_exports = {};
__export(desktop_exports, {
  IconDesktop: () => IconDesktop,
  default: () => desktop_default
});
var IconDesktop, desktop_default;
var init_desktop = __esm({
  "lib/icons/desktop.ts"() {
    IconDesktop = `<svg id="desktop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M63,45V13c0-2.21-1.79-4-4-4H13c-2.21,0-4,1.79-4,4v32h54Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="9" y1="45" x2="63" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="9" y="9" width="54" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="63" x2="45" y2="63" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="54" x2="36" y2="63" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    desktop_default = IconDesktop;
  }
});

// lib/icons/filmroll.ts
var filmroll_exports = {};
__export(filmroll_exports, {
  IconFilmroll: () => IconFilmroll,
  default: () => filmroll_default
});
var IconFilmroll, filmroll_default;
var init_filmroll = __esm({
  "lib/icons/filmroll.ts"() {
    IconFilmroll = `<svg id="filmroll" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="9" width="36" height="54" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="18" y1="9" x2="18" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="9" x2="54" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="18" x2="18" y2="18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="27" x2="18" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="36" x2="18" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="45" x2="18" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="54" x2="18" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="54" x2="63" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="45" x2="63" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="36" x2="63" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="27" x2="63" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="18" x2="63" y2="18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="36" x2="54" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="9" y="9" width="54" height="54" rx="4" ry="4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    filmroll_default = IconFilmroll;
  }
});

// lib/icons/gamepad-classic.ts
var gamepad_classic_exports = {};
__export(gamepad_classic_exports, {
  IconGamepadClassic: () => IconGamepadClassic,
  default: () => gamepad_classic_default
});
var IconGamepadClassic, gamepad_classic_default;
var init_gamepad_classic = __esm({
  "lib/icons/gamepad-classic.ts"() {
    IconGamepadClassic = `<svg id="gamepad-classic" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M47.25,20.25h-22.5c-8.7,0-15.75,7.05-15.75,15.75s7.05,15.75,15.75,15.75h22.5c8.7,0,15.75-7.05,15.75-15.75s-7.05-15.75-15.75-15.75Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M47.25,20.25h-22.5c-8.7,0-15.75,7.05-15.75,15.75s7.05,15.75,15.75,15.75h22.5c8.7,0,15.75-7.05,15.75-15.75s-7.05-15.75-15.75-15.75Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="24.75" y1="29.25" x2="24.75" y2="42.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="36" x2="31.5" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="31.5" x2="45" y2="31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="49.5" y1="40.5" x2="49.5" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/></svg>`;
    gamepad_classic_default = IconGamepadClassic;
  }
});

// lib/icons/gamepad.ts
var gamepad_exports = {};
__export(gamepad_exports, {
  IconGamepad: () => IconGamepad,
  default: () => gamepad_default
});
var IconGamepad, gamepad_default;
var init_gamepad = __esm({
  "lib/icons/gamepad.ts"() {
    IconGamepad = `<svg id="gamepad" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M21.01,18h29.97c1.83,0,3.48,1.09,4.2,2.77l9.47,22.09c2.26,5.27-1.61,11.14-7.34,11.14h0c-2.12,0-4.15-.84-5.65-2.34l-7.95-7.95h-15.43l-7.95,7.95c-1.5,1.5-3.53,2.34-5.65,2.34h0c-5.74,0-9.6-5.87-7.34-11.14l9.47-22.09c.72-1.68,2.37-2.77,4.2-2.77Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="45" y1="27" x2="45" y2="27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="31.5" x2="40.5" y2="31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="31.5" x2="49.5" y2="31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="36" x2="45" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M21.01,18h29.97c1.83,0,3.48,1.09,4.2,2.77l9.47,22.09c2.26,5.27-1.61,11.14-7.34,11.14h0c-2.12,0-4.15-.84-5.65-2.34l-7.95-7.95h-15.43l-7.95,7.95c-1.5,1.5-3.53,2.34-5.65,2.34h0c-5.74,0-9.6-5.87-7.34-11.14l9.47-22.09c.72-1.68,2.37-2.77,4.2-2.77Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="27" y1="26" x2="27" y2="35" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="30.5" x2="31.5" y2="30.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    gamepad_default = IconGamepad;
  }
});

// lib/icons/headphones.ts
var headphones_exports = {};
__export(headphones_exports, {
  IconHeadphones: () => IconHeadphones,
  default: () => headphones_default
});
var IconHeadphones, headphones_default;
var init_headphones = __esm({
  "lib/icons/headphones.ts"() {
    IconHeadphones = `<svg id="headphones" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.5,41.33v7.33c0,2.95,2.98,5.33,6.67,5.33h.83v-18h-.83c-3.68,0-6.67,2.39-6.67,5.33Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,48.67v-7.33c0-2.95-2.98-5.33-6.67-5.33h-.83v18h.83c3.68,0,6.67-2.39,6.67-5.33Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M51,36v-4.5c0-11.18-6.72-13.5-15-13.5s-15,2.32-15,13.5v4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,41.33v7.33c0,2.95,2.98,5.33,6.67,5.33h.83v-18h-.83c-3.68,0-6.67,2.39-6.67,5.33Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,48.67v-7.33c0-2.95-2.98-5.33-6.67-5.33h-.83v18h.83c3.68,0,6.67-2.39,6.67-5.33Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    headphones_default = IconHeadphones;
  }
});

// lib/icons/highlight.ts
var highlight_exports = {};
__export(highlight_exports, {
  IconHighlight: () => IconHighlight,
  default: () => highlight_default
});
var IconHighlight, highlight_default;
var init_highlight = __esm({
  "lib/icons/highlight.ts"() {
    IconHighlight = `<svg id="highlight" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.95,37.77l-12.5,12.5c-1.93,1.93-1.42,5.22,1.04,6.41,5.06,2.45,13.97,4.04,24.19-6.17" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M22.95,37.77l-12.5,12.5c-1.93,1.93-1.42,5.22,1.04,6.41,5.06,2.45,13.97,4.04,24.19-6.17" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="27.34" y="25.86" width="13.5" height="27" transform="translate(-17.85 35.63) rotate(-45)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M67.5,31.41l-13.08,13.08c-1.56,1.56-4.09,1.56-5.66,0l-19.8-19.8c-1.56-1.56-1.56-4.09,0-5.66l13.08-13.08" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    highlight_default = IconHighlight;
  }
});

// lib/icons/image.ts
var image_exports = {};
__export(image_exports, {
  IconImage: () => IconImage,
  default: () => image_default
});
var IconImage, image_default;
var init_image = __esm({
  "lib/icons/image.ts"() {
    IconImage = `<svg id="image" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="47.25" cy="24.75" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M9,49.5v11.5c0,1.1.9,2,2,2h50c1.1,0,2-.9,2-2v-16h-22.5l-13.5-18-18,22.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="9 49.5 27 27 54 63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="45" x2="63" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="47.25" cy="24.75" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="9" y="9" width="54" height="54" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    image_default = IconImage;
  }
});

// lib/icons/joystick.ts
var joystick_exports = {};
__export(joystick_exports, {
  IconJoystick: () => IconJoystick,
  default: () => joystick_default
});
var IconJoystick, joystick_default;
var init_joystick = __esm({
  "lib/icons/joystick.ts"() {
    IconJoystick = `<svg id="joystick" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="13.5 45 13.5 54 36 63 58.5 54 58.5 45 36 36 13.5 45" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="20.25" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polygon points="13.5 45 13.5 54 36 63 58.5 54 58.5 45 36 36 13.5 45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 45 36 54 58.5 45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="20.25" r="6.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="45" x2="36" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    joystick_default = IconJoystick;
  }
});

// lib/icons/laptop.ts
var laptop_exports = {};
__export(laptop_exports, {
  IconLaptop: () => IconLaptop,
  default: () => laptop_default
});
var IconLaptop, laptop_default;
var init_laptop = __esm({
  "lib/icons/laptop.ts"() {
    IconLaptop = `<svg id="laptop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M17.5,16h37c2.21,0,4,1.79,4,4v27H13.5v-27c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M9,47h54v3c0,3.31-2.69,6-6,6H15c-3.31,0-6-2.69-6-6v-3Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M17.5,16h37c2.21,0,4,1.79,4,4v27H13.5v-27c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,47h54v3c0,3.31-2.69,6-6,6H15c-3.31,0-6-2.69-6-6v-3Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    laptop_default = IconLaptop;
  }
});

// lib/icons/mail-open.ts
var mail_open_exports = {};
__export(mail_open_exports, {
  IconMailOpen: () => IconMailOpen,
  default: () => mail_open_default
});
var IconMailOpen, mail_open_default;
var init_mail_open = __esm({
  "lib/icons/mail-open.ts"() {
    IconMailOpen = `<svg id="mail-open" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M9,31.5l27,22.5,27-22.5v27.5c0,2.21-1.79,4-4,4H13c-2.21,0-4-1.79-4-4v-27.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="18 39 18 18 54 18 54 39" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,31.5l27,22.5,27-22.5v27.5c0,2.21-1.79,4-4,4H13c-2.21,0-4-1.79-4-4v-27.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><polyline points="46.8 18 36 9 25.2 18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="18 24 9 31.5 36 54 63 31.5 54 24" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    mail_open_default = IconMailOpen;
  }
});

// lib/icons/mail.ts
var mail_exports = {};
__export(mail_exports, {
  IconMail: () => IconMail,
  default: () => mail_default
});
var IconMail, mail_default;
var init_mail = __esm({
  "lib/icons/mail.ts"() {
    IconMail = `<svg id="mail" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="9" width="36" height="54" rx="4" ry="4" transform="translate(0 72) rotate(-90)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="18" y="9" width="36" height="54" rx="4" ry="4" transform="translate(0 72) rotate(-90)" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="10.17 19.17 36 40.5 61.69 19.31" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    mail_default = IconMail;
  }
});

// lib/icons/media.ts
var media_exports = {};
__export(media_exports, {
  IconMedia: () => IconMedia,
  default: () => media_default
});
var IconMedia, media_default;
var init_media = __esm({
  "lib/icons/media.ts"() {
    IconMedia = `<svg id="media" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="54" cy="18" r="4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,45l-20.96-25.16c-.8-.96-2.27-.96-3.07,0l-5.96,7.16" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M21.94,40.12v9.76c0,.8.89,1.28,1.55.83l7.32-4.88c.59-.4.59-1.27,0-1.66l-7.32-4.88c-.66-.44-1.55.03-1.55.83Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="54" cy="18" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M21.94,40.12v9.76c0,.8.89,1.28,1.55.83l7.32-4.88c.59-.4.59-1.27,0-1.66l-7.32-4.88c-.66-.44-1.55.03-1.55.83Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="27" width="36" height="36" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M61,45h-16v-16c0-1.1-.9-2-2-2h-16V11c0-1.1.9-2,2-2h32c1.1,0,2,.9,2,2v32c0,1.1-.9,2-2,2Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    media_default = IconMedia;
  }
});

// lib/icons/microphone.ts
var microphone_exports = {};
__export(microphone_exports, {
  IconMicrophone: () => IconMicrophone,
  default: () => microphone_default
});
var IconMicrophone, microphone_default;
var init_microphone = __esm({
  "lib/icons/microphone.ts"() {
    IconMicrophone = `<svg id="microphone" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 72 72"><defs><clipPath id="clippath"><rect x="27" y="9" width="18" height="31.5" style="fill: none; stroke-width: 0px;"/></clipPath></defs><g style="clip-path: url(#clippath);"><path d="M36,9c-4.97,0-9,4.03-9,9v13.5c0,4.97,4.03,9,9,9s9-4.03,9-9v-13.5c0-4.97-4.03-9-9-9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/></g><line x1="22.5" y1="63" x2="49.5" y2="63" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="49.5" x2="36" y2="63" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,9c-4.97,0-9,4.03-9,9v13.5c0,4.97,4.03,9,9,9s9-4.03,9-9v-13.5c0-4.97-4.03-9-9-9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,31.5c0,9.94-8.06,18-18,18s-18-8.06-18-18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    microphone_default = IconMicrophone;
  }
});

// lib/icons/music-note-single.ts
var music_note_single_exports = {};
__export(music_note_single_exports, {
  IconMusicNoteSingle: () => IconMusicNoteSingle,
  default: () => music_note_single_default
});
var IconMusicNoteSingle, music_note_single_default;
var init_music_note_single = __esm({
  "lib/icons/music-note-single.ts"() {
    IconMusicNoteSingle = `<svg id="music-note-single" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><ellipse cx="27" cy="52.4" rx="9" ry="6.1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M46.54,24.04c-10.54-3.51-10.54-10.54-10.54-10.54v14.05s14.05,3.51,14.05,14.05c7.03-7.03,3.94-15.08-3.51-17.57Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><ellipse cx="27" cy="52.4" rx="9" ry="6.1" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="52.4" x2="36" y2="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,13.5s0,7.03,10.54,10.54c7.45,2.48,10.54,10.54,3.51,17.57,0-10.54-14.05-14.05-14.05-14.05" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    music_note_single_default = IconMusicNoteSingle;
  }
});

// lib/icons/music-note.ts
var music_note_exports = {};
__export(music_note_exports, {
  IconMusicNote: () => IconMusicNote,
  default: () => music_note_default
});
var IconMusicNote, music_note_default;
var init_music_note = __esm({
  "lib/icons/music-note.ts"() {
    IconMusicNote = `<svg id="music-note" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><ellipse cx="18" cy="56.9" rx="9" ry="6.1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><ellipse cx="49.5" cy="52.4" rx="9" ry="6.1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polygon points="58.5 22.5 27 27 27 18 58.5 13.5 58.5 22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="58.5 52.4 58.5 13.5 27 18 27 56.9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><ellipse cx="18" cy="56.9" rx="9" ry="6.1" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="57.81" y1="22.5" x2="27" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><ellipse cx="49.5" cy="52.4" rx="9" ry="6.1" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    music_note_default = IconMusicNote;
  }
});

// lib/icons/nes-controller.ts
var nes_controller_exports = {};
__export(nes_controller_exports, {
  IconNesController: () => IconNesController,
  default: () => nes_controller_default
});
var IconNesController, nes_controller_default;
var init_nes_controller = __esm({
  "lib/icons/nes-controller.ts"() {
    IconNesController = `<svg id="nes-controller" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,27s0-9,9-9,9-9,9-9" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="4.5" y="27" width="63" height="27" rx="1" ry="1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="4.5" y="27" width="63" height="27" rx="1" ry="1" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="15.75" y1="33.75" x2="15.75" y2="47.25" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="40.5" x2="22.5" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="36" x2="58.5" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="54" y1="45" x2="54" y2="45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><g><line x1="29.25" y1="45" x2="33.75" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><line x1="38.25" y1="45" x2="42.75" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/></g></svg>`;
    nes_controller_default = IconNesController;
  }
});

// lib/icons/pacman.ts
var pacman_exports = {};
__export(pacman_exports, {
  IconPacman: () => IconPacman,
  default: () => pacman_default
});
var IconPacman, pacman_default;
var init_pacman = __esm({
  "lib/icons/pacman.ts"() {
    IconPacman = `<svg id="pacman" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,36l20.12-10.06c-3.69-7.37-11.32-12.44-20.12-12.44-12.43,0-22.5,10.07-22.5,22.5s10.07,22.5,22.5,22.5c8.81,0,16.43-5.06,20.12-12.44l-20.12-10.06Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36,36l20.12-10.06c-3.69-7.37-11.32-12.44-20.12-12.44-12.43,0-22.5,10.07-22.5,22.5s10.07,22.5,22.5,22.5c8.81,0,16.43-5.06,20.12-12.44l-20.12-10.06Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="25" x2="36" y2="25" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/></svg>`;
    pacman_default = IconPacman;
  }
});

// lib/icons/paint-roller.ts
var paint_roller_exports = {};
__export(paint_roller_exports, {
  IconPaintRoller: () => IconPaintRoller,
  default: () => paint_roller_default
});
var IconPaintRoller, paint_roller_default;
var init_paint_roller = __esm({
  "lib/icons/paint-roller.ts"() {
    IconPaintRoller = `<svg id="paint-roller" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M31.5,45h9v16c0,1.1-.9,2-2,2h-5c-1.1,0-2-.9-2-2v-16h0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M54,18h5c2.21,0,4,1.79,4,4v5.5c0,2.21-1.79,4-4,4h-19c-2.21,0-4,1.79-4,4v9.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M52,24.53H15.5c-1.1,0-2-.9-2-2v-9.5c0-1.1.9-2,2-2h36.5c1.1,0,2,.9,2,2v9.5c0,1.1-.9,2-2,2Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="9" y1="18" x2="13.5" y2="18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M52,24.53H15.5c-1.1,0-2-.9-2-2v-9.5c0-1.1.9-2,2-2h36.5c1.1,0,2,.9,2,2v9.5c0,1.1-.9,2-2,2Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,45h9v16c0,1.1-.9,2-2,2h-5c-1.1,0-2-.9-2-2v-16h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    paint_roller_default = IconPaintRoller;
  }
});

// lib/icons/paperplane.ts
var paperplane_exports = {};
__export(paperplane_exports, {
  IconPaperplane: () => IconPaperplane,
  default: () => paperplane_default
});
var IconPaperplane, paperplane_default;
var init_paperplane = __esm({
  "lib/icons/paperplane.ts"() {
    IconPaperplane = `<svg id="paperplane" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="9.45 30.73 54 18 41.27 62.55 28.54 43.46 9.45 30.73" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="54" y1="18" x2="28.54" y2="43.46" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="9.45 30.73 54 18 41.27 62.55 28.54 43.46 9.45 30.73" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    paperplane_default = IconPaperplane;
  }
});

// lib/icons/playback-backward.ts
var playback_backward_exports = {};
__export(playback_backward_exports, {
  IconPlaybackBackward: () => IconPlaybackBackward,
  default: () => playback_backward_default
});
var IconPlaybackBackward, playback_backward_default;
var init_playback_backward = __esm({
  "lib/icons/playback-backward.ts"() {
    IconPlaybackBackward = `<svg id="playback-backward" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M53.73,55.99V16.8c0-.95-1.2-1.37-1.79-.62l-15.3,19.59c-.28.36-.28.87,0,1.23l15.3,19.59c.59.75,1.79.34,1.79-.62Z" style="fill: red; stroke-width: 0px;"/><path d="M35.45,55.17V16.01c0-.95-1.21-1.37-1.79-.61l-15.17,19.58c-.28.36-.28.86,0,1.23l15.17,19.58c.58.75,1.79.34,1.79-.61Z" style="fill: red; stroke-width: 0px;"/><path d="M53.73,55.99V16.8c0-.95-1.2-1.37-1.79-.62l-15.3,19.59c-.28.36-.28.87,0,1.23l15.3,19.59c.59.75,1.79.34,1.79-.62Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M35.45,55.17V16.01c0-.95-1.21-1.37-1.79-.61l-15.17,19.58c-.28.36-.28.86,0,1.23l15.17,19.58c.58.75,1.79.34,1.79-.61Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    playback_backward_default = IconPlaybackBackward;
  }
});

// lib/icons/playback-end.ts
var playback_end_exports = {};
__export(playback_end_exports, {
  IconPlaybackEnd: () => IconPlaybackEnd,
  default: () => playback_end_default
});
var IconPlaybackEnd, playback_end_default;
var init_playback_end = __esm({
  "lib/icons/playback-end.ts"() {
    IconPlaybackEnd = `<svg id="playback-end" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18.28,16.84v37.51c0,1.02,1.36,1.39,1.87.5l10.79-18.76c.18-.31.18-.69,0-1l-10.79-18.76c-.51-.89-1.87-.53-1.87.5Z" style="fill: red; stroke-width: 0px;"/><path d="M31.93,17.65v37.51c0,1.02,1.36,1.39,1.87.5l10.79-18.76c.18-.31.18-.69,0-1l-10.79-18.76c-.51-.89-1.87-.53-1.87.5Z" style="fill: red; stroke-width: 0px;"/><rect x="44.72" y="18" width="9" height="36" rx="1" ry="1" style="fill: red; stroke-width: 0px;"/><path d="M18.28,16.84v37.51c0,1.02,1.36,1.39,1.87.5l10.79-18.76c.18-.31.18-.69,0-1l-10.79-18.76c-.51-.89-1.87-.53-1.87.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.93,17.65v37.51c0,1.02,1.36,1.39,1.87.5l10.79-18.76c.18-.31.18-.69,0-1l-10.79-18.76c-.51-.89-1.87-.53-1.87.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="44.72" y="18" width="9" height="36" rx="1" ry="1" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    playback_end_default = IconPlaybackEnd;
  }
});

// lib/icons/playback-forward.ts
var playback_forward_exports = {};
__export(playback_forward_exports, {
  IconPlaybackForward: () => IconPlaybackForward,
  default: () => playback_forward_default
});
var IconPlaybackForward, playback_forward_default;
var init_playback_forward = __esm({
  "lib/icons/playback-forward.ts"() {
    IconPlaybackForward = `<svg id="playback-end" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18.27,16.01v39.19c0,.95,1.2,1.37,1.79.62l15.3-19.59c.28-.36.28-.87,0-1.23l-15.3-19.59c-.59-.75-1.79-.34-1.79.62Z" style="fill: red; stroke-width: 0px;"/><path d="M36.55,16.83v39.15c0,.95,1.21,1.37,1.79.61l15.17-19.58c.28-.36.28-.86,0-1.23l-15.17-19.58c-.58-.75-1.79-.34-1.79.61Z" style="fill: red; stroke-width: 0px;"/><path d="M18.27,16.01v39.19c0,.95,1.2,1.37,1.79.62l15.3-19.59c.28-.36.28-.87,0-1.23l-15.3-19.59c-.59-.75-1.79-.34-1.79.62Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36.55,16.83v39.15c0,.95,1.21,1.37,1.79.61l15.17-19.58c.28-.36.28-.86,0-1.23l-15.17-19.58c-.58-.75-1.79-.34-1.79.61Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    playback_forward_default = IconPlaybackForward;
  }
});

// lib/icons/playback-next.ts
var playback_next_exports = {};
__export(playback_next_exports, {
  IconPlaybackNext: () => IconPlaybackNext,
  default: () => playback_next_default
});
var IconPlaybackNext, playback_next_default;
var init_playback_next = __esm({
  "lib/icons/playback-next.ts"() {
    IconPlaybackNext = `<svg id="playback-next" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M22.5,16.33v40.15c0,.89,1.08,1.34,1.71.71l19.96-20.08c.39-.39.39-1.02,0-1.41L24.21,15.62c-.63-.63-1.71-.19-1.71.71Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><rect x="44.72" y="18" width="9" height="36" rx="1" ry="1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M22.5,16.33v40.15c0,.89,1.08,1.34,1.71.71l19.96-20.08c.39-.39.39-1.02,0-1.41L24.21,15.62c-.63-.63-1.71-.19-1.71.71Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="44.72" y="18" width="9" height="36" rx="1" ry="1" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    playback_next_default = IconPlaybackNext;
  }
});

// lib/icons/playback-pause.ts
var playback_pause_exports = {};
__export(playback_pause_exports, {
  IconPlaybackPause: () => IconPlaybackPause,
  default: () => playback_pause_default
});
var IconPlaybackPause, playback_pause_default;
var init_playback_pause = __esm({
  "lib/icons/playback-pause.ts"() {
    IconPlaybackPause = `<svg id="playback-pause" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="13.5" height="45" rx="1" ry="1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><rect x="45" y="13.5" width="13.5" height="45" rx="1" ry="1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><rect x="13.5" y="13.5" width="13.5" height="45" rx="1" ry="1" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="45" y="13.5" width="13.5" height="45" rx="1" ry="1" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    playback_pause_default = IconPlaybackPause;
  }
});

// lib/icons/playback-play.ts
var playback_play_exports = {};
__export(playback_play_exports, {
  IconPlaybackPlay: () => IconPlaybackPlay,
  default: () => playback_play_default
});
var IconPlaybackPlay, playback_play_default;
var init_playback_play = __esm({
  "lib/icons/playback-play.ts"() {
    IconPlaybackPlay = `<svg id="playback-play" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.5,15.3v41.39c0,.79.86,1.26,1.53.85l33.11-20.7c.63-.39.63-1.3,0-1.7L24.03,14.46c-.67-.42-1.53.06-1.53.85Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M22.5,15.3v41.39c0,.79.86,1.26,1.53.85l33.11-20.7c.63-.39.63-1.3,0-1.7L24.03,14.46c-.67-.42-1.53.06-1.53.85Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    playback_play_default = IconPlaybackPlay;
  }
});

// lib/icons/playback-previous.ts
var playback_previous_exports = {};
__export(playback_previous_exports, {
  IconPlaybackPrevious: () => IconPlaybackPrevious,
  default: () => playback_previous_default
});
var IconPlaybackPrevious, playback_previous_default;
var init_playback_previous = __esm({
  "lib/icons/playback-previous.ts"() {
    IconPlaybackPrevious = `<svg id="playback-previous" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M49.5,55.67V15.52c0-.89-1.08-1.34-1.71-.71l-19.96,20.08c-.39.39-.39,1.02,0,1.41l19.96,20.08c.63.63,1.71.19,1.71-.71Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><rect x="18.28" y="18" width="9" height="36" rx="1" ry="1" transform="translate(45.56 72) rotate(180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M49.5,55.67V15.52c0-.89-1.08-1.34-1.71-.71l-19.96,20.08c-.39.39-.39,1.02,0,1.41l19.96,20.08c.63.63,1.71.19,1.71-.71Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18.28" y="18" width="9" height="36" rx="1" ry="1" transform="translate(45.56 72) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    playback_previous_default = IconPlaybackPrevious;
  }
});

// lib/icons/playback-start.ts
var playback_start_exports = {};
__export(playback_start_exports, {
  IconPlaybackStart: () => IconPlaybackStart,
  default: () => playback_start_default
});
var IconPlaybackStart, playback_start_default;
var init_playback_start = __esm({
  "lib/icons/playback-start.ts"() {
    IconPlaybackStart = `<svg id="playback-start" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><g style="opacity: .5;"></g><path d="M53.72,55.16V17.65c0-1.02-1.36-1.39-1.87-.5l-10.79,18.76c-.18.31-.18.69,0,1l10.79,18.76c.51.89,1.87.53,1.87-.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M40.07,54.35V16.84c0-1.02-1.36-1.39-1.87-.5l-10.79,18.76c-.18.31-.18.69,0,1l10.79,18.76c.51.89,1.87.53,1.87-.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="18.28" y="18" width="9" height="36" rx="1" ry="1" transform="translate(45.56 72) rotate(180)" style="fill: red; stroke-width: 0px;"/></g><g><g><path d="M53.72,55.16V17.65c0-1.02-1.36-1.39-1.87-.5l-10.79,18.76c-.18.31-.18.69,0,1l10.79,18.76c.51.89,1.87.53,1.87-.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.07,54.35V16.84c0-1.02-1.36-1.39-1.87-.5l-10.79,18.76c-.18.31-.18.69,0,1l10.79,18.76c.51.89,1.87.53,1.87-.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><rect x="18.28" y="18" width="9" height="36" rx="1" ry="1" transform="translate(45.56 72) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    playback_start_default = IconPlaybackStart;
  }
});

// lib/icons/playback-stop.ts
var playback_stop_exports = {};
__export(playback_stop_exports, {
  IconPlaybackStop: () => IconPlaybackStop,
  default: () => playback_stop_default
});
var IconPlaybackStop, playback_stop_default;
var init_playback_stop = __esm({
  "lib/icons/playback-stop.ts"() {
    IconPlaybackStop = `<svg id="playback-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="1" ry="1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="13.5" y="13.5" width="45" height="45" rx="1" ry="1" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    playback_stop_default = IconPlaybackStop;
  }
});

// lib/icons/printer.ts
var printer_exports = {};
__export(printer_exports, {
  IconPrinter: () => IconPrinter,
  default: () => printer_default
});
var IconPrinter, printer_default;
var init_printer = __esm({
  "lib/icons/printer.ts"() {
    IconPrinter = `<svg id="printer" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="9" width="36" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="18" y="45" width="36" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="18" y="9" width="36" height="18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="45" width="36" height="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="36" x2="54" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="54" x2="45" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="9 27 9 54 18 54 18 45 54 45 54 54 63 54 63 27 9 27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    printer_default = IconPrinter;
  }
});

// lib/icons/record.ts
var record_exports = {};
__export(record_exports, {
  IconRecord: () => IconRecord,
  default: () => record_default
});
var IconRecord, record_default;
var init_record = __esm({
  "lib/icons/record.ts"() {
    IconRecord = `<svg id="record" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/></svg>`;
    record_default = IconRecord;
  }
});

// lib/icons/reels.ts
var reels_exports = {};
__export(reels_exports, {
  IconReels: () => IconReels,
  default: () => reels_default
});
var IconReels, reels_default;
var init_reels = __esm({
  "lib/icons/reels.ts"() {
    IconReels = `<svg id="reels" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M9,22.5v36.5c0,2.21,1.79,4,4,4h46c2.21,0,4-1.79,4-4V22.5H9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M31.5,34.68v16.13c0,.4.45.64.78.42l12.1-8.07c.3-.2.3-.63,0-.83l-12.1-8.07c-.33-.22-.78.02-.78.42Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="9" y="9" width="54" height="54" rx="4" ry="4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="22.5" x2="63" y2="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="9" x2="31.5" y2="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="9" x2="45" y2="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    reels_default = IconReels;
  }
});

// lib/icons/tablet-landscape.ts
var tablet_landscape_exports = {};
__export(tablet_landscape_exports, {
  IconTabletLandscape: () => IconTabletLandscape,
  default: () => tablet_landscape_default
});
var IconTabletLandscape, tablet_landscape_default;
var init_tablet_landscape = __esm({
  "lib/icons/tablet-landscape.ts"() {
    IconTabletLandscape = `<svg id="tablet-landscape" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="9" width="36" height="54" rx="4" ry="4" transform="translate(0 72) rotate(-90)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="18" y1="36" x2="18" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="9" width="36" height="54" rx="4" ry="4" transform="translate(0 72) rotate(-90)" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    tablet_landscape_default = IconTabletLandscape;
  }
});

// lib/icons/tablet.ts
var tablet_exports = {};
__export(tablet_exports, {
  IconTablet: () => IconTablet,
  default: () => tablet_default
});
var IconTablet, tablet_default;
var init_tablet = __esm({
  "lib/icons/tablet.ts"() {
    IconTablet = `<svg id="tablet" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="13.5" width="36" height="54" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="18" y="13.5" width="36" height="54" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="58.5" x2="36" y2="58.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    tablet_default = IconTablet;
  }
});

// lib/icons/television.ts
var television_exports = {};
__export(television_exports, {
  IconTelevision: () => IconTelevision,
  default: () => television_default
});
var IconTelevision, television_default;
var init_television = __esm({
  "lib/icons/television.ts"() {
    IconTelevision = `<svg id="television" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M59,18H13c-2.21,0-4,1.79-4,4v32.5c0,2.21,1.79,4,4,4h46c2.21,0,4-1.79,4-4V22c0-2.21-1.79-4-4-4ZM45,49.5h-27v-22.5h27v22.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="18" width="54" height="40.5" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="27" width="27" height="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="9" x2="31.5" y2="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="9" x2="40.5" y2="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="31.5" x2="54" y2="31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="40.5" x2="54" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    television_default = IconTelevision;
  }
});

// lib/icons/terminal.ts
var terminal_exports = {};
__export(terminal_exports, {
  IconTerminal: () => IconTerminal,
  default: () => terminal_default
});
var IconTerminal, terminal_default;
var init_terminal = __esm({
  "lib/icons/terminal.ts"() {
    IconTerminal = `<svg id="terminal" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="9" y="9" width="54" height="54" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="9" width="54" height="54" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="18 18 24.75 24.75 18 31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="31.5" x2="40.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    terminal_default = IconTerminal;
  }
});

// lib/icons/video-camera.ts
var video_camera_exports = {};
__export(video_camera_exports, {
  IconVideoCamera: () => IconVideoCamera,
  default: () => video_camera_default
});
var IconVideoCamera, video_camera_default;
var init_video_camera = __esm({
  "lib/icons/video-camera.ts"() {
    IconVideoCamera = `<svg id="video-camera" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="9" y="27" width="40.5" height="28.5" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="27" width="40.5" height="28.5" rx="6" ry="6" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="49.5 37.5 63 28.5 63 55.5 49.5 46.5 49.5 37.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="22.5" cy="20.25" r="6.75" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="20.25" r="6.75" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    video_camera_default = IconVideoCamera;
  }
});

// lib/icons/videos.ts
var videos_exports = {};
__export(videos_exports, {
  IconVideos: () => IconVideos,
  default: () => videos_default
});
var IconVideos, videos_default;
var init_videos = __esm({
  "lib/icons/videos.ts"() {
    IconVideos = `<svg id="videos" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M50,27H13c-2.21,0-4,1.79-4,4v23.5c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4v-23.5c0-2.21-1.79-4-4-4ZM26.44,49.5v-13.5l10.12,6.75-10.12,6.75Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="27" width="45" height="31.5" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,49.5h5c2.21,0,4-1.79,4-4v-23.5c0-2.21-1.79-4-4-4H22c-2.21,0-4,1.79-4,4v5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="26.44 36 26.44 49.5 36.56 42.75 26.44 36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    videos_default = IconVideos;
  }
});

// lib/icons/volume-i.ts
var volume_i_exports = {};
__export(volume_i_exports, {
  IconVolumeI: () => IconVolumeI,
  default: () => volume_i_default
});
var IconVolumeI, volume_i_default;
var init_volume_i = __esm({
  "lib/icons/volume-i.ts"() {
    IconVolumeI = `<svg id="volume-I" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="9 26.96 9 44.96 18 44.96 31.5 53.96 31.5 17.96 18 26.96 9 26.96" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polygon points="9 26.96 9 44.96 18 44.96 31.5 53.96 31.5 17.96 18 26.96 9 26.96" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M39.73,23.27c3.26,3.26,5.27,7.76,5.27,12.73s-2.01,9.47-5.27,12.73" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45.31,16.16c5.08,4.69,8.37,11.31,8.66,18.76s-2.45,14.32-7.14,19.39" style="fill: none; stroke: var(--icon-stroke-invisible, transparent); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M51.42,9.55c6.77,6.25,11.16,15.08,11.55,25.01s-3.27,19.09-9.52,25.86" style="fill: none; stroke: var(--icon-stroke-invisible, transparent); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    volume_i_default = IconVolumeI;
  }
});

// lib/icons/volume-ii.ts
var volume_ii_exports = {};
__export(volume_ii_exports, {
  IconVolumeIi: () => IconVolumeIi,
  default: () => volume_ii_default
});
var IconVolumeIi, volume_ii_default;
var init_volume_ii = __esm({
  "lib/icons/volume-ii.ts"() {
    IconVolumeIi = `<svg id="volume-II" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="9 27 9 45 18 45 31.5 54 31.5 18 18 27 9 27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polygon points="9 27 9 45 18 45 31.5 54 31.5 18 18 27 9 27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M39.73,23.32c3.26,3.26,5.27,7.76,5.27,12.73s-2.01,9.47-5.27,12.73" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45.31,16.2c5.08,4.69,8.37,11.31,8.66,18.76s-2.45,14.32-7.14,19.39" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M51.42,9.59c6.77,6.25,11.16,15.08,11.55,25.01s-3.27,19.09-9.52,25.86" style="fill: none; stroke: var(--icon-stroke-invisible, transparent); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    volume_ii_default = IconVolumeIi;
  }
});

// lib/icons/volume-iii.ts
var volume_iii_exports = {};
__export(volume_iii_exports, {
  IconVolumeIii: () => IconVolumeIii,
  default: () => volume_iii_default
});
var IconVolumeIii, volume_iii_default;
var init_volume_iii = __esm({
  "lib/icons/volume-iii.ts"() {
    IconVolumeIii = `<svg id="volume-III" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="9 27 9 45 18 45 31.5 54 31.5 18 18 27 9 27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polygon points="9 27 9 45 18 45 31.5 54 31.5 18 18 27 9 27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M39.73,23.32c3.26,3.26,5.27,7.76,5.27,12.73s-2.01,9.47-5.27,12.73" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45.31,16.2c5.08,4.69,8.37,11.31,8.66,18.76s-2.45,14.32-7.14,19.39" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M51.42,9.59c6.77,6.25,11.16,15.08,11.55,25.01s-3.27,19.09-9.52,25.86" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    volume_iii_default = IconVolumeIii;
  }
});

// lib/icons/volume-mute.ts
var volume_mute_exports = {};
__export(volume_mute_exports, {
  IconVolumeMute: () => IconVolumeMute,
  default: () => volume_mute_default
});
var IconVolumeMute, volume_mute_default;
var init_volume_mute = __esm({
  "lib/icons/volume-mute.ts"() {
    IconVolumeMute = `<svg id="volume-mute" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="22.5 27 22.5 45 31.5 45 45 54 45 18 31.5 27 22.5 27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polygon points="22.5 27 22.5 45 31.5 45 45 54 45 18 31.5 27 22.5 27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="13.5" x2="13.5" y2="63" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    volume_mute_default = IconVolumeMute;
  }
});

// lib/icons/volume-off.ts
var volume_off_exports = {};
__export(volume_off_exports, {
  IconVolumeOff: () => IconVolumeOff,
  default: () => volume_off_default
});
var IconVolumeOff, volume_off_default;
var init_volume_off = __esm({
  "lib/icons/volume-off.ts"() {
    IconVolumeOff = `<svg id="volume-off" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="9 27 9 45 18 45 31.5 54 31.5 18 18 27 9 27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polygon points="9 27 9 45 18 45 31.5 54 31.5 18 18 27 9 27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M39.73,23.32c3.26,3.26,5.27,7.76,5.27,12.73s-2.01,9.47-5.27,12.73" style="fill: none; stroke: var(--icon-stroke-invisible, transparent); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45.31,16.2c5.08,4.69,8.37,11.31,8.66,18.76s-2.45,14.32-7.14,19.39" style="fill: none; stroke: var(--icon-stroke-invisible, transparent); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M51.42,9.59c6.77,6.25,11.16,15.08,11.55,25.01s-3.27,19.09-9.52,25.86" style="fill: none; stroke: var(--icon-stroke-invisible, transparent); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    volume_off_default = IconVolumeOff;
  }
});

// lib/icons/website.ts
var website_exports = {};
__export(website_exports, {
  IconWebsite: () => IconWebsite,
  default: () => website_default
});
var IconWebsite, website_default;
var init_website = __esm({
  "lib/icons/website.ts"() {
    IconWebsite = `<svg id="website" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="7.39" y="9" width="54" height="54" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="7.39" y1="27" x2="61.39" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="16.39" y1="18" x2="16.39" y2="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="25.39" y1="18" x2="25.39" y2="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="34.39" y1="18" x2="34.39" y2="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M34.39,36l13.5,4.5-3.25,2.25,6.75,6.75-3.5,3.5-6.75-6.75-2.25,3.25-4.5-13.5M34.39,32c-1.04,0-2.07.41-2.83,1.17-1.07,1.07-1.45,2.66-.97,4.09l4.5,13.5c.48,1.44,1.73,2.48,3.23,2.69.19.03.38.04.57.04,1.02,0,2.01-.39,2.75-1.09l3.42,3.42c.78.78,1.8,1.17,2.83,1.17s2.05-.39,2.83-1.17l3.5-3.5c1.56-1.56,1.56-4.09,0-5.66l-3.42-3.42c.83-.88,1.23-2.09,1.05-3.31-.21-1.5-1.26-2.75-2.69-3.23l-13.5-4.5c-.41-.14-.84-.21-1.26-.21h0Z" style="fill: red; stroke-width: 0px;"/><rect x="7.39" y="9" width="54" height="54" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    website_default = IconWebsite;
  }
});

// lib/icons/wifi2.ts
var wifi2_exports = {};
__export(wifi2_exports, {
  IconWifi2: () => IconWifi2,
  default: () => wifi2_default
});
var IconWifi2, wifi2_default;
var init_wifi2 = __esm({
  "lib/icons/wifi2.ts"() {
    IconWifi2 = `<svg id="wifi_2" data-name="wifi 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.73,29.94c12.3-12.3,32.25-12.3,44.55,0" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M20.09,36.31c8.79-8.79,23.03-8.79,31.82,0" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M26.45,42.67c5.27-5.27,13.82-5.27,19.09,0" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M32.84,49.01c1.75-1.75,4.58-1.75,6.32,0" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    wifi2_default = IconWifi2;
  }
});

// lib/icons/wifi3.ts
var wifi3_exports = {};
__export(wifi3_exports, {
  IconWifi3: () => IconWifi3,
  default: () => wifi3_default
});
var IconWifi3, wifi3_default;
var init_wifi3 = __esm({
  "lib/icons/wifi3.ts"() {
    IconWifi3 = `<svg id="wifi_3" data-name="wifi 3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.73,29.48c12.3-12.3,32.25-12.3,44.55,0" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M20.09,35.84c8.79-8.79,23.03-8.79,31.82,0" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M26.45,42.2c5.27-5.27,13.82-5.27,19.09,0" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M32.84,48.55c1.75-1.75,4.58-1.75,6.32,0l-3.16,3.2-3.16-3.2Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M32.84,48.55c1.75-1.75,4.58-1.75,6.32,0" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    wifi3_default = IconWifi3;
  }
});

// lib/icons/wifi-rounded.ts
var wifi_rounded_exports = {};
__export(wifi_rounded_exports, {
  IconWifiRounded: () => IconWifiRounded,
  default: () => wifi_rounded_default
});
var IconWifiRounded, wifi_rounded_default;
var init_wifi_rounded = __esm({
  "lib/icons/wifi-rounded.ts"() {
    IconWifiRounded = `<svg id="wifi-rounded" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.73,29.94c12.3-12.3,32.25-12.3,44.55,0" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M20.09,36.31c8.79-8.79,23.03-8.79,31.82,0" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M26.45,42.67c5.27-5.27,13.82-5.27,19.09,0" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="49.03" r=".38" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    wifi_rounded_default = IconWifiRounded;
  }
});

// lib/icons/wifi.ts
var wifi_exports = {};
__export(wifi_exports, {
  IconWifi: () => IconWifi,
  default: () => wifi_default
});
var IconWifi, wifi_default;
var init_wifi = __esm({
  "lib/icons/wifi.ts"() {
    IconWifi = `<svg id="wifi" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.73,29.94c12.3-12.3,32.25-12.3,44.55,0" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M20.09,36.31c8.79-8.79,23.03-8.79,31.82,0" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M26.45,42.67c5.27-5.27,13.82-5.27,19.09,0" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="49.03" r="2.25" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    wifi_default = IconWifi;
  }
});

// lib/icons/ai-face.ts
var ai_face_exports = {};
__export(ai_face_exports, {
  IconAiFace: () => IconAiFace,
  default: () => ai_face_default
});
var IconAiFace, ai_face_default;
var init_ai_face = __esm({
  "lib/icons/ai-face.ts"() {
    IconAiFace = `<svg id="AI-face" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="9" x2="36" y2="18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="27" x2="63" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="36" x2="63" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="36" x2="18" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="27" x2="18" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="18" width="36" height="36" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="18" y="18" width="36" height="36" rx="4" ry="4" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="31.5" x2="27" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 8px;"/><line x1="45" y1="31.5" x2="45" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 8px;"/><path d="M45,40.5c-4.5,4.5-13.5,4.5-18,0" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    ai_face_default = IconAiFace;
  }
});

// lib/icons/ai-letters-blocked.ts
var ai_letters_blocked_exports = {};
__export(ai_letters_blocked_exports, {
  IconAiLettersBlocked: () => IconAiLettersBlocked,
  default: () => ai_letters_blocked_default
});
var IconAiLettersBlocked, ai_letters_blocked_default;
var init_ai_letters_blocked = __esm({
  "lib/icons/ai-letters-blocked.ts"() {
    IconAiLettersBlocked = `<svg id="AI-letters-blocked" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="9" y="9" width="54" height="54" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="9" y="9" width="54" height="54" rx="2" ry="2" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M20.25,47.25v-18.5c0-2.21,1.79-4,4-4h5.5c2.21,0,4,1.79,4,4v18.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="20.25" y1="38.25" x2="33.75" y2="38.25" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.75" y1="24.75" x2="51.75" y2="24.75" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.75" y1="47.25" x2="51.75" y2="47.25" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.25" y1="24.75" x2="47.25" y2="47.25" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    ai_letters_blocked_default = IconAiLettersBlocked;
  }
});

// lib/icons/ai-letters-circled.ts
var ai_letters_circled_exports = {};
__export(ai_letters_circled_exports, {
  IconAiLettersCircled: () => IconAiLettersCircled,
  default: () => ai_letters_circled_default
});
var IconAiLettersCircled, ai_letters_circled_default;
var init_ai_letters_circled = __esm({
  "lib/icons/ai-letters-circled.ts"() {
    IconAiLettersCircled = `<svg id="AI-letters-circled" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><circle cx="36" cy="36" r="27" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M20.25,47.25v-18.5c0-2.21,1.79-4,4-4h5.5c2.21,0,4,1.79,4,4v18.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="20.25" y1="38.25" x2="33.75" y2="38.25" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.75" y1="24.75" x2="51.75" y2="24.75" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.75" y1="47.25" x2="51.75" y2="47.25" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.25" y1="24.75" x2="47.25" y2="47.25" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    ai_letters_circled_default = IconAiLettersCircled;
  }
});

// lib/icons/ai-letters.ts
var ai_letters_exports = {};
__export(ai_letters_exports, {
  IconAiLetters: () => IconAiLetters,
  default: () => ai_letters_default
});
var IconAiLetters, ai_letters_default;
var init_ai_letters = __esm({
  "lib/icons/ai-letters.ts"() {
    IconAiLetters = `<svg id="AI-letters" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M20.25,47.25v-18.5c0-2.21,1.79-4,4-4h5.5c2.21,0,4,1.79,4,4v18.5" style="fill: white;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="20.25" y1="38.25" x2="33.75" y2="38.25" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.75" y1="24.75" x2="51.75" y2="24.75" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.75" y1="47.25" x2="51.75" y2="47.25" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.25" y1="24.75" x2="47.25" y2="47.25" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    ai_letters_default = IconAiLetters;
  }
});

// lib/icons/aframe.ts
var aframe_exports = {};
__export(aframe_exports, {
  IconAframe: () => IconAframe,
  default: () => aframe_default
});
var IconAframe, aframe_default;
var init_aframe = __esm({
  "lib/icons/aframe.ts"() {
    IconAframe = `<svg id="aframe" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M61.18,50.97L37.71,11.86c-.78-1.29-2.65-1.29-3.43,0L10.82,50.97c-.8,1.33.16,3.03,1.71,3.03h18.97v-13.5h9v13.5h18.97c1.55,0,2.51-1.7,1.71-3.03Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="31.5" y="40.5" width="9" height="13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M61.18,50.97L37.71,11.86c-.78-1.29-2.65-1.29-3.43,0L10.82,50.97c-.8,1.33.16,3.03,1.71,3.03h46.94c1.55,0,2.51-1.7,1.71-3.03Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="17.1" y1="40.5" x2="54.9" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="25.2" y1="27" x2="46.8" y2="27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    aframe_default = IconAframe;
  }
});

// lib/icons/artwork-frame.ts
var artwork_frame_exports = {};
__export(artwork_frame_exports, {
  IconArtworkFrame: () => IconArtworkFrame,
  default: () => artwork_frame_default
});
var IconArtworkFrame, artwork_frame_default;
var init_artwork_frame = __esm({
  "lib/icons/artwork-frame.ts"() {
    IconArtworkFrame = `<svg id="artwork-frame" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="18" width="36" height="36" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M18,9s2.01,2.5,4.5,2.5,4.5-2.5,4.5-2.5c0,0,2.01,2.5,4.5,2.5s4.5-2.5,4.5-2.5c0,0,2.01,2.5,4.5,2.5s4.5-2.5,4.5-2.5c0,0,2.01,2.5,4.5,2.5s4.5-2.5,4.5-2.5h9v9s-2.5,2.01-2.5,4.5,2.5,4.5,2.5,4.5c0,0-2.5,2.01-2.5,4.5s2.5,4.5,2.5,4.5c0,0-2.5,2.01-2.5,4.5s2.5,4.5,2.5,4.5c0,0-2.5,2.01-2.5,4.5s2.5,4.5,2.5,4.5v9h-9s-2.01-2.5-4.5-2.5-4.5,2.5-4.5,2.5c0,0-2.01-2.5-4.5-2.5s-4.5,2.5-4.5,2.5c0,0-2.01-2.5-4.5-2.5s-4.5,2.5-4.5,2.5c0,0-2.01-2.5-4.5-2.5s-4.5,2.5-4.5,2.5h-9v-9s2.5-2.01,2.5-4.5-2.5-4.5-2.5-4.5c0,0,2.5-2.01,2.5-4.5s-2.5-4.5-2.5-4.5c0,0,2.5-2.01,2.5-4.5s-2.5-4.5-2.5-4.5c0,0,2.5-2.01,2.5-4.5s-2.5-4.5-2.5-4.5v-9h9Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="18" width="36" height="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    artwork_frame_default = IconArtworkFrame;
  }
});

// lib/icons/barbecue.ts
var barbecue_exports = {};
__export(barbecue_exports, {
  IconBarbecue: () => IconBarbecue,
  default: () => barbecue_default
});
var IconBarbecue, barbecue_default;
var init_barbecue = __esm({
  "lib/icons/barbecue.ts"() {
    IconBarbecue = `<svg id="barbecue" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M57.99,22.5c.28,0,.51.23.51.51-.27,12.19-10.24,21.99-22.49,21.99s-22.22-9.8-22.49-21.99c0-.28.23-.51.51-.51h43.97Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M57.99,22.5c.28,0,.51.23.51.51-.27,12.19-10.24,21.99-22.49,21.99s-22.22-9.8-22.49-21.99c0-.28.23-.51.51-.51h43.97Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="31.5" x2="15.87" y2="31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="56.57" y1="31.5" x2="63.43" y2="31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,45c-.67,0-1.34-.04-2-.09v17.59c0,.28.22.5.5.5h3c.28,0,.5-.22.5-.5v-17.59c-.66.06-1.33.09-2,.09Z" style="fill: var(--icon-line-color, currentColor);"/><g><path d="M24.45,41.81l-6.84,20.53c-.11.32.13.66.47.66h3.16c.22,0,.41-.14.47-.34l6.36-19.09c-1.27-.48-2.48-1.06-3.63-1.75Z" style="fill: var(--icon-line-color, currentColor);"/><path d="M47.55,41.81c-1.15.69-2.36,1.28-3.63,1.75l6.36,19.09c.07.2.26.34.47.34h3.16c.34,0,.58-.33.47-.66l-6.84-20.53Z" style="fill: var(--icon-line-color, currentColor);"/></g><path d="M31.5,29.25c0-10-9-10-9-22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,29.25c0-10-9-10-9-22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,29.25c0-10-9-10-9-22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    barbecue_default = IconBarbecue;
  }
});

// lib/icons/bathroom-essentials.ts
var bathroom_essentials_exports = {};
__export(bathroom_essentials_exports, {
  IconBathroomEssentials: () => IconBathroomEssentials,
  default: () => bathroom_essentials_default
});
var IconBathroomEssentials, bathroom_essentials_default;
var init_bathroom_essentials = __esm({
  "lib/icons/bathroom-essentials.ts"() {
    IconBathroomEssentials = `<svg id="bathroom-essentials" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M22.51,18.1s0-.07-.01-.1v-8.5c0-.28-.22-.5-.5-.5h-8c-.28,0-.5.22-.5.5v8.5s0,.07-.01.1l-2.77,11.06c-1.14,4.54-1.7,9.21-1.68,13.89l.05,10.38c-.04.3.19.57.5.57h16.85c.3,0,.54-.27.5-.57l.05-10.38c.02-4.68-.54-9.35-1.68-13.89l-2.77-11.06Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M40.5,9h-8.5c-.28,0-.5.22-.5.5v12.5c0,.28.22.5.5.5h8.41c.05-.87.09-1.74.09-2.62v-10.88Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M14,9h8c.28,0,.5.22.5.5v8.6s2.79,11.06,2.79,11.06c1.14,4.54,1.7,9.21,1.68,13.89l-.05,10.38c.04.3-.19.57-.49.57H9.58c-.3,0-.54-.27-.49-.57l-.05-10.38c-.02-4.68.54-9.35,1.68-13.89l2.77-11.06v-.1s.01-8.5.01-8.5c0-.28.22-.5.5-.5Z" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,54v-6.38c0-4.71.76-9.39,2.25-13.87h0c1.49-4.47,2.25-9.15,2.25-13.87v-10.88s-8.5,0-8.5,0c-.28,0-.5.22-.5.5v12.5c0,.28.22.5.5.5h7.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,9h11.5c1.1,0,2,.9,2,2v41c0,1.1-.9,2-2,2h-11.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="18.61" x2="63" y2="18.61" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="27" x2="63" y2="27" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="36" x2="63" y2="36" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="45" x2="63" y2="45" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.49" y1="18.07" x2="22.51" y2="18.07" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    bathroom_essentials_default = IconBathroomEssentials;
  }
});

// lib/icons/binoculars.ts
var binoculars_exports = {};
__export(binoculars_exports, {
  IconBinoculars: () => IconBinoculars,
  default: () => binoculars_default
});
var IconBinoculars, binoculars_default;
var init_binoculars = __esm({
  "lib/icons/binoculars.ts"() {
    IconBinoculars = `<svg id="binoculars" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="38.17" y="15.64" width="18.18" height="18.18" transform="translate(31.33 -26.18) rotate(45)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><rect x="27.14" y="28.5" width="14.55" height="18.18" transform="translate(36.66 -13.32) rotate(45)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><rect x="16.1" y="41.36" width="10.91" height="18.18" transform="translate(41.98 -.46) rotate(45)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><line x1="44.69" y1="9.31" x2="62.69" y2="27.31" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><line x1="8.69" y1="50.45" x2="21.55" y2="63.31" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><rect x="38.17" y="15.64" width="18.18" height="18.18" transform="translate(31.33 -26.18) rotate(45)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="27.14" y="28.5" width="14.55" height="18.18" transform="translate(36.66 -13.32) rotate(45)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="16.1" y="41.36" width="10.91" height="18.18" transform="translate(41.98 -.46) rotate(45)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="44.69" y1="9.31" x2="62.69" y2="27.31" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="8.69" y1="50.45" x2="21.55" y2="63.31" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    binoculars_default = IconBinoculars;
  }
});

// lib/icons/blender.ts
var blender_exports = {};
__export(blender_exports, {
  IconBlender: () => IconBlender,
  default: () => blender_default
});
var IconBlender, blender_default;
var init_blender = __esm({
  "lib/icons/blender.ts"() {
    IconBlender = `<svg id="blender" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M47.99,27.5c-13.4,0-13.4,6.25-24.12,6.25l-.05.19c.67,4.76,1.68,10.16,3.22,15.56h18c2.29-8.03,3.42-16.06,3.97-22h-1.03Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M23.82,33.75c10.72,0,10.72-6.25,24.12-6.25" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="56" x2="36" y2="56" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M23,9c-.28,0-.5.22-.5.5v8.5s0,15.75,4.5,31.5h18c4.5-15.75,4.5-31.5,4.5-31.5v-8.5c0-.28-.22-.5-.5-.5h-26Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,49.5c3.85,3.85,4.41,11,4.49,12.98.01.28-.21.52-.5.52h-25.97c-.29,0-.51-.24-.5-.52.08-1.98.64-9.13,4.49-12.98h18Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,36v-14c0-2.21,1.79-4,4-4h32" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    blender_default = IconBlender;
  }
});

// lib/icons/bookcase.ts
var bookcase_exports = {};
__export(bookcase_exports, {
  IconBookcase: () => IconBookcase,
  default: () => bookcase_default
});
var IconBookcase, bookcase_default;
var init_bookcase = __esm({
  "lib/icons/bookcase.ts"() {
    IconBookcase = `<svg id="bookcase" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polyline points="13.5 63 13.5 13.5 58.5 13.5 58.5 63" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="58.5" x2="58.5" y2="58.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="36" x2="58.5" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="20.5" x2="22.5" y2="29.5" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="28.5" y1="20.5" x2="28.5" y2="29.5" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="34.5" y1="20.5" x2="34.5" y2="29.5" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49" y1="29" x2="40" y2="29" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="39.5" y1="43" x2="39.5" y2="52" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45.5" y1="43" x2="45.5" y2="52" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="51.5" y1="43" x2="51.5" y2="52" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    bookcase_default = IconBookcase;
  }
});

// lib/icons/brain.ts
var brain_exports = {};
__export(brain_exports, {
  IconBrain: () => IconBrain,
  default: () => brain_default
});
var IconBrain, brain_default;
var init_brain = __esm({
  "lib/icons/brain.ts"() {
    IconBrain = `<svg id="brain" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M63,36c0-7.46-6.04-13.5-13.5-13.5v-4.5c0-3.73-3.02-6.75-6.75-6.75s-6.75,3.02-6.75,6.75c0-3.73-3.02-6.75-6.75-6.75s-6.75,3.02-6.75,6.75v4.5c-7.46,0-13.5,6.04-13.5,13.5,0,6.09,4.04,11.24,9.58,12.92l-.58.58c0,4.97,4.03,9,9,9s9-4.03,9-9c0,4.97,4.03,9,9,9s9-4.03,9-9l-.58-.58c5.54-1.68,9.58-6.83,9.58-12.92Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M27,40.5c4.97,0,9,4.03,9,9s-4.03,9-9,9-9-4.03-9-9" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,40.5c-4.97,0-9,4.03-9,9s4.03,9,9,9,9-4.03,9-9" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,27c0,4.97,4.03,9,9,9" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,36c4.97,0,9-4.03,9-9" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,22.5c-2.49,0-4.5,2.01-4.5,4.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,22.5c2.49,0,4.5,2.01,4.5,4.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,18c0-3.73-3.02-6.75-6.75-6.75s-6.75,3.02-6.75,6.75v4.5c-7.46,0-13.5,6.04-13.5,13.5s6.04,13.5,13.5,13.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,18c0-3.73,3.02-6.75,6.75-6.75s6.75,3.02,6.75,6.75v4.5c7.46,0,13.5,6.04,13.5,13.5s-6.04,13.5-13.5,13.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="18" x2="36" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    brain_default = IconBrain;
  }
});

// lib/icons/branch2.ts
var branch2_exports = {};
__export(branch2_exports, {
  IconBranch2: () => IconBranch2,
  default: () => branch2_default
});
var IconBranch2, branch2_default;
var init_branch2 = __esm({
  "lib/icons/branch2.ts"() {
    IconBranch2 = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g id="leaf_2" data-name="leaf 2"><path d="M39.49,20.31c-2.89,2.89-8.73,1.75-8.73,1.75,0,0-1.15-5.84,1.75-8.73,2.89-2.89,8.73-1.75,8.73-1.75,0,0,1.15,5.84-1.75,8.73Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M21.49,22.59c0,4.09-4.94,7.41-4.94,7.41,0,0-4.94-3.32-4.94-7.41,0-4.09,4.94-7.41,4.94-7.41,0,0,4.94,3.32,4.94,7.41Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M39.49,20.31c-2.89,2.89-8.73,1.75-8.73,1.75,0,0-1.15-5.84,1.75-8.73,2.89-2.89,8.73-1.75,8.73-1.75,0,0,1.15,5.84-1.75,8.73Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M21.49,22.59c0,4.09-4.94,7.41-4.94,7.41,0,0-4.94-3.32-4.94-7.41,0-4.09,4.94-7.41,4.94-7.41,0,0,4.94,3.32,4.94,7.41Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g id="furniture-chair_4" data-name="furniture-chair 4"><path d="M31.5,21s-4.5,15.75,0,29.25" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="16.56" y1="30" x2="29.5" y2="36.75" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,66c31.5-13.5,45-49.5,45-49.5l-4.5-4.5s-13.5,36-45,49.5l4.5,4.5Z" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    branch2_default = IconBranch2;
  }
});

// lib/icons/branch3.ts
var branch3_exports = {};
__export(branch3_exports, {
  IconBranch3: () => IconBranch3,
  default: () => branch3_default
});
var IconBranch3, branch3_default;
var init_branch3 = __esm({
  "lib/icons/branch3.ts"() {
    IconBranch3 = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g id="leaf_2" data-name="leaf 2"><path d="M37.13,18.31c2.89,2.89,8.73,1.75,8.73,1.75,0,0,1.15-5.84-1.75-8.73-2.89-2.89-8.73-1.75-8.73-1.75,0,0-1.15,5.84,1.75,8.73Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M55.12,20.59c0,4.09,4.94,7.41,4.94,7.41,0,0,4.94-3.32,4.94-7.41,0-4.09-4.94-7.41-4.94-7.41,0,0-4.94,3.32-4.94,7.41Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M6.07,27.51s5.84-2.15,8.73.75,1.75,8.73,1.75,8.73c0,0-5.84,1.15-8.73-1.75-2.89-2.89-1.75-7.73-1.75-7.73Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M24.25,59.05c-3.8,1.5-8.7-1.87-8.7-1.87,0,0,1.27-5.81,5.07-7.32,3.8-1.5,8.7,1.87,8.7,1.87,0,0-1.27,5.81-5.07,7.32Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M37.13,18.31c2.89,2.89,8.73,1.75,8.73,1.75,0,0,1.15-5.84-1.75-8.73-2.89-2.89-8.73-1.75-8.73-1.75,0,0-1.15,5.84,1.75,8.73Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M55.12,20.59c0,4.09,4.94,7.41,4.94,7.41,0,0,4.94-3.32,4.94-7.41,0-4.09-4.94-7.41-4.94-7.41,0,0-4.94,3.32-4.94,7.41Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M6.07,27.51s5.84-2.15,8.73.75,1.75,8.73,1.75,8.73c0,0-5.84,1.15-8.73-1.75-2.89-2.89-1.75-7.73-1.75-7.73Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M24.25,59.05c-3.8,1.5-8.7-1.87-8.7-1.87,0,0,1.27-5.81,5.07-7.32,3.8-1.5,8.7,1.87,8.7,1.87,0,0-1.27,5.81-5.07,7.32Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g id="furniture-chair_4" data-name="furniture-chair 4"><path d="M45.12,19s4.5,15.75,0,29.25" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="60.06" y1="28" x2="47.12" y2="33.11" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M15.2,36.99s9.85,3.44,18.3.63" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="28.57" y1="53.64" x2="36.71" y2="41.29" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M60.06,56.87s-27.81-7.94-43.65-47.52" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    branch3_default = IconBranch3;
  }
});

// lib/icons/branch.ts
var branch_exports = {};
__export(branch_exports, {
  IconBranch: () => IconBranch,
  default: () => branch_default
});
var IconBranch, branch_default;
var init_branch = __esm({
  "lib/icons/branch.ts"() {
    IconBranch = `<svg id="furniture-chair_4" data-name="furniture-chair 4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M31.5,18s-4.5,15.75,0,29.25" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="16.56" y1="27" x2="29.5" y2="33.75" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,63C49.5,49.5,63,13.5,63,13.5l-4.5-4.5s-13.5,36-45,49.5l4.5,4.5Z" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    branch_default = IconBranch;
  }
});

// lib/icons/bulb.ts
var bulb_exports = {};
__export(bulb_exports, {
  IconBulb: () => IconBulb,
  default: () => bulb_default
});
var IconBulb, bulb_default;
var init_bulb = __esm({
  "lib/icons/bulb.ts"() {
    IconBulb = `<svg id="bulb" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54,27c0-9.94-8.06-18-18-18s-18,8.06-18,18c0,13.5,10.8,18,10.8,27v5c0,2.21,1.79,4,4,4h6.4c2.21,0,4-1.79,4-4v-5c0-9,10.8-13.5,10.8-27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M40.5,31.5c0,2.49-2.01,4.5-4.5,4.5s-4.5-2.01-4.5-4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,27c0-9.94-8.06-18-18-18s-18,8.06-18,18c0,13.5,10.8,18,10.8,27v5c0,2.21,1.79,4,4,4h6.4c2.21,0,4-1.79,4-4v-5c0-9,10.8-13.5,10.8-27" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="54" x2="45" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    bulb_default = IconBulb;
  }
});

// lib/icons/cactus.ts
var cactus_exports = {};
__export(cactus_exports, {
  IconCactus: () => IconCactus,
  default: () => cactus_default
});
var IconCactus, cactus_default;
var init_cactus = __esm({
  "lib/icons/cactus.ts"() {
    IconCactus = `<svg id="cactus" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M58.06,18.02c-2.34.22-4.06,2.32-4.06,4.67v4.31h-9v-9c0-4.97-4.03-9-9-9s-9,4.03-9,9v22.5h-9v-9c0-2.63-2.26-4.73-4.94-4.48-2.34.22-4.06,2.32-4.06,4.67v9.81c0,4.42,3.58,8,8,8h10v13.5h18v-27h10c4.42,0,8-3.58,8-8v-5.5c0-2.63-2.26-4.73-4.94-4.48Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M58.06,18.02c-2.34.22-4.06,2.32-4.06,4.67v4.31h-9v-9c0-4.97-4.03-9-9-9s-9,4.03-9,9v22.5h-9v-9c0-2.63-2.26-4.73-4.94-4.48-2.34.22-4.06,2.32-4.06,4.67v9.81c0,4.42,3.58,8,8,8h10v13.5h18v-27h10c4.42,0,8-3.58,8-8v-5.5c0-2.63-2.26-4.73-4.94-4.48Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="63" x2="58.5" y2="63" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cactus_default = IconCactus;
  }
});

// lib/icons/camper.ts
var camper_exports = {};
__export(camper_exports, {
  IconCamper: () => IconCamper,
  default: () => camper_default
});
var IconCamper, camper_default;
var init_camper = __esm({
  "lib/icons/camper.ts"() {
    IconCamper = `<svg id="tent-camping" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M58.5,18H13c-2.21,0-4,1.79-4,4v32h4.5c0-2.49,2.01-4.5,4.5-4.5s4.5,2.01,4.5,4.5h18v-27h18c2.49,0,4.5-2.01,4.5-4.5s-2.01-4.5-4.5-4.5ZM31.5,36h-13.5v-9h13.5v9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><circle cx="18" cy="54" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="54" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,54h-4.5V22c0-2.21,1.79-4,4-4h45.5c2.49,0,4.5,2.01,4.5,4.5h0c0,2.49-2.01,4.5-4.5,4.5h-18v27h-18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="54" x2="45" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="54 54 63 54 63 40.5 54 27 40.5 27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="27" width="13.5" height="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 27 49.5 40.5 63 40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    camper_default = IconCamper;
  }
});

// lib/icons/caravan.ts
var caravan_exports = {};
__export(caravan_exports, {
  IconCaravan: () => IconCaravan,
  default: () => caravan_default
});
var IconCaravan, caravan_default;
var init_caravan = __esm({
  "lib/icons/caravan.ts"() {
    IconCaravan = `<svg id="tent-camping" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,18h-18c-7.46,0-13.5,6.04-13.5,13.5,0,5.88,3.76,10.86,9,12.72v-12.72c0-2.49,2.01-4.5,4.5-4.5s4.5,2.01,4.5,4.5v13.5h13.5c7.46,0,13.5-6.04,13.5-13.5s-6.04-13.5-13.5-13.5ZM45,34c0,1.1-.9,2-2,2h-5c-1.1,0-2-.9-2-2v-5c0-1.1.9-2,2-2h5c1.1,0,2,.9,2,2v5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M40.5,18h-18c-7.46,0-13.5,6.04-13.5,13.5s6.04,13.5,13.5,13.5h18c7.46,0,13.5-6.04,13.5-13.5s-6.04-13.5-13.5-13.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="31.5" cy="49.5" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="45" x2="63" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="40.5" x2="58.5" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,45v-13.5c0-2.49-2.01-4.5-4.5-4.5s-4.5,2.01-4.5,4.5v12.73" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="36" y="27" width="9" height="9" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    caravan_default = IconCaravan;
  }
});

// lib/icons/chip.ts
var chip_exports = {};
__export(chip_exports, {
  IconChip: () => IconChip,
  default: () => chip_default
});
var IconChip, chip_default;
var init_chip = __esm({
  "lib/icons/chip.ts"() {
    IconChip = `<svg id="chip" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="27" y1="9" x2="27" y2="18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="9" x2="36" y2="18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="9" x2="45" y2="18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="54" x2="27" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="54" x2="36" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="54" x2="45" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="45" x2="18" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="36" x2="18" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="27" x2="18" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="45" x2="63" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="36" x2="63" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="27" x2="63" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="18" width="36" height="36" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="18" y="18" width="36" height="36" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chip_default = IconChip;
  }
});

// lib/icons/cleaning-bucket.ts
var cleaning_bucket_exports = {};
__export(cleaning_bucket_exports, {
  IconCleaningBucket: () => IconCleaningBucket,
  default: () => cleaning_bucket_default
});
var IconCleaningBucket, cleaning_bucket_default;
var init_cleaning_bucket = __esm({
  "lib/icons/cleaning-bucket.ts"() {
    IconCleaningBucket = `<svg id="cleaning-bucket" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.5,22.5c0-7.46,6.04-13.5,13.5-13.5s13.5,6.04,13.5,13.5v4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,47.5v-17c0-4.42,3.58-8,8-8h12.5c1.1,0,2,.9,2,2v23c0,1.1-.9,2-2,2H15.5c-1.1,0-2-.9-2-2Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M36,27h15.69c1.22,0,2.15,1.08,1.98,2.28l-3.93,27.5c-.14.99-.98,1.72-1.98,1.72h-23.53c-1,0-1.84-.73-1.98-1.72l-1.04-7.28" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,47.5v-17c0-4.42,3.58-8,8-8h12.5c1.1,0,2,.9,2,2v23c0,1.1-.9,2-2,2H15.5c-1.1,0-2-.9-2-2Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="40.5" x2="36" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cleaning_bucket_default = IconCleaningBucket;
  }
});

// lib/icons/cleaning-spray.ts
var cleaning_spray_exports = {};
__export(cleaning_spray_exports, {
  IconCleaningSpray: () => IconCleaningSpray,
  default: () => cleaning_spray_default
});
var IconCleaningSpray, cleaning_spray_default;
var init_cleaning_spray = __esm({
  "lib/icons/cleaning-spray.ts"() {
    IconCleaningSpray = `<svg id="cleaning-spray" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M38.32,65.28v-18c-15,0-15,9-27,9v9h27Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M11.32,56.28c12,0,12-9,27-9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M11.32,65.28h27v-19.19c0-2.12-.84-4.16-2.34-5.66l-4.31-4.31c-1.5-1.5-2.34-3.54-2.34-5.66v-5.69h-9v5.69c0,2.12-.84,4.16-2.34,5.66l-4.31,4.31c-1.5,1.5-2.34,3.54-2.34,5.66v19.19Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M14.5,12.59h0c-1.76,1.76-1.76,4.61,0,6.36l5.82,5.82h9l4.5-4.5h9v-9h-25.14c-1.19,0-2.34.47-3.18,1.32Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="33.82 11.28 33.82 20.28 38.32 29.28" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="60.82" y1="20.28" x2="60.82" y2="20.28" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="60.82" y1="11.28" x2="60.82" y2="11.28" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="51.82" y1="15.78" x2="51.82" y2="15.78" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cleaning_spray_default = IconCleaningSpray;
  }
});

// lib/icons/closet.ts
var closet_exports = {};
__export(closet_exports, {
  IconCloset: () => IconCloset,
  default: () => closet_default
});
var IconCloset, closet_default;
var init_closet = __esm({
  "lib/icons/closet.ts"() {
    IconCloset = `<svg id="closet" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="9" width="45" height="49.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="29" y1="27" x2="29" y2="27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="51.22" x2="36" y2="51.22" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="43" y1="27" x2="43" y2="27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="9" width="45" height="49.5" rx="2" ry="2" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="63" x2="22.5" y2="58.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="63" x2="49.5" y2="58.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="9" x2="36" y2="45" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="45" x2="58.5" y2="45" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    closet_default = IconCloset;
  }
});

// lib/icons/coins.ts
var coins_exports = {};
__export(coins_exports, {
  IconCoins: () => IconCoins,
  default: () => coins_default
});
var IconCoins, coins_default;
var init_coins = __esm({
  "lib/icons/coins.ts"() {
    IconCoins = `<svg id="coins" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M49.5,13.5c-13.5,0-13.5,4.5-13.5,4.5v36s0,4.5,13.5,4.5,13.5-4.5,13.5-4.5V18s0-4.5-13.5-4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M9,31.5s0,4.5,13.5,4.5,13.5-4.5,13.5-4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,22.5s0,4.5,13.5,4.5,13.5-4.5,13.5-4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,40.5s0,4.5,13.5,4.5,13.5-4.5,13.5-4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="9 22.5 9 31.5 9 40.5 9 49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,18c-13.5,0-13.5,4.5-13.5,4.5v27s0,4.5,13.5,4.5,13.5-4.5,13.5-4.5v-27s0-4.5-13.5-4.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,27s0,4.5,13.5,4.5,13.5-4.5,13.5-4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,18s0,4.5,13.5,4.5,13.5-4.5,13.5-4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,45s0,4.5,13.5,4.5,13.5-4.5,13.5-4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,36s0,4.5,13.5,4.5,13.5-4.5,13.5-4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 22.5 36 31.5 36 40.5 36 49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,13.5c-13.5,0-13.5,4.5-13.5,4.5v36s0,4.5,13.5,4.5,13.5-4.5,13.5-4.5V18s0-4.5-13.5-4.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    coins_default = IconCoins;
  }
});

// lib/icons/compass2.ts
var compass2_exports = {};
__export(compass2_exports, {
  IconCompass2: () => IconCompass2,
  default: () => compass2_default
});
var IconCompass2, compass2_default;
var init_compass2 = __esm({
  "lib/icons/compass2.ts"() {
    IconCompass2 = `<svg id="compass_2" data-name="compass 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="13.5" r="4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,18c-12.43,0-22.5,10.07-22.5,22.5s10.07,22.5,22.5,22.5,22.5-10.07,22.5-22.5-10.07-22.5-22.5-22.5ZM38.65,43.15l-10.61,5.3,5.3-10.61,10.61-5.3-5.3,10.61Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><circle cx="36" cy="40.5" r="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="43.95 32.55 33.35 37.85 28.05 48.45 38.65 43.15 43.95 32.55" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    compass2_default = IconCompass2;
  }
});

// lib/icons/compass.ts
var compass_exports = {};
__export(compass_exports, {
  IconCompass: () => IconCompass,
  default: () => compass_default
});
var IconCompass, compass_default;
var init_compass = __esm({
  "lib/icons/compass.ts"() {
    IconCompass = `<svg id="compass" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,9c-14.91,0-27,12.09-27,27s12.09,27,27,27,27-12.09,27-27-12.09-27-27-27ZM39.18,39.18l-12.73,6.36,6.36-12.73,12.73-6.36-6.36,12.73Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><circle cx="36" cy="36" r="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45.55 26.45 32.82 32.82 26.45 45.55 39.18 39.18 45.55 26.45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    compass_default = IconCompass;
  }
});

// lib/icons/cube3d.ts
var cube3d_exports = {};
__export(cube3d_exports, {
  IconCube3d: () => IconCube3d,
  default: () => cube3d_default
});
var IconCube3d, cube3d_default;
var init_cube3d = __esm({
  "lib/icons/cube3d.ts"() {
    IconCube3d = `<svg id="cube-3d" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><polygon points="13.5 23.62 36 11.25 58.5 23.62 58.5 48.38 36 60.75 13.5 48.38 13.5 23.62" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><polyline points="13.5 23.62 36 36 58.5 23.62" style="fill: red; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; opacity: .5;" /></g><g><polyline points="13.5 23.62 36 36 58.5 23.62" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="60.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="13.5 23.62 36 11.25 58.5 23.62 58.5 48.38 36 60.75 13.5 48.38 13.5 23.62" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    cube3d_default = IconCube3d;
  }
});

// lib/icons/education.ts
var education_exports = {};
__export(education_exports, {
  IconEducation: () => IconEducation,
  default: () => education_default
});
var IconEducation, education_default;
var init_education = __esm({
  "lib/icons/education.ts"() {
    IconEducation = `<svg id="education" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M58.5,31.5l-22.5-13.5-22.5,13.5,7.5,4.5h-.75v13.5s7.05,4.5,15.75,4.5,15.75-4.5,15.75-4.5v-13.5h-.75l7.5-4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="13.5" y1="31.5" x2="13.5" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="13.5 31.5 36 18 58.5 31.5 36 45 13.5 31.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M51.75,36v13.5s-7.05,4.5-15.75,4.5-15.75-4.5-15.75-4.5v-13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    education_default = IconEducation;
  }
});

// lib/icons/factory-arm.ts
var factory_arm_exports = {};
__export(factory_arm_exports, {
  IconFactoryArm: () => IconFactoryArm,
  default: () => factory_arm_default
});
var IconFactoryArm, factory_arm_default;
var init_factory_arm = __esm({
  "lib/icons/factory-arm.ts"() {
    IconFactoryArm = `<svg id="factory-arm" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M15.75,63c0-7.46,6.04-13.5,13.5-13.5s13.5,6.04,13.5,13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><circle cx="22.5" cy="22.5" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><circle cx="49.75" cy="13.5" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polyline points="20.25 54 19 27 27 27 38.25 54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M15.75,63c0-7.46,6.04-13.5,13.5-13.5s13.5,6.04,13.5,13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="63" x2="49.5" y2="63" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="22.5" cy="22.5" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="27 18 27 25 43 15 43 12 27 18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="47.25 36 42.75 31.5 47.25 27 51.75 27 56.25 31.5 51.75 36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.75" cy="13.5" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.75" y1="18.5" x2="49.75" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    factory_arm_default = IconFactoryArm;
  }
});

// lib/icons/factory-belt.ts
var factory_belt_exports = {};
__export(factory_belt_exports, {
  IconFactoryBelt: () => IconFactoryBelt,
  default: () => factory_belt_default
});
var IconFactoryBelt, factory_belt_default;
var init_factory_belt = __esm({
  "lib/icons/factory-belt.ts"() {
    IconFactoryBelt = `<svg id="factory-belt" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54,45H18c-4.97,0-9,4.03-9,9s4.03,9,9,9h36c4.97,0,9-4.03,9-9s-4.03-9-9-9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M54,45H18c-4.97,0-9,4.03-9,9s4.03,9,9,9h36c4.97,0,9-4.03,9-9s-4.03-9-9-9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="54" x2="18" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="54" x2="27" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="54" x2="36" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="54" x2="45" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="54" x2="54" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="31.5" width="13.5" height="13.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="20.25" y1="31.5" x2="20.25" y2="37.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 27 13.5 22.5 18 18 18 18 22.5 22.5 22.5 27" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="9" x2="18" y2="18" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="31.5 27 31.5 22.5 36 18 36 18 40.5 22.5 40.5 27" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="9" x2="36" y2="18" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 27 49.5 22.5 54 18 54 18 58.5 22.5 58.5 27" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="9" x2="54" y2="18" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="9" x2="63" y2="9" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    factory_belt_default = IconFactoryBelt;
  }
});

// lib/icons/factory.ts
var factory_exports = {};
__export(factory_exports, {
  IconFactory: () => IconFactory,
  default: () => factory_default
});
var IconFactory, factory_default;
var init_factory = __esm({
  "lib/icons/factory.ts"() {
    IconFactory = `<svg id="factory" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="9 58.5 9 45 9 31.5 27 40.5 27 31.5 45 40.5 45 40.5 45 31.5 63 40.5 63 58.5 9 58.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="9 58.5 9 45 9 31.5 27 40.5 27 31.5 45 40.5 45 40.5 45 31.5 63 40.5 63 58.5 9 58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="9 49.5 9 13.5 18 13.5 18 36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    factory_default = IconFactory;
  }
});

// lib/icons/fingerprint.ts
var fingerprint_exports = {};
__export(fingerprint_exports, {
  IconFingerprint: () => IconFingerprint,
  default: () => fingerprint_default
});
var IconFingerprint, fingerprint_default;
var init_fingerprint = __esm({
  "lib/icons/fingerprint.ts"() {
    IconFingerprint = `<svg id="fingerprint" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="38.25" cy="31.5" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><g><path d="M43.5,19.06c-.81-.34-1.66-.61-2.53-.79s-1.79-.27-2.72-.27-1.84.07-2.72.21-1.73.35-2.53.63-1.57.63-2.29,1.05-1.39.91-2,1.48-1.16,1.2-1.65,1.9-.9,1.48-1.24,2.32-.61,1.76-.79,2.74-.27,2.04-.27,3.16c0,1.69-.21,3.3-.58,4.84s-.9,3-1.53,4.37-1.37,2.65-2.16,3.84c-.79,1.19-1.63,2.28-2.48,3.26s-1.69,1.86-2.48,2.63c-.79.76-1.53,1.42-2.16,1.94s-1.16.93-1.53,1.2-.58.41-.58.41" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M47.25,58.5s.07-.21.19-.61.3-.98.51-1.71.46-1.63.72-2.66c.26-1.03.54-2.19.83-3.45s.56-2.64.83-4.09c.26-1.45.51-2.98.72-4.56s.39-3.22.51-4.88.19-3.35.19-5.04c0-.93-.09-1.84-.27-2.72s-.45-1.73-.79-2.53" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30.9,45.98c-.53,1.45-1.09,2.82-1.65,4.09-.56,1.27-1.12,2.43-1.65,3.45s-1.02,1.92-1.44,2.66-.77,1.32-1.02,1.71-.39.61-.39.61" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M38.25,58.5s.07-.21.19-.61.3-.98.51-1.71.46-1.63.72-2.66c.26-1.03.54-2.19.83-3.45s.56-2.64.83-4.09c.26-1.45.51-2.98.72-4.56s.39-3.22.51-4.88.19-3.35.19-5.04c0-.31-.03-.61-.09-.91s-.15-.58-.26-.84-.25-.52-.41-.76-.35-.46-.55-.67-.43-.39-.67-.55-.5-.3-.76-.41-.55-.2-.84-.26-.6-.09-.91-.09-.61.03-.91.09-.58.15-.84.26-.52.25-.76.41-.46.35-.67.55-.39.43-.55.67-.3.5-.41.76-.2.55-.26.84-.09.6-.09.91c0,1.69-.14,3.38-.39,5.04" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M57.67,53.52c-.26,1.03-.51,1.92-.72,2.66s-.39,1.32-.51,1.71-.19.61-.19.61" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M19.59,18.92c.81-1.2,1.73-2.31,2.75-3.33s2.13-1.94,3.33-2.75,2.48-1.51,3.82-2.07c1.35-.57,2.76-1.01,4.22-1.31,1.46-.3,2.98-.46,4.53-.46s3.07.16,4.53.46c1.46.3,2.88.74,4.22,1.31,1.35.57,2.62,1.27,3.82,2.07s2.31,1.73,3.33,2.75c1.02,1.02,1.94,2.13,2.75,3.33s1.51,2.48,2.07,3.82c.57,1.35,1.01,2.76,1.31,4.22.3,1.46.46,2.98.46,4.53,0,1.69-.07,3.38-.19,5.04s-.3,3.3-.51,4.88" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M15.98,34.99c-.05-.38-.09-.75-.12-1.09s-.05-.67-.07-.96-.03-.54-.03-.76,0-.38-.01-.5,0-.18,0-.18c0-1.55.16-3.07.46-4.53" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    fingerprint_default = IconFingerprint;
  }
});

// lib/icons/fire.ts
var fire_exports = {};
__export(fire_exports, {
  IconFire: () => IconFire,
  default: () => fire_default
});
var IconFire, fire_default;
var init_fire = __esm({
  "lib/icons/fire.ts"() {
    IconFire = `<svg id="fire" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,9l-9,18-4.5-4.5s-7.27,6.75-7.27,19.73c0,11.16,8.81,20.24,19.85,20.72-4.54-.46-8.08-4.29-8.08-8.95,0-9,9-18,9-18,0,0,9,9,9,18,0,4.66-3.54,8.49-8.08,8.95,11.04-.49,19.85-9.56,19.85-20.72,0-20.77-20.77-33.23-20.77-33.23Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M45,54c0,4.97-4.03,9-9,9s-9-4.03-9-9c0-9,9-18,9-18,0,0,9,9,9,18Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M15.23,42.23c0-12.98,7.27-19.73,7.27-19.73l4.5,4.5,9-18s20.77,12.46,20.77,33.23c0,11.47-9.3,20.77-20.77,20.77s-20.77-9.3-20.77-20.77" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    fire_default = IconFire;
  }
});

// lib/icons/fridge.ts
var fridge_exports = {};
__export(fridge_exports, {
  IconFridge: () => IconFridge,
  default: () => fridge_default
});
var IconFridge, fridge_default;
var init_fridge = __esm({
  "lib/icons/fridge.ts"() {
    IconFridge = `<svg id="fridge" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="9" width="36" height="54" rx="4" ry="4" transform="translate(72 72) rotate(-180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="31.5" y1="18" x2="27" y2="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="40.5" x2="27" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="9" width="36" height="54" rx="4" ry="4" transform="translate(72 72) rotate(-180)" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="27" x2="18" y2="27" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    fridge_default = IconFridge;
  }
});

// lib/icons/furniture-bed2.ts
var furniture_bed2_exports = {};
__export(furniture_bed2_exports, {
  IconFurnitureBed2: () => IconFurnitureBed2,
  default: () => furniture_bed2_default
});
var IconFurnitureBed2, furniture_bed2_default;
var init_furniture_bed2 = __esm({
  "lib/icons/furniture-bed2.ts"() {
    IconFurnitureBed2 = `<svg id="furniture-bed-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="36" width="45" height="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="18" y="18" width="36" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="18" y1="58.5" x2="18" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="58.5" x2="54" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="36" width="45" height="9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="45" width="45" height="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="13.5" y="45" width="45" height="9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="18 36 18 18 54 18 54 36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 36 45 27 27 27 27 36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_bed2_default = IconFurnitureBed2;
  }
});

// lib/icons/furniture-bed-king2.ts
var furniture_bed_king2_exports = {};
__export(furniture_bed_king2_exports, {
  IconFurnitureBedKing2: () => IconFurnitureBedKing2,
  default: () => furniture_bed_king2_default
});
var IconFurnitureBedKing2, furniture_bed_king2_default;
var init_furniture_bed_king2 = __esm({
  "lib/icons/furniture-bed-king2.ts"() {
    IconFurnitureBedKing2 = `<svg id="furniture-bed-king-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="9" y="36" width="54" height="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="13.5" y="18" width="45" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="13.5" y1="58.5" x2="13.5" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="58.5" x2="58.5" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="9" y="36" width="54" height="9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="9" y="45" width="54" height="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="9" y="45" width="54" height="9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 36 13.5 18 58.5 18 58.5 36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 36 45 27 27 27 27 36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_bed_king2_default = IconFurnitureBedKing2;
  }
});

// lib/icons/furniture-bed-king.ts
var furniture_bed_king_exports = {};
__export(furniture_bed_king_exports, {
  IconFurnitureBedKing: () => IconFurnitureBedKing,
  default: () => furniture_bed_king_default
});
var IconFurnitureBedKing, furniture_bed_king_default;
var init_furniture_bed_king = __esm({
  "lib/icons/furniture-bed-king.ts"() {
    IconFurnitureBedKing = `<svg id="furniture-bed-king" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="9" y="36" width="54" height="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="13.5" y="18" width="45" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="13.5" y1="58.5" x2="13.5" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="58.5" x2="58.5" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="9" y="36" width="54" height="13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 36 13.5 18 58.5 18 58.5 36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 36 45 27 27 27 27 36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_bed_king_default = IconFurnitureBedKing;
  }
});

// lib/icons/furniture-bed-single2.ts
var furniture_bed_single2_exports = {};
__export(furniture_bed_single2_exports, {
  IconFurnitureBedSingle2: () => IconFurnitureBedSingle2,
  default: () => furniture_bed_single2_default
});
var IconFurnitureBedSingle2, furniture_bed_single2_default;
var init_furniture_bed_single2 = __esm({
  "lib/icons/furniture-bed-single2.ts"() {
    IconFurnitureBedSingle2 = `<svg id="furniture-bed-single-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="36" width="36" height="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="22.5" y="18" width="27" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="22.5" y1="58.5" x2="22.5" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="58.5" x2="49.5" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="36" width="36" height="9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="45" width="36" height="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="18" y="45" width="36" height="9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 36 22.5 18 49.5 18 49.5 36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="40.5 36 40.5 27 31.5 27 31.5 36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_bed_single2_default = IconFurnitureBedSingle2;
  }
});

// lib/icons/furniture-bed-single.ts
var furniture_bed_single_exports = {};
__export(furniture_bed_single_exports, {
  IconFurnitureBedSingle: () => IconFurnitureBedSingle,
  default: () => furniture_bed_single_default
});
var IconFurnitureBedSingle, furniture_bed_single_default;
var init_furniture_bed_single = __esm({
  "lib/icons/furniture-bed-single.ts"() {
    IconFurnitureBedSingle = `<svg id="furniture-bed-single" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="36" width="36" height="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="22.5" y="18" width="27" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="22.5" y1="58.5" x2="22.5" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="58.5" x2="49.5" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="36" width="36" height="13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 36 22.5 18 49.5 18 49.5 36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="40.5 36 40.5 27 31.5 27 31.5 36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_bed_single_default = IconFurnitureBedSingle;
  }
});

// lib/icons/furniture-bed.ts
var furniture_bed_exports = {};
__export(furniture_bed_exports, {
  IconFurnitureBed: () => IconFurnitureBed,
  default: () => furniture_bed_default
});
var IconFurnitureBed, furniture_bed_default;
var init_furniture_bed = __esm({
  "lib/icons/furniture-bed.ts"() {
    IconFurnitureBed = `<svg id="furniture-bed" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="36" width="45" height="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="18" y="18" width="36" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="18" y1="58.5" x2="18" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="58.5" x2="54" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="36" width="45" height="13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="18 36 18 18 54 18 54 36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 36 45 27 27 27 27 36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_bed_default = IconFurnitureBed;
  }
});

// lib/icons/furniture-bedside-table.ts
var furniture_bedside_table_exports = {};
__export(furniture_bedside_table_exports, {
  IconFurnitureBedsideTable: () => IconFurnitureBedsideTable,
  default: () => furniture_bedside_table_default
});
var IconFurnitureBedsideTable, furniture_bedside_table_default;
var init_furniture_bedside_table = __esm({
  "lib/icons/furniture-bedside-table.ts"() {
    IconFurnitureBedsideTable = `<svg id="furniture-bedside-table" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="36" width="36" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="27 27 31.5 13.5 40.5 13.5 45 27 27 27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="22.5" y1="63" x2="22.5" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="63" x2="49.5" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="36" width="36" height="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="27 27 31.5 13.5 40.5 13.5 45 27 27 27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="45" x2="54" y2="45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_bedside_table_default = IconFurnitureBedsideTable;
  }
});

// lib/icons/furniture-chair2.ts
var furniture_chair2_exports = {};
__export(furniture_chair2_exports, {
  IconFurnitureChair2: () => IconFurnitureChair2,
  default: () => furniture_chair2_default
});
var IconFurnitureChair2, furniture_chair2_default;
var init_furniture_chair2 = __esm({
  "lib/icons/furniture-chair2.ts"() {
    IconFurnitureChair2 = `<svg id="furniture-chair_2" data-name="furniture-chair 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54,31.5v-9.5c0-2.21-1.79-4-4-4h-28c-2.21,0-4,1.79-4,4v9.5h-4.5v18h45v-18h-4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M17.5,49.5h37c2.21,0,4-1.79,4-4v-9.5c0-2.49-2.01-4.5-4.5-4.5h0c-2.49,0-4.5,2.01-4.5,4.5v4.5h-27v-4.5c0-2.49-2.01-4.5-4.5-4.5h0c-2.49,0-4.5,2.01-4.5,4.5v9.5c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="54" x2="22.5" y2="49.5" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="54" x2="49.5" y2="49.5" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,31.5v-9.5c0-2.21-1.79-4-4-4h-28c-2.21,0-4,1.79-4,4v9.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_chair2_default = IconFurnitureChair2;
  }
});

// lib/icons/furniture-chair3.ts
var furniture_chair3_exports = {};
__export(furniture_chair3_exports, {
  IconFurnitureChair3: () => IconFurnitureChair3,
  default: () => furniture_chair3_default
});
var IconFurnitureChair3, furniture_chair3_default;
var init_furniture_chair3 = __esm({
  "lib/icons/furniture-chair3.ts"() {
    IconFurnitureChair3 = `<svg id="furniture-chair_3" data-name="furniture-chair 3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.5,36v4.5h27v-4.5c0-2.49,2.01-4.5,4.5-4.5v-9.5c0-2.21-1.79-4-4-4h-28c-2.21,0-4,1.79-4,4v9.5c2.49,0,4.5,2.01,4.5,4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M58.5,31.5h-4.5c-2.49,0-4.5,2.01-4.5,4.5v4.5h-27v-4.5c0-2.49-2.01-4.5-4.5-4.5h-4.5c-2.49,0-4.5,2.01-4.5,4.5s2.01,4.5,4.5,4.5v5c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4v-5c2.49,0,4.5-2.01,4.5-4.5s-2.01-4.5-4.5-4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="22.5" y1="54" x2="22.5" y2="49.5" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="54" x2="49.5" y2="49.5" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,31.5v-9.5c0-2.21-1.79-4-4-4h-28c-2.21,0-4,1.79-4,4v9.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5h-4.5c-2.49,0-4.5,2.01-4.5,4.5v4.5h-27v-4.5c0-2.49-2.01-4.5-4.5-4.5h-4.5c-2.49,0-4.5,2.01-4.5,4.5h0c0,2.49,2.01,4.5,4.5,4.5h0v5c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4v-5h0c2.49,0,4.5-2.01,4.5-4.5h0c0-2.49-2.01-4.5-4.5-4.5Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_chair3_default = IconFurnitureChair3;
  }
});

// lib/icons/furniture-chair4.ts
var furniture_chair4_exports = {};
__export(furniture_chair4_exports, {
  IconFurnitureChair4: () => IconFurnitureChair4,
  default: () => furniture_chair4_default
});
var IconFurnitureChair4, furniture_chair4_default;
var init_furniture_chair4 = __esm({
  "lib/icons/furniture-chair4.ts"() {
    IconFurnitureChair4 = `<svg id="furniture-chair_4" data-name="furniture-chair 4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.5,36v.5c0,2.21,1.79,4,4,4h19c2.21,0,4-1.79,4-4v-.5c0-2.49,2.01-4.5,4.5-4.5v-1.5c0-6.63-5.37-12-12-12h-12c-6.63,0-12,5.37-12,12v1.5c2.49,0,4.5,2.01,4.5,4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M54,31.5c-2.49,0-4.5,2.01-4.5,4.5v.5c0,2.21-1.79,4-4,4h-19c-2.21,0-4-1.79-4-4v-.5c0-2.49-2.01-4.5-4.5-4.5s-4.5,2.01-4.5,4.5v1.5c0,6.63,5.37,12,12,12h21c6.63,0,12-5.37,12-12v-1.5c0-2.49-2.01-4.5-4.5-4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M25.5,49.5h21c6.63,0,12-5.37,12-12v-1.5c0-2.49-2.01-4.5-4.5-4.5h0c-2.49,0-4.5,2.01-4.5,4.5v.5c0,2.21-1.79,4-4,4h-19c-2.21,0-4-1.79-4-4v-.5c0-2.49-2.01-4.5-4.5-4.5h0c-2.49,0-4.5,2.01-4.5,4.5v1.5c0,6.63,5.37,12,12,12Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="54" x2="22.5" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="54" x2="49.5" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,31.5v-1.5c0-6.63-5.37-12-12-12h-12c-6.63,0-12,5.37-12,12v1.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_chair4_default = IconFurnitureChair4;
  }
});

// lib/icons/furniture-chair.ts
var furniture_chair_exports = {};
__export(furniture_chair_exports, {
  IconFurnitureChair: () => IconFurnitureChair,
  default: () => furniture_chair_default
});
var IconFurnitureChair, furniture_chair_default;
var init_furniture_chair = __esm({
  "lib/icons/furniture-chair.ts"() {
    IconFurnitureChair = `<svg id="furniture-chair" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="54 31.5 54 13.5 18 13.5 18 31.5 13.5 31.5 13.5 49.5 58.5 49.5 58.5 31.5 54 31.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="13.5 49.5 58.5 49.5 58.5 31.5 49.5 31.5 49.5 40.5 22.5 40.5 22.5 31.5 13.5 31.5 13.5 49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="58.5" x2="22.5" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="58.5" x2="49.5" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="54 31.5 54 13.5 18 13.5 18 31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_chair_default = IconFurnitureChair;
  }
});

// lib/icons/furniture-couch2.ts
var furniture_couch2_exports = {};
__export(furniture_couch2_exports, {
  IconFurnitureCouch2: () => IconFurnitureCouch2,
  default: () => furniture_couch2_default
});
var IconFurnitureCouch2, furniture_couch2_default;
var init_furniture_couch2 = __esm({
  "lib/icons/furniture-couch2.ts"() {
    IconFurnitureCouch2 = `<svg id="furniture-couch_2" data-name="furniture-couch 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M63,49.5H9v-18h4.5v-5c0-2.21,1.79-4,4-4h37c2.21,0,4,1.79,4,4v5h4.5v18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M13,49.5h46c2.21,0,4-1.79,4-4v-9.5c0-2.49-2.01-4.5-4.5-4.5h0c-2.49,0-4.5,2.01-4.5,4.5v4.5H18v-4.5c0-2.49-2.01-4.5-4.5-4.5h0c-2.49,0-4.5,2.01-4.5,4.5v9.5c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="54" x2="18" y2="49.5" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="54" x2="54" y2="49.5" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v-5c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_couch2_default = IconFurnitureCouch2;
  }
});

// lib/icons/furniture-couch3.ts
var furniture_couch3_exports = {};
__export(furniture_couch3_exports, {
  IconFurnitureCouch3: () => IconFurnitureCouch3,
  default: () => furniture_couch3_default
});
var IconFurnitureCouch3, furniture_couch3_default;
var init_furniture_couch3 = __esm({
  "lib/icons/furniture-couch3.ts"() {
    IconFurnitureCouch3 = `<svg id="furniture-couch_3" data-name="furniture-couch 3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18,36v4.5h36v-4.5c0-2.49,2.01-4.5,4.5-4.5v-5c0-2.21-1.79-4-4-4h-14.5c-2.21,0-4,1.79-4,4,0-2.21-1.79-4-4-4h-14.5c-2.21,0-4,1.79-4,4v5c2.49,0,4.5,2.01,4.5,4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="18" y1="54" x2="18" y2="49.5" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="54" x2="54" y2="49.5" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v-5c0-2.21-1.79-4-4-4h-14.5c-2.21,0-4,1.79-4,4v14s0-14,0-14c0-2.21-1.79-4-4-4h-14.5c-2.21,0-4,1.79-4,4v5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M67.5,36c0-2.49-2.01-4.5-4.5-4.5h-4.5c-2.49,0-4.5,2.01-4.5,4.5v4.5H18v-4.5c0-2.49-2.01-4.5-4.5-4.5h-4.5c-2.49,0-4.5,2.01-4.5,4.5h0c0,2.49,2.01,4.5,4.5,4.5h0v5c0,2.21,1.79,4,4,4h46c2.21,0,4-1.79,4-4v-5h0c2.49,0,4.5-2.01,4.5-4.5h0Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,31.5h-4.5c-2.49,0-4.5,2.01-4.5,4.5v4.5H18v-4.5c0-2.49-2.01-4.5-4.5-4.5h-4.5c-2.49,0-4.5,2.01-4.5,4.5s2.01,4.5,4.5,4.5v5c0,2.21,1.79,4,4,4h46c2.21,0,4-1.79,4-4v-5c2.49,0,4.5-2.01,4.5-4.5s-2.01-4.5-4.5-4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/></svg>`;
    furniture_couch3_default = IconFurnitureCouch3;
  }
});

// lib/icons/furniture-couch4.ts
var furniture_couch4_exports = {};
__export(furniture_couch4_exports, {
  IconFurnitureCouch4: () => IconFurnitureCouch4,
  default: () => furniture_couch4_default
});
var IconFurnitureCouch4, furniture_couch4_default;
var init_furniture_couch4 = __esm({
  "lib/icons/furniture-couch4.ts"() {
    IconFurnitureCouch4 = `<svg id="furniture-couch_4" data-name="furniture-couch 4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18,36v.5c0,2.21,1.79,4,4,4h28c2.21,0,4-1.79,4-4v-.5c0-2.49,2.01-4.5,4.5-4.5v-1c0-4.42-3.58-8-8-8h-29c-4.42,0-8,3.58-8,8v1c2.49,0,4.5,2.01,4.5,4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M58.5,31.5c-2.49,0-4.5,2.01-4.5,4.5v.5c0,2.21-1.79,4-4,4h-28c-2.21,0-4-1.79-4-4v-.5c0-2.49-2.01-4.5-4.5-4.5s-4.5,2.01-4.5,4.5v1.5c0,6.63,5.37,12,12,12h30c6.63,0,12-5.37,12-12v-1.5c0-2.49-2.01-4.5-4.5-4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M21,49.5h30c6.63,0,12-5.37,12-12v-1.5c0-2.49-2.01-4.5-4.5-4.5h0c-2.49,0-4.5,2.01-4.5,4.5v.5c0,2.21-1.79,4-4,4h-28c-2.21,0-4-1.79-4-4v-.5c0-2.49-2.01-4.5-4.5-4.5h0c-2.49,0-4.5,2.01-4.5,4.5v1.5c0,6.63,5.37,12,12,12Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="54" x2="18" y2="49.5" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="54" x2="54" y2="49.5" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v-1c0-4.42-3.58-8-8-8h-29c-4.42,0-8,3.58-8,8v1" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_couch4_default = IconFurnitureCouch4;
  }
});

// lib/icons/furniture-couch.ts
var furniture_couch_exports = {};
__export(furniture_couch_exports, {
  IconFurnitureCouch: () => IconFurnitureCouch,
  default: () => furniture_couch_default
});
var IconFurnitureCouch, furniture_couch_default;
var init_furniture_couch = __esm({
  "lib/icons/furniture-couch.ts"() {
    IconFurnitureCouch = `<svg id="furniture-couch" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="63 49.5 9 49.5 9 31.5 13.5 31.5 13.5 22.5 58.5 22.5 58.5 31.5 63 31.5 63 49.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="9 49.5 63 49.5 63 31.5 54 31.5 54 40.5 18 40.5 18 31.5 9 31.5 9 49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="58.5" x2="18" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="58.5" x2="54" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.5 31.5 58.5 22.5 13.5 22.5 13.5 31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_couch_default = IconFurnitureCouch;
  }
});

// lib/icons/furniture-desk.ts
var furniture_desk_exports = {};
__export(furniture_desk_exports, {
  IconFurnitureDesk: () => IconFurnitureDesk,
  default: () => furniture_desk_default
});
var IconFurnitureDesk, furniture_desk_default;
var init_furniture_desk = __esm({
  "lib/icons/furniture-desk.ts"() {
    IconFurnitureDesk = `<svg id="furniture-desk" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="18" width="45" height="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="36" y="27" width="22.5" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polyline points="13.5 54 13.5 18 58.5 18 58.5 54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="27" x2="58.5" y2="27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 27 36 45 58.5 45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.25" y1="36" x2="47.25" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_desk_default = IconFurnitureDesk;
  }
});

// lib/icons/furniture-dressoir.ts
var furniture_dressoir_exports = {};
__export(furniture_dressoir_exports, {
  IconFurnitureDressoir: () => IconFurnitureDressoir,
  default: () => furniture_dressoir_default
});
var IconFurnitureDressoir, furniture_dressoir_default;
var init_furniture_dressoir = __esm({
  "lib/icons/furniture-dressoir.ts"() {
    IconFurnitureDressoir = `<svg id="furniture-dressoir" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="36" width="45" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="18" y1="63" x2="18" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="63" x2="54" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="36" width="45" height="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,36v-13.5c0-7.46,6.04-13.5,13.5-13.5s13.5,6.04,13.5,13.5v13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    furniture_dressoir_default = IconFurnitureDressoir;
  }
});

// lib/icons/graph-up-round.ts
var graph_up_round_exports = {};
__export(graph_up_round_exports, {
  IconGraphUpRound: () => IconGraphUpRound,
  default: () => graph_up_round_default
});
var IconGraphUpRound, graph_up_round_default;
var init_graph_up_round = __esm({
  "lib/icons/graph-up-round.ts"() {
    IconGraphUpRound = `<svg id="graph-up-round" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18,54s27,0,36-18v27H18v-9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="18" y1="63" x2="18" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="63" x2="27" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="63" x2="36" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="63" x2="45" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="63" x2="54" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="46.51 17.78 58.5 13.5 62.78 25.49" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,45s31.5,0,45-31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    graph_up_round_default = IconGraphUpRound;
  }
});

// lib/icons/graph-up.ts
var graph_up_exports = {};
__export(graph_up_exports, {
  IconGraphUp: () => IconGraphUp,
  default: () => graph_up_default
});
var IconGraphUp, graph_up_default;
var init_graph_up = __esm({
  "lib/icons/graph-up.ts"() {
    IconGraphUp = `<svg id="graph-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="18 63 54 63 54 40.5 45 49.5 36 45 27 49.5 18 58.5 18 63" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polyline points="13.5 49.5 31.5 31.5 45 36 58.5 18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="63" x2="18" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="63" x2="27" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="63" x2="36" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="63" x2="45" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="63" x2="54" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45.83 19.25 58.5 18 59.75 30.67" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    graph_up_default = IconGraphUp;
  }
});

// lib/icons/hairdryer.ts
var hairdryer_exports = {};
__export(hairdryer_exports, {
  IconHairdryer: () => IconHairdryer,
  default: () => hairdryer_default
});
var IconHairdryer, hairdryer_default;
var init_hairdryer = __esm({
  "lib/icons/hairdryer.ts"() {
    IconHairdryer = `<svg id="hairdryer" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.5,63h10.46c3.46,0,5.72-3.65,4.17-6.74l-1.13-2.26" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5s-22.5,9-31.5,9c-7.46,0-13.5-6.04-13.5-13.5s6.04-13.5,13.5-13.5c9,0,31.5,9,31.5,9v9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M58.5,31.5s-22.5,9-31.5,9c-7.46,0-13.5-6.04-13.5-13.5s6.04-13.5,13.5-13.5c9,0,31.5,9,31.5,9v9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,39.02l4.5,14.98h-9s-14.07-11.72-17.23-22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="27" cy="27" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    hairdryer_default = IconHairdryer;
  }
});

// lib/icons/hill-landscape.ts
var hill_landscape_exports = {};
__export(hill_landscape_exports, {
  IconHillLandscape: () => IconHillLandscape,
  default: () => hill_landscape_default
});
var IconHillLandscape, hill_landscape_default;
var init_hill_landscape = __esm({
  "lib/icons/hill-landscape.ts"() {
    IconHillLandscape = `<svg id="hill-landscape" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M58.5,36v-8.17c0-.53-.21-1.04-.59-1.41l-7-7c-.78-.78-2.05-.78-2.83,0l-7,7c-.38.38-.59.88-.59,1.41v10.4c9.46.21,18-2.23,18-2.23Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="18" y1="11.25" x2="18" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,9c0,3.73-3.02,6.75-6.75,6.75" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,15.75c0,4.97-4.03,9-9,9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,9c0,3.73,3.02,6.75,6.75,6.75" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,15.75c0,4.97,4.03,9,9,9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,38.24v-10.41c0-.53.21-1.04.59-1.41l7-7c.78-.78,2.05-.78,2.83,0l7,7c.38.38.59.88.59,1.41v8.17" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,36s-4.5,13.5-40.06,13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,58.5s-31.5,9-40.5-9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,36s-31.5,9-40.5-9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    hill_landscape_default = IconHillLandscape;
  }
});

// lib/icons/idea-factory.ts
var idea_factory_exports = {};
__export(idea_factory_exports, {
  IconIdeaFactory: () => IconIdeaFactory,
  default: () => idea_factory_default
});
var IconIdeaFactory, idea_factory_default;
var init_idea_factory = __esm({
  "lib/icons/idea-factory.ts"() {
    IconIdeaFactory = `<svg id="idea-factory" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M33,39c0-6.63-5.37-12-12-12s-12,5.37-12,12c0,9,7.2,12,7.2,18v3.33c0,1.47,1.19,2.67,2.67,2.67h4.27c1.47,0,2.67-1.19,2.67-2.67v-3.33c0-6,7.2-9,7.2-18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="41.14 43.31 38.28 48.28 40.64 51.53 38.28 54.78 41.14 59.75 45.14 59.33 46.78 63 52.51 63 54.15 59.33 58.14 59.75 61.01 54.78 58.65 51.53 61.01 48.28 58.14 43.31 54.15 43.73 52.51 40.06 46.78 40.06 45.14 43.73 41.14 43.31" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="15" y1="57" x2="27" y2="57" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M24,42c0,1.66-1.34,3-3,3s-3-1.34-3-3" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="21" y1="45" x2="21" y2="57" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M33,39c0-6.63-5.37-12-12-12s-12,5.37-12,12c0,9,7.2,12,7.2,18v3.33c0,1.47,1.19,2.67,2.67,2.67h4.27c1.47,0,2.67-1.19,2.67-2.67v-3.33c0-6,7.2-9,7.2-18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,31.5V13c0-2.21-1.79-4-4-4h-19c-2.21,0-4,1.79-4,4v5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="40.5 22.5 49.5 31.5 58.5 22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="41.14 43.31 38.28 48.28 40.64 51.53 38.28 54.78 41.14 59.75 45.14 59.33 46.78 63 52.51 63 54.15 59.33 58.14 59.75 61.01 54.78 58.65 51.53 61.01 48.28 58.14 43.31 54.15 43.73 52.51 40.06 46.78 40.06 45.14 43.73 41.14 43.31" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="51.53" r="1.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    idea_factory_default = IconIdeaFactory;
  }
});

// lib/icons/industry3.ts
var industry3_exports = {};
__export(industry3_exports, {
  IconIndustry3: () => IconIndustry3,
  default: () => industry3_default
});
var IconIndustry3, industry3_default;
var init_industry3 = __esm({
  "lib/icons/industry3.ts"() {
    IconIndustry3 = `<svg id="industry-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="9 58.5 9 49.5 9 36 27 45 27 36 45 45 45 45 45 36 63 45 63 58.5 9 58.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="9 58.5 9 49.5 9 36 27 45 27 36 45 45 45 45 45 36 63 45 63 58.5 9 58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,20.64c8.79-8.79,23.03-8.79,31.82,0" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M24.36,27c5.27-5.27,13.82-5.27,19.09,0" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    industry3_default = IconIndustry3;
  }
});

// lib/icons/iron.ts
var iron_exports = {};
__export(iron_exports, {
  IconIron: () => IconIron,
  default: () => iron_default
});
var IconIron, iron_default;
var init_iron = __esm({
  "lib/icons/iron.ts"() {
    IconIron = `<svg id="iron" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M20.39,36c-4.33,4.33-8.22,10.01-11.13,17.49-.13.33.12.69.47.69h44.27l3.66-7.31c.56-1.11.84-2.34.84-3.58v-7.29H20.39Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M58.05,22.63c-4.15-.37-35.99-2.07-48.79,30.86-.13.33.12.69.47.69h44.27s3.66-7.31,3.66-7.31c.56-1.11.84-2.34.84-3.58v-20.16c0-.26-.19-.47-.45-.5Z" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="36.18" x2="58.5" y2="36.18" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="54.18" x2="58.5" y2="54.18" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="31.68" x2="49.5" y2="31.68" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="45.41" x2="45" y2="45.41" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="63" x2="27" y2="63" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="63" x2="36" y2="63" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="63" x2="45" y2="63" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    iron_default = IconIron;
  }
});

// lib/icons/kitchen-cutlery.ts
var kitchen_cutlery_exports = {};
__export(kitchen_cutlery_exports, {
  IconKitchenCutlery: () => IconKitchenCutlery,
  default: () => kitchen_cutlery_default
});
var IconKitchenCutlery, kitchen_cutlery_default;
var init_kitchen_cutlery = __esm({
  "lib/icons/kitchen-cutlery.ts"() {
    IconKitchenCutlery = `<svg id="kitchen-cutlery" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.5,58.5V13.5s13.5,0,9,31.5h-9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><ellipse cx="36" cy="49.5" rx="6.75" ry="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M13.5,58.5V13.5s13.5,0,9,31.5h-9" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><ellipse cx="36" cy="49.5" rx="6.75" ry="9" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M64.12,22.5c0,7.46-4.53,18-10.12,18s-10.12-10.54-10.12-18,4.53-9,10.12-9,10.12,1.54,10.12,9Z" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="13.5" x2="36" y2="40.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="58.5" x2="54" y2="15" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    kitchen_cutlery_default = IconKitchenCutlery;
  }
});

// lib/icons/kitchen-utensils.ts
var kitchen_utensils_exports = {};
__export(kitchen_utensils_exports, {
  IconKitchenUtensils: () => IconKitchenUtensils,
  default: () => kitchen_utensils_default
});
var IconKitchenUtensils, kitchen_utensils_default;
var init_kitchen_utensils = __esm({
  "lib/icons/kitchen-utensils.ts"() {
    IconKitchenUtensils = `<svg id="kitchen-utensils" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M6.75,25.5c0,4.97,4.03,9,9,9s9-4.03,9-9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><ellipse cx="56.25" cy="22.5" rx="6.75" ry="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M40.5,58.5V13.5h0-2.25c-3.73,0-6.75,10.54-6.75,18s3.02,9,6.75,9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><ellipse cx="56.25" cy="22.5" rx="6.75" ry="9" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M24.62,13.5v12c0,4.97-3.97,9-8.87,9s-8.87-4.03-8.87-9v-12" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="56.25" y1="58.5" x2="56.25" y2="31.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="15.75" y1="34.5" x2="15.75" y2="58.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="15.75" y1="13.5" x2="15.75" y2="23.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,58.5V13.5h0-2.25c-3.73,0-6.75,10.54-6.75,18s3.02,9,6.75,9" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="6.88" y1="25.5" x2="24.62" y2="25.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    kitchen_utensils_default = IconKitchenUtensils;
  }
});

// lib/icons/lake-view.ts
var lake_view_exports = {};
__export(lake_view_exports, {
  IconLakeView: () => IconLakeView,
  default: () => lake_view_default
});
var IconLakeView, lake_view_default;
var init_lake_view = __esm({
  "lib/icons/lake-view.ts"() {
    IconLakeView = `<svg id="lake-view" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M14.09,21.91l7-7c.78-.78,2.05-.78,2.83,0l7,7c.38.38.59.88.59,1.41v8.17H13.5v-8.17c0-.53.21-1.04.59-1.41Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="54" y1="11.25" x2="54" y2="45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,9c0,3.73-3.02,6.75-6.75,6.75" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,15.75c0,4.97-4.03,9-9,9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,9c0,3.73,3.02,6.75,6.75,6.75" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,15.75c0,4.97,4.03,9,9,9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M14.09,21.91l7-7c.78-.78,2.05-.78,2.83,0l7,7c.38.38.59.88.59,1.41v8.17H13.5v-8.17c0-.53.21-1.04.59-1.41Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,40.5c4.5,0,4.5,4.5,9,4.5s4.5-4.5,9-4.5,4.5,4.5,9,4.5,4.5-4.5,9-4.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,54c4.5,0,4.5,4.5,9,4.5s4.5-4.5,9-4.5,4.5,4.5,9,4.5,4.5-4.5,9-4.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,54c4.5,0,4.5,4.5,9,4.5s4.5-4.5,9-4.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="31.5" x2="54" y2="31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    lake_view_default = IconLakeView;
  }
});

// lib/icons/leaf2.ts
var leaf2_exports = {};
__export(leaf2_exports, {
  IconLeaf2: () => IconLeaf2,
  default: () => leaf2_default
});
var IconLeaf2, leaf2_default;
var init_leaf2 = __esm({
  "lib/icons/leaf2.ts"() {
    IconLeaf2 = `<svg id="leaf_2" data-name="leaf 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M50.85,46.74c-9.67,9.67-29.17,5.83-29.17,5.83,0,0-3.83-19.5,5.83-29.17,9.67-9.67,29.17-5.83,29.17-5.83,0,0,3.83,19.5-5.83,29.17Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M50.85,46.74c-9.67,9.67-29.17,5.83-29.17,5.83,0,0-3.83-19.5,5.83-29.17,9.67-9.67,29.17-5.83,29.17-5.83,0,0,3.83,19.5-5.83,29.17Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="43.95" y1="30.3" x2="15.32" y2="58.93" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    leaf2_default = IconLeaf2;
  }
});

// lib/icons/leaf3.ts
var leaf3_exports = {};
__export(leaf3_exports, {
  IconLeaf3: () => IconLeaf3,
  default: () => leaf3_default
});
var IconLeaf3, leaf3_default;
var init_leaf3 = __esm({
  "lib/icons/leaf3.ts"() {
    IconLeaf3 = `<svg id="leaf_3" data-name="leaf 3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M50.85,47.92c-9.73,9.6-29.17,5.83-29.17,5.83,0,0-7.78-25.38,9.82-31.25,13.5-4.5,22.5-13.5,22.5-13.5,0,0,13.5,22.5-3.15,38.92Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M50.85,47.92c-9.73,9.6-29.17,5.83-29.17,5.83,0,0-7.78-25.38,9.82-31.25,13.5-4.5,22.5-13.5,22.5-13.5,0,0,13.5,22.5-3.15,38.92Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,63S45,40.5,54,9" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    leaf3_default = IconLeaf3;
  }
});

// lib/icons/leaf.ts
var leaf_exports = {};
__export(leaf_exports, {
  IconLeaf: () => IconLeaf,
  default: () => leaf_default
});
var IconLeaf, leaf_default;
var init_leaf = __esm({
  "lib/icons/leaf.ts"() {
    IconLeaf = `<svg id="leaf" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M52.5,33.75c0,13.67-16.5,24.75-16.5,24.75,0,0-16.5-11.08-16.5-24.75s16.5-24.75,16.5-24.75c0,0,16.5,11.08,16.5,24.75Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M52.5,33.75c0,13.67-16.5,24.75-16.5,24.75,0,0-16.5-11.08-16.5-24.75s16.5-24.75,16.5-24.75c0,0,16.5,11.08,16.5,24.75Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="67.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    leaf_default = IconLeaf;
  }
});

// lib/icons/leafs.ts
var leafs_exports = {};
__export(leafs_exports, {
  IconLeafs: () => IconLeafs,
  default: () => leafs_default
});
var IconLeafs, leafs_default;
var init_leafs = __esm({
  "lib/icons/leafs.ts"() {
    IconLeafs = `<svg id="leafs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M57.47,42.45c-7.9,7.9-23.84,4.77-23.84,4.77,0,0-3.13-15.94,4.77-23.84s23.84-4.77,23.84-4.77c0,0,3.13,15.94-4.77,23.84Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M25.58,33.07c6.69,3.36,8.06,14.15,8.06,14.15,0,0-9.48,5.35-16.16,1.99-6.69-3.36-8.06-14.15-8.06-14.15,0,0,9.48-5.35,16.16-1.99Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M57.47,42.45c-7.9,7.9-23.84,4.77-23.84,4.77,0,0-3.13-15.94,4.77-23.84s23.84-4.77,23.84-4.77c0,0,3.13,15.94-4.77,23.84Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="62.24" y1="18.61" x2="33.63" y2="47.22" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M25.58,33.07c6.69,3.36,8.06,14.15,8.06,14.15,0,0-9.48,5.35-16.16,1.99-6.69-3.36-8.06-14.15-8.06-14.15,0,0,9.48-5.35,16.16-1.99Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9.41" y1="35.06" x2="33.63" y2="47.22" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="58.5" x2="33.63" y2="47.22" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    leafs_default = IconLeafs;
  }
});

// lib/icons/liquid-soap2.ts
var liquid_soap2_exports = {};
__export(liquid_soap2_exports, {
  IconLiquidSoap2: () => IconLiquidSoap2,
  default: () => liquid_soap2_default
});
var IconLiquidSoap2, liquid_soap2_default;
var init_liquid_soap2 = __esm({
  "lib/icons/liquid-soap2.ts"() {
    IconLiquidSoap2 = `<svg id="liquid-soap_2" data-name="liquid-soap 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="22.5" y="31.5" width="27" height="31.5" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M27,31.5c0-4.97,4.03-9,9-9s9,4.03,9,9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="36" y1="13.5" x2="36" y2="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="13.5" x2="22.5" y2="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="49.5" x2="49.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="40.5" x2="49.5" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="22.5" y="31.5" width="27" height="31.5" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,31.5c0-4.97,4.03-9,9-9s9,4.03,9,9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    liquid_soap2_default = IconLiquidSoap2;
  }
});

// lib/icons/liquid-soap.ts
var liquid_soap_exports = {};
__export(liquid_soap_exports, {
  IconLiquidSoap: () => IconLiquidSoap,
  default: () => liquid_soap_default
});
var IconLiquidSoap, liquid_soap_default;
var init_liquid_soap = __esm({
  "lib/icons/liquid-soap.ts"() {
    IconLiquidSoap = `<svg id="liquid-soap" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M15.5,63h27.5c1.1,0,2-.9,2-2v-20.5c-17.5,0-17.5,9-31.5,9v11.5c0,1.1.9,2,2,2Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><circle cx="56.25" cy="20.25" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><circle cx="58.5" cy="40.5" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M36,27.58v-2.83c0-3.73-3.02-6.75-6.75-6.75s-6.75,3.02-6.75,6.75v2.83" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="29.25" y1="9" x2="29.25" y2="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="20.25" y1="9" x2="45" y2="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M21.5,27.58h15.5c4.42,0,8,3.58,8,8v26c0,1.1-.9,2-2,2H15.5c-1.1,0-2-.9-2-2v-26c0-4.42,3.58-8,8-8Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,50.08c14,0,14-9,31.5-9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="56.25" cy="20.25" r="6.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="58.5" cy="40.5" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    liquid_soap_default = IconLiquidSoap;
  }
});

// lib/icons/luxe-villa.ts
var luxe_villa_exports = {};
__export(luxe_villa_exports, {
  IconLuxeVilla: () => IconLuxeVilla,
  default: () => luxe_villa_default
});
var IconLuxeVilla, luxe_villa_default;
var init_luxe_villa = __esm({
  "lib/icons/luxe-villa.ts"() {
    IconLuxeVilla = `<svg id="luxe-villa" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M31.5,13.5v49.5h9v-18h9v18h7c1.1,0,2-.9,2-2V27l-27-13.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M31.5,36l-18,9v16c0,1.1.9,2,2,2h16v-27Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M31.5,13.5l27,13.5v34c0,1.1-.9,2-2,2h-25V13.5Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,36l-18,9v16c0,1.1.9,2,2,2h16v-27Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="40.5" y="45" width="9" height="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="49.5 22.5 58.5 27 58.5 13.5 49.5 13.5 49.5 22.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    luxe_villa_default = IconLuxeVilla;
  }
});

// lib/icons/mansion.ts
var mansion_exports = {};
__export(mansion_exports, {
  IconMansion: () => IconMansion,
  default: () => mansion_default
});
var IconMansion, mansion_default;
var init_mansion = __esm({
  "lib/icons/mansion.ts"() {
    IconMansion = `<svg id="mansion" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M58.96,14.87c-.27-.82-1.04-1.37-1.9-1.37H14.94c-.86,0-1.62.55-1.9,1.37l-4.04,12.13v29.5c0,1.1.9,2,2,2h20.5v-18h9v18h20.5c1.1,0,2-.9,2-2v-29.5l-4.04-12.13Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="31.5" y="40.5" width="9" height="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M14.94,13.5h42.12c.86,0,1.63.55,1.9,1.37l4.04,12.13v29.5c0,1.1-.9,2-2,2H11c-1.1,0-2-.9-2-2v-29.5l4.04-12.13c.27-.82,1.04-1.37,1.9-1.37Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="36 13.5 22.5 27 22.5 58.5 49.5 58.5 49.5 27 36 13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="27" x2="63" y2="27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="27" x2="22.5" y2="27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    mansion_default = IconMansion;
  }
});

// lib/icons/microwave.ts
var microwave_exports = {};
__export(microwave_exports, {
  IconMicrowave: () => IconMicrowave,
  default: () => microwave_default
});
var IconMicrowave, microwave_default;
var init_microwave = __esm({
  "lib/icons/microwave.ts"() {
    IconMicrowave = `<svg id="microwave" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M59,13.5H13c-2.21,0-4,1.79-4,4v32.5c0,2.21,1.79,4,4,4h46c2.21,0,4-1.79,4-4V17.5c0-2.21-1.79-4-4-4ZM45,45h-27v-22.5h27v22.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="54" y1="31.5" x2="54" y2="31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="22.5" x2="54" y2="22.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="9" y="13.5" width="54" height="40.5" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="22.5" width="27" height="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M24.12,36h14.76c.74,0,1.23.78.89,1.45l-1.76,3.53c-1.23,2.47-3.75,4.02-6.51,4.02h0c-2.76,0-5.28-1.56-6.51-4.02l-1.76-3.53c-.33-.66.15-1.45.89-1.45Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    microwave_default = IconMicrowave;
  }
});

// lib/icons/money.ts
var money_exports = {};
__export(money_exports, {
  IconMoney: () => IconMoney,
  default: () => money_default
});
var IconMoney, money_default;
var init_money = __esm({
  "lib/icons/money.ts"() {
    IconMoney = `<svg id="money" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="9" y="23.47" width="54" height="31.5" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M9,33.43c4.97,0,9-4.03,9-9,0-.33-.02-.65-.05-.97" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M53.03,23.47c0,4.97,4.03,9,9,9,.33,0,.65-.02.97-.05" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M63,45c-4.97,0-9,4.03-9,9,0,.33.02.65.05.97" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M18.97,54.97c0-4.97-4.03-9-9-9-.33,0-.65.02-.97.05" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M9,33.43c4.97,0,9-4.03,9-9,0-.33-.02-.65-.05-.97" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M53.03,23.47c0,4.97,4.03,9,9,9,.33,0,.65-.02.97-.05" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,45c-4.97,0-9,4.03-9,9,0,.33.02.65.05.97" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18.97,54.97c0-4.97-4.03-9-9-9-.33,0-.65.02-.97.05" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="9" y="23.47" width="54" height="31.5" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><circle cx="36" cy="39.22" r="9" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    money_default = IconMoney;
  }
});

// lib/icons/moneybag.ts
var moneybag_exports = {};
__export(moneybag_exports, {
  IconMoneybag: () => IconMoneybag,
  default: () => moneybag_default
});
var IconMoneybag, moneybag_default;
var init_moneybag = __esm({
  "lib/icons/moneybag.ts"() {
    IconMoneybag = `<svg id="moneybag" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M34.83,31.72h2.34c.68,0,1.33.31,1.76.84l9.09,7.25c5.04,4.02,8.1,10.07,8.23,16.52,0,.09,0,.16,0,.23h0c0,3.68-2.98,6.66-6.66,6.66h-27.17c-3.68,0-6.66-2.98-6.66-6.66h0c0-.06,0-.14,0-.23.13-6.45,3.19-12.49,8.23-16.52l9.09-7.25c.43-.53,1.07-.84,1.76-.84Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M31.5,25.22h9c1.24,0,2.25,1.23,2.25,2.75h0c0,1.52-1.01,2.75-2.25,2.75h-9c-1.24,0-2.25-1.23-2.25-2.75h0c0-1.52,1.01-2.75,2.25-2.75Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M30.88,18.47l2.25,4.5c.38.76,1.16,1.24,2.01,1.24h1.72c.85,0,1.63-.48,2.01-1.24l2.25-4.5c.75-1.5-.34-3.26-2.01-3.26h-6.22c-1.67,0-2.76,1.76-2.01,3.26Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M34.83,31.72h2.34c.68,0,1.33.31,1.76.84l9.09,7.25c5.04,4.02,8.1,10.07,8.23,16.52,0,.09,0,.16,0,.23h0c0,3.68-2.98,6.66-6.66,6.66h-27.17c-3.68,0-6.66-2.98-6.66-6.66h0c0-.06,0-.14,0-.23.13-6.45,3.19-12.49,8.23-16.52l9.09-7.25c.43-.53,1.07-.84,1.76-.84Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,25.22h9c1.24,0,2.25,1.23,2.25,2.75h0c0,1.52-1.01,2.75-2.25,2.75h-9c-1.24,0-2.25-1.23-2.25-2.75h0c0-1.52,1.01-2.75,2.25-2.75Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30.88,18.47l2.25,4.5c.38.76,1.16,1.24,2.01,1.24h1.72c.85,0,1.63-.48,2.01-1.24l2.25-4.5c.75-1.5-.34-3.26-2.01-3.26h-6.22c-1.67,0-2.76,1.76-2.01,3.26Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    moneybag_default = IconMoneybag;
  }
});

// lib/icons/mountain-scape.ts
var mountain_scape_exports = {};
__export(mountain_scape_exports, {
  IconMountainScape: () => IconMountainScape,
  default: () => mountain_scape_default
});
var IconMountainScape, mountain_scape_default;
var init_mountain_scape = __esm({
  "lib/icons/mountain-scape.ts"() {
    IconMountainScape = `<svg id="mountain-scape" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M45,31.5c4.5-4.5,9,0,9,0l-9-13.5-9,13.5s4.5,4.5,9,0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="18" y1="11.25" x2="18" y2="45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,9c0,3.73-3.02,6.75-6.75,6.75" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,15.75c0,4.97-4.03,9-9,9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,9c0,3.73,3.02,6.75,6.75,6.75" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,15.75c0,4.97,4.03,9,9,9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,45h31.5c2.49,0,4.5,2.01,4.5,4.5h0c0,2.49-2.01,4.5-4.5,4.5h-18c-2.49,0-4.5,2.01-4.5,4.5h0c0,2.49,2.01,4.5,4.5,4.5h9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 45 45 18 63 45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,31.5s4.5,4.5,9,0,9,0,9,0" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    mountain_scape_default = IconMountainScape;
  }
});

// lib/icons/oven.ts
var oven_exports = {};
__export(oven_exports, {
  IconOven: () => IconOven,
  default: () => oven_default
});
var IconOven, oven_default;
var init_oven = __esm({
  "lib/icons/oven.ts"() {
    IconOven = `<svg id="oven" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.5,9v54h45V9H13.5ZM49.5,54h-27v-22.5h27v22.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><g><line x1="22.5" y1="16.5" x2="22.5" y2="16.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="16.5" x2="31.5" y2="16.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="16.5" x2="40.5" y2="16.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="16.5" x2="49.5" y2="16.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="9" width="45" height="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="22.5" x2="58.5" y2="22.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="22.5" y="31.5" width="27" height="22.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    oven_default = IconOven;
  }
});

// lib/icons/plant.ts
var plant_exports = {};
__export(plant_exports, {
  IconPlant: () => IconPlant,
  default: () => plant_default
});
var IconPlant, plant_default;
var init_plant = __esm({
  "lib/icons/plant.ts"() {
    IconPlant = `<svg id="plant" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><polygon points="18 36 18 43.7 22.5 43.7 27 61.7 45 61.7 49.5 43.7 54 43.7 54 36 18 36" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M35.24,29.43s.33-6.03-3.18-9.55-9.55-3.18-9.55-3.18c0,0-.33,6.03,3.18,9.55,3.52,3.51,9.55,3.18,9.55,3.18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M43.07,14.77c2.12-2.12,1.92-5.77,1.92-5.77,0,0-3.64-.2-5.77,1.92s-1.92,5.77-1.92,5.77c0,0,3.64.2,5.77-1.92Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><polygon points="22.5 43.7 49.5 43.7 45 61.7 27 61.7 22.5 43.7" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="36" width="36" height="7.7" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M32.05,19.89c3.51,3.51,3.18,9.55,3.18,9.55,0,0-6.03.33-9.55-3.18s-3.18-9.55-3.18-9.55c0,0,6.03-.33,9.55,3.18Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M43.07,14.77c-2.12,2.12-5.77,1.92-5.77,1.92,0,0-.2-3.64,1.92-5.77s5.77-1.92,5.77-1.92c0,0,.2,3.64-1.92,5.77Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="9" x2="36" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    plant_default = IconPlant;
  }
});

// lib/icons/politician2.ts
var politician2_exports = {};
__export(politician2_exports, {
  IconPolitician2: () => IconPolitician2,
  default: () => politician2_default
});
var IconPolitician2, politician2_default;
var init_politician2 = __esm({
  "lib/icons/politician2.ts"() {
    IconPolitician2 = `<svg id="politician_2" data-name="politician 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="21.27 63 18 40.5 36 40.5 54 40.5 50.73 63" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M27,40.5v-4.5s2.25-4.5,9-4.5,9,4.5,9,4.5v4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="22.5" r="4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="21.27 63 18 40.5 36 40.5 54 40.5 50.73 63" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    politician2_default = IconPolitician2;
  }
});

// lib/icons/politician.ts
var politician_exports = {};
__export(politician_exports, {
  IconPolitician: () => IconPolitician,
  default: () => politician_default
});
var IconPolitician, politician_default;
var init_politician = __esm({
  "lib/icons/politician.ts"() {
    IconPolitician = `<svg id="politician" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="36" width="45" height="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M27,36v-9s2.25-4.5,9-4.5,9,4.5,9,4.5v9" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="13.5" r="4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="36" width="45" height="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="50.73" y1="63" x2="54" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="45" x2="21.27" y2="63" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 18 54 22.5 54 36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 18 18 22.5 18 36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    politician_default = IconPolitician;
  }
});

// lib/icons/rocket.ts
var rocket_exports = {};
__export(rocket_exports, {
  IconRocket: () => IconRocket,
  default: () => rocket_default
});
var IconRocket, rocket_default;
var init_rocket = __esm({
  "lib/icons/rocket.ts"() {
    IconRocket = `<svg id="rocket" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M50.37,40.73c9.55-9.55,12.74-25.47,9.56-28.65s-19.1.01-28.65,9.56c-8.12,8.12-14.07,20.43-13.44,19.8,0,0,.7,5.67,3.89,8.84,3.19,3.17,8.84,3.89,8.84,3.89,0,0,10.25-3.89,19.8-13.44Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M18.55,59.82c-3.18,3.18-9.55,3.18-9.55,3.18,0,0,0-6.36,3.18-9.55,1.76-1.76,4.61-1.76,6.36,0,1.76,1.76,1.76,4.61,0,6.36Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M17.84,41.43c-.45.45,2.38-5.55,6.94-11.97h-12.89c-3.1,0-5.29,3.04-4.31,5.98.41,1.23,1.33,2.23,2.52,2.74l7.75,3.32s-.01-.07-.01-.07Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M42.54,60.11v-12.74c-6.59,4.75-11.97,6.79-11.97,6.79,0,0-.03,0-.07-.01l3.32,7.75c.51,1.19,1.51,2.11,2.74,2.52,2.94.98,5.98-1.21,5.98-4.31Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M50.37,40.73c9.55-9.55,12.74-25.47,9.56-28.65s-19.1.01-28.65,9.56c-8.12,8.12-14.07,20.43-13.44,19.8,0,0,.7,5.67,3.89,8.84,3.19,3.17,8.84,3.89,8.84,3.89,0,0,10.25-3.89,19.8-13.44Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18.55,59.82c-3.18,3.18-9.55,3.18-9.55,3.18,0,0,0-6.36,3.18-9.55,1.76-1.76,4.61-1.76,6.36,0,1.76,1.76,1.76,4.61,0,6.36Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.18" y1="24.82" x2="47.18" y2="24.82" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><path d="M17.84,41.43c-.45.45,2.38-5.55,6.94-11.97h-12.89c-3.1,0-5.29,3.04-4.31,5.98.41,1.23,1.33,2.23,2.52,2.74l7.75,3.32s-.01-.07-.01-.07Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M42.54,60.11v-12.74c-6.59,4.75-11.97,6.79-11.97,6.79,0,0-.03,0-.07-.01l3.32,7.75c.51,1.19,1.51,2.11,2.74,2.52,2.94.98,5.98-1.21,5.98-4.31Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    rocket_default = IconRocket;
  }
});

// lib/icons/room-shade.ts
var room_shade_exports = {};
__export(room_shade_exports, {
  IconRoomShade: () => IconRoomShade,
  default: () => room_shade_default
});
var IconRoomShade, room_shade_default;
var init_room_shade = __esm({
  "lib/icons/room-shade.ts"() {
    IconRoomShade = `<svg id="room-shade" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18,13.5h36v29.32c0,2.21-1.79,4-4,4h-28c-2.21,0-4-1.79-4-4V13.5h0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="58.5" y1="13.5" x2="13.5" y2="13.5" style="fill: var(--icon-line-color, currentColor);  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,13.5h36v29.32c0,2.21-1.79,4-4,4h-28c-2.21,0-4-1.79-4-4V13.5h0Z" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="59.41" r="3.59" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="46.82" x2="36" y2="55.82" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    room_shade_default = IconRoomShade;
  }
});

// lib/icons/shield2-line.ts
var shield2_line_exports = {};
__export(shield2_line_exports, {
  IconShield2Line: () => IconShield2Line,
  default: () => shield2_line_default
});
var IconShield2Line, shield2_line_default;
var init_shield2_line = __esm({
  "lib/icons/shield2-line.ts"() {
    IconShield2Line = `<svg id="shield-2-line" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M11.45,18.82s4.02,7.31,2.05,17.18c-4.5,22.5,12.48,22.99,22.5,27V9l-24.55,9.82Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M60.55,18.82l-24.55-9.82v54c10.02-4.01,27-4.5,22.5-27-1.97-9.87,2.05-17.18,2.05-17.18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="36" y1="9" x2="36" y2="63" style="fill: none; transform: rotate(calc((360 / 60 * var(--handle)) * 1deg)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,63c-10.02-4.01-27-4.5-22.5-27,1.97-9.87-2.05-17.18-2.05-17.18l24.55-9.82,24.55,9.82s-4.02,7.31-2.05,17.18c4.5,22.5-12.48,22.99-22.5,27Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shield2_line_default = IconShield2Line;
  }
});

// lib/icons/shield2.ts
var shield2_exports = {};
__export(shield2_exports, {
  IconShield2: () => IconShield2,
  default: () => shield2_default
});
var IconShield2, shield2_default;
var init_shield2 = __esm({
  "lib/icons/shield2.ts"() {
    IconShield2 = `<svg id="shield-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,63c-10.02-4.01-27-4.5-22.5-27,1.97-9.87-2.05-17.18-2.05-17.18l24.55-9.82,24.55,9.82s-4.02,7.31-2.05,17.18c4.5,22.5-12.48,22.99-22.5,27Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M36,63c-10.02-4.01-27-4.5-22.5-27,1.97-9.87-2.05-17.18-2.05-17.18l24.55-9.82,24.55,9.82s-4.02,7.31-2.05,17.18c4.5,22.5-12.48,22.99-22.5,27Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shield2_default = IconShield2;
  }
});

// lib/icons/shield3-line.ts
var shield3_line_exports = {};
__export(shield3_line_exports, {
  IconShield3Line: () => IconShield3Line,
  default: () => shield3_line_default
});
var IconShield3Line, shield3_line_default;
var init_shield3_line = __esm({
  "lib/icons/shield3-line.ts"() {
    IconShield3Line = `<svg id="shield-3-line" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18,9l-6.55,9.82s1.74,3.19,2.36,8.18h44.36c.63-4.99,2.36-8.18,2.36-8.18l-6.55-9.82H18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M58.18,27H13.82c.32,2.58.35,5.64-.32,9-4.5,22.5,12.48,22.99,22.5,27,10.02-4.01,27-4.5,22.5-27-.67-3.36-.64-6.42-.32-9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="13.83" y1="27" x2="58.18" y2="27" style="fill: none; transform: rotate(calc((360 / 60 * var(--handle)) * 1deg)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,9H18l-6.55,9.82s4.02,7.31,2.05,17.18c-4.5,22.5,12.48,22.99,22.5,27,10.02-4.01,27-4.5,22.5-27-1.97-9.87,2.05-17.18,2.05-17.18l-6.55-9.82Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shield3_line_default = IconShield3Line;
  }
});

// lib/icons/shield3.ts
var shield3_exports = {};
__export(shield3_exports, {
  IconShield3: () => IconShield3,
  default: () => shield3_default
});
var IconShield3, shield3_default;
var init_shield3 = __esm({
  "lib/icons/shield3.ts"() {
    IconShield3 = `<svg id="shield-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54,9H18l-6.55,9.82s4.02,7.31,2.05,17.18c-4.5,22.5,12.48,22.99,22.5,27,10.02-4.01,27-4.5,22.5-27-1.97-9.87,2.05-17.18,2.05-17.18l-6.55-9.82Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M54,9H18l-6.55,9.82s4.02,7.31,2.05,17.18c-4.5,22.5,12.48,22.99,22.5,27,10.02-4.01,27-4.5,22.5-27-1.97-9.87,2.05-17.18,2.05-17.18l-6.55-9.82Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shield3_default = IconShield3;
  }
});

// lib/icons/shield4-line.ts
var shield4_line_exports = {};
__export(shield4_line_exports, {
  IconShield4Line: () => IconShield4Line,
  default: () => shield4_line_default
});
var IconShield4Line, shield4_line_default;
var init_shield4_line = __esm({
  "lib/icons/shield4-line.ts"() {
    IconShield4Line = `<svg id="shield-4-line" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M58.18,27H13.82c.32,2.58.35,5.64-.32,9-4.5,22.5,12.48,22.99,22.5,27,10.02-4.01,27-4.5,22.5-27-.67-3.36-.64-6.42-.32-9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M58.18,27c.63-4.99,2.36-8.18,2.36-8.18l-6.55-7.32s-9,4.5-18,0c-9,4.5-18,0-18,0l-6.55,7.32s1.74,3.19,2.36,8.18h44.36Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="13.82" y1="27" x2="58.18" y2="27" style="fill: none; transform: rotate(calc((360 / 60 * var(--handle)) * 1deg)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,11.5s-9,4.5-18,0c-9,4.5-18,0-18,0l-6.55,7.32s4.02,7.31,2.05,17.18c-4.5,22.5,12.48,22.99,22.5,27,10.02-4.01,27-4.5,22.5-27-1.97-9.87,2.05-17.18,2.05-17.18l-6.55-7.32Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shield4_line_default = IconShield4Line;
  }
});

// lib/icons/shield4.ts
var shield4_exports = {};
__export(shield4_exports, {
  IconShield4: () => IconShield4,
  default: () => shield4_default
});
var IconShield4, shield4_default;
var init_shield4 = __esm({
  "lib/icons/shield4.ts"() {
    IconShield4 = `<svg id="shield-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54,11.5s-9,4.5-18,0c-9,4.5-18,0-18,0l-6.55,7.32s4.02,7.31,2.05,17.18c-4.5,22.5,12.48,22.99,22.5,27,10.02-4.01,27-4.5,22.5-27-1.97-9.87,2.05-17.18,2.05-17.18l-6.55-7.32Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M54,11.5s-9,4.5-18,0c-9,4.5-18,0-18,0l-6.55,7.32s4.02,7.31,2.05,17.18c-4.5,22.5,12.48,22.99,22.5,27,10.02-4.01,27-4.5,22.5-27-1.97-9.87,2.05-17.18,2.05-17.18l-6.55-7.32Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shield4_default = IconShield4;
  }
});

// lib/icons/shield-line.ts
var shield_line_exports = {};
__export(shield_line_exports, {
  IconShieldLine: () => IconShieldLine,
  default: () => shield_line_default
});
var IconShieldLine, shield_line_default;
var init_shield_line = __esm({
  "lib/icons/shield-line.ts"() {
    IconShieldLine = `<svg id="shield-line" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,9v54c24.55-9.82,24.55-44.18,24.55-44.18l-24.55-9.82Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M36,63C11.45,53.18,11.45,18.82,11.45,18.82l24.55-9.82" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><line x1="36" y1="9" x2="36" y2="63" style="fill: none; transform: rotate(calc((360 / 60 * var(--handle)) * 1deg)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M11.45,18.82l24.55-9.82,24.55,9.82s0,34.36-24.55,44.18C11.45,53.18,11.45,18.82,11.45,18.82Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shield_line_default = IconShieldLine;
  }
});

// lib/icons/shield.ts
var shield_exports = {};
__export(shield_exports, {
  IconShield: () => IconShield,
  default: () => shield_default
});
var IconShield, shield_default;
var init_shield = __esm({
  "lib/icons/shield.ts"() {
    IconShield = `<svg id="shield" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M11.45,18.82l24.55-9.82,24.55,9.82s0,34.36-24.55,44.18C11.45,53.18,11.45,18.82,11.45,18.82Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M11.45,18.82l24.55-9.82,24.55,9.82s0,34.36-24.55,44.18C11.45,53.18,11.45,18.82,11.45,18.82Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shield_default = IconShield;
  }
});

// lib/icons/stove.ts
var stove_exports = {};
__export(stove_exports, {
  IconStove: () => IconStove,
  default: () => stove_default
});
var IconStove, stove_default;
var init_stove = __esm({
  "lib/icons/stove.ts"() {
    IconStove = `<svg id="stove" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.5,13.5v45h45V13.5H13.5ZM27,49.5c-2.49,0-4.5-2.01-4.5-4.5s2.01-4.5,4.5-4.5,4.5,2.01,4.5,4.5-2.01,4.5-4.5,4.5ZM28.5,34.5c-3.31,0-6-2.69-6-6s2.69-6,6-6,6,2.69,6,6-2.69,6-6,6ZM43.5,49.5c-3.31,0-6-2.69-6-6s2.69-6,6-6,6,2.69,6,6-2.69,6-6,6ZM45,31.5c-2.49,0-4.5-2.01-4.5-4.5s2.01-4.5,4.5-4.5,4.5,2.01,4.5,4.5-2.01,4.5-4.5,4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="13.5" y="13.5" width="45" height="45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="28.5" cy="28.5" r="6" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="45" cy="27" r="4.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="43.5" cy="43.5" r="6" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="27" cy="45" r="4.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    stove_default = IconStove;
  }
});

// lib/icons/surfboard.ts
var surfboard_exports = {};
__export(surfboard_exports, {
  IconSurfboard: () => IconSurfboard,
  default: () => surfboard_default
});
var IconSurfboard, surfboard_default;
var init_surfboard = __esm({
  "lib/icons/surfboard.ts"() {
    IconSurfboard = `<svg id="surfboard" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M15.72,56.28c5.3,5.3,14.55,1.36,30.45-14.55,15.91-15.91,11.14-27.05,11.14-27.05,0,0-11.14-4.77-27.05,11.14s-19.85,25.15-14.55,30.45Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M15.72,56.28c5.3,5.3,14.55,1.36,30.45-14.55,15.91-15.91,11.14-27.05,11.14-27.05,0,0-11.14-4.77-27.05,11.14s-19.85,25.15-14.55,30.45Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="57.31" y1="14.69" x2="15.72" y2="56.28" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    surfboard_default = IconSurfboard;
  }
});

// lib/icons/swimming-pool.ts
var swimming_pool_exports = {};
__export(swimming_pool_exports, {
  IconSwimmingPool: () => IconSwimmingPool,
  default: () => swimming_pool_default
});
var IconSwimmingPool, swimming_pool_default;
var init_swimming_pool = __esm({
  "lib/icons/swimming-pool.ts"() {
    IconSwimmingPool = `<svg id="swimming-pool" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M45,36c-4.5,0-4.5,4.5-9,4.5s-4.5-4.5-9-4.5-4.5,4.5-9,4.5-4.5-4.5-9-4.5v27h54v-27c-4.5,0-4.5,4.5-9,4.5s-4.5-4.5-9-4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M9,54c4.5,0,4.5,4.5,9,4.5s4.5-4.5,9-4.5,4.5,4.5,9,4.5,4.5-4.5,9-4.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,54c4.5,0,4.5,4.5,9,4.5s4.5-4.5,9-4.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,45c4.5,0,4.5,4.5,9,4.5s4.5-4.5,9-4.5,4.5,4.5,9,4.5,4.5-4.5,9-4.5,4.5,4.5,9,4.5,4.5-4.5,9-4.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,36c4.5,0,4.5,4.5,9,4.5s4.5-4.5,9-4.5,4.5,4.5,9,4.5,4.5-4.5,9-4.5,4.5,4.5,9,4.5,4.5-4.5,9-4.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,18c0-2.49-2.01-4.5-4.5-4.5s-4.5,2.01-4.5,4.5v4.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,40.5v-22.5c0-2.49,2.01-4.5,4.5-4.5s4.5,2.01,4.5,4.5v13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="22.5" x2="63" y2="22.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    swimming_pool_default = IconSwimmingPool;
  }
});

// lib/icons/temple2.ts
var temple2_exports = {};
__export(temple2_exports, {
  IconTemple2: () => IconTemple2,
  default: () => temple2_default
});
var IconTemple2, temple2_default;
var init_temple2 = __esm({
  "lib/icons/temple2.ts"() {
    IconTemple2 = `<svg id="temple_2" data-name="temple 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="54" width="45" height="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M18,27c0-9.94,8.06-18,18-18s18,8.06,18,18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><g><line x1="27" y1="31.5" x2="27" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="31.5" x2="18" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="31.5" x2="36" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="31.5" x2="45" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="31.5" x2="54" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><rect x="13.5" y="54" width="45" height="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="27" x2="58.5" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,27c0-9.94,8.06-18,18-18s18,8.06,18,18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    temple2_default = IconTemple2;
  }
});

// lib/icons/temple.ts
var temple_exports = {};
__export(temple_exports, {
  IconTemple: () => IconTemple,
  default: () => temple_default
});
var IconTemple, temple_default;
var init_temple = __esm({
  "lib/icons/temple.ts"() {
    IconTemple = `<svg id="temple" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="22.5" y1="27" x2="22.5" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="27" x2="31.5" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="27" x2="40.5" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="27" x2="49.5" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="58.5" x2="58.5" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="13.5 22.5 58.5 22.5 36 13.5 13.5 22.5" style="fill: none;  stroke-linejoin: bevel; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="13.5 22.5 58.5 22.5 36 13.5 13.5 22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/></svg>`;
    temple_default = IconTemple;
  }
});

// lib/icons/tent-camping.ts
var tent_camping_exports = {};
__export(tent_camping_exports, {
  IconTentCamping: () => IconTentCamping,
  default: () => tent_camping_default
});
var IconTentCamping, tent_camping_default;
var init_tent_camping = __esm({
  "lib/icons/tent-camping.ts"() {
    IconTentCamping = `<svg id="tent-camping" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M10.45,55.61l12.05-24.11,13.5,27H12.24c-1.49,0-2.45-1.56-1.79-2.89Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M22.5,31.5h25.76c.76,0,1.45.43,1.79,1.11l11.5,23c.66,1.33-.3,2.89-1.79,2.89h-23.76l-13.5-27Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><circle cx="15.75" cy="15.75" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M10.45,55.61l12.05-24.11,13.5,27H12.24c-1.49,0-2.45-1.56-1.79-2.89Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,31.5h25.76c.76,0,1.45.43,1.79,1.11l11.5,23c.66,1.33-.3,2.89-1.79,2.89h-23.76l-13.5-27Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="31.5" x2="22.5" y2="58.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="15.75" cy="15.75" r="6.75" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="13.5" x2="58.5" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,11.25c0,3.73-3.02,6.75-6.75,6.75" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,18c0,4.97-4.03,9-9,9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,11.25c0,3.73,3.02,6.75,6.75,6.75" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,18c0,4.97,4.03,9,9,9" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    tent_camping_default = IconTentCamping;
  }
});

// lib/icons/tent.ts
var tent_exports = {};
__export(tent_exports, {
  IconTent: () => IconTent,
  default: () => tent_default
});
var IconTent, tent_default;
var init_tent = __esm({
  "lib/icons/tent.ts"() {
    IconTent = `<svg id="tent-camping" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M9.21,54l12.05-31.5,13.5,34.39H11c-1.49,0-2.45-1.56-1.79-2.89Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M21.27,22.5h25.76c.76,0,1.45.43,1.79,1.11l11.5,30.39c.66,1.33-.3,2.89-1.79,2.89h-23.76l-13.5-34.39Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M9.21,54l12.05-31.5,13.5,34.39H11c-1.49,0-2.45-1.56-1.79-2.89Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M21.27,22.5h25.76c.76,0,1.45.43,1.79,1.11l11.5,30.39c.66,1.33-.3,2.89-1.79,2.89h-23.76l-13.5-34.39Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="21.27" y1="22.5" x2="21.27" y2="56.89" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    tent_default = IconTent;
  }
});

// lib/icons/toy-blocks2.ts
var toy_blocks2_exports = {};
__export(toy_blocks2_exports, {
  IconToyBlocks2: () => IconToyBlocks2,
  default: () => toy_blocks2_default
});
var IconToyBlocks2, toy_blocks2_default;
var init_toy_blocks2 = __esm({
  "lib/icons/toy-blocks2.ts"() {
    IconToyBlocks2 = `<svg id="toy-blocks-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="23.23" y="25.53" width="28.47" height="14.23" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M27.79,20h5.12c.55,0,1,.45,1,1v4.53h-7.12v-4.53c0-.55.45-1,1-1Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="9" y="39.77" width="28.47" height="14.23" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M13.56,34.23h5.12c.55,0,1,.45,1,1v4.53h-7.12v-4.53c0-.55.45-1,1-1Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="37.47" y="39.77" width="28.47" height="14.23" transform="translate(103.4 93.77) rotate(-180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M55.26,34.23h7.12v4.53c0,.55-.45,1-1,1h-5.12c-.55,0-1-.45-1-1v-4.53h0Z" transform="translate(117.63 74) rotate(-180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M42.02,20h5.12c.55,0,1,.45,1,1v4.53h-7.12v-4.53c0-.55.45-1,1-1Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="23.23" y="25.53" width="28.47" height="14.23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27.79,20h5.12c.55,0,1,.45,1,1v4.53h-7.12v-4.53c0-.55.45-1,1-1Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="9" y="39.77" width="28.47" height="14.23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.56,34.23h5.12c.55,0,1,.45,1,1v4.53h-7.12v-4.53c0-.55.45-1,1-1Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="37.47" y="39.77" width="28.47" height="14.23" transform="translate(103.4 93.77) rotate(-180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M55.26,34.23h7.12v4.53c0,.55-.45,1-1,1h-5.12c-.55,0-1-.45-1-1v-4.53h0Z" transform="translate(117.63 74) rotate(-180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M42.02,20h5.12c.55,0,1,.45,1,1v4.53h-7.12v-4.53c0-.55.45-1,1-1Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    toy_blocks2_default = IconToyBlocks2;
  }
});

// lib/icons/toy-blocks3.ts
var toy_blocks3_exports = {};
__export(toy_blocks3_exports, {
  IconToyBlocks3: () => IconToyBlocks3,
  default: () => toy_blocks3_default
});
var IconToyBlocks3, toy_blocks3_default;
var init_toy_blocks3 = __esm({
  "lib/icons/toy-blocks3.ts"() {
    IconToyBlocks3 = `<svg id="toy-blocks-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18,37v16c0,.55.45,1,1,1h7.05c.51,0,.94-.38.99-.88.44-4.56,4.28-8.12,8.96-8.12s8.52,3.56,8.96,8.12c.05.5.48.88.99.88h7.05c.55,0,1-.45,1-1v-16c0-.55-.45-1-1-1H19c-.55,0-1,.45-1,1Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="9" y="54" width="54" height="9" rx="1" ry="1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="31.5" y="22.5" width="9" height="13.5" rx="1" ry="1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M28.71,20.79l6.59-6.59c.39-.39,1.02-.39,1.41,0l6.59,6.59c.63.63.18,1.71-.71,1.71h-13.17c-.89,0-1.34-1.08-.71-1.71Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M18,37v16c0,.55.45,1,1,1h7.05c.51,0,.94-.38.99-.88.44-4.56,4.28-8.12,8.96-8.12s8.52,3.56,8.96,8.12c.05.5.48.88.99.88h7.05c.55,0,1-.45,1-1v-16c0-.55-.45-1-1-1H19c-.55,0-1,.45-1,1Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="9" y="54" width="54" height="9" rx="1" ry="1" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="31.5" y="22.5" width="9" height="13.5" rx="1" ry="1" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M28.71,20.79l6.59-6.59c.39-.39,1.02-.39,1.41,0l6.59,6.59c.63.63.18,1.71-.71,1.71h-13.17c-.89,0-1.34-1.08-.71-1.71Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    toy_blocks3_default = IconToyBlocks3;
  }
});

// lib/icons/toy-blocks.ts
var toy_blocks_exports = {};
__export(toy_blocks_exports, {
  IconToyBlocks: () => IconToyBlocks,
  default: () => toy_blocks_default
});
var IconToyBlocks, toy_blocks_default;
var init_toy_blocks = __esm({
  "lib/icons/toy-blocks.ts"() {
    IconToyBlocks = `<svg id="toy-blocks" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="22.5" width="36" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M23.5,15.5h7c.55,0,1,.45,1,1v6h-9v-6c0-.55.45-1,1-1Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M41.5,15.5h7c.55,0,1,.45,1,1v6h-9v-6c0-.55.45-1,1-1Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="18" y="40.5" width="36" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="18" y="22.5" width="36" height="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M23.5,15.5h7c.55,0,1,.45,1,1v6h-9v-6c0-.55.45-1,1-1Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M41.5,15.5h7c.55,0,1,.45,1,1v6h-9v-6c0-.55.45-1,1-1Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="40.5" width="36" height="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    toy_blocks_default = IconToyBlocks;
  }
});

// lib/icons/toy-head.ts
var toy_head_exports = {};
__export(toy_head_exports, {
  IconToyHead: () => IconToyHead,
  default: () => toy_head_default
});
var IconToyHead, toy_head_default;
var init_toy_head = __esm({
  "lib/icons/toy-head.ts"() {
    IconToyHead = `<svg id="toy-head" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="40.5" rx="8" ry="8" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><rect x="24.75" y="54" width="22.5" height="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M30.97,6.75h10.05c1.1,0,2,.9,2,2v4.75h-14.05v-4.75c0-1.1.9-2,2-2Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="13.5" y="13.5" width="45" height="40.5" rx="8" ry="8" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="24.75" y="54" width="22.5" height="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30.97,6.75h10.05c1.1,0,2,.9,2,2v4.75h-14.05v-4.75c0-1.1.9-2,2-2Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="29.35" y1="28.91" x2="29.35" y2="28.91" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="42.51" y1="28.91" x2="42.51" y2="28.91" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><path d="M43.57,38.46c-4.22,4.22-11.06,4.22-15.28,0" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    toy_head_default = IconToyHead;
  }
});

// lib/icons/tree2.ts
var tree2_exports = {};
__export(tree2_exports, {
  IconTree2: () => IconTree2,
  default: () => tree2_default
});
var IconTree2, tree2_default;
var init_tree2 = __esm({
  "lib/icons/tree2.ts"() {
    IconTree2 = `<svg id="tree_2" data-name="tree 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M52.5,38.75c0,1.37-.11,2.72-.32,4.04-2.91,18.29-29.44,18.29-32.35,0-.21-1.32-.32-2.67-.32-4.04,0-9.28,5.26-17.57,9.85-23.03,3.46-4.12,9.85-4.12,13.31,0,4.58,5.46,9.85,13.75,9.85,23.03Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M52.5,38.75c0,1.37-.11,2.72-.32,4.04-2.91,18.29-29.44,18.29-32.35,0-.21-1.32-.32-2.67-.32-4.04,0-9.28,5.26-17.57,9.85-23.03,3.46-4.12,9.85-4.12,13.31,0,4.58,5.46,9.85,13.75,9.85,23.03Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="31.5" x2="36" y2="67.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="45" x2="45" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="40.5" x2="36" y2="49.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    tree2_default = IconTree2;
  }
});

// lib/icons/tree3.ts
var tree3_exports = {};
__export(tree3_exports, {
  IconTree3: () => IconTree3,
  default: () => tree3_default
});
var IconTree3, tree3_default;
var init_tree3 = __esm({
  "lib/icons/tree3.ts"() {
    IconTree3 = `<svg id="tree_3" data-name="tree 3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="13.5 54 58.5 54 47.25 39 54.75 39 43.5 24 51 24 36 4.5 21 24 28.5 24 17.25 39 24.75 39 13.5 54" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><polygon points="13.5 54 58.5 54 47.25 39 54.75 39 43.5 24 51 24 36 4.5 21 24 28.5 24 17.25 39 24.75 39 13.5 54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="31.5" x2="36" y2="67.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    tree3_default = IconTree3;
  }
});

// lib/icons/tree.ts
var tree_exports = {};
__export(tree_exports, {
  IconTree: () => IconTree,
  default: () => tree_default
});
var IconTree, tree_default;
var init_tree = __esm({
  "lib/icons/tree.ts"() {
    IconTree = `<svg id="tree" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M46.98,27.18c.17-.78.27-1.6.27-2.43,0-6.21-5.04-11.25-11.25-11.25s-11.25,5.04-11.25,11.25c0,.84.1,1.65.27,2.43-5.27.94-9.27,5.53-9.27,11.07,0,6.21,5.04,11.25,11.25,11.25,3.69,0,6.95-1.78,9-4.52,2.05,2.74,5.31,4.52,9,4.52,6.21,0,11.25-5.04,11.25-11.25,0-5.54-4-10.13-9.27-11.07Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M46.98,27.18c.17-.78.27-1.6.27-2.43,0-6.21-5.04-11.25-11.25-11.25s-11.25,5.04-11.25,11.25c0,.84.1,1.65.27,2.43-5.27.94-9.27,5.53-9.27,11.07,0,6.21,5.04,11.25,11.25,11.25,3.69,0,6.95-1.78,9-4.52,2.05,2.74,5.31,4.52,9,4.52,6.21,0,11.25-5.04,11.25-11.25,0-5.54-4-10.13-9.27-11.07Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="36" x2="36" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="40.5" x2="45" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="63" x2="36" y2="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    tree_default = IconTree;
  }
});

// lib/icons/treehouse.ts
var treehouse_exports = {};
__export(treehouse_exports, {
  IconTreehouse: () => IconTreehouse,
  default: () => treehouse_default
});
var IconTreehouse, treehouse_default;
var init_treehouse = __esm({
  "lib/icons/treehouse.ts"() {
    IconTreehouse = `<svg id="treehouse" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="36 13.5 18 20.69 18 40.5 31.5 40.5 31.5 27 40.5 27 40.5 40.5 54 40.5 54 20.69 36 13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><rect x="31.5" y="27" width="9" height="13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 22.5 36 13.5 58.5 22.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="18 20.69 18 40.5 54 40.5 54 20.69" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="40.5" x2="63" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="63" x2="31.5" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="63" x2="40.5" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="54" x2="13.5" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="54" x2="58.5" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    treehouse_default = IconTreehouse;
  }
});

// lib/icons/trees2.ts
var trees2_exports = {};
__export(trees2_exports, {
  IconTrees2: () => IconTrees2,
  default: () => trees2_default
});
var IconTrees2, trees2_default;
var init_trees2 = __esm({
  "lib/icons/trees2.ts"() {
    IconTrees2 = `<svg id="trees_2" data-name="trees 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M48.68,34.77c1.35-1.93,2.99-3.27,4.75-3.27,4.66,0,8.44,9.4,8.44,14.06s-3.78,8.44-8.44,8.44c-3.21,0-6.01-1.8-7.43-4.44" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M27,45.56c0,4.66-3.78,8.44-8.44,8.44s-8.44-3.78-8.44-8.44,3.78-14.06,8.44-14.06,8.44,9.4,8.44,14.06Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M26,49.55c2.47,2.73,6.03,4.45,10,4.45,7.46,0,13.5-6.04,13.5-13.5s-6.04-22.5-13.5-22.5c-5.83,0-10.8,9.2-12.69,16.77" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M48.68,34.77c1.35-1.93,2.99-3.27,4.75-3.27,4.66,0,8.44,9.4,8.44,14.06s-3.78,8.44-8.44,8.44c-3.21,0-6.01-1.8-7.43-4.44" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,45.56c0,4.66-3.78,8.44-8.44,8.44s-8.44-3.78-8.44-8.44,3.78-14.06,8.44-14.06,8.44,9.4,8.44,14.06Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M26,49.55c2.47,2.73,6.03,4.45,10,4.45,7.46,0,13.5-6.04,13.5-13.5s-6.04-22.5-13.5-22.5c-5.83,0-10.8,9.2-12.69,16.77" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="40.5" x2="36" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="53.44" y1="45" x2="53.44" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18.56" y1="45" x2="18.56" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="63" x2="63" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="31.5 36 36 40.5 40.5 36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    trees2_default = IconTrees2;
  }
});

// lib/icons/trees.ts
var trees_exports = {};
__export(trees_exports, {
  IconTrees: () => IconTrees,
  default: () => trees_default
});
var IconTrees, trees_default;
var init_trees = __esm({
  "lib/icons/trees.ts"() {
    IconTrees = `<svg id="trees" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,40.5c0,7.46-6.04,13.5-13.5,13.5s-13.5-6.04-13.5-13.5,6.04-22.5,13.5-22.5,13.5,15.04,13.5,22.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M57.94,45.56c0,4.66-3.78,8.44-8.44,8.44s-8.44-3.78-8.44-8.44,3.78-14.06,8.44-14.06,8.44,9.4,8.44,14.06Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M40.5,40.5c0,7.46-6.04,13.5-13.5,13.5s-13.5-6.04-13.5-13.5,6.04-22.5,13.5-22.5,13.5,15.04,13.5,22.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M57.94,45.56c0,4.66-3.78,8.44-8.44,8.44s-8.44-3.78-8.44-8.44,3.78-14.06,8.44-14.06,8.44,9.4,8.44,14.06Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="40.5" x2="27" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="45" x2="49.5" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="63" x2="63" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    trees_default = IconTrees;
  }
});

// lib/icons/trunk1.ts
var trunk1_exports = {};
__export(trunk1_exports, {
  IconTrunk1: () => IconTrunk1,
  default: () => trunk1_default
});
var IconTrunk1, trunk1_default;
var init_trunk1 = __esm({
  "lib/icons/trunk1.ts"() {
    IconTrunk1 = `<svg id="furniture-chair_4" data-name="furniture-chair 4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,18s-9,9-4.5,22.5,0,18,0,18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="31.5" x2="63" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><ellipse cx="45" cy="36" rx="4.5" ry="9" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="13.5 27 13.5 36 22.5 45 22.5 31.5 13.5 27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 27 63 22.5 63 31.5 49.5 40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="22.5" y="18" width="27" height="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    trunk1_default = IconTrunk1;
  }
});

// lib/icons/trunk2.ts
var trunk2_exports = {};
__export(trunk2_exports, {
  IconTrunk2: () => IconTrunk2,
  default: () => trunk2_default
});
var IconTrunk2, trunk2_default;
var init_trunk2 = __esm({
  "lib/icons/trunk2.ts"() {
    IconTrunk2 = `<svg id="furniture-chair_4" data-name="furniture-chair 4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><ellipse cx="36" cy="20.25" rx="9" ry="2.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,27c0,9,4.5,13.5,4.5,31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,58.5s-4.5-9-4.5-31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,27s4.5,13.5,9,18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><ellipse cx="36" cy="22.5" rx="18" ry="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,22.5v31.5c0,2.49,8.06,4.5,18,4.5s18-2.01,18-4.5v-31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    trunk2_default = IconTrunk2;
  }
});

// lib/icons/ufo.ts
var ufo_exports = {};
__export(ufo_exports, {
  IconUfo: () => IconUfo,
  default: () => ufo_default
});
var IconUfo, ufo_default;
var init_ufo = __esm({
  "lib/icons/ufo.ts"() {
    IconUfo = `<svg id="ufo" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M9,36l5.49-5.49c2.25-2.25,5.3-3.51,8.49-3.51h26.06c3.18,0,6.23,1.26,8.49,3.51l5.49,5.49-5.49,5.49c-2.25,2.25-5.3,3.51-8.49,3.51h-26.06c-3.18,0-6.23-1.26-8.49-3.51l-5.49-5.49Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M9,36l5.49-5.49c2.25-2.25,5.3-3.51,8.49-3.51h26.06c3.18,0,6.23,1.26,8.49,3.51l5.49,5.49-5.49,5.49c-2.25,2.25-5.3,3.51-8.49,3.51h-26.06c-3.18,0-6.23-1.26-8.49-3.51l-5.49-5.49Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="36" x2="27" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="36" x2="45" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="58.5" x2="36" y2="45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="58.5" x2="22.5" y2="45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="58.5" x2="49.5" y2="45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,27c0-7.46,6.04-13.5,13.5-13.5s13.5,6.04,13.5,13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    ufo_default = IconUfo;
  }
});

// lib/icons/vote.ts
var vote_exports = {};
__export(vote_exports, {
  IconVote: () => IconVote,
  default: () => vote_default
});
var IconVote, vote_default;
var init_vote = __esm({
  "lib/icons/vote.ts"() {
    IconVote = `<svg id="vote" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M54,31.65v-.15h0c0,.05,0,.1,0,.15Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M50.72,40l-9.55,9.55c-2.64,2.64-6.91,2.64-9.55,0-2.64-2.64-2.64-6.91,0-9.55l8.5-8.5h-22.13v27h36v-26.06c-.1,2.75-1.18,5.46-3.28,7.56Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M31.53,31.5c.13-2.69,1.22-5.35,3.28-7.41" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="42.66" y="16.41" width="22.5" height="9" transform="translate(30.57 -31.99) rotate(45)" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="58.5" x2="63" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="31.5" x2="54" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="18 58.5 18 31.5 40.13 31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M34.81,24.09c4.39-4.39,11.52-4.39,15.91,0,4.39,4.39,4.39,11.52,0,15.91h0l-9.55,9.55c-2.64,2.64-6.91,2.64-9.55,0s-2.64-6.91,0-9.55l11.14-11.14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    vote_default = IconVote;
  }
});

// lib/icons/wallet.ts
var wallet_exports = {};
__export(wallet_exports, {
  IconWallet: () => IconWallet,
  default: () => wallet_default
});
var IconWallet, wallet_default;
var init_wallet = __esm({
  "lib/icons/wallet.ts"() {
    IconWallet = `<svg id="wallet" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M49.5,39.22h9v-5c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v23.5c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4v-9.5h-9c-2.49,0-4.5-2.01-4.5-4.5s2.01-4.5,4.5-4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M58.5,39.22h-9c-2.49,0-4.5,2.01-4.5,4.5h0c0,2.49,2.01,4.5,4.5,4.5h9" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="21.24" width="13.96" height="9" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="31.96" y="15.22" width="19.79" height="15.02" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="30.22" width="45" height="31.5" rx="4" ry="4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    wallet_default = IconWallet;
  }
});

// lib/icons/washing-machine.ts
var washing_machine_exports = {};
__export(washing_machine_exports, {
  IconWashingMachine: () => IconWashingMachine,
  default: () => washing_machine_default
});
var IconWashingMachine, washing_machine_default;
var init_washing_machine = __esm({
  "lib/icons/washing-machine.ts"() {
    IconWashingMachine = `<svg id="washing_machine" data-name="washing machine" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M60.81,9.42c-.04-.25-.25-.42-.49-.42H11.68c-.25,0-.46.17-.49.42-.36,2.48-2.19,15.41-2.19,24.33s1.83,21.85,2.19,24.33c.04.25.25.42.49.42h48.64c.25,0,.46-.17.49-.42.36-2.48,2.19-15.41,2.19-24.33s-1.83-21.85-2.19-24.33ZM49.5,36c0,7.46-6.04,13.5-13.5,13.5-5.88,0-10.87-3.77-12.72-9.02-.26,0-.51.02-.78.02l.7-.23c-.45-1.34-.7-2.77-.7-4.27,0-7.46,6.04-13.5,13.5-13.5,5.88,0,10.87,3.77,12.72,9.01.26,0,.51-.01.78-.01l-.7.23c.45,1.34.7,2.77.7,4.27Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M60.32,58.5c.25,0,.46-.17.49-.42.36-2.48,2.19-15.41,2.19-24.33s-1.83-21.85-2.19-24.33c-.04-.25-.25-.42-.49-.42H11.68c-.25,0-.46.17-.49.42-.36,2.48-2.19,15.41-2.19,24.33s1.83,21.85,2.19,24.33c.04.25.25.42.49.42h48.64Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,40.5c12,0,12-9,27-9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="18" x2="22.5" y2="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    washing_machine_default = IconWashingMachine;
  }
});

// lib/icons/watercooker.ts
var watercooker_exports = {};
__export(watercooker_exports, {
  IconWatercooker: () => IconWatercooker,
  default: () => watercooker_default
});
var IconWatercooker, watercooker_default;
var init_watercooker = __esm({
  "lib/icons/watercooker.ts"() {
    IconWatercooker = `<svg id="watercooker" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M19.61,40.49l-1.32,12.96c-.03.29.2.55.5.55h34.89c.3,0,.53-.26.5-.55l-2.23-21.95c-17.93.08-18.25,8.75-32.34,8.99Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M18.81,40.5c14.73,0,14.73-9,33.14-9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18.55,54h34.89c.3,0,.53-.26.5-.55l-3.78-37.17c-.37-4.12-3.83-7.28-7.97-7.28h-12.39c-4.14,0-7.59,3.16-7.97,7.28l-3.78,37.17c-.03.29.2.55.5.55Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,40.5l4.18-20.89c.19-.93,1.01-1.61,1.96-1.61h45.48c1.28,0,2.23,1.19,1.95,2.44-.92,4.11-3.65,11.98-10.94,11.98" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="63" x2="54" y2="63" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    watercooker_default = IconWatercooker;
  }
});

// lib/icons/yurt.ts
var yurt_exports = {};
__export(yurt_exports, {
  IconYurt: () => IconYurt,
  default: () => yurt_default
});
var IconYurt, yurt_default;
var init_yurt = __esm({
  "lib/icons/yurt.ts"() {
    IconYurt = `<svg id="yurt" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,22.5l-22.5,9v14c0,2.21,1.79,4,4,4h14v-18h9v18h14c2.21,0,4-1.79,4-4v-14l-22.5-9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);"/><path d="M36,22.5l-22.5,9v14c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4v-14l-22.5-9Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="49.5" x2="63" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="40.5" x2="58.5" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="40.5" x2="31.5" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="31.5" y="31.5" width="9" height="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    yurt_default = IconYurt;
  }
});

// lib/icons/baby-stroller.ts
var baby_stroller_exports = {};
__export(baby_stroller_exports, {
  IconBabyStroller: () => IconBabyStroller,
  default: () => baby_stroller_default
});
var IconBabyStroller, baby_stroller_default;
var init_baby_stroller = __esm({
  "lib/icons/baby-stroller.ts"() {
    IconBabyStroller = `<svg id="baby-stroller" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.5,31.5c0,12.43,10.07,18,22.5,18s22.5-5.57,22.5-18H13.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M13.5,31.5h22.5V13.5c-12.43,0-22.5,5.57-22.5,18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="67.5" y1="22.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,31.5c0,12.43,10.07,18,22.5,18s22.5-5.57,22.5-18H13.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,31.5h22.5V13.5c-12.43,0-22.5,5.57-22.5,18Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="27" cy="54" r="4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="45" cy="54" r="4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    baby_stroller_default = IconBabyStroller;
  }
});

// lib/icons/clothing-tshirt.ts
var clothing_tshirt_exports = {};
__export(clothing_tshirt_exports, {
  IconClothingTshirt: () => IconClothingTshirt,
  default: () => clothing_tshirt_default
});
var IconClothingTshirt, clothing_tshirt_default;
var init_clothing_tshirt = __esm({
  "lib/icons/clothing-tshirt.ts"() {
    IconClothingTshirt = `<svg id="clothing-tshirt" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M44.63,13.5c0,6.21-4.03,11.25-9,11.25s-9-5.04-9-11.25h0c-22.5,0-18,22.5-18,22.5h9v27h36v-27h9s4.5-22.5-18-22.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="18 27 18 63 54 63 54 27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,36h-9S4.5,13.5,27,13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,36h9s4.5-22.5-18-22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,13.5c0,6.21-4.03,11.25-9,11.25s-9-5.04-9-11.25h18Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    clothing_tshirt_default = IconClothingTshirt;
  }
});

// lib/icons/cotton.ts
var cotton_exports = {};
__export(cotton_exports, {
  IconCotton: () => IconCotton,
  default: () => cotton_default
});
var IconCotton, cotton_default;
var init_cotton = __esm({
  "lib/icons/cotton.ts"() {
    IconCotton = `<svg id="cotton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M49.5,22.5c-1.68,0-3.25.47-4.6,1.27.06-.42.1-.84.1-1.27,0-4.97-4.03-9-9-9s-9,4.03-9,9c0,.43.04.86.1,1.27-1.35-.8-2.92-1.27-4.6-1.27-4.97,0-9,4.03-9,9s4.03,9,9,9h27c4.97,0,9-4.03,9-9s-4.03-9-9-9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="27 31.5 36 40.5 45 31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="40.5" x2="36" y2="63" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="31.5" x2="36" y2="40.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,22.5c-1.68,0-3.25.47-4.6,1.27.06-.42.1-.84.1-1.27,0-4.97-4.03-9-9-9s-9,4.03-9,9c0,.43.04.86.1,1.27-1.35-.8-2.92-1.27-4.6-1.27-4.97,0-9,4.03-9,9s4.03,9,9,9h27c4.97,0,9-4.03,9-9s-4.03-9-9-9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cotton_default = IconCotton;
  }
});

// lib/icons/home-garden.ts
var home_garden_exports = {};
__export(home_garden_exports, {
  IconHomeGarden: () => IconHomeGarden,
  default: () => home_garden_default
});
var IconHomeGarden, home_garden_default;
var init_home_garden = __esm({
  "lib/icons/home-garden.ts"() {
    IconHomeGarden = `<svg id="home-garden" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="31.5 58.5 27 45 45 45 40.5 58.5 31.5 58.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M32.82,26.45c3.51,3.51,3.18,9.55,3.18,9.55,0,0-6.03.33-9.55-3.18s-3.18-9.55-3.18-9.55c0,0,6.03-.33,9.55,3.18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M39.18,26.45c-3.51,3.51-3.18,9.55-3.18,9.55,0,0,6.03.33,9.55-3.18s3.18-9.55,3.18-9.55c0,0-6.03-.33-9.55,3.18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polygon points="13.5 58.5 13.5 22.5 36 9 58.5 22.5 58.5 58.5 13.5 58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="31.5 58.5 27 45 45 45 40.5 58.5 31.5 58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M32.82,26.45c3.51,3.51,3.18,9.55,3.18,9.55,0,0-6.03.33-9.55-3.18s-3.18-9.55-3.18-9.55c0,0,6.03-.33,9.55,3.18Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M39.18,26.45c-3.51,3.51-3.18,9.55-3.18,9.55,0,0,6.03.33,9.55-3.18s3.18-9.55,3.18-9.55c0,0-6.03-.33-9.55,3.18Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="45" x2="36" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    home_garden_default = IconHomeGarden;
  }
});

// lib/icons/hypoallergenic.ts
var hypoallergenic_exports = {};
__export(hypoallergenic_exports, {
  IconHypoallergenic: () => IconHypoallergenic,
  default: () => hypoallergenic_default
});
var IconHypoallergenic, hypoallergenic_default;
var init_hypoallergenic = __esm({
  "lib/icons/hypoallergenic.ts"() {
    IconHypoallergenic = `<svg id="hypoallergenic" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54,40.5c0,9.94-8.06,18-18,18s-18-8.06-18-18c0-13.5,18-27,18-27,0,0,18,13.5,18,27Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="26.45 36 36 49.5 49.5 27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,40.5c0,9.94-8.06,18-18,18s-18-8.06-18-18c0-13.5,18-27,18-27,0,0,18,13.5,18,27Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    hypoallergenic_default = IconHypoallergenic;
  }
});

// lib/icons/no-leaks.ts
var no_leaks_exports = {};
__export(no_leaks_exports, {
  IconNoLeaks: () => IconNoLeaks,
  default: () => no_leaks_default
});
var IconNoLeaks, no_leaks_default;
var init_no_leaks = __esm({
  "lib/icons/no-leaks.ts"() {
    IconNoLeaks = `<svg id="no-leaks-2" data-name="no-leaks" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M48.6,36.9c0,6.96-5.64,12.6-12.6,12.6s-12.6-5.64-12.6-12.6c0-9.45,12.6-18.9,12.6-18.9,0,0,12.6,9.45,12.6,18.9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M13.5,13.91v25.64c0,5.49,2.96,10.67,8,13.96l14.5,9.49,14.5-9.49c5.04-3.3,8-8.47,8-13.96V13.91l-22.5-4.91-22.5,4.91Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M48.6,36.9c0,6.96-5.64,12.6-12.6,12.6s-12.6-5.64-12.6-12.6c0-9.45,12.6-18.9,12.6-18.9,0,0,12.6,9.45,12.6,18.9Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="13.91" x2="19.7" y2="52.18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    no_leaks_default = IconNoLeaks;
  }
});

// lib/icons/suitcase-jobs.ts
var suitcase_jobs_exports = {};
__export(suitcase_jobs_exports, {
  IconSuitcaseJobs: () => IconSuitcaseJobs,
  default: () => suitcase_jobs_default
});
var IconSuitcaseJobs, suitcase_jobs_default;
var init_suitcase_jobs = __esm({
  "lib/icons/suitcase-jobs.ts"() {
    IconSuitcaseJobs = `<svg id="suitcase-jobs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="22.5" width="45" height="31.5" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="13.5" y1="36" x2="58.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="22.5" width="45" height="31.5" rx="4" ry="4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31,13.5h10c2.21,0,4,1.79,4,4v5h-18v-5c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="45" x2="36" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    suitcase_jobs_default = IconSuitcaseJobs;
  }
});

// lib/icons/shopping-bag2.ts
var shopping_bag2_exports = {};
__export(shopping_bag2_exports, {
  IconShoppingBag2: () => IconShoppingBag2,
  default: () => shopping_bag2_default
});
var IconShoppingBag2, shopping_bag2_default;
var init_shopping_bag2 = __esm({
  "lib/icons/shopping-bag2.ts"() {
    IconShoppingBag2 = `<svg id="shopping-bag-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="22.5" width="36" height="36" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M31.5,27v-9c0-2.49,2.01-4.5,4.5-4.5s4.5,2.01,4.5,4.5v9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="22.5" width="36" height="36" rx="4" ry="4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,26.5v28c0,2.21-1.79,4-4,4h-28c-2.21,0-4-1.79-4-4v-28" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shopping_bag2_default = IconShoppingBag2;
  }
});

// lib/icons/shopping-bag3.ts
var shopping_bag3_exports = {};
__export(shopping_bag3_exports, {
  IconShoppingBag3: () => IconShoppingBag3,
  default: () => shopping_bag3_default
});
var IconShoppingBag3, shopping_bag3_default;
var init_shopping_bag3 = __esm({
  "lib/icons/shopping-bag3.ts"() {
    IconShoppingBag3 = `<svg id="shopping-bag-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M46.84,60.18h0c-7.12,1.78-14.57,1.78-21.69,0h0c-3.61-.9-6.43-3.72-7.33-7.33h0c-1.78-7.12-1.78-14.57,0-21.69h0c.9-3.61,3.72-6.43,7.33-7.33h0c7.12-1.78,14.57-1.78,21.69,0h0c3.61.9,6.43,3.72,7.33,7.33h0c1.78,7.12,1.78,14.57,0,21.69h0c-.9,3.61-3.72,6.43-7.33,7.33Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M29.25,31.5v-11.25c0-3.73,3.02-6.75,6.75-6.75s6.75,3.02,6.75,6.75v11.25" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M46.84,60.18h0c-7.12,1.78-14.57,1.78-21.69,0h0c-3.61-.9-6.43-3.72-7.33-7.33h0c-1.78-7.12-1.78-14.57,0-21.69h0c.9-3.61,3.72-6.43,7.33-7.33h0c7.12-1.78,14.57-1.78,21.69,0h0c3.61.9,6.43,3.72,7.33,7.33h0c1.78,7.12,1.78,14.57,0,21.69h0c-.9,3.61-3.72,6.43-7.33,7.33Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54.17,52.85c-.9,3.61-3.72,6.43-7.33,7.33h0c-7.12,1.78-14.57,1.78-21.69,0h0c-3.61-.9-6.43-3.72-7.33-7.33" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shopping_bag3_default = IconShoppingBag3;
  }
});

// lib/icons/shopping-bag-discount.ts
var shopping_bag_discount_exports = {};
__export(shopping_bag_discount_exports, {
  IconShoppingBagDiscount: () => IconShoppingBagDiscount,
  default: () => shopping_bag_discount_default
});
var IconShoppingBagDiscount, shopping_bag_discount_default;
var init_shopping_bag_discount = __esm({
  "lib/icons/shopping-bag-discount.ts"() {
    IconShoppingBagDiscount = `<svg id="shopping-bag-discount" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.36,27.84l-4.17,25c-.1.61.37,1.16.99,1.16h33.64c.62,0,1.09-.55.99-1.16l-4.17-25c-.08-.48-.5-.84-.99-.84h-25.31c-.49,0-.91.35-.99.84Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M22.36,27.84l-4.17,25c-.1.61.37,1.16.99,1.16h33.64c.62,0,1.09-.55.99-1.16l-4.17-25c-.08-.48-.5-.84-.99-.84h-25.31c-.49,0-.91.35-.99.84Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,27v-9c0-2.49,2.01-4.5,4.5-4.5s4.5,2.01,4.5,4.5v9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="29" y1="33.75" x2="29" y2="33.75" style="fill: red; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="42.5" y1="47.25" x2="42.5" y2="47.25" style="fill: red; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="29" y1="47.25" x2="42.5" y2="33.75" style="fill: red; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    shopping_bag_discount_default = IconShoppingBagDiscount;
  }
});

// lib/icons/shopping-bag.ts
var shopping_bag_exports = {};
__export(shopping_bag_exports, {
  IconShoppingBag: () => IconShoppingBag,
  default: () => shopping_bag_default
});
var IconShoppingBag, shopping_bag_default;
var init_shopping_bag = __esm({
  "lib/icons/shopping-bag.ts"() {
    IconShoppingBag = `<svg id="shopping-bag" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.36,27.84l-4.17,25c-.1.61.37,1.16.99,1.16h33.64c.62,0,1.09-.55.99-1.16l-4.17-25c-.08-.48-.5-.84-.99-.84h-25.31c-.49,0-.91.35-.99.84Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M22.36,27.84l-4.17,25c-.1.61.37,1.16.99,1.16h33.64c.62,0,1.09-.55.99-1.16l-4.17-25c-.08-.48-.5-.84-.99-.84h-25.31c-.49,0-.91.35-.99.84Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,27v-9c0-2.49,2.01-4.5,4.5-4.5s4.5,2.01,4.5,4.5v9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shopping_bag_default = IconShoppingBag;
  }
});

// lib/icons/shopping-basket-rounded.ts
var shopping_basket_rounded_exports = {};
__export(shopping_basket_rounded_exports, {
  IconShoppingBasketRounded: () => IconShoppingBasketRounded,
  default: () => shopping_basket_rounded_default
});
var IconShoppingBasketRounded, shopping_basket_rounded_default;
var init_shopping_basket_rounded = __esm({
  "lib/icons/shopping-basket-rounded.ts"() {
    IconShoppingBasketRounded = `<svg id="shopping-basket-rounded" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M21.28,54h29.44c1.91,0,3.55-1.35,3.92-3.22l3.38-16.89c.25-1.24-.7-2.39-1.96-2.39H15.94c-1.26,0-2.21,1.15-1.96,2.39l3.38,16.89c.37,1.87,2.02,3.22,3.92,3.22Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M27,31.5v-5c0-2.21,1.79-4,4-4h10c2.21,0,4,1.79,4,4v5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M21.28,54h29.44c1.91,0,3.55-1.35,3.92-3.22l3.38-16.89c.25-1.24-.7-2.39-1.96-2.39H15.94c-1.26,0-2.21,1.15-1.96,2.39l3.38,16.89c.37,1.87,2.02,3.22,3.92,3.22Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="38" x2="27" y2="46.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="38" x2="45" y2="46.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="35.75" y1="38" x2="35.75" y2="46.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shopping_basket_rounded_default = IconShoppingBasketRounded;
  }
});

// lib/icons/shopping-basket.ts
var shopping_basket_exports = {};
__export(shopping_basket_exports, {
  IconShoppingBasket: () => IconShoppingBasket,
  default: () => shopping_basket_default
});
var IconShoppingBasket, shopping_basket_default;
var init_shopping_basket = __esm({
  "lib/icons/shopping-basket.ts"() {
    IconShoppingBasket = `<svg id="shopping-basket" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M27,54v-27.5c0-2.21,1.79-4,4-4h10c2.21,0,4,1.79,4,4v27.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="31.5" x2="36" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="15.75" y1="42.75" x2="56.25" y2="42.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M21.28,54h29.44c1.91,0,3.55-1.35,3.92-3.22l3.86-19.28H13.5l3.86,19.28c.37,1.87,2.02,3.22,3.92,3.22Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shopping_basket_default = IconShoppingBasket;
  }
});

// lib/icons/shopping-cart-fast.ts
var shopping_cart_fast_exports = {};
__export(shopping_cart_fast_exports, {
  IconShoppingCartFast: () => IconShoppingCartFast,
  default: () => shopping_cart_fast_default
});
var IconShoppingCartFast, shopping_cart_fast_default;
var init_shopping_cart_fast = __esm({
  "lib/icons/shopping-cart-fast.ts"() {
    IconShoppingCartFast = `<svg id="shopping-cart-fast" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M58.12,18H23.06l2.81,22.5h29.35c1.91,0,3.55-1.35,3.92-3.22l2.9-14.5c.5-2.48-1.4-4.78-3.92-4.78Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M54,49.5h-23.47c-2.02,0-3.72-1.5-3.97-3.5l-4.06-32.5h-9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="58.5" x2="31.5" y2="58.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/><line x1="45" y1="58.5" x2="45" y2="58.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/><path d="M23.06,18h35.06c2.52,0,4.42,2.31,3.92,4.78l-2.9,14.5c-.37,1.87-2.02,3.22-3.92,3.22h-29.35" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="7.5" y1="27" x2="15" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="11.5" y1="36" x2="17" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="16" y1="45" x2="19.5" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shopping_cart_fast_default = IconShoppingCartFast;
  }
});

// lib/icons/shopping-cart.ts
var shopping_cart_exports = {};
__export(shopping_cart_exports, {
  IconShoppingCart: () => IconShoppingCart,
  default: () => shopping_cart_default
});
var IconShoppingCart, shopping_cart_default;
var init_shopping_cart = __esm({
  "lib/icons/shopping-cart.ts"() {
    IconShoppingCart = `<svg id="shopping-cart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54.64,37.28l2.9-14.5c.5-2.48-1.4-4.78-3.92-4.78H18.56l2.81,22.5h29.35c1.91,0,3.55-1.35,3.92-3.22Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M49.5,49.5h-23.47c-2.02,0-3.72-1.5-3.97-3.5l-4.06-32.5h-9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="58.5" x2="27" y2="58.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/><line x1="40.5" y1="58.5" x2="40.5" y2="58.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/><path d="M18.56,18h35.06c2.52,0,4.42,2.31,3.92,4.78l-2.9,14.5c-.37,1.87-2.02,3.22-3.92,3.22h-29.35" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shopping_cart_default = IconShoppingCart;
  }
});

// lib/icons/shopping-label.ts
var shopping_label_exports = {};
__export(shopping_label_exports, {
  IconShoppingLabel: () => IconShoppingLabel,
  default: () => shopping_label_default
});
var IconShoppingLabel, shopping_label_default;
var init_shopping_label = __esm({
  "lib/icons/shopping-label.ts"() {
    IconShoppingLabel = `<svg id="shopping-label" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.5,30.67v-15.17c0-1.1.9-2,2-2h15.17c.53,0,1.04.21,1.41.59l25,25c.78.78.78,2.05,0,2.83l-15.17,15.17c-.78.78-2.05.78-2.83,0l-25-25c-.38-.38-.59-.88-.59-1.41Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M13.5,30.67v-15.17c0-1.1.9-2,2-2h15.17c.53,0,1.04.21,1.41.59l25,25c.78.78.78,2.05,0,2.83l-15.17,15.17c-.78.78-2.05.78-2.83,0l-25-25c-.38-.38-.59-.88-.59-1.41Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="22.5" x2="22.5" y2="22.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shopping_label_default = IconShoppingLabel;
  }
});

// lib/icons/shopping-labels.ts
var shopping_labels_exports = {};
__export(shopping_labels_exports, {
  IconShoppingLabels: () => IconShoppingLabels,
  default: () => shopping_labels_default
});
var IconShoppingLabels, shopping_labels_default;
var init_shopping_labels = __esm({
  "lib/icons/shopping-labels.ts"() {
    IconShoppingLabels = `<svg id="shopping-labels" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18,22.5h-7.37c-.9,0-1.63.73-1.63,1.63v12.37c0,.43.17.85.48,1.15l20.38,20.38c.64.64,1.67.64,2.31,0l6.18-6.18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,30.67v-15.17c0-1.1.9-2,2-2h15.17c.53,0,1.04.21,1.41.59l25,25c.78.78.78,2.05,0,2.83l-15.17,15.17c-.78.78-2.05.78-2.83,0l-25-25c-.38-.38-.59-.88-.59-1.41Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M18,30.67v-15.17c0-1.1.9-2,2-2h15.17c.53,0,1.04.21,1.41.59l25,25c.78.78.78,2.05,0,2.83l-15.17,15.17c-.78.78-2.05.78-2.83,0l-25-25c-.38-.38-.59-.88-.59-1.41Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="22.5" x2="27" y2="22.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    shopping_labels_default = IconShoppingLabels;
  }
});

// lib/icons/icon43.ts
var icon43_exports = {};
__export(icon43_exports, {
  IconIcon43: () => IconIcon43,
  default: () => icon43_default
});
var IconIcon43, icon43_default;
var init_icon43 = __esm({
  "lib/icons/icon43.ts"() {
    IconIcon43 = `<svg id="Artboard_45" data-name="Artboard 45" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="27" style="fill: none;  stroke-linejoin: bevel; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="36" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/><line x1="22.5" y1="36" x2="22.5" y2="36" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/><line x1="49.5" y1="36" x2="49.5" y2="36" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/></svg>`;
    icon43_default = IconIcon43;
  }
});

// lib/icons/baht-symbol.ts
var baht_symbol_exports = {};
__export(baht_symbol_exports, {
  IconBahtSymbol: () => IconBahtSymbol,
  default: () => baht_symbol_default
});
var IconBahtSymbol, baht_symbol_default;
var init_baht_symbol = __esm({
  "lib/icons/baht-symbol.ts"() {
    IconBahtSymbol = `<svg id="baht-symbol" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M37.57,36c4.97,0,9,4.03,9,9s-4.03,9-9,9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M23.18,36h12.82c4.97,0,9-4.03,9-9s-4.03-9-9-9h-12.82v36h14.4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="9" x2="31.5" y2="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="54" x2="31.5" y2="63" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="37.57" y1="36" x2="25.54" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    baht_symbol_default = IconBahtSymbol;
  }
});

// lib/icons/dice1.ts
var dice1_exports = {};
__export(dice1_exports, {
  IconDice1: () => IconDice1,
  default: () => dice1_default
});
var IconDice1, dice1_default;
var init_dice1 = __esm({
  "lib/icons/dice1.ts"() {
    IconDice1 = `<svg id="dice-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    dice1_default = IconDice1;
  }
});

// lib/icons/dice2.ts
var dice2_exports = {};
__export(dice2_exports, {
  IconDice2: () => IconDice2,
  default: () => dice2_default
});
var IconDice2, dice2_default;
var init_dice2 = __esm({
  "lib/icons/dice2.ts"() {
    IconDice2 = `<svg id="dice-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="51.75" cy="20.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="20.25" cy="51.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    dice2_default = IconDice2;
  }
});

// lib/icons/dice3.ts
var dice3_exports = {};
__export(dice3_exports, {
  IconDice3: () => IconDice3,
  default: () => dice3_default
});
var IconDice3, dice3_default;
var init_dice3 = __esm({
  "lib/icons/dice3.ts"() {
    IconDice3 = `<svg id="dice-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><circle cx="51.75" cy="20.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="20.25" cy="51.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></g><circle cx="36" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    dice3_default = IconDice3;
  }
});

// lib/icons/dice4.ts
var dice4_exports = {};
__export(dice4_exports, {
  IconDice4: () => IconDice4,
  default: () => dice4_default
});
var IconDice4, dice4_default;
var init_dice4 = __esm({
  "lib/icons/dice4.ts"() {
    IconDice4 = `<svg id="dice-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="20.25" cy="20.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="51.75" cy="20.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="20.25" cy="51.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="51.75" cy="51.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    dice4_default = IconDice4;
  }
});

// lib/icons/dice5.ts
var dice5_exports = {};
__export(dice5_exports, {
  IconDice5: () => IconDice5,
  default: () => dice5_default
});
var IconDice5, dice5_default;
var init_dice5 = __esm({
  "lib/icons/dice5.ts"() {
    IconDice5 = `<svg id="dice-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><circle cx="20.25" cy="20.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="51.75" cy="20.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="20.25" cy="51.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="51.75" cy="51.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></g><circle cx="36" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    dice5_default = IconDice5;
  }
});

// lib/icons/dice6.ts
var dice6_exports = {};
__export(dice6_exports, {
  IconDice6: () => IconDice6,
  default: () => dice6_default
});
var IconDice6, dice6_default;
var init_dice6 = __esm({
  "lib/icons/dice6.ts"() {
    IconDice6 = `<svg id="dice-6" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><circle cx="20.25" cy="20.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="51.75" cy="20.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="20.25" cy="51.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="51.75" cy="51.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></g><circle cx="20.25" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="51.75" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    dice6_default = IconDice6;
  }
});

// lib/icons/dice7.ts
var dice7_exports = {};
__export(dice7_exports, {
  IconDice7: () => IconDice7,
  default: () => dice7_default
});
var IconDice7, dice7_default;
var init_dice7 = __esm({
  "lib/icons/dice7.ts"() {
    IconDice7 = `<svg id="dice-7" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="20.25" cy="20.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="51.75" cy="20.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="36" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="20.25" cy="51.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="51.75" cy="51.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="20.25" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="51.75" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    dice7_default = IconDice7;
  }
});

// lib/icons/dice8.ts
var dice8_exports = {};
__export(dice8_exports, {
  IconDice8: () => IconDice8,
  default: () => dice8_default
});
var IconDice8, dice8_default;
var init_dice8 = __esm({
  "lib/icons/dice8.ts"() {
    IconDice8 = `<svg id="dice-8" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><circle cx="20.25" cy="20.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="51.75" cy="20.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="20.25" cy="51.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="51.75" cy="51.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></g><circle cx="20.25" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><g><circle cx="36" cy="28.12" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="36" cy="43.88" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></g><circle cx="51.75" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    dice8_default = IconDice8;
  }
});

// lib/icons/dice9.ts
var dice9_exports = {};
__export(dice9_exports, {
  IconDice9: () => IconDice9,
  default: () => dice9_default
});
var IconDice9, dice9_default;
var init_dice9 = __esm({
  "lib/icons/dice9.ts"() {
    IconDice9 = `<svg id="dice-9" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><circle cx="20.25" cy="20.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="51.75" cy="20.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="20.25" cy="51.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="51.75" cy="51.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></g><circle cx="20.25" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="51.75" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><g><circle cx="36" cy="20.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="36" cy="51.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="36" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></g></svg>`;
    dice9_default = IconDice9;
  }
});

// lib/icons/digit-digital1.ts
var digit_digital1_exports = {};
__export(digit_digital1_exports, {
  IconDigitDigital1: () => IconDigitDigital1,
  default: () => digit_digital1_default
});
var IconDigitDigital1, digit_digital1_default;
var init_digit_digital1 = __esm({
  "lib/icons/digit-digital1.ts"() {
    IconDigitDigital1 = `<svg id="digit-digital-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="51.5 31.67 48.65 34.67 45.81 31.67 45.81 16.67 48.65 13.67 51.5 16.67 51.5 31.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 55.67 48.65 58.67 45.81 55.67 45.81 40.67 48.65 37.67 51.5 40.67 51.5 55.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    digit_digital1_default = IconDigitDigital1;
  }
});

// lib/icons/digit-digital2.ts
var digit_digital2_exports = {};
__export(digit_digital2_exports, {
  IconDigitDigital2: () => IconDigitDigital2,
  default: () => digit_digital2_default
});
var IconDigitDigital2, digit_digital2_default;
var init_digit_digital2 = __esm({
  "lib/icons/digit-digital2.ts"() {
    IconDigitDigital2 = `<svg id="digit-digital-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="28.72 39 25.88 36 28.72 33 42.96 33 45.81 36 42.96 39 28.72 39" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="28.72 15 25.88 12 28.72 9 42.96 9 45.81 12 42.96 15 28.72 15" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 31.67 48.65 34.67 45.81 31.67 45.81 16.67 48.65 13.67 51.5 16.67 51.5 31.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="26.19 55.5 23.35 58.5 20.5 55.5 20.5 40.5 23.35 37.5 26.19 40.5 26.19 55.5" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="28.72 63 25.88 60 28.72 57 42.96 57 45.81 60 42.96 63 28.72 63" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    digit_digital2_default = IconDigitDigital2;
  }
});

// lib/icons/digit-digital3.ts
var digit_digital3_exports = {};
__export(digit_digital3_exports, {
  IconDigitDigital3: () => IconDigitDigital3,
  default: () => digit_digital3_default
});
var IconDigitDigital3, digit_digital3_default;
var init_digit_digital3 = __esm({
  "lib/icons/digit-digital3.ts"() {
    IconDigitDigital3 = `<svg id="digit-digital-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="28.72 39 25.88 36 28.72 33 42.96 33 45.81 36 42.96 39 28.72 39" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="28.72 15 25.88 12 28.72 9 42.96 9 45.81 12 42.96 15 28.72 15" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 31.67 48.65 34.67 45.81 31.67 45.81 16.67 48.65 13.67 51.5 16.67 51.5 31.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 55.67 48.65 58.67 45.81 55.67 45.81 40.67 48.65 37.67 51.5 40.67 51.5 55.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="28.72 63 25.88 60 28.72 57 42.96 57 45.81 60 42.96 63 28.72 63" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    digit_digital3_default = IconDigitDigital3;
  }
});

// lib/icons/digit-digital4.ts
var digit_digital4_exports = {};
__export(digit_digital4_exports, {
  IconDigitDigital4: () => IconDigitDigital4,
  default: () => digit_digital4_default
});
var IconDigitDigital4, digit_digital4_default;
var init_digit_digital4 = __esm({
  "lib/icons/digit-digital4.ts"() {
    IconDigitDigital4 = `<svg id="digit-digital-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="28.72 39 25.88 36 28.72 33 42.96 33 45.81 36 42.96 39 28.72 39" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 31.67 48.65 34.67 45.81 31.67 45.81 16.67 48.65 13.67 51.5 16.67 51.5 31.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 55.67 48.65 58.67 45.81 55.67 45.81 40.67 48.65 37.67 51.5 40.67 51.5 55.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="26.19 31.5 23.35 34.5 20.5 31.5 20.5 16.5 23.35 13.5 26.19 16.5 26.19 31.5" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    digit_digital4_default = IconDigitDigital4;
  }
});

// lib/icons/digit-digital5.ts
var digit_digital5_exports = {};
__export(digit_digital5_exports, {
  IconDigitDigital5: () => IconDigitDigital5,
  default: () => digit_digital5_default
});
var IconDigitDigital5, digit_digital5_default;
var init_digit_digital5 = __esm({
  "lib/icons/digit-digital5.ts"() {
    IconDigitDigital5 = `<svg id="digit-digital-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="28.72 39 25.88 36 28.72 33 42.96 33 45.81 36 42.96 39 28.72 39" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="28.72 15 25.88 12 28.72 9 42.96 9 45.81 12 42.96 15 28.72 15" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 55.67 48.65 58.67 45.81 55.67 45.81 40.67 48.65 37.67 51.5 40.67 51.5 55.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="26.19 31.5 23.35 34.5 20.5 31.5 20.5 16.5 23.35 13.5 26.19 16.5 26.19 31.5" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="28.72 63 25.88 60 28.72 57 42.96 57 45.81 60 42.96 63 28.72 63" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    digit_digital5_default = IconDigitDigital5;
  }
});

// lib/icons/digit-digital6.ts
var digit_digital6_exports = {};
__export(digit_digital6_exports, {
  IconDigitDigital6: () => IconDigitDigital6,
  default: () => digit_digital6_default
});
var IconDigitDigital6, digit_digital6_default;
var init_digit_digital6 = __esm({
  "lib/icons/digit-digital6.ts"() {
    IconDigitDigital6 = `<svg id="digit-digital-6" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="28.72 39 25.88 36 28.72 33 42.96 33 45.81 36 42.96 39 28.72 39" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="28.72 15 25.88 12 28.72 9 42.96 9 45.81 12 42.96 15 28.72 15" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 55.67 48.65 58.67 45.81 55.67 45.81 40.67 48.65 37.67 51.5 40.67 51.5 55.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="26.19 31.5 23.35 34.5 20.5 31.5 20.5 16.5 23.35 13.5 26.19 16.5 26.19 31.5" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="26.19 55.5 23.35 58.5 20.5 55.5 20.5 40.5 23.35 37.5 26.19 40.5 26.19 55.5" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="28.72 63 25.88 60 28.72 57 42.96 57 45.81 60 42.96 63 28.72 63" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    digit_digital6_default = IconDigitDigital6;
  }
});

// lib/icons/digit-digital7.ts
var digit_digital7_exports = {};
__export(digit_digital7_exports, {
  IconDigitDigital7: () => IconDigitDigital7,
  default: () => digit_digital7_default
});
var IconDigitDigital7, digit_digital7_default;
var init_digit_digital7 = __esm({
  "lib/icons/digit-digital7.ts"() {
    IconDigitDigital7 = `<svg id="digit-digital-7" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="28.72 15 25.88 12 28.72 9 42.96 9 45.81 12 42.96 15 28.72 15" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 31.67 48.65 34.67 45.81 31.67 45.81 16.67 48.65 13.67 51.5 16.67 51.5 31.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 55.67 48.65 58.67 45.81 55.67 45.81 40.67 48.65 37.67 51.5 40.67 51.5 55.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    digit_digital7_default = IconDigitDigital7;
  }
});

// lib/icons/digit-digital8.ts
var digit_digital8_exports = {};
__export(digit_digital8_exports, {
  IconDigitDigital8: () => IconDigitDigital8,
  default: () => digit_digital8_default
});
var IconDigitDigital8, digit_digital8_default;
var init_digit_digital8 = __esm({
  "lib/icons/digit-digital8.ts"() {
    IconDigitDigital8 = `<svg id="digit-digital-8" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="28.72 39 25.88 36 28.72 33 42.96 33 45.81 36 42.96 39 28.72 39" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="28.72 15 25.88 12 28.72 9 42.96 9 45.81 12 42.96 15 28.72 15" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 31.67 48.65 34.67 45.81 31.67 45.81 16.67 48.65 13.67 51.5 16.67 51.5 31.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 55.67 48.65 58.67 45.81 55.67 45.81 40.67 48.65 37.67 51.5 40.67 51.5 55.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="26.19 31.5 23.35 34.5 20.5 31.5 20.5 16.5 23.35 13.5 26.19 16.5 26.19 31.5" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="26.19 55.5 23.35 58.5 20.5 55.5 20.5 40.5 23.35 37.5 26.19 40.5 26.19 55.5" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="28.72 63 25.88 60 28.72 57 42.96 57 45.81 60 42.96 63 28.72 63" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    digit_digital8_default = IconDigitDigital8;
  }
});

// lib/icons/digit-digital9.ts
var digit_digital9_exports = {};
__export(digit_digital9_exports, {
  IconDigitDigital9: () => IconDigitDigital9,
  default: () => digit_digital9_default
});
var IconDigitDigital9, digit_digital9_default;
var init_digit_digital9 = __esm({
  "lib/icons/digit-digital9.ts"() {
    IconDigitDigital9 = `<svg id="digit-digital-9" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="28.72 39 25.88 36 28.72 33 42.96 33 45.81 36 42.96 39 28.72 39" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="28.72 15 25.88 12 28.72 9 42.96 9 45.81 12 42.96 15 28.72 15" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 31.67 48.65 34.67 45.81 31.67 45.81 16.67 48.65 13.67 51.5 16.67 51.5 31.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 55.67 48.65 58.67 45.81 55.67 45.81 40.67 48.65 37.67 51.5 40.67 51.5 55.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="26.19 31.5 23.35 34.5 20.5 31.5 20.5 16.5 23.35 13.5 26.19 16.5 26.19 31.5" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="28.72 63 25.88 60 28.72 57 42.96 57 45.81 60 42.96 63 28.72 63" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    digit_digital9_default = IconDigitDigital9;
  }
});

// lib/icons/digit-digtal0.ts
var digit_digtal0_exports = {};
__export(digit_digtal0_exports, {
  IconDigitDigtal0: () => IconDigitDigtal0,
  default: () => digit_digtal0_default
});
var IconDigitDigtal0, digit_digtal0_default;
var init_digit_digtal0 = __esm({
  "lib/icons/digit-digtal0.ts"() {
    IconDigitDigtal0 = `<svg id="digit-digtal-0" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="28.72 15 25.88 12 28.72 9 42.96 9 45.81 12 42.96 15 28.72 15" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 31.67 48.65 34.67 45.81 31.67 45.81 16.67 48.65 13.67 51.5 16.67 51.5 31.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="51.5 55.67 48.65 58.67 45.81 55.67 45.81 40.67 48.65 37.67 51.5 40.67 51.5 55.67" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="26.19 31.5 23.35 34.5 20.5 31.5 20.5 16.5 23.35 13.5 26.19 16.5 26.19 31.5" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="26.19 55.5 23.35 58.5 20.5 55.5 20.5 40.5 23.35 37.5 26.19 40.5 26.19 55.5" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><polygon points="28.72 63 25.88 60 28.72 57 42.96 57 45.81 60 42.96 63 28.72 63" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    digit_digtal0_default = IconDigitDigtal0;
  }
});

// lib/icons/dollar.ts
var dollar_exports = {};
__export(dollar_exports, {
  IconDollar: () => IconDollar,
  default: () => dollar_default
});
var IconDollar, dollar_default;
var init_dollar = __esm({
  "lib/icons/dollar.ts"() {
    IconDollar = `<svg id="dollar" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M44.44,17.89s-25.65-8.55-25.65,8.55,29.92,4.27,29.92,21.38-25.65,8.55-25.65,8.55" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="9" x2="36" y2="15.75" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="58.5" x2="36" y2="63" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    dollar_default = IconDollar;
  }
});

// lib/icons/euro.ts
var euro_exports = {};
__export(euro_exports, {
  IconEuro: () => IconEuro,
  default: () => euro_default
});
var IconEuro, euro_default;
var init_euro = __esm({
  "lib/icons/euro.ts"() {
    IconEuro = `<svg id="euro" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M50.77,21.23c-3.25-4.67-8.65-7.73-14.77-7.73-9.94,0-18,8.06-18,18v9c0,9.94,8.06,18,18,18,5.96,0,11.22-2.91,14.5-7.37" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="31.5" x2="36" y2="31.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="40.5" x2="36" y2="40.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    euro_default = IconEuro;
  }
});

// lib/icons/percentage.ts
var percentage_exports = {};
__export(percentage_exports, {
  IconPercentage: () => IconPercentage,
  default: () => percentage_default
});
var IconPercentage, percentage_default;
var init_percentage = __esm({
  "lib/icons/percentage.ts"() {
    IconPercentage = `<svg id="percentage" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="58.5" x2="58.5" y2="13.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="20.25" cy="20.25" r="6.75" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="51.75" cy="51.75" r="6.75" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    percentage_default = IconPercentage;
  }
});

// lib/icons/pound-symbol.ts
var pound_symbol_exports = {};
__export(pound_symbol_exports, {
  IconPoundSymbol: () => IconPoundSymbol,
  default: () => pound_symbol_default
});
var IconPoundSymbol, pound_symbol_default;
var init_pound_symbol = __esm({
  "lib/icons/pound-symbol.ts"() {
    IconPoundSymbol = `<svg id="pound-symbol" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M23.85,30.15c0,8.1,2.25,12.15,2.25,16.2s-2.25,12.15-2.25,12.15h24.3" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M23.85,30.15c0-6.71,5.44-12.15,12.15-12.15s12.15,5.44,12.15,12.15" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="45" x2="36" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    pound_symbol_default = IconPoundSymbol;
  }
});

// lib/icons/promille.ts
var promille_exports = {};
__export(promille_exports, {
  IconPromille: () => IconPromille,
  default: () => promille_default
});
var IconPromille, promille_default;
var init_promille = __esm({
  "lib/icons/promille.ts"() {
    IconPromille = `<svg id="promille" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="58.5" x2="58.5" y2="13.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="20.25" cy="20.25" r="6.75" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="51.75" cy="51.75" r="6.75" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="38.25" cy="51.75" r="6.75" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    promille_default = IconPromille;
  }
});

// lib/icons/rubles-symbol.ts
var rubles_symbol_exports = {};
__export(rubles_symbol_exports, {
  IconRublesSymbol: () => IconRublesSymbol,
  default: () => rubles_symbol_default
});
var IconRublesSymbol, rubles_symbol_default;
var init_rubles_symbol = __esm({
  "lib/icons/rubles-symbol.ts"() {
    IconRublesSymbol = `<svg id="rubles-symbol" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.5,58.5V18h15c6.21,0,11.25,5.04,11.25,11.25s-5.04,11.25-11.25,11.25H13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="49.5" x2="31.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    rubles_symbol_default = IconRublesSymbol;
  }
});

// lib/icons/rupee-symbol-copy.ts
var rupee_symbol_copy_exports = {};
__export(rupee_symbol_copy_exports, {
  IconRupeeSymbolCopy: () => IconRupeeSymbolCopy,
  default: () => rupee_symbol_copy_default
});
var IconRupeeSymbolCopy, rupee_symbol_copy_default;
var init_rupee_symbol_copy = __esm({
  "lib/icons/rupee-symbol-copy.ts"() {
    IconRupeeSymbolCopy = `<svg id="rupee-symbol_copy" data-name="rupee-symbol copy" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="18 18 27 54 36 18 45 54 54 18" style="fill: none;  stroke-linejoin: bevel; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="31.5" x2="21.35" y2="31.5" style="fill: none;  stroke-linejoin: bevel; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="40.5" x2="23.68" y2="40.5" style="fill: none;  stroke-linejoin: bevel; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="50.65" y1="31.5" x2="58.5" y2="31.5" style="fill: none;  stroke-linejoin: bevel; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="48.25" y1="40.5" x2="58.5" y2="40.5" style="fill: none;  stroke-linejoin: bevel; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    rupee_symbol_copy_default = IconRupeeSymbolCopy;
  }
});

// lib/icons/rupee-symbol.ts
var rupee_symbol_exports = {};
__export(rupee_symbol_exports, {
  IconRupeeSymbol: () => IconRupeeSymbol,
  default: () => rupee_symbol_default
});
var IconRupeeSymbol, rupee_symbol_default;
var init_rupee_symbol = __esm({
  "lib/icons/rupee-symbol.ts"() {
    IconRupeeSymbol = `<svg id="rupee-symbol" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="22.5" y1="18" x2="49.5" y2="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="27" x2="49.5" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,54l-22.5-18h13.5c4.97,0,9-4.03,9-9s-4.03-9-9-9h-13.5" style="fill: none;  stroke-linejoin: bevel; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    rupee_symbol_default = IconRupeeSymbol;
  }
});

// lib/icons/symbol-female.ts
var symbol_female_exports = {};
__export(symbol_female_exports, {
  IconSymbolFemale: () => IconSymbolFemale,
  default: () => symbol_female_default
});
var IconSymbolFemale, symbol_female_default;
var init_symbol_female = __esm({
  "lib/icons/symbol-female.ts"() {
    IconSymbolFemale = `<svg id="symbol-female" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="27" r="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="58.5" x2="36" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="49.5" x2="45" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="49.5" x2="45" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    symbol_female_default = IconSymbolFemale;
  }
});

// lib/icons/symbol-male.ts
var symbol_male_exports = {};
__export(symbol_male_exports, {
  IconSymbolMale: () => IconSymbolMale,
  default: () => symbol_male_default
});
var IconSymbolMale, symbol_male_default;
var init_symbol_male = __esm({
  "lib/icons/symbol-male.ts"() {
    IconSymbolMale = `<svg id="symbol-male" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="45" r="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45.55" y1="35.45" x2="58.5" y2="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 22.5 58.5 22.5 58.5 36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    symbol_male_default = IconSymbolMale;
  }
});

// lib/icons/symbol-unisex.ts
var symbol_unisex_exports = {};
__export(symbol_unisex_exports, {
  IconSymbolUnisex: () => IconSymbolUnisex,
  default: () => symbol_unisex_default
});
var IconSymbolUnisex, symbol_unisex_default;
var init_symbol_unisex = __esm({
  "lib/icons/symbol-unisex.ts"() {
    IconSymbolUnisex = `<svg id="symbol-unisex" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="67.5" x2="36" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="58.5" x2="45" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="58.5" x2="45" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45.55" y1="26.45" x2="58.5" y2="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 13.5 58.5 13.5 58.5 27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    symbol_unisex_default = IconSymbolUnisex;
  }
});

// lib/icons/three-dots-diagonal-major.ts
var three_dots_diagonal_major_exports = {};
__export(three_dots_diagonal_major_exports, {
  IconThreeDotsDiagonalMajor: () => IconThreeDotsDiagonalMajor,
  default: () => three_dots_diagonal_major_default
});
var IconThreeDotsDiagonalMajor, three_dots_diagonal_major_default;
var init_three_dots_diagonal_major = __esm({
  "lib/icons/three-dots-diagonal-major.ts"() {
    IconThreeDotsDiagonalMajor = `<svg id="three-dots-diagonal-major" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="21.68" cy="21.68" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="50.32" cy="50.32" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    three_dots_diagonal_major_default = IconThreeDotsDiagonalMajor;
  }
});

// lib/icons/three-dots-diagonal-minor.ts
var three_dots_diagonal_minor_exports = {};
__export(three_dots_diagonal_minor_exports, {
  IconThreeDotsDiagonalMinor: () => IconThreeDotsDiagonalMinor,
  default: () => three_dots_diagonal_minor_default
});
var IconThreeDotsDiagonalMinor, three_dots_diagonal_minor_default;
var init_three_dots_diagonal_minor = __esm({
  "lib/icons/three-dots-diagonal-minor.ts"() {
    IconThreeDotsDiagonalMinor = `<svg id="three-dots-diagonal-minor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="21.68" cy="50.32" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="50.32" cy="21.68" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    three_dots_diagonal_minor_default = IconThreeDotsDiagonalMinor;
  }
});

// lib/icons/three-dots-horizontal.ts
var three_dots_horizontal_exports = {};
__export(three_dots_horizontal_exports, {
  IconThreeDotsHorizontal: () => IconThreeDotsHorizontal,
  default: () => three_dots_horizontal_default
});
var IconThreeDotsHorizontal, three_dots_horizontal_default;
var init_three_dots_horizontal = __esm({
  "lib/icons/three-dots-horizontal.ts"() {
    IconThreeDotsHorizontal = `<svg id="three-dots-horizontal" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="15.75" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="56.25" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    three_dots_horizontal_default = IconThreeDotsHorizontal;
  }
});

// lib/icons/three-dots-lines.ts
var three_dots_lines_exports = {};
__export(three_dots_lines_exports, {
  IconThreeDotsLines: () => IconThreeDotsLines,
  default: () => three_dots_lines_default
});
var IconThreeDotsLines, three_dots_lines_default;
var init_three_dots_lines = __esm({
  "lib/icons/three-dots-lines.ts"() {
    IconThreeDotsLines = `<svg id="three-dots-lines" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="6.75" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="15.75" cy="36" r="6.75" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="56.25" cy="36" r="6.75" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    three_dots_lines_default = IconThreeDotsLines;
  }
});

// lib/icons/three-dots-vertical.ts
var three_dots_vertical_exports = {};
__export(three_dots_vertical_exports, {
  IconThreeDotsVertical: () => IconThreeDotsVertical,
  default: () => three_dots_vertical_default
});
var IconThreeDotsVertical, three_dots_vertical_default;
var init_three_dots_vertical = __esm({
  "lib/icons/three-dots-vertical.ts"() {
    IconThreeDotsVertical = `<svg id="three-dots-vertical" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="36" cy="56.25" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="36" cy="15.75" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    three_dots_vertical_default = IconThreeDotsVertical;
  }
});

// lib/icons/two-dots-diagonal-major.ts
var two_dots_diagonal_major_exports = {};
__export(two_dots_diagonal_major_exports, {
  IconTwoDotsDiagonalMajor: () => IconTwoDotsDiagonalMajor,
  default: () => two_dots_diagonal_major_default
});
var IconTwoDotsDiagonalMajor, two_dots_diagonal_major_default;
var init_two_dots_diagonal_major = __esm({
  "lib/icons/two-dots-diagonal-major.ts"() {
    IconTwoDotsDiagonalMajor = `<svg id="two-dots-diagonal-major" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="28.84" cy="43.16" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="43.16" cy="28.84" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    two_dots_diagonal_major_default = IconTwoDotsDiagonalMajor;
  }
});

// lib/icons/two-dots-diagonal-minor.ts
var two_dots_diagonal_minor_exports = {};
__export(two_dots_diagonal_minor_exports, {
  IconTwoDotsDiagonalMinor: () => IconTwoDotsDiagonalMinor,
  default: () => two_dots_diagonal_minor_default
});
var IconTwoDotsDiagonalMinor, two_dots_diagonal_minor_default;
var init_two_dots_diagonal_minor = __esm({
  "lib/icons/two-dots-diagonal-minor.ts"() {
    IconTwoDotsDiagonalMinor = `<svg id="two-dots-diagonal-minor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="28.84" cy="28.84" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="43.16" cy="43.16" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    two_dots_diagonal_minor_default = IconTwoDotsDiagonalMinor;
  }
});

// lib/icons/two-dots-horizontal.ts
var two_dots_horizontal_exports = {};
__export(two_dots_horizontal_exports, {
  IconTwoDotsHorizontal: () => IconTwoDotsHorizontal,
  default: () => two_dots_horizontal_default
});
var IconTwoDotsHorizontal, two_dots_horizontal_default;
var init_two_dots_horizontal = __esm({
  "lib/icons/two-dots-horizontal.ts"() {
    IconTwoDotsHorizontal = `<svg id="dice-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="25.88" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="46.12" cy="36" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    two_dots_horizontal_default = IconTwoDotsHorizontal;
  }
});

// lib/icons/two-dots-lines.ts
var two_dots_lines_exports = {};
__export(two_dots_lines_exports, {
  IconTwoDotsLines: () => IconTwoDotsLines,
  default: () => two_dots_lines_default
});
var IconTwoDotsLines, two_dots_lines_default;
var init_two_dots_lines = __esm({
  "lib/icons/two-dots-lines.ts"() {
    IconTwoDotsLines = `<svg id="two-dots-lines" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="46.12" cy="36" r="6.75" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="25.88" cy="36" r="6.75" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    two_dots_lines_default = IconTwoDotsLines;
  }
});

// lib/icons/two-dots-vertical.ts
var two_dots_vertical_exports = {};
__export(two_dots_vertical_exports, {
  IconTwoDotsVertical: () => IconTwoDotsVertical,
  default: () => two_dots_vertical_default
});
var IconTwoDotsVertical, two_dots_vertical_default;
var init_two_dots_vertical = __esm({
  "lib/icons/two-dots-vertical.ts"() {
    IconTwoDotsVertical = `<svg id="two-dots-vertical" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="46.12" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="36" cy="25.88" r="6.75" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    two_dots_vertical_default = IconTwoDotsVertical;
  }
});

// lib/icons/yen.ts
var yen_exports = {};
__export(yen_exports, {
  IconYen: () => IconYen,
  default: () => yen_default
});
var IconYen, yen_default;
var init_yen = __esm({
  "lib/icons/yen.ts"() {
    IconYen = `<svg id="yen" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="22.5" y1="36" x2="49.5" y2="36" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="45" x2="49.5" y2="45" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="18 13.5 36 36 54 13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="58.5" x2="36" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    yen_default = IconYen;
  }
});

// lib/icons/ball-basketball.ts
var ball_basketball_exports = {};
__export(ball_basketball_exports, {
  IconBallBasketball: () => IconBallBasketball,
  default: () => ball_basketball_default
});
var IconBallBasketball, ball_basketball_default;
var init_ball_basketball = __esm({
  "lib/icons/ball-basketball.ts"() {
    IconBallBasketball = `<svg id="ball-basketball" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="36" r="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36.93,9.02c-.6,2.14-.93,4.39-.93,6.73,0,13.67,11.08,24.75,24.75,24.75.63,0,1.26-.03,1.88-.08.24-1.44.37-2.92.37-4.42,0-14.6-11.59-26.48-26.07-26.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,36.11c.06,14.83,12.06,26.83,26.89,26.89.07-.74.11-1.49.11-2.25,0-13.67-11.08-24.75-24.75-24.75-.76,0-1.51.04-2.25.11Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="16.25" y1="16.91" x2="52.98" y2="56.98" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="55.09" y1="16.91" x2="16.91" y2="55.09" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    ball_basketball_default = IconBallBasketball;
  }
});

// lib/icons/ball-football.ts
var ball_football_exports = {};
__export(ball_football_exports, {
  IconBallFootball: () => IconBallFootball,
  default: () => ball_football_default
});
var IconBallFootball, ball_football_default;
var init_ball_football = __esm({
  "lib/icons/ball-football.ts"() {
    IconBallFootball = `<svg id="ball-football" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="36 26.35 27.06 32.84 30.48 43.35 41.52 43.35 44.94 32.84 36 26.35" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.21,51.35l-.14-.43h-11.05l-3.41,10.5.48.35c5.79-1.82,10.74-5.53,14.12-10.42Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M13.93,50.92l-.14.43c3.38,4.88,8.33,8.6,14.12,10.42l.48-.35-3.41-10.5h-11.05Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M14.75,19.45h-.08c-3.55,4.57-5.68,10.31-5.68,16.55,0,.1,0,.19,0,.28l.22.16,8.94-6.49-3.41-10.51Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M27.08,10.52l8.92,6.48,8.92-6.48c-2.79-.98-5.79-1.52-8.92-1.52s-6.13.54-8.92,1.52Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M57.32,19.45h-.08l-3.41,10.51,8.94,6.49.22-.16c0-.09,0-.19,0-.28,0-6.24-2.12-11.98-5.68-16.55Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="36" r="27" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="36 26.35 27.06 32.84 30.48 43.35 41.52 43.35 44.94 32.84 36 26.35" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.02" y1="50.92" x2="41.52" y2="43.35" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="44.94" y1="32.84" x2="53.83" y2="29.95" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="17" x2="36" y2="26.35" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18.17" y1="29.95" x2="27.06" y2="32.84" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="24.98" y1="50.92" x2="30.48" y2="43.35" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.07 50.92 47.02 50.92 43.61 61.42" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27.92 61.77 28.39 61.42 24.98 50.92 13.93 50.92 13.79 51.35" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,36c0,.1,0,.19,0,.28l.22.16,8.94-6.49-3.41-10.51h-.08" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27.08 10.52 36 17 44.92 10.52" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M57.32,19.45h-.08l-3.41,10.51,8.94,6.49.22-.16c0-.09,0-.19,0-.28" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    ball_football_default = IconBallFootball;
  }
});

// lib/icons/ball-rugby.ts
var ball_rugby_exports = {};
__export(ball_rugby_exports, {
  IconBallRugby: () => IconBallRugby,
  default: () => ball_rugby_default
});
var IconBallRugby, ball_rugby_default;
var init_ball_rugby = __esm({
  "lib/icons/ball-rugby.ts"() {
    IconBallRugby = `<svg id="ball-rugby" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M54.41,9.91c4.17.17,7.51,3.5,7.67,7.67.36,9.06-.61,24.76-10.18,34.32s-25.27,10.53-34.32,10.18c-4.17-.17-7.51-3.5-7.67-7.67-.36-9.06.61-24.76,10.18-34.32s25.27-10.53,34.32-10.18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><line x1="32.82" y1="32.82" x2="39.18" y2="39.18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><line x1="39.18" y1="26.45" x2="45.55" y2="32.82" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><line x1="26.45" y1="39.18" x2="32.82" y2="45.55" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><line x1="45.55" y1="26.45" x2="26.45" y2="45.55" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><line x1="10.43" y1="42.25" x2="29.75" y2="61.57" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><line x1="42.25" y1="10.43" x2="61.57" y2="29.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M54.41,9.91c4.17.17,7.51,3.5,7.67,7.67.36,9.06-.61,24.76-10.18,34.32s-25.27,10.53-34.32,10.18c-4.17-.17-7.51-3.5-7.67-7.67-.36-9.06.61-24.76,10.18-34.32s25.27-10.53,34.32-10.18Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="32.82" y1="32.82" x2="39.18" y2="39.18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="39.18" y1="26.45" x2="45.55" y2="32.82" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="26.45" y1="39.18" x2="32.82" y2="45.55" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45.55" y1="26.45" x2="26.45" y2="45.55" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="10.43" y1="42.25" x2="29.75" y2="61.57" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.25" y1="10.43" x2="61.57" y2="29.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g><path d="M54.41,9.91c4.17.17,7.51,3.5,7.67,7.67.36,9.06-.61,24.76-10.18,34.32s-25.27,10.53-34.32,10.18c-4.17-.17-7.51-3.5-7.67-7.67-.36-9.06.61-24.76,10.18-34.32s25.27-10.53,34.32-10.18Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="32.82" y1="32.82" x2="39.18" y2="39.18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="39.18" y1="26.45" x2="45.55" y2="32.82" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="26.45" y1="39.18" x2="32.82" y2="45.55" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45.55" y1="26.45" x2="26.45" y2="45.55" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="10.43" y1="42.25" x2="29.75" y2="61.57" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.25" y1="10.43" x2="61.57" y2="29.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    ball_rugby_default = IconBallRugby;
  }
});

// lib/icons/ball-tennis.ts
var ball_tennis_exports = {};
__export(ball_tennis_exports, {
  IconBallTennis: () => IconBallTennis,
  default: () => ball_tennis_default
});
var IconBallTennis, ball_tennis_default;
var init_ball_tennis = __esm({
  "lib/icons/ball-tennis.ts"() {
    IconBallTennis = `<svg id="ball-tennis" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="36" r="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36.93,9.02c-.6,2.14-.93,4.39-.93,6.73,0,13.67,11.08,24.75,24.75,24.75.63,0,1.26-.03,1.88-.08.24-1.44.37-2.92.37-4.42,0-14.6-11.59-26.48-26.07-26.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,36.11c.06,14.83,12.06,26.83,26.89,26.89.07-.74.11-1.49.11-2.25,0-13.67-11.08-24.75-24.75-24.75-.76,0-1.51.04-2.25.11Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    ball_tennis_default = IconBallTennis;
  }
});

// lib/icons/accessibility-person-circled.ts
var accessibility_person_circled_exports = {};
__export(accessibility_person_circled_exports, {
  IconAccessibilityPersonCircled: () => IconAccessibilityPersonCircled,
  default: () => accessibility_person_circled_default
});
var IconAccessibilityPersonCircled, accessibility_person_circled_default;
var init_accessibility_person_circled = __esm({
  "lib/icons/accessibility-person-circled.ts"() {
    IconAccessibilityPersonCircled = `<svg id="accessibility-person-circled" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72.05"><circle cx="36" cy="36.05" r="27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><g><path d="M23.55,30.72l6.61,4.4v3.27c0,1.7-.39,3.37-1.15,4.88l-4.01,8.01c-.41.82-.25,1.81.4,2.46l.1.1c.92.92,2.43.81,3.21-.23l7.29-9.73,7.29,9.73c.78,1.04,2.29,1.14,3.21.23l.1-.1c.65-.65.81-1.64.4-2.46l-4.01-8.01c-.76-1.52-1.15-3.19-1.15-4.88v-3.27l6.61-4.4c1.12-.75,1.28-2.33.32-3.28-.65-.65-1.64-.81-2.46-.4l-7.44,3.72c-1.81.91-3.94.91-5.75,0l-7.44-3.72c-.82-.41-1.81-.25-2.46.4-.95.95-.79,2.53.32,3.28Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="36" cy="23.43" r="5.85" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></g><circle cx="36" cy="36.05" r="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    accessibility_person_circled_default = IconAccessibilityPersonCircled;
  }
});

// lib/icons/accessibility-person.ts
var accessibility_person_exports = {};
__export(accessibility_person_exports, {
  IconAccessibilityPerson: () => IconAccessibilityPerson,
  default: () => accessibility_person_default
});
var IconAccessibilityPerson, accessibility_person_default;
var init_accessibility_person = __esm({
  "lib/icons/accessibility-person.ts"() {
    IconAccessibilityPerson = `<svg id="accessibility-person" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72.05"><path d="M17.77,28.23l9.67,6.45v4.78c0,2.48-.58,4.93-1.69,7.15l-5.87,11.73c-.6,1.2-.36,2.65.58,3.6l.15.15c1.34,1.34,3.56,1.18,4.7-.33l10.68-14.24,10.68,14.24c1.14,1.52,3.36,1.68,4.7.33l.15-.15c.95-.95,1.18-2.4.58-3.6l-5.87-11.73c-1.11-2.22-1.69-4.67-1.69-7.15v-4.78l9.67-6.45c1.64-1.09,1.87-3.41.48-4.8-.95-.95-2.4-1.18-3.6-.58l-10.9,5.45c-2.65,1.32-5.77,1.32-8.42,0l-10.9-5.45c-1.2-.6-2.65-.37-3.6.58-1.39,1.39-1.16,3.71.48,4.8Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><circle cx="36" cy="17.56" r="8.56" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    accessibility_person_default = IconAccessibilityPerson;
  }
});

// lib/icons/add-fat.ts
var add_fat_exports = {};
__export(add_fat_exports, {
  IconAddFat: () => IconAddFat,
  default: () => add_fat_default
});
var IconAddFat, add_fat_default;
var init_add_fat = __esm({
  "lib/icons/add-fat.ts"() {
    IconAddFat = `<svg id="add-fat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="13.5" x2="36" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/><line x1="13.5" y1="36" x2="58.5" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/></svg>`;
    add_fat_default = IconAddFat;
  }
});

// lib/icons/add-l.ts
var add_l_exports = {};
__export(add_l_exports, {
  IconAddL: () => IconAddL,
  default: () => add_l_default
});
var IconAddL, add_l_default;
var init_add_l = __esm({
  "lib/icons/add-l.ts"() {
    IconAddL = `<svg id="add-l" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="13.5" x2="36" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="36" x2="58.5" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    add_l_default = IconAddL;
  }
});

// lib/icons/add-lines.ts
var add_lines_exports = {};
__export(add_lines_exports, {
  IconAddLines: () => IconAddLines,
  default: () => add_lines_default
});
var IconAddLines, add_lines_default;
var init_add_lines = __esm({
  "lib/icons/add-lines.ts"() {
    IconAddLines = `<svg id="add-lines" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="54" x2="40.5" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="30" x2="13.5" y2="30" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="42" x2="40.5" y2="42" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="49.5" x2="63" y2="49.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="40.5" x2="54" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    add_lines_default = IconAddLines;
  }
});

// lib/icons/add-m.ts
var add_m_exports = {};
__export(add_m_exports, {
  IconAddM: () => IconAddM,
  default: () => add_m_default
});
var IconAddM, add_m_default;
var init_add_m = __esm({
  "lib/icons/add-m.ts"() {
    IconAddM = `<svg id="add-m" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="18" x2="36" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="36" x2="54" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    add_m_default = IconAddM;
  }
});

// lib/icons/add-s.ts
var add_s_exports = {};
__export(add_s_exports, {
  IconAddS: () => IconAddS,
  default: () => add_s_default
});
var IconAddS, add_s_default;
var init_add_s = __esm({
  "lib/icons/add-s.ts"() {
    IconAddS = `<svg id="add-s" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="22.5" x2="36" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="36" x2="49.5" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    add_s_default = IconAddS;
  }
});

// lib/icons/at-sign.ts
var at_sign_exports = {};
__export(at_sign_exports, {
  IconAtSign: () => IconAtSign,
  default: () => at_sign_default
});
var IconAtSign, at_sign_default;
var init_at_sign = __esm({
  "lib/icons/at-sign.ts"() {
    IconAtSign = `<svg id="at-sign" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,36c0,3.73,3.02,6.75,6.75,6.75s6.75-3.02,6.75-6.75c0-12.43-10.07-22.5-22.5-22.5s-22.5,10.07-22.5,22.5,10.07,22.5,22.5,22.5h9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    at_sign_default = IconAtSign;
  }
});

// lib/icons/block-partials.ts
var block_partials_exports = {};
__export(block_partials_exports, {
  IconBlockPartials: () => IconBlockPartials,
  default: () => block_partials_default
});
var IconBlockPartials, block_partials_default;
var init_block_partials = __esm({
  "lib/icons/block-partials.ts"() {
    IconBlockPartials = `<svg id="block-partials" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.11,13.5c.25.7.39,1.46.39,2.25,0,3.73-3.02,6.75-6.75,6.75-.79,0-1.55-.14-2.25-.39v36.39h36.39c-.25-.7-.39-1.46-.39-2.25,0-3.73,3.02-6.75,6.75-6.75.79,0,1.55.14,2.25.39V13.5H22.11Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M49.5,58.5H17.5c-2.21,0-4-1.79-4-4V22.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,13.5h32c2.21,0,4,1.79,4,4v32" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="15.75" cy="15.75" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="56.25" cy="56.25" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    block_partials_default = IconBlockPartials;
  }
});

// lib/icons/board-add2.ts
var board_add2_exports = {};
__export(board_add2_exports, {
  IconBoardAdd2: () => IconBoardAdd2,
  default: () => board_add2_default
});
var IconBoardAdd2, board_add2_default;
var init_board_add2 = __esm({
  "lib/icons/board-add2.ts"() {
    IconBoardAdd2 = `<svg id="board-add-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,31.5v12c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6v-24c0-3.31,2.69-6,6-6h21" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v21c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6V19.5c0-3.31,2.69-6,6-6h21" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="18" x2="63" y2="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="9" x2="54" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_add2_default = IconBoardAdd2;
  }
});

// lib/icons/board-multi2-horizontal.ts
var board_multi2_horizontal_exports = {};
__export(board_multi2_horizontal_exports, {
  IconBoardMulti2Horizontal: () => IconBoardMulti2Horizontal,
  default: () => board_multi2_horizontal_default
});
var IconBoardMulti2Horizontal, board_multi2_horizontal_default;
var init_board_multi2_horizontal = __esm({
  "lib/icons/board-multi2-horizontal.ts"() {
    IconBoardMulti2Horizontal = `<svg id="board-multi-2-horizontal" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="40.5" width="45" height="18" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="18" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="18" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="40.5" width="45" height="18" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_multi2_horizontal_default = IconBoardMulti2Horizontal;
  }
});

// lib/icons/board-multi2-vertical.ts
var board_multi2_vertical_exports = {};
__export(board_multi2_vertical_exports, {
  IconBoardMulti2Vertical: () => IconBoardMulti2Vertical,
  default: () => board_multi2_vertical_default
});
var IconBoardMulti2Vertical, board_multi2_vertical_default;
var init_board_multi2_vertical = __esm({
  "lib/icons/board-multi2-vertical.ts"() {
    IconBoardMulti2Vertical = `<svg id="board-multi-2-vertical" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="27" y="27" width="45" height="18" rx="2" ry="2" transform="translate(13.5 85.5) rotate(-90)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect y="27" width="45" height="18" rx="2" ry="2" transform="translate(-13.5 58.5) rotate(-90)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect y="27" width="45" height="18" rx="2" ry="2" transform="translate(-13.5 58.5) rotate(-90)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="27" y="27" width="45" height="18" rx="2" ry="2" transform="translate(13.5 85.5) rotate(-90)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_multi2_vertical_default = IconBoardMulti2Vertical;
  }
});

// lib/icons/board-multi-dashboard.ts
var board_multi_dashboard_exports = {};
__export(board_multi_dashboard_exports, {
  IconBoardMultiDashboard: () => IconBoardMultiDashboard,
  default: () => board_multi_dashboard_default
});
var IconBoardMultiDashboard, board_multi_dashboard_default;
var init_board_multi_dashboard = __esm({
  "lib/icons/board-multi-dashboard.ts"() {
    IconBoardMultiDashboard = `<svg id="board-multi-dashboard" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 72 72"><defs><clipPath id="clippath"><rect x="9" y="9" width="54" height="54" style="fill: none; stroke-width: 0px;"/></clipPath></defs><g style="clip-path: url(#clippath);"><g><rect x="40.5" y="47" width="18" height="11.5" rx="2" ry="2" transform="translate(99 105.5) rotate(-180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="40.5" y="13.5" width="18" height="24.5" rx="2" ry="2" transform="translate(99 51.5) rotate(180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="40.5" y="47" width="18" height="11.5" rx="2" ry="2" transform="translate(99 105.5) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="40.5" y="13.5" width="18" height="24.5" rx="2" ry="2" transform="translate(99 51.5) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="40.5" y="67.5" width="18" height="24.5" rx="2" ry="2" transform="translate(99 159.5) rotate(180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="40.5" y="67.5" width="18" height="24.5" rx="2" ry="2" transform="translate(99 159.5) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g><rect x="13.5" y="34" width="18" height="24.5" rx="2" ry="2" transform="translate(45 92.5) rotate(180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="18" height="11.5" rx="2" ry="2" transform="translate(45 38.5) rotate(180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="34" width="18" height="24.5" rx="2" ry="2" transform="translate(45 92.5) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="-20" width="18" height="24.5" rx="2" ry="2" transform="translate(45 -15.5) rotate(180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="-20" width="18" height="24.5" rx="2" ry="2" transform="translate(45 -15.5) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="18" height="11.5" rx="2" ry="2" transform="translate(45 38.5) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></g></svg>`;
    board_multi_dashboard_default = IconBoardMultiDashboard;
  }
});

// lib/icons/board-multi-t-down.ts
var board_multi_t_down_exports = {};
__export(board_multi_t_down_exports, {
  IconBoardMultiTDown: () => IconBoardMultiTDown,
  default: () => board_multi_t_down_default
});
var IconBoardMultiTDown, board_multi_t_down_default;
var init_board_multi_t_down = __esm({
  "lib/icons/board-multi-t-down.ts"() {
    IconBoardMultiTDown = `<svg id="board-multi-t-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="40.5" width="45" height="18" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="18" height="18" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="40.5" y="13.5" width="18" height="18" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="18" height="18" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="40.5" y="13.5" width="18" height="18" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="40.5" width="45" height="18" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_multi_t_down_default = IconBoardMultiTDown;
  }
});

// lib/icons/board-multi-t-left.ts
var board_multi_t_left_exports = {};
__export(board_multi_t_left_exports, {
  IconBoardMultiTLeft: () => IconBoardMultiTLeft,
  default: () => board_multi_t_left_default
});
var IconBoardMultiTLeft, board_multi_t_left_default;
var init_board_multi_t_left = __esm({
  "lib/icons/board-multi-t-left.ts"() {
    IconBoardMultiTLeft = `<svg id="board-multi-t-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="27" y="27" width="45" height="18" rx="2" ry="2" transform="translate(13.5 85.5) rotate(-90)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="18" height="18" rx="2" ry="2" transform="translate(0 45) rotate(-90)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="40.5" width="18" height="18" rx="2" ry="2" transform="translate(-27 72) rotate(-90)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="40.5" width="18" height="18" rx="2" ry="2" transform="translate(-27 72) rotate(-90)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="18" height="18" rx="2" ry="2" transform="translate(0 45) rotate(-90)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="27" y="27" width="45" height="18" rx="2" ry="2" transform="translate(13.5 85.5) rotate(-90)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_multi_t_left_default = IconBoardMultiTLeft;
  }
});

// lib/icons/board-multi-t-right.ts
var board_multi_t_right_exports = {};
__export(board_multi_t_right_exports, {
  IconBoardMultiTRight: () => IconBoardMultiTRight,
  default: () => board_multi_t_right_default
});
var IconBoardMultiTRight, board_multi_t_right_default;
var init_board_multi_t_right = __esm({
  "lib/icons/board-multi-t-right.ts"() {
    IconBoardMultiTRight = `<svg id="board-multi-t-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="0" y="27" width="45" height="18" rx="2" ry="2" transform="translate(58.5 13.5) rotate(90)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="40.5" y="13.5" width="18" height="18" rx="2" ry="2" transform="translate(72 -27) rotate(90)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="40.5" y="40.5" width="18" height="18" rx="2" ry="2" transform="translate(99 0) rotate(90)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="40.5" y="13.5" width="18" height="18" rx="2" ry="2" transform="translate(72 -27) rotate(90)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="40.5" y="40.5" width="18" height="18" rx="2" ry="2" transform="translate(99 0) rotate(90)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="0" y="27" width="45" height="18" rx="2" ry="2" transform="translate(58.5 13.5) rotate(90)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_multi_t_right_default = IconBoardMultiTRight;
  }
});

// lib/icons/board-multi-t-up.ts
var board_multi_t_up_exports = {};
__export(board_multi_t_up_exports, {
  IconBoardMultiTUp: () => IconBoardMultiTUp,
  default: () => board_multi_t_up_default
});
var IconBoardMultiTUp, board_multi_t_up_default;
var init_board_multi_t_up = __esm({
  "lib/icons/board-multi-t-up.ts"() {
    IconBoardMultiTUp = `<svg id="board-multi-t-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="18" rx="2" ry="2" transform="translate(72 45) rotate(180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="40.5" y="40.5" width="18" height="18" rx="2" ry="2" transform="translate(99 99) rotate(180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="40.5" width="18" height="18" rx="2" ry="2" transform="translate(45 99) rotate(180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="40.5" y="40.5" width="18" height="18" rx="2" ry="2" transform="translate(99 99) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="40.5" width="18" height="18" rx="2" ry="2" transform="translate(45 99) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="18" rx="2" ry="2" transform="translate(72 45) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_multi_t_up_default = IconBoardMultiTUp;
  }
});

// lib/icons/board-multi.ts
var board_multi_exports = {};
__export(board_multi_exports, {
  IconBoardMulti: () => IconBoardMulti,
  default: () => board_multi_default
});
var IconBoardMulti, board_multi_default;
var init_board_multi = __esm({
  "lib/icons/board-multi.ts"() {
    IconBoardMulti = `<svg id="board-multi" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="40.5" y="40.5" width="18" height="18" rx="2" ry="2" transform="translate(99 99) rotate(180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="40.5" width="18" height="18" rx="2" ry="2" transform="translate(45 99) rotate(180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="18" height="18" rx="2" ry="2" transform="translate(45 45) rotate(180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="40.5" y="13.5" width="18" height="18" rx="2" ry="2" transform="translate(99 45) rotate(180)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="40.5" y="40.5" width="18" height="18" rx="2" ry="2" transform="translate(99 99) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="40.5" width="18" height="18" rx="2" ry="2" transform="translate(45 99) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="40.5" y="13.5" width="18" height="18" rx="2" ry="2" transform="translate(99 45) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="18" height="18" rx="2" ry="2" transform="translate(45 45) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_multi_default = IconBoardMulti;
  }
});

// lib/icons/board-multiply2.ts
var board_multiply2_exports = {};
__export(board_multiply2_exports, {
  IconBoardMultiply2: () => IconBoardMultiply2,
  default: () => board_multiply2_default
});
var IconBoardMultiply2, board_multiply2_default;
var init_board_multiply2 = __esm({
  "lib/icons/board-multiply2.ts"() {
    IconBoardMultiply2 = `<svg id="board-multiply-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,31.5v12c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6v-24c0-3.31,2.69-6,6-6h21" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v21c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6V19.5c0-3.31,2.69-6,6-6h21" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.64" y1="11.64" x2="60.36" y2="24.36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="60.36" y1="11.64" x2="47.64" y2="24.36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_multiply2_default = IconBoardMultiply2;
  }
});

// lib/icons/board-split13-horizontal.ts
var board_split13_horizontal_exports = {};
__export(board_split13_horizontal_exports, {
  IconBoardSplit13Horizontal: () => IconBoardSplit13Horizontal,
  default: () => board_split13_horizontal_default
});
var IconBoardSplit13Horizontal, board_split13_horizontal_default;
var init_board_split13_horizontal = __esm({
  "lib/icons/board-split13-horizontal.ts"() {
    IconBoardSplit13Horizontal = `<svg id="board-split-1-3-horizontal" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="13.5" y1="27" x2="58.5" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" transform="translate(72) rotate(90)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_split13_horizontal_default = IconBoardSplit13Horizontal;
  }
});

// lib/icons/board-split13-vertical.ts
var board_split13_vertical_exports = {};
__export(board_split13_vertical_exports, {
  IconBoardSplit13Vertical: () => IconBoardSplit13Vertical,
  default: () => board_split13_vertical_default
});
var IconBoardSplit13Vertical, board_split13_vertical_default;
var init_board_split13_vertical = __esm({
  "lib/icons/board-split13-vertical.ts"() {
    IconBoardSplit13Vertical = `<svg id="board-split-1-3-vertical" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="27" y1="58.5" x2="27" y2="13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_split13_vertical_default = IconBoardSplit13Vertical;
  }
});

// lib/icons/board-split2-horizontal.ts
var board_split2_horizontal_exports = {};
__export(board_split2_horizontal_exports, {
  IconBoardSplit2Horizontal: () => IconBoardSplit2Horizontal,
  default: () => board_split2_horizontal_default
});
var IconBoardSplit2Horizontal, board_split2_horizontal_default;
var init_board_split2_horizontal = __esm({
  "lib/icons/board-split2-horizontal.ts"() {
    IconBoardSplit2Horizontal = `<svg id="board-split-2-horizontal" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="13.5" y1="36" x2="58.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_split2_horizontal_default = IconBoardSplit2Horizontal;
  }
});

// lib/icons/board-split2-vertical.ts
var board_split2_vertical_exports = {};
__export(board_split2_vertical_exports, {
  IconBoardSplit2Vertical: () => IconBoardSplit2Vertical,
  default: () => board_split2_vertical_default
});
var IconBoardSplit2Vertical, board_split2_vertical_default;
var init_board_split2_vertical = __esm({
  "lib/icons/board-split2-vertical.ts"() {
    IconBoardSplit2Vertical = `<svg id="board-split-2-vertical" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="36" y1="58.5" x2="36" y2="13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_split2_vertical_default = IconBoardSplit2Vertical;
  }
});

// lib/icons/board-split31-horizontal.ts
var board_split31_horizontal_exports = {};
__export(board_split31_horizontal_exports, {
  IconBoardSplit31Horizontal: () => IconBoardSplit31Horizontal,
  default: () => board_split31_horizontal_default
});
var IconBoardSplit31Horizontal, board_split31_horizontal_default;
var init_board_split31_horizontal = __esm({
  "lib/icons/board-split31-horizontal.ts"() {
    IconBoardSplit31Horizontal = `<svg id="board-split-3-1-horizontal" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="58.5" y1="45" x2="13.5" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" transform="translate(0 72) rotate(-90)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_split31_horizontal_default = IconBoardSplit31Horizontal;
  }
});

// lib/icons/board-split31-vertical.ts
var board_split31_vertical_exports = {};
__export(board_split31_vertical_exports, {
  IconBoardSplit31Vertical: () => IconBoardSplit31Vertical,
  default: () => board_split31_vertical_default
});
var IconBoardSplit31Vertical, board_split31_vertical_default;
var init_board_split31_vertical = __esm({
  "lib/icons/board-split31-vertical.ts"() {
    IconBoardSplit31Vertical = `<svg id="board-split-3-1-vertical" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="45" y1="13.5" x2="45" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" transform="translate(72 72) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_split31_vertical_default = IconBoardSplit31Vertical;
  }
});

// lib/icons/board-split3-horizontal.ts
var board_split3_horizontal_exports = {};
__export(board_split3_horizontal_exports, {
  IconBoardSplit3Horizontal: () => IconBoardSplit3Horizontal,
  default: () => board_split3_horizontal_default
});
var IconBoardSplit3Horizontal, board_split3_horizontal_default;
var init_board_split3_horizontal = __esm({
  "lib/icons/board-split3-horizontal.ts"() {
    IconBoardSplit3Horizontal = `<svg id="board-split-3-horizontal" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="58.5" y1="28.5" x2="13.5" y2="28.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="43.5" x2="58.5" y2="43.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_split3_horizontal_default = IconBoardSplit3Horizontal;
  }
});

// lib/icons/board-split3-vertical.ts
var board_split3_vertical_exports = {};
__export(board_split3_vertical_exports, {
  IconBoardSplit3Vertical: () => IconBoardSplit3Vertical,
  default: () => board_split3_vertical_default
});
var IconBoardSplit3Vertical, board_split3_vertical_default;
var init_board_split3_vertical = __esm({
  "lib/icons/board-split3-vertical.ts"() {
    IconBoardSplit3Vertical = `<svg id="board-split-3-vertical" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="28.5" y1="13.5" x2="28.5" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="43.5" y1="58.5" x2="43.5" y2="13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_split3_vertical_default = IconBoardSplit3Vertical;
  }
});

// lib/icons/board-split4-horizontal.ts
var board_split4_horizontal_exports = {};
__export(board_split4_horizontal_exports, {
  IconBoardSplit4Horizontal: () => IconBoardSplit4Horizontal,
  default: () => board_split4_horizontal_default
});
var IconBoardSplit4Horizontal, board_split4_horizontal_default;
var init_board_split4_horizontal = __esm({
  "lib/icons/board-split4-horizontal.ts"() {
    IconBoardSplit4Horizontal = `<svg id="board-split-4-horizontal" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="58.5" y1="24.75" x2="13.5" y2="24.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="36" x2="13.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="47.25" x2="58.5" y2="47.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_split4_horizontal_default = IconBoardSplit4Horizontal;
  }
});

// lib/icons/board-split4-vertical.ts
var board_split4_vertical_exports = {};
__export(board_split4_vertical_exports, {
  IconBoardSplit4Vertical: () => IconBoardSplit4Vertical,
  default: () => board_split4_vertical_default
});
var IconBoardSplit4Vertical, board_split4_vertical_default;
var init_board_split4_vertical = __esm({
  "lib/icons/board-split4-vertical.ts"() {
    IconBoardSplit4Vertical = `<svg id="board-split-4-vertical" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="24.75" y1="13.5" x2="24.75" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="13.5" x2="36" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.25" y1="58.5" x2="47.25" y2="13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" transform="translate(0 72) rotate(-90)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_split4_vertical_default = IconBoardSplit4Vertical;
  }
});

// lib/icons/board-split-t-down.ts
var board_split_t_down_exports = {};
__export(board_split_t_down_exports, {
  IconBoardSplitTDown: () => IconBoardSplitTDown,
  default: () => board_split_t_down_default
});
var IconBoardSplitTDown, board_split_t_down_default;
var init_board_split_t_down = __esm({
  "lib/icons/board-split-t-down.ts"() {
    IconBoardSplitTDown = `<svg id="board-split-t-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="36" y1="13.5" x2="36" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="36" x2="58.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_split_t_down_default = IconBoardSplitTDown;
  }
});

// lib/icons/board-split-t-left.ts
var board_split_t_left_exports = {};
__export(board_split_t_left_exports, {
  IconBoardSplitTLeft: () => IconBoardSplitTLeft,
  default: () => board_split_t_left_default
});
var IconBoardSplitTLeft, board_split_t_left_default;
var init_board_split_t_left = __esm({
  "lib/icons/board-split-t-left.ts"() {
    IconBoardSplitTLeft = `<svg id="board-split-t-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="13.5" y1="36" x2="36" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="58.5" x2="36" y2="13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" transform="translate(0 72) rotate(-90)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_split_t_left_default = IconBoardSplitTLeft;
  }
});

// lib/icons/board-split-t-right.ts
var board_split_t_right_exports = {};
__export(board_split_t_right_exports, {
  IconBoardSplitTRight: () => IconBoardSplitTRight,
  default: () => board_split_t_right_default
});
var IconBoardSplitTRight, board_split_t_right_default;
var init_board_split_t_right = __esm({
  "lib/icons/board-split-t-right.ts"() {
    IconBoardSplitTRight = `<svg id="board-split-t-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="58.5" y1="36" x2="36" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="13.5" x2="36" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" transform="translate(72 0) rotate(90)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_split_t_right_default = IconBoardSplitTRight;
  }
});

// lib/icons/board-split-t-up.ts
var board_split_t_up_exports = {};
__export(board_split_t_up_exports, {
  IconBoardSplitTUp: () => IconBoardSplitTUp,
  default: () => board_split_t_up_default
});
var IconBoardSplitTUp, board_split_t_up_default;
var init_board_split_t_up = __esm({
  "lib/icons/board-split-t-up.ts"() {
    IconBoardSplitTUp = `<svg id="board-split-t-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="36" y1="58.5" x2="36" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="36" x2="13.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" transform="translate(72 72) rotate(-180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_split_t_up_default = IconBoardSplitTUp;
  }
});

// lib/icons/board-subtract2.ts
var board_subtract2_exports = {};
__export(board_subtract2_exports, {
  IconBoardSubtract2: () => IconBoardSubtract2,
  default: () => board_subtract2_default
});
var IconBoardSubtract2, board_subtract2_default;
var init_board_subtract2 = __esm({
  "lib/icons/board-subtract2.ts"() {
    IconBoardSubtract2 = `<svg id="board-subtract-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,31.5v12c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6v-24c0-3.31,2.69-6,6-6h21" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v21c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6V19.5c0-3.31,2.69-6,6-6h21" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="22.5" x2="63" y2="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_subtract2_default = IconBoardSubtract2;
  }
});

// lib/icons/board.ts
var board_exports = {};
__export(board_exports, {
  IconBoard: () => IconBoard,
  default: () => board_default
});
var IconBoard, board_default;
var init_board = __esm({
  "lib/icons/board.ts"() {
    IconBoard = `<svg id="board" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    board_default = IconBoard;
  }
});

// lib/icons/box-in.ts
var box_in_exports = {};
__export(box_in_exports, {
  IconBoxIn: () => IconBoxIn,
  default: () => box_in_default
});
var IconBoxIn, box_in_default;
var init_box_in = __esm({
  "lib/icons/box-in.ts"() {
    IconBoxIn = `<svg id="box-in" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M34.07,12.31l-18.5,10.18c-1.28.7-2.07,2.05-2.07,3.5v20.02c0,1.46.79,2.8,2.07,3.5l18.5,10.18c1.2.66,2.66.66,3.86,0l18.5-10.18c1.28-.7,2.07-2.05,2.07-3.5v-20.02c0-1.46-.79-2.8-2.07-3.5l-18.5-10.18c-1.2-.66-2.66-.66-3.86,0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><g><polyline points="14.07 23.94 36 36 57.93 23.94" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="60.18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M24.75,54.56l9.32,5.13c1.2.66,2.66.66,3.86,0l9.32-5.13,9.18-5.05c1.28-.7,2.07-2.05,2.07-3.5v-20.02c0-1.46-.79-2.8-2.07-3.5l-9.18-5.05-9.32-5.13c-1.2-.66-2.66-.66-3.86,0l-9.32,5.13-9.18,5.05c-1.28.7-2.07,2.05-2.07,3.5v5.51" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="4.5" y1="45" x2="27" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="18 36 27 45 18 54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    box_in_default = IconBoxIn;
  }
});

// lib/icons/box-out.ts
var box_out_exports = {};
__export(box_out_exports, {
  IconBoxOut: () => IconBoxOut,
  default: () => box_out_default
});
var IconBoxOut, box_out_default;
var init_box_out = __esm({
  "lib/icons/box-out.ts"() {
    IconBoxOut = `<svg id="box-out" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M34.07,12.31l-18.5,10.18c-1.28.7-2.07,2.05-2.07,3.5v20.02c0,1.46.79,2.8,2.07,3.5l18.5,10.18c1.2.66,2.66.66,3.86,0l18.5-10.18c1.28-.7,2.07-2.05,2.07-3.5v-20.02c0-1.46-.79-2.8-2.07-3.5l-18.5-10.18c-1.2-.66-2.66-.66-3.86,0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><g><path d="M58.5,31.5v-5.51c0-1.46-.79-2.8-2.07-3.5l-9.18-5.05-9.32-5.13c-1.2-.66-2.66-.66-3.86,0l-9.32,5.13-9.18,5.05c-1.28.7-2.07,2.05-2.07,3.5v20.02c0,1.46.79,2.8,2.07,3.5l9.18,5.05,9.32,5.13c1.2.66,2.66.66,3.86,0l9.32-5.13" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="14.07 23.94 36 36 57.93 23.94" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="60.18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="45" y1="45" x2="67.5" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.5 36 67.5 45 58.5 54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    box_out_default = IconBoxOut;
  }
});

// lib/icons/box.ts
var box_exports = {};
__export(box_exports, {
  IconBox: () => IconBox,
  default: () => box_default
});
var IconBox, box_default;
var init_box = __esm({
  "lib/icons/box.ts"() {
    IconBox = `<svg id="box" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M34.07,12.31l-18.5,10.18c-1.28.7-2.07,2.05-2.07,3.5v20.02c0,1.46.79,2.8,2.07,3.5l18.5,10.18c1.2.66,2.66.66,3.86,0l18.5-10.18c1.28-.7,2.07-2.05,2.07-3.5v-20.02c0-1.46-.79-2.8-2.07-3.5l-18.5-10.18c-1.2-.66-2.66-.66-3.86,0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="14.07" y1="23.94" x2="36" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M34.07,12.31l-18.5,10.18c-1.28.7-2.07,2.05-2.07,3.5v20.02c0,1.46.79,2.8,2.07,3.5l18.5,10.18c1.2.66,2.66.66,3.86,0l18.5-10.18c1.28-.7,2.07-2.05,2.07-3.5v-20.02c0-1.46-.79-2.8-2.07-3.5l-18.5-10.18c-1.2-.66-2.66-.66-3.86,0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="57.93" y2="23.94" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="60.18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    box_default = IconBox;
  }
});

// lib/icons/boy.ts
var boy_exports = {};
__export(boy_exports, {
  IconBoy: () => IconBoy,
  default: () => boy_default
});
var IconBoy, boy_default;
var init_boy = __esm({
  "lib/icons/boy.ts"() {
    IconBoy = `<svg id="boy" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><polygon points="32.22 21.94 32.23 21.94 32.23 21.93 32.22 21.94" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M22.5,34.88c6.07-2.87,9.64-12.71,9.72-12.94-4.94,1.48-9.61,5.84-9.72,12.94Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M51,17.94c-3.65,6.78-9.61,3.42-15,3.42-1.23,0-2.51.2-3.77.58.05.18,3.87,12.94,17.27,12.94,11.31,0,6.52-12.02,1.5-16.93Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M22.5,34.88c0,7.46,6.04,13.5,13.5,13.5s13.5-6.04,13.5-13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M51,63c0-4.97-6.72-9-15-9s-15,4.03-15,9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="37.12" x2="31.5" y2="37.12" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="37.12" x2="40.5" y2="37.12" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><polygon points="32.22 21.94 32.23 21.94 32.23 21.93 32.22 21.94" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,34.88c6.07-2.87,9.64-12.71,9.72-12.94-4.94,1.48-9.61,5.84-9.72,12.94Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M51,17.94c-3.65,6.78-9.61,3.42-15,3.42-1.23,0-2.51.2-3.77.58.05.18,3.87,12.94,17.27,12.94,11.31,0,6.52-12.02,1.5-16.93Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><polygon points="32.23 21.93 32.22 21.94 32.23 21.94 32.23 21.93" style="fill: white;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    boy_default = IconBoy;
  }
});

// lib/icons/broken-heart-f.ts
var broken_heart_f_exports = {};
__export(broken_heart_f_exports, {
  IconBrokenHeartF: () => IconBrokenHeartF,
  default: () => broken_heart_f_default
});
var IconBrokenHeartF, broken_heart_f_default;
var init_broken_heart_f = __esm({
  "lib/icons/broken-heart-f.ts"() {
    IconBrokenHeartF = `<svg id="broken-heart-f" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,58.5C-10.77,34.02,12.62-3.19,36,21.77c23.38-24.97,46.77,12.24,0,36.73Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="36 22.5 40.5 36 31.5 40.5 36 58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width: 8px;"/><path d="M36,58.5C-10.77,34.02,12.62-3.19,36,21.77c23.38-24.97,46.77,12.24,0,36.73Z" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/></svg>`;
    broken_heart_f_default = IconBrokenHeartF;
  }
});

// lib/icons/broken-heart-l.ts
var broken_heart_l_exports = {};
__export(broken_heart_l_exports, {
  IconBrokenHeartL: () => IconBrokenHeartL,
  default: () => broken_heart_l_default
});
var IconBrokenHeartL, broken_heart_l_default;
var init_broken_heart_l = __esm({
  "lib/icons/broken-heart-l.ts"() {
    IconBrokenHeartL = `<svg id="broken-heart-l" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,58.5C-10.77,34.02,12.62-3.19,36,21.77c23.38-24.97,46.77,12.24,0,36.73Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="36 22.5 40.5 36 31.5 40.5 36 58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,58.5C-10.77,34.02,12.62-3.19,36,21.77c23.38-24.97,46.77,12.24,0,36.73Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    broken_heart_l_default = IconBrokenHeartL;
  }
});

// lib/icons/broken-heart-m.ts
var broken_heart_m_exports = {};
__export(broken_heart_m_exports, {
  IconBrokenHeartM: () => IconBrokenHeartM,
  default: () => broken_heart_m_default
});
var IconBrokenHeartM, broken_heart_m_default;
var init_broken_heart_m = __esm({
  "lib/icons/broken-heart-m.ts"() {
    IconBrokenHeartM = `<svg id="broken-heart-m" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,54C-1.41,34.41,17.29,4.64,36,24.62c18.71-19.97,37.41,9.79,0,29.38Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="36 25.2 39.6 36 32.4 39.6 36 54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,54C-1.41,34.41,17.29,4.64,36,24.62c18.71-19.97,37.41,9.79,0,29.38Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    broken_heart_m_default = IconBrokenHeartM;
  }
});

// lib/icons/building-church.ts
var building_church_exports = {};
__export(building_church_exports, {
  IconBuildingChurch: () => IconBuildingChurch,
  default: () => building_church_default
});
var IconBuildingChurch, building_church_default;
var init_building_church = __esm({
  "lib/icons/building-church.ts"() {
    IconBuildingChurch = `<svg id="building-church" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M57.75,38.81l-20.49-16.39c-.74-.59-1.78-.58-2.51.01l-20.51,16.73c-.47.38-.74.95-.74,1.55v15.78c0,1.1.9,2,2,2h16v-11.5c0-1.1.9-2,2-2h5c1.1,0,2,.9,2,2v11.5h16c1.1,0,2-.9,2-2v-16.12c0-.61-.28-1.18-.75-1.56Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,58.28v-11.5c0-1.1-.9-2-2-2h-5c-1.1,0-2,.9-2,2v11.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M14.24,39.68l20.51-16.73c.73-.6,1.78-.6,2.51-.01l20.49,16.39c.47.38.75.95.75,1.56v16.12c0,1.1-.9,2-2,2H15.5c-1.1,0-2-.9-2-2v-15.78c0-.6.27-1.17.74-1.55Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="4.5" x2="36" y2="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="29.25" y1="11" x2="42.75" y2="11" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    building_church_default = IconBuildingChurch;
  }
});

// lib/icons/building-house2.ts
var building_house2_exports = {};
__export(building_house2_exports, {
  IconBuildingHouse2: () => IconBuildingHouse2,
  default: () => building_house2_default
});
var IconBuildingHouse2, building_house2_default;
var init_building_house2 = __esm({
  "lib/icons/building-house2.ts"() {
    IconBuildingHouse2 = `<svg id="building-house-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M57.75,30.55l-20.49-16.39c-.74-.59-1.78-.58-2.51.01L14.24,30.9c-.47.38-.74.95-.74,1.55v24.05c0,1.1.9,2,2,2h41c1.1,0,2-.9,2-2v-24.39c0-.61-.28-1.18-.75-1.56Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M14.24,30.9l20.51-16.73c.73-.6,1.78-.6,2.51-.01l20.49,16.39c.47.38.75.95.75,1.56v24.39c0,1.1-.9,2-2,2H15.5c-1.1,0-2-.9-2-2v-24.05c0-.6.27-1.17.74-1.55Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    building_house2_default = IconBuildingHouse2;
  }
});

// lib/icons/building-house.ts
var building_house_exports = {};
__export(building_house_exports, {
  IconBuildingHouse: () => IconBuildingHouse,
  default: () => building_house_default
});
var IconBuildingHouse, building_house_default;
var init_building_house = __esm({
  "lib/icons/building-house.ts"() {
    IconBuildingHouse = `<svg id="building-house" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M57.75,30.55l-20.49-16.39c-.74-.59-1.78-.58-2.51.01L14.24,30.9c-.47.38-.74.95-.74,1.55v24.05c0,1.1.9,2,2,2h16v-11.5c0-1.1.9-2,2-2h5c1.1,0,2,.9,2,2v11.5h16c1.1,0,2-.9,2-2v-24.39c0-.61-.28-1.18-.75-1.56Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,58.5v-11.5c0-1.1-.9-2-2-2h-5c-1.1,0-2,.9-2,2v11.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M14.24,30.9l20.51-16.73c.73-.6,1.78-.6,2.51-.01l20.49,16.39c.47.38.75.95.75,1.56v24.39c0,1.1-.9,2-2,2H15.5c-1.1,0-2-.9-2-2v-24.05c0-.6.27-1.17.74-1.55Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    building_house_default = IconBuildingHouse;
  }
});

// lib/icons/building-shop.ts
var building_shop_exports = {};
__export(building_shop_exports, {
  IconBuildingShop: () => IconBuildingShop,
  default: () => building_shop_default
});
var IconBuildingShop, building_shop_default;
var init_building_shop = __esm({
  "lib/icons/building-shop.ts"() {
    IconBuildingShop = `<svg id="building-shop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M61.31,30.38l-2.53-15.2c-.16-.96-1-1.67-1.97-1.67H15.19c-.98,0-1.81.71-1.97,1.67l-2.53,15.2c-.59,3.52.58,6.73,2.83,8.55h-.01v17.57c0,1.1.9,2,2,2h16v-11.5c0-1.1.9-2,2-2h5c1.1,0,2,.9,2,2v11.5h16c1.1,0,2-.9,2-2v-17.57h-.01c2.25-1.82,3.41-5.03,2.83-8.55Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M61.31,30.38c.9,5.43-2.34,10.13-7.31,10.13s-9.26-4.7-9.56-10.13c.3,5.43-3.47,10.13-8.44,10.13s-8.74-4.7-8.44-10.13c-.3,5.43-4.59,10.13-9.56,10.13s-8.22-4.7-7.31-10.13l2.53-15.2c.16-.96,1-1.67,1.97-1.67h41.61c.98,0,1.81.71,1.97,1.67l2.53,15.2Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,58.5v-11.5c0-1.1-.9-2-2-2h-5c-1.1,0-2,.9-2,2v11.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,38.93v17.57c0,1.1.9,2,2,2h41c1.1,0,2-.9,2-2v-17.57" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    building_shop_default = IconBuildingShop;
  }
});

// lib/icons/button-add.ts
var button_add_exports = {};
__export(button_add_exports, {
  IconButtonAdd: () => IconButtonAdd,
  default: () => button_add_default
});
var IconButtonAdd, button_add_default;
var init_button_add = __esm({
  "lib/icons/button-add.ts"() {
    IconButtonAdd = `<svg id="button-add" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="31.5" x2="45" y2="31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_add_default = IconButtonAdd;
  }
});

// lib/icons/button-broken-heart2.ts
var button_broken_heart2_exports = {};
__export(button_broken_heart2_exports, {
  IconButtonBrokenHeart2: () => IconButtonBrokenHeart2,
  default: () => button_broken_heart2_default
});
var IconButtonBrokenHeart2, button_broken_heart2_default;
var init_button_broken_heart2 = __esm({
  "lib/icons/button-broken-heart2.ts"() {
    IconButtonBrokenHeart2 = `<svg id="button-broken-heart_2" data-name="button-broken-heart 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,31.5v12c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6v-24c0-3.31,2.69-6,6-6h12" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v21c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6V19.5c0-3.31,2.69-6,6-6h12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 13.5 51.75 20.25 47.25 22.5 49.5 31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,31.5c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_broken_heart2_default = IconButtonBrokenHeart2;
  }
});

// lib/icons/button-broken-heart.ts
var button_broken_heart_exports = {};
__export(button_broken_heart_exports, {
  IconButtonBrokenHeart: () => IconButtonBrokenHeart,
  default: () => button_broken_heart_default
});
var IconButtonBrokenHeart, button_broken_heart_default;
var init_button_broken_heart = __esm({
  "lib/icons/button-broken-heart.ts"() {
    IconButtonBrokenHeart = `<svg id="button-broken-heart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 25 38.25 31.75 33.75 34 36 43" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,43c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_broken_heart_default = IconButtonBrokenHeart;
  }
});

// lib/icons/button-check2.ts
var button_check2_exports = {};
__export(button_check2_exports, {
  IconButtonCheck2: () => IconButtonCheck2,
  default: () => button_check2_default
});
var IconButtonCheck2, button_check2_default;
var init_button_check2 = __esm({
  "lib/icons/button-check2.ts"() {
    IconButtonCheck2 = `<svg id="button-check-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,31.5v12c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6v-24c0-3.31,2.69-6,6-6h21" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v21c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6V19.5c0-3.31,2.69-6,6-6h21" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="40.5 18.64 48.21 31.5 58.5 13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_check2_default = IconButtonCheck2;
  }
});

// lib/icons/button-check.ts
var button_check_exports = {};
__export(button_check_exports, {
  IconButtonCheck: () => IconButtonCheck,
  default: () => button_check_default
});
var IconButtonCheck, button_check_default;
var init_button_check = __esm({
  "lib/icons/button-check.ts"() {
    IconButtonCheck = `<svg id="button-check" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 27.64 34.71 40.5 45 22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_check_default = IconButtonCheck;
  }
});

// lib/icons/button-edit2.ts
var button_edit2_exports = {};
__export(button_edit2_exports, {
  IconButtonEdit2: () => IconButtonEdit2,
  default: () => button_edit2_default
});
var IconButtonEdit2, button_edit2_default;
var init_button_edit2 = __esm({
  "lib/icons/button-edit2.ts"() {
    IconButtonEdit2 = `<svg id="button-edit-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,31.5v12c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6v-24c0-3.31,2.69-6,6-6h21" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v21c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6V19.5c0-3.31,2.69-6,6-6h21" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M37.47,28.64l-1.47,7.36,7.36-1.47c.39-.08.74-.27,1.02-.55l14.07-14.07c.78-.78.78-2.05,0-2.83l-3.54-3.54c-.78-.78-2.05-.78-2.83,0l-14.07,14.07c-.28.28-.47.63-.55,1.02Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="48.73" y1="16.91" x2="55.09" y2="23.27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    button_edit2_default = IconButtonEdit2;
  }
});

// lib/icons/button-edit.ts
var button_edit_exports = {};
__export(button_edit_exports, {
  IconButtonEdit: () => IconButtonEdit,
  default: () => button_edit_default
});
var IconButtonEdit, button_edit_default;
var init_button_edit = __esm({
  "lib/icons/button-edit.ts"() {
    IconButtonEdit = `<svg id="button-edit" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M23.44,33.68l-1.47,7.36,7.36-1.47c.39-.08.74-.27,1.02-.55l14.07-14.07c.78-.78.78-2.05,0-2.83l-3.54-3.54c-.78-.78-2.05-.78-2.83,0l-14.07,14.07c-.28.28-.47.63-.55,1.02Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="34.69" y1="21.94" x2="41.06" y2="28.31" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    button_edit_default = IconButtonEdit;
  }
});

// lib/icons/button-exclamation-mark2.ts
var button_exclamation_mark2_exports = {};
__export(button_exclamation_mark2_exports, {
  IconButtonExclamationMark2: () => IconButtonExclamationMark2,
  default: () => button_exclamation_mark2_default
});
var IconButtonExclamationMark2, button_exclamation_mark2_default;
var init_button_exclamation_mark2 = __esm({
  "lib/icons/button-exclamation-mark2.ts"() {
    IconButtonExclamationMark2 = `<svg id="button-exclamation-mark-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,31.5v12c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6v-24c0-3.31,2.69-6,6-6h12" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v21c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6V19.5c0-3.31,2.69-6,6-6h12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="9" x2="45" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="31.5" x2="45" y2="31.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_exclamation_mark2_default = IconButtonExclamationMark2;
  }
});

// lib/icons/button-exclamation-mark.ts
var button_exclamation_mark_exports = {};
__export(button_exclamation_mark_exports, {
  IconButtonExclamationMark: () => IconButtonExclamationMark,
  default: () => button_exclamation_mark_default
});
var IconButtonExclamationMark, button_exclamation_mark_default;
var init_button_exclamation_mark = __esm({
  "lib/icons/button-exclamation-mark.ts"() {
    IconButtonExclamationMark = `<svg id="button-exclamation-mark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="40.5" x2="36" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_exclamation_mark_default = IconButtonExclamationMark;
  }
});

// lib/icons/button-heart2.ts
var button_heart2_exports = {};
__export(button_heart2_exports, {
  IconButtonHeart2: () => IconButtonHeart2,
  default: () => button_heart2_default
});
var IconButtonHeart2, button_heart2_default;
var init_button_heart2 = __esm({
  "lib/icons/button-heart2.ts"() {
    IconButtonHeart2 = `<svg id="button-heart_2" data-name="button-heart 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,31.5v12c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6v-24c0-3.31,2.69-6,6-6h12" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v21c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6V19.5c0-3.31,2.69-6,6-6h12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,31.5c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_heart2_default = IconButtonHeart2;
  }
});

// lib/icons/button-heart.ts
var button_heart_exports = {};
__export(button_heart_exports, {
  IconButtonHeart: () => IconButtonHeart,
  default: () => button_heart_default
});
var IconButtonHeart, button_heart_default;
var init_button_heart = __esm({
  "lib/icons/button-heart.ts"() {
    IconButtonHeart = `<svg id="button-heart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,43c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_heart_default = IconButtonHeart;
  }
});

// lib/icons/button-info2.ts
var button_info2_exports = {};
__export(button_info2_exports, {
  IconButtonInfo2: () => IconButtonInfo2,
  default: () => button_info2_default
});
var IconButtonInfo2, button_info2_default;
var init_button_info2 = __esm({
  "lib/icons/button-info2.ts"() {
    IconButtonInfo2 = `<svg id="button-info-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,31.5v12c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6v-24c0-3.31,2.69-6,6-6h12" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v21c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6V19.5c0-3.31,2.69-6,6-6h16.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><polyline points="49.5 31.5 49.5 18 45 18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="9" x2="49.5" y2="9" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    button_info2_default = IconButtonInfo2;
  }
});

// lib/icons/button-info.ts
var button_info_exports = {};
__export(button_info_exports, {
  IconButtonInfo: () => IconButtonInfo,
  default: () => button_info_default
});
var IconButtonInfo, button_info_default;
var init_button_info = __esm({
  "lib/icons/button-info.ts"() {
    IconButtonInfo = `<svg id="button-info" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><polyline points="36 45 36 31.5 31.5 31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="22.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    button_info_default = IconButtonInfo;
  }
});

// lib/icons/button-invisible2.ts
var button_invisible2_exports = {};
__export(button_invisible2_exports, {
  IconButtonInvisible2: () => IconButtonInvisible2,
  default: () => button_invisible2_default
});
var IconButtonInvisible2, button_invisible2_default;
var init_button_invisible2 = __esm({
  "lib/icons/button-invisible2.ts"() {
    IconButtonInvisible2 = `<svg id="button-invisible_2" data-name="button-invisible 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,31.5v12c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6v-24c0-3.31,2.69-6,6-6h12" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v21c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6V19.5c0-3.31,2.69-6,6-6h12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,18s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="9" x2="36" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_invisible2_default = IconButtonInvisible2;
  }
});

// lib/icons/button-invisible.ts
var button_invisible_exports = {};
__export(button_invisible_exports, {
  IconButtonInvisible: () => IconButtonInvisible,
  default: () => button_invisible_default
});
var IconButtonInvisible, button_invisible_default;
var init_button_invisible = __esm({
  "lib/icons/button-invisible.ts"() {
    IconButtonInvisible = `<svg id="button-invisible" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,31.5s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="22.5" x2="22.5" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_invisible_default = IconButtonInvisible;
  }
});

// lib/icons/button-multiply.ts
var button_multiply_exports = {};
__export(button_multiply_exports, {
  IconButtonMultiply: () => IconButtonMultiply,
  default: () => button_multiply_default
});
var IconButtonMultiply, button_multiply_default;
var init_button_multiply = __esm({
  "lib/icons/button-multiply.ts"() {
    IconButtonMultiply = `<svg id="button-multiply" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="29.64" y1="25.14" x2="42.36" y2="37.86" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.36" y1="25.14" x2="29.64" y2="37.86" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_multiply_default = IconButtonMultiply;
  }
});

// lib/icons/button-question-mark2.ts
var button_question_mark2_exports = {};
__export(button_question_mark2_exports, {
  IconButtonQuestionMark2: () => IconButtonQuestionMark2,
  default: () => button_question_mark2_default
});
var IconButtonQuestionMark2, button_question_mark2_default;
var init_button_question_mark2 = __esm({
  "lib/icons/button-question-mark2.ts"() {
    IconButtonQuestionMark2 = `<svg id="button-question-mark-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,31.5v12c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6v-24c0-3.31,2.69-6,6-6h12" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v21c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6V19.5c0-3.31,2.69-6,6-6h16.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="48.67" y1="31.5" x2="48.67" y2="31.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M42.67,15c0-3.31,2.69-6,6-6s6,2.69,6,6c0,6-6,6-6,12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    button_question_mark2_default = IconButtonQuestionMark2;
  }
});

// lib/icons/button-question-mark.ts
var button_question_mark_exports = {};
__export(button_question_mark_exports, {
  IconButtonQuestionMark: () => IconButtonQuestionMark,
  default: () => button_question_mark_default
});
var IconButtonQuestionMark, button_question_mark_default;
var init_button_question_mark = __esm({
  "lib/icons/button-question-mark.ts"() {
    IconButtonQuestionMark = `<svg id="button-question-mark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="36" y1="42.75" x2="36" y2="42.75" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30,26.25c0-3.31,2.69-6,6-6s6,2.69,6,6c0,6-6,6-6,12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    button_question_mark_default = IconButtonQuestionMark;
  }
});

// lib/icons/button-search2.ts
var button_search2_exports = {};
__export(button_search2_exports, {
  IconButtonSearch2: () => IconButtonSearch2,
  default: () => button_search2_default
});
var IconButtonSearch2, button_search2_default;
var init_button_search2 = __esm({
  "lib/icons/button-search2.ts"() {
    IconButtonSearch2 = `<svg id="button-search_2" data-name="button-search 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,31.5v12c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6v-24c0-3.31,2.69-6,6-6h12" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v21c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6V19.5c0-3.31,2.69-6,6-6h12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="58.5" y1="31.5" x2="51.36" y2="24.36" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="45" cy="18" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    button_search2_default = IconButtonSearch2;
  }
});

// lib/icons/button-search.ts
var button_search_exports = {};
__export(button_search_exports, {
  IconButtonSearch: () => IconButtonSearch,
  default: () => button_search_default
});
var IconButtonSearch, button_search_default;
var init_button_search = __esm({
  "lib/icons/button-search.ts"() {
    IconButtonSearch = `<svg id="button-search" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="49.5" y1="45" x2="42.36" y2="37.86" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="31.5" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    button_search_default = IconButtonSearch;
  }
});

// lib/icons/button-star2.ts
var button_star2_exports = {};
__export(button_star2_exports, {
  IconButtonStar2: () => IconButtonStar2,
  default: () => button_star2_default
});
var IconButtonStar2, button_star2_default;
var init_button_star2 = __esm({
  "lib/icons/button-star2.ts"() {
    IconButtonStar2 = `<svg id="button-star_2" data-name="button-star 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,36v7.5c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6v-24c0-3.31,2.69-6,6-6h12" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,36v16.5c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6V19.5c0-3.31,2.69-6,6-6h12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M50,24.5l8.18,5.85c.39.28.91-.1.76-.56l-3.18-9.55,8.09-5.98c.39-.28.18-.9-.3-.89l-10.06.08-3.18-9.55c-.15-.45-.8-.45-.94,0l-3.04,9.59-10.06.08c-.48,0-.67.62-.28.9l8.18,5.85-3.04,9.59c-.14.46.38.83.76.55l8.09-5.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_star2_default = IconButtonStar2;
  }
});

// lib/icons/button-star.ts
var button_star_exports = {};
__export(button_star_exports, {
  IconButtonStar: () => IconButtonStar,
  default: () => button_star_default
});
var IconButtonStar, button_star_default;
var init_button_star = __esm({
  "lib/icons/button-star.ts"() {
    IconButtonStar = `<svg id="button-star" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,39.5l8.18,5.85c.39.28.91-.1.76-.56l-3.18-9.55,8.09-5.98c.39-.28.18-.9-.3-.89l-10.06.08-3.18-9.55c-.15-.45-.8-.45-.94,0l-3.04,9.59-10.06.08c-.48,0-.67.62-.28.9l8.18,5.85-3.04,9.59c-.14.46.38.83.76.55l8.09-5.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_star_default = IconButtonStar;
  }
});

// lib/icons/button-subtract.ts
var button_subtract_exports = {};
__export(button_subtract_exports, {
  IconButtonSubtract: () => IconButtonSubtract,
  default: () => button_subtract_default
});
var IconButtonSubtract, button_subtract_default;
var init_button_subtract = __esm({
  "lib/icons/button-subtract.ts"() {
    IconButtonSubtract = `<svg id="button-subtract" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="31.5" x2="45" y2="31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_subtract_default = IconButtonSubtract;
  }
});

// lib/icons/button-visible2.ts
var button_visible2_exports = {};
__export(button_visible2_exports, {
  IconButtonVisible2: () => IconButtonVisible2,
  default: () => button_visible2_default
});
var IconButtonVisible2, button_visible2_default;
var init_button_visible2 = __esm({
  "lib/icons/button-visible2.ts"() {
    IconButtonVisible2 = `<svg id="button-visible_2" data-name="button-visible 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,31.5v12c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6v-24c0-3.31,2.69-6,6-6h12" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,31.5v21c0,3.31-2.69,6-6,6H19.5c-3.31,0-6-2.69-6-6V19.5c0-3.31,2.69-6,6-6h12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,18s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="18" r="4.5" style="stroke-width: 0px;"/></svg>`;
    button_visible2_default = IconButtonVisible2;
  }
});

// lib/icons/button-visible.ts
var button_visible_exports = {};
__export(button_visible_exports, {
  IconButtonVisible: () => IconButtonVisible,
  default: () => button_visible_default
});
var IconButtonVisible, button_visible_default;
var init_button_visible = __esm({
  "lib/icons/button-visible.ts"() {
    IconButtonVisible = `<svg id="button-visible" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,31.5s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="31.5" r="4.5" style="stroke-width: 0px;"/></svg>`;
    button_visible_default = IconButtonVisible;
  }
});

// lib/icons/button.ts
var button_exports = {};
__export(button_exports, {
  IconButton: () => IconButton,
  default: () => button_default
});
var IconButton, button_default;
var init_button = __esm({
  "lib/icons/button.ts"() {
    IconButton = `<svg id="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="36" rx="6" ry="6" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="6" ry="6" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    button_default = IconButton;
  }
});

// lib/icons/calendar2.ts
var calendar2_exports = {};
__export(calendar2_exports, {
  IconCalendar2: () => IconCalendar2,
  default: () => calendar2_default
});
var IconCalendar2, calendar2_default;
var init_calendar2 = __esm({
  "lib/icons/calendar2.ts"() {
    IconCalendar2 = `<svg id="calendar-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="9" y="13.5" width="54" height="49.5" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="13.5" width="54" height="49.5" rx="4" ry="4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="9" x2="18" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="9" x2="36" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="9" x2="27" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="9" x2="45" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="9" x2="54" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="27" x2="22.5" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="27" x2="31.5" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="27" x2="40.5" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="27" x2="49.5" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="36" x2="22.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="36" x2="31.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="36" x2="40.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="36" x2="49.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="45" x2="22.5" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="45" x2="31.5" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="45" x2="40.5" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="45" x2="49.5" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="54" x2="22.5" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="54" x2="31.5" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="54" x2="40.5" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="54" x2="49.5" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    calendar2_default = IconCalendar2;
  }
});

// lib/icons/calendar.ts
var calendar_exports = {};
__export(calendar_exports, {
  IconCalendar: () => IconCalendar,
  default: () => calendar_default
});
var IconCalendar, calendar_default;
var init_calendar = __esm({
  "lib/icons/calendar.ts"() {
    IconCalendar = `<svg id="calendar" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M9,27v32c0,2.21,1.79,4,4,4h46c2.21,0,4-1.79,4-4V27H9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="13.5" width="54" height="49.5" rx="4" ry="4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="27" x2="63" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="36" x2="18" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="18" y1="45" x2="18" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="18" y1="54" x2="18" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="27" y1="54" x2="27" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="36" y1="54" x2="36" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="45" y1="54" x2="45" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="54" y1="54" x2="54" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="54" y1="45" x2="54" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="54" y1="36" x2="54" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="45" y1="36" x2="45" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="45" y1="45" x2="45" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="36" y1="45" x2="36" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="27" y1="45" x2="27" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="27" y1="36" x2="27" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="36" y1="36" x2="36" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="18" y1="9" x2="18" y2="13.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="9" x2="27" y2="13.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="9" x2="36" y2="13.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="9" x2="45" y2="13.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="9" x2="54" y2="13.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="16.5" y1="20.5" x2="30" y2="20.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    calendar_default = IconCalendar;
  }
});

// lib/icons/chart-bars-squared.ts
var chart_bars_squared_exports = {};
__export(chart_bars_squared_exports, {
  IconChartBarsSquared: () => IconChartBarsSquared,
  default: () => chart_bars_squared_default
});
var IconChartBarsSquared, chart_bars_squared_default;
var init_chart_bars_squared = __esm({
  "lib/icons/chart-bars-squared.ts"() {
    IconChartBarsSquared = `<svg id="chart-bars-squared" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="9" y="9" width="54" height="54" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="9" width="54" height="54" rx="4" ry="4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="22.5" x2="22.5" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="27" x2="49.5" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chart_bars_squared_default = IconChartBarsSquared;
  }
});

// lib/icons/chart-bubbles.ts
var chart_bubbles_exports = {};
__export(chart_bubbles_exports, {
  IconChartBubbles: () => IconChartBubbles,
  default: () => chart_bubbles_default
});
var IconChartBubbles, chart_bubbles_default;
var init_chart_bubbles = __esm({
  "lib/icons/chart-bubbles.ts"() {
    IconChartBubbles = `<svg id="chart-bubbles" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="18" cy="27" r="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="29.25" cy="51.75" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="22.5" r="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="18" cy="27" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="29.25" cy="51.75" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="22.5" r="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chart_bubbles_default = IconChartBubbles;
  }
});

// lib/icons/chart-candles.ts
var chart_candles_exports = {};
__export(chart_candles_exports, {
  IconChartCandles: () => IconChartCandles,
  default: () => chart_candles_default
});
var IconChartCandles, chart_candles_default;
var init_chart_candles = __esm({
  "lib/icons/chart-candles.ts"() {
    IconChartCandles = `<svg id="chart-candles" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="18" width="9" height="27" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="45" y="27" width="9" height="22.5" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="22.5" y1="9" x2="22.5" y2="18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="45" x2="22.5" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="9" x2="49.5" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="49.5" x2="49.5" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="18" width="9" height="27" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="45" y="27" width="9" height="22.5" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chart_candles_default = IconChartCandles;
  }
});

// lib/icons/chart-half-circle.ts
var chart_half_circle_exports = {};
__export(chart_half_circle_exports, {
  IconChartHalfCircle: () => IconChartHalfCircle,
  default: () => chart_half_circle_default
});
var IconChartHalfCircle, chart_half_circle_default;
var init_chart_half_circle = __esm({
  "lib/icons/chart-half-circle.ts"() {
    IconChartHalfCircle = `<svg id="chart-half-circle" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,19c-14.91,0-27,12.09-27,27h18c0-4.97,4.03-9,9-9s9,4.03,9,9h18c0-14.91-12.09-27-27-27Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="42.36" y1="39.64" x2="55.09" y2="26.91" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="29.64" y1="39.64" x2="16.91" y2="26.91" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="19" x2="36" y2="37" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,19c-14.91,0-27,12.09-27,27h18c0-4.97,4.03-9,9-9s9,4.03,9,9h18c0-14.91-12.09-27-27-27Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chart_half_circle_default = IconChartHalfCircle;
  }
});

// lib/icons/chart-line-squared.ts
var chart_line_squared_exports = {};
__export(chart_line_squared_exports, {
  IconChartLineSquared: () => IconChartLineSquared,
  default: () => chart_line_squared_default
});
var IconChartLineSquared, chart_line_squared_default;
var init_chart_line_squared = __esm({
  "lib/icons/chart-line-squared.ts"() {
    IconChartLineSquared = `<svg id="chart-line-squared" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="9" y="9" width="54" height="54" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="9" width="54" height="54" rx="4" ry="4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="18 54 31.5 31.5 40.5 40.5 54 18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chart_line_squared_default = IconChartLineSquared;
  }
});

// lib/icons/chart-line.ts
var chart_line_exports = {};
__export(chart_line_exports, {
  IconChartLine: () => IconChartLine,
  default: () => chart_line_default
});
var IconChartLine, chart_line_default;
var init_chart_line = __esm({
  "lib/icons/chart-line.ts"() {
    IconChartLine = `<svg id="chart-line" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.5,13.5v41c0,2.21,1.79,4,4,4h41" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 49.5 36 36 40.5 40.5 58.5 22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    chart_line_default = IconChartLine;
  }
});

// lib/icons/chart-pie.ts
var chart_pie_exports = {};
__export(chart_pie_exports, {
  IconChartPie: () => IconChartPie,
  default: () => chart_pie_default
});
var IconChartPie, chart_pie_default;
var init_chart_pie = __esm({
  "lib/icons/chart-pie.ts"() {
    IconChartPie = `<svg id="chart-pie" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M31.5,9c-12.43,0-22.5,10.07-22.5,22.5h22.5V9Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,18v22.5h-22.5c0,12.43,10.07,22.5,22.5,22.5s22.5-10.07,22.5-22.5-10.07-22.5-22.5-22.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,9c-12.43,0-22.5,10.07-22.5,22.5h22.5V9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/></svg>`;
    chart_pie_default = IconChartPie;
  }
});

// lib/icons/check-fat.ts
var check_fat_exports = {};
__export(check_fat_exports, {
  IconCheckFat: () => IconCheckFat,
  default: () => check_fat_default
});
var IconCheckFat, check_fat_default;
var init_check_fat = __esm({
  "lib/icons/check-fat.ts"() {
    IconCheckFat = `<svg id="check-fat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="13.5 23.14 34.71 58.5 63 9" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/></svg>`;
    check_fat_default = IconCheckFat;
  }
});

// lib/icons/check-l.ts
var check_l_exports = {};
__export(check_l_exports, {
  IconCheckL: () => IconCheckL,
  default: () => check_l_default
});
var IconCheckL, check_l_default;
var init_check_l = __esm({
  "lib/icons/check-l.ts"() {
    IconCheckL = `<svg id="check-l" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="13.5 23.14 34.71 58.5 63 9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    check_l_default = IconCheckL;
  }
});

// lib/icons/check-list.ts
var check_list_exports = {};
__export(check_list_exports, {
  IconCheckList: () => IconCheckList,
  default: () => check_list_default
});
var IconCheckList, check_list_default;
var init_check_list = __esm({
  "lib/icons/check-list.ts"() {
    IconCheckList = `<svg id="check-list" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="31.5" width="27" height="27" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="31.5" width="27" height="27" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,15.5v16h7c1.1,0,2,.9,2,2v7h16c1.1,0,2-.9,2-2V15.5c0-1.1-.9-2-2-2h-23c-1.1,0-2,.9-2,2Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="21.01 42.24 26.2 49.59 33.99 37.91" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    check_list_default = IconCheckList;
  }
});

// lib/icons/check-m.ts
var check_m_exports = {};
__export(check_m_exports, {
  IconCheckM: () => IconCheckM,
  default: () => check_m_default
});
var IconCheckM, check_m_default;
var init_check_m = __esm({
  "lib/icons/check-m.ts"() {
    IconCheckM = `<svg id="check-m" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="22.5 27 36 49.5 54 18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    check_m_default = IconCheckM;
  }
});

// lib/icons/check-s.ts
var check_s_exports = {};
__export(check_s_exports, {
  IconCheckS: () => IconCheckS,
  default: () => check_s_default
});
var IconCheckS, check_s_default;
var init_check_s = __esm({
  "lib/icons/check-s.ts"() {
    IconCheckS = `<svg id="check-s" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="26.36 33.43 36 49.5 48.86 27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    check_s_default = IconCheckS;
  }
});

// lib/icons/circle-invisible.ts
var circle_invisible_exports = {};
__export(circle_invisible_exports, {
  IconCircleInvisible: () => IconCircleInvisible,
  default: () => circle_invisible_default
});
var IconCircleInvisible, circle_invisible_default;
var init_circle_invisible = __esm({
  "lib/icons/circle-invisible.ts"() {
    IconCircleInvisible = `<svg id="circle-invisible" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,36s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="27" x2="22.5" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    circle_invisible_default = IconCircleInvisible;
  }
});

// lib/icons/circle-subtract.ts
var circle_subtract_exports = {};
__export(circle_subtract_exports, {
  IconCircleSubtract: () => IconCircleSubtract,
  default: () => circle_subtract_default
});
var IconCircleSubtract, circle_subtract_default;
var init_circle_subtract = __esm({
  "lib/icons/circle-subtract.ts"() {
    IconCircleSubtract = `<svg id="circle-subtract" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="36" x2="45" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    circle_subtract_default = IconCircleSubtract;
  }
});

// lib/icons/circled-add.ts
var circled_add_exports = {};
__export(circled_add_exports, {
  IconCircledAdd: () => IconCircledAdd,
  default: () => circled_add_default
});
var IconCircledAdd, circled_add_default;
var init_circled_add = __esm({
  "lib/icons/circled-add.ts"() {
    IconCircledAdd = `<svg id="circled-add" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="36" x2="45" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    circled_add_default = IconCircledAdd;
  }
});

// lib/icons/circled-broken-heart.ts
var circled_broken_heart_exports = {};
__export(circled_broken_heart_exports, {
  IconCircledBrokenHeart: () => IconCircledBrokenHeart,
  default: () => circled_broken_heart_default
});
var IconCircledBrokenHeart, circled_broken_heart_default;
var init_circled_broken_heart = __esm({
  "lib/icons/circled-broken-heart.ts"() {
    IconCircledBrokenHeart = `<svg id="circled-broken-heart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 31.5 38.25 38.25 33.75 40.5 36 49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,49.5c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    circled_broken_heart_default = IconCircledBrokenHeart;
  }
});

// lib/icons/circled-check.ts
var circled_check_exports = {};
__export(circled_check_exports, {
  IconCircledCheck: () => IconCircledCheck,
  default: () => circled_check_default
});
var IconCircledCheck, circled_check_default;
var init_circled_check = __esm({
  "lib/icons/circled-check.ts"() {
    IconCircledCheck = `<svg id="circled-check" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 32.14 34.71 45 45 27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    circled_check_default = IconCircledCheck;
  }
});

// lib/icons/circled-edit.ts
var circled_edit_exports = {};
__export(circled_edit_exports, {
  IconCircledEdit: () => IconCircledEdit,
  default: () => circled_edit_default
});
var IconCircledEdit, circled_edit_default;
var init_circled_edit = __esm({
  "lib/icons/circled-edit.ts"() {
    IconCircledEdit = `<svg id="circled-edit" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M27.94,38.18l-1.47,7.36,7.36-1.47c.39-.08.74-.27,1.02-.55l14.07-14.07c.78-.78.78-2.05,0-2.83l-3.54-3.54c-.78-.78-2.05-.78-2.83,0l-14.07,14.07c-.28.28-.47.63-.55,1.02Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="39.19" y1="26.44" x2="45.56" y2="32.81" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    circled_edit_default = IconCircledEdit;
  }
});

// lib/icons/circled-exclamation-mark.ts
var circled_exclamation_mark_exports = {};
__export(circled_exclamation_mark_exports, {
  IconCircledExclamationMark: () => IconCircledExclamationMark,
  default: () => circled_exclamation_mark_default
});
var IconCircledExclamationMark, circled_exclamation_mark_default;
var init_circled_exclamation_mark = __esm({
  "lib/icons/circled-exclamation-mark.ts"() {
    IconCircledExclamationMark = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g id="circled-exclamation-mark"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g id="folder-exclamation-mark"><line x1="36" y1="24.75" x2="36" y2="42.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="47.25" x2="36" y2="47.25" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    circled_exclamation_mark_default = IconCircledExclamationMark;
  }
});

// lib/icons/circled-heart.ts
var circled_heart_exports = {};
__export(circled_heart_exports, {
  IconCircledHeart: () => IconCircledHeart,
  default: () => circled_heart_default
});
var IconCircledHeart, circled_heart_default;
var init_circled_heart = __esm({
  "lib/icons/circled-heart.ts"() {
    IconCircledHeart = `<svg id="circled-heart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,49.5c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    circled_heart_default = IconCircledHeart;
  }
});

// lib/icons/circled-info.ts
var circled_info_exports = {};
__export(circled_info_exports, {
  IconCircledInfo: () => IconCircledInfo,
  default: () => circled_info_default
});
var IconCircledInfo, circled_info_default;
var init_circled_info = __esm({
  "lib/icons/circled-info.ts"() {
    IconCircledInfo = `<svg id="circled-info" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><polyline points="36 49.5 36 36 31.5 36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="27" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    circled_info_default = IconCircledInfo;
  }
});

// lib/icons/circled-multiply.ts
var circled_multiply_exports = {};
__export(circled_multiply_exports, {
  IconCircledMultiply: () => IconCircledMultiply,
  default: () => circled_multiply_default
});
var IconCircledMultiply, circled_multiply_default;
var init_circled_multiply = __esm({
  "lib/icons/circled-multiply.ts"() {
    IconCircledMultiply = `<svg id="circled-multiply" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="29.64" y1="29.64" x2="42.36" y2="42.36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.36" y1="29.64" x2="29.64" y2="42.36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    circled_multiply_default = IconCircledMultiply;
  }
});

// lib/icons/circled-question-mark.ts
var circled_question_mark_exports = {};
__export(circled_question_mark_exports, {
  IconCircledQuestionMark: () => IconCircledQuestionMark,
  default: () => circled_question_mark_default
});
var IconCircledQuestionMark, circled_question_mark_default;
var init_circled_question_mark = __esm({
  "lib/icons/circled-question-mark.ts"() {
    IconCircledQuestionMark = `<svg id="circled-question-mark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="36" y1="47.25" x2="36" y2="47.25" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30,30.75c0-3.31,2.69-6,6-6s6,2.69,6,6c0,6-6,6-6,12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    circled_question_mark_default = IconCircledQuestionMark;
  }
});

// lib/icons/circled-search.ts
var circled_search_exports = {};
__export(circled_search_exports, {
  IconCircledSearch: () => IconCircledSearch,
  default: () => circled_search_default
});
var IconCircledSearch, circled_search_default;
var init_circled_search = __esm({
  "lib/icons/circled-search.ts"() {
    IconCircledSearch = `<svg id="circled-search" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="49.5" y1="49.5" x2="42.36" y2="42.36" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    circled_search_default = IconCircledSearch;
  }
});

// lib/icons/circled-star.ts
var circled_star_exports = {};
__export(circled_star_exports, {
  IconCircledStar: () => IconCircledStar,
  default: () => circled_star_default
});
var IconCircledStar, circled_star_default;
var init_circled_star = __esm({
  "lib/icons/circled-star.ts"() {
    IconCircledStar = `<svg id="circled-star" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,43.43l8.18,5.85c.39.28.91-.1.76-.56l-3.18-9.55,8.09-5.98c.39-.28.18-.9-.3-.89l-10.06.08-3.18-9.55c-.15-.45-.8-.45-.94,0l-3.04,9.59-10.06.08c-.48,0-.67.62-.28.9l8.18,5.85-3.04,9.59c-.14.46.38.83.76.55l8.09-5.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    circled_star_default = IconCircledStar;
  }
});

// lib/icons/circled-visible.ts
var circled_visible_exports = {};
__export(circled_visible_exports, {
  IconCircledVisible: () => IconCircledVisible,
  default: () => circled_visible_default
});
var IconCircledVisible, circled_visible_default;
var init_circled_visible = __esm({
  "lib/icons/circled-visible.ts"() {
    IconCircledVisible = `<svg id="circled-visible" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,36s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="4.5" style="stroke-width: 0px;"/></svg>`;
    circled_visible_default = IconCircledVisible;
  }
});

// lib/icons/circled.ts
var circled_exports = {};
__export(circled_exports, {
  IconCircled: () => IconCircled,
  default: () => circled_default
});
var IconCircled, circled_default;
var init_circled = __esm({
  "lib/icons/circled.ts"() {
    IconCircled = `<svg id="circled" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    circled_default = IconCircled;
  }
});

// lib/icons/circular-loader.ts
var circular_loader_exports = {};
__export(circular_loader_exports, {
  IconCircularLoader: () => IconCircularLoader,
  default: () => circular_loader_default
});
var IconCircularLoader, circular_loader_default;
var init_circular_loader = __esm({
  "lib/icons/circular-loader.ts"() {
    IconCircularLoader = `<svg id="circular-loader" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="13.5" style="fill: brown; opacity: .5; stroke-width: 0px;"/><circle cx="36" cy="36" r="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    circular_loader_default = IconCircularLoader;
  }
});

// lib/icons/clock.ts
var clock_exports = {};
__export(clock_exports, {
  IconClock: () => IconClock,
  default: () => clock_default
});
var IconClock, clock_default;
var init_clock = __esm({
  "lib/icons/clock.ts"() {
    IconClock = `<svg id="clock" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="36" y1="18" x2="36" y2="36" style="fill: none; transform: rotate(calc((360 / 60 * var(--seconds-handle)) * 1deg)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><circle cx="36" cy="36" r="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="36" style="fill: none; transform: rotate(calc((360 / 60 * var(--minutes-handle)) * 1deg)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="36" style="fill: none; transform: rotate(calc((360 / 12 * var(--hours-handle)) * 1deg)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    clock_default = IconClock;
  }
});

// lib/icons/code-brackets-circled.ts
var code_brackets_circled_exports = {};
__export(code_brackets_circled_exports, {
  IconCodeBracketsCircled: () => IconCodeBracketsCircled,
  default: () => code_brackets_circled_default
});
var IconCodeBracketsCircled, code_brackets_circled_default;
var init_code_brackets_circled = __esm({
  "lib/icons/code-brackets-circled.ts"() {
    IconCodeBracketsCircled = `<svg id="code-brackets-circled" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,54c2.49,0,4.5-2.01,4.5-4.5v-9l4.5-4.5-4.5-4.5v-9c0-2.49-2.01-4.5-4.5-4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,18c-2.49,0-4.5,2.01-4.5,4.5v9s-4.5,4.5-4.5,4.5l4.5,4.5v9c0,2.49,2.01,4.5,4.5,4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    code_brackets_circled_default = IconCodeBracketsCircled;
  }
});

// lib/icons/code-brackets.ts
var code_brackets_exports = {};
__export(code_brackets_exports, {
  IconCodeBrackets: () => IconCodeBrackets,
  default: () => code_brackets_default
});
var IconCodeBrackets, code_brackets_default;
var init_code_brackets = __esm({
  "lib/icons/code-brackets.ts"() {
    IconCodeBrackets = `<svg id="code-brackets" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M27,13.5c-2.49,0-4.5,2.01-4.5,4.5v13.5l-4.5,4.5,4.5,4.5v13.5c0,2.49,2.01,4.5,4.5,4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,58.5c2.49,0,4.5-2.01,4.5-4.5v-13.5l4.5-4.5-4.5-4.5v-13.5c0-2.49-2.01-4.5-4.5-4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    code_brackets_default = IconCodeBrackets;
  }
});

// lib/icons/code-chevrons-circled.ts
var code_chevrons_circled_exports = {};
__export(code_chevrons_circled_exports, {
  IconCodeChevronsCircled: () => IconCodeChevronsCircled,
  default: () => code_chevrons_circled_default
});
var IconCodeChevronsCircled, code_chevrons_circled_default;
var init_code_chevrons_circled = __esm({
  "lib/icons/code-chevrons-circled.ts"() {
    IconCodeChevronsCircled = `<svg id="code-chevrons-circled" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="36" r="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 27 18 36 27 45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 45 54 36 45 27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="22.5" x2="31.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    code_chevrons_circled_default = IconCodeChevronsCircled;
  }
});

// lib/icons/code-chevrons-open-circled.ts
var code_chevrons_open_circled_exports = {};
__export(code_chevrons_open_circled_exports, {
  IconCodeChevronsOpenCircled: () => IconCodeChevronsOpenCircled,
  default: () => code_chevrons_open_circled_default
});
var IconCodeChevronsOpenCircled, code_chevrons_open_circled_default;
var init_code_chevrons_open_circled = __esm({
  "lib/icons/code-chevrons-open-circled.ts"() {
    IconCodeChevronsOpenCircled = `<svg id="code-chevrons-open-circled" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="36" r="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="31.5 27 22.5 36 31.5 45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="40.5 45 49.5 36 40.5 27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    code_chevrons_open_circled_default = IconCodeChevronsOpenCircled;
  }
});

// lib/icons/code-chevrons-open.ts
var code_chevrons_open_exports = {};
__export(code_chevrons_open_exports, {
  IconCodeChevronsOpen: () => IconCodeChevronsOpen,
  default: () => code_chevrons_open_default
});
var IconCodeChevronsOpen, code_chevrons_open_default;
var init_code_chevrons_open = __esm({
  "lib/icons/code-chevrons-open.ts"() {
    IconCodeChevronsOpen = `<svg id="code-chevrons-open" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="27 22.5 13.5 36 27 49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 49.5 58.5 36 45 22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    code_chevrons_open_default = IconCodeChevronsOpen;
  }
});

// lib/icons/code-chevrons.ts
var code_chevrons_exports = {};
__export(code_chevrons_exports, {
  IconCodeChevrons: () => IconCodeChevrons,
  default: () => code_chevrons_default
});
var IconCodeChevrons, code_chevrons_default;
var init_code_chevrons = __esm({
  "lib/icons/code-chevrons.ts"() {
    IconCodeChevrons = `<svg id="code-chevrons" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="22.5 22.5 9 36 22.5 49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 49.5 63 36 49.5 22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="18" x2="31.5" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    code_chevrons_default = IconCodeChevrons;
  }
});

// lib/icons/company.ts
var company_exports = {};
__export(company_exports, {
  IconCompany: () => IconCompany,
  default: () => company_default
});
var IconCompany, company_default;
var init_company = __esm({
  "lib/icons/company.ts"() {
    IconCompany = `<svg id="company" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="9" y="9" width="27" height="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="36" y="27" width="27" height="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="18" x2="18" y2="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="18" x2="27" y2="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="27" x2="18" y2="27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="27" x2="27" y2="27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="36" x2="18" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="36" x2="27" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="45" x2="18" y2="45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="45" x2="27" y2="45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="54" x2="18" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="54" x2="27" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="54" x2="45" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="54" x2="54" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="45" x2="45" y2="45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="45" x2="54" y2="45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="36" x2="45" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="36" x2="54" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    company_default = IconCompany;
  }
});

// lib/icons/dislike.ts
var dislike_exports = {};
__export(dislike_exports, {
  IconDislike: () => IconDislike,
  default: () => dislike_default
});
var IconDislike, dislike_default;
var init_dislike = __esm({
  "lib/icons/dislike.ts"() {
    IconDislike = `<svg id="dislike" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M29.88,18c-1.72,0-3.25,1.1-3.79,2.74l-6.33,19c-.86,2.59,1.06,5.26,3.79,5.26h13.82s-5.49,9.16-5.49,9.16c-1.19,1.99.54,4.34,3.21,4.34h.47c1.13,0,2.2-.44,2.88-1.2l11.05-12.3h0v-27h-19.62Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M51.5,18h7v27h-7c-1.1,0-2-.9-2-2v-23c0-1.1.9-2,2-2Z" transform="translate(108 63) rotate(180)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M29.88,18c-1.72,0-3.25,1.1-3.79,2.74l-6.33,19c-.86,2.59,1.06,5.26,3.79,5.26h13.82s-5.49,9.16-5.49,9.16c-1.19,1.99.54,4.34,3.21,4.34h.47c1.13,0,2.2-.44,2.88-1.2l11.05-12.3h0v-27h-19.62Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    dislike_default = IconDislike;
  }
});

// lib/icons/edit-fat.ts
var edit_fat_exports = {};
__export(edit_fat_exports, {
  IconEditFat: () => IconEditFat,
  default: () => edit_fat_default
});
var IconEditFat, edit_fat_default;
var init_edit_fat = __esm({
  "lib/icons/edit-fat.ts"() {
    IconEditFat = `<svg id="edit-fat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M16.44,43.78l-2.94,14.72,14.72-2.94c.77-.15,1.49-.54,2.04-1.09l28.13-28.13c1.56-1.56,1.56-4.09,0-5.66l-7.07-7.07c-1.56-1.56-4.09-1.56-5.66,0l-28.13,28.13c-.56.56-.94,1.27-1.09,2.04Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width: 8px;"/><path d="M16.44,43.78l-2.94,14.72,14.72-2.94c.77-.15,1.49-.54,2.04-1.09l28.13-28.13c1.56-1.56,1.56-4.09,0-5.66l-7.07-7.07c-1.56-1.56-4.09-1.56-5.66,0l-28.13,28.13c-.56.56-.94,1.27-1.09,2.04Z" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/><line x1="38.96" y1="20.32" x2="51.68" y2="33.04" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/></svg>`;
    edit_fat_default = IconEditFat;
  }
});

// lib/icons/edit-l.ts
var edit_l_exports = {};
__export(edit_l_exports, {
  IconEditL: () => IconEditL,
  default: () => edit_l_default
});
var IconEditL, edit_l_default;
var init_edit_l = __esm({
  "lib/icons/edit-l.ts"() {
    IconEditL = `<svg id="edit-l" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M16.44,43.78l-2.94,14.72,14.72-2.94c.77-.15,1.49-.54,2.04-1.09l28.13-28.13c1.56-1.56,1.56-4.09,0-5.66l-7.07-7.07c-1.56-1.56-4.09-1.56-5.66,0l-28.13,28.13c-.56.56-.94,1.27-1.09,2.04Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M16.44,43.78l-2.94,14.72,14.72-2.94c.77-.15,1.49-.54,2.04-1.09l28.13-28.13c1.56-1.56,1.56-4.09,0-5.66l-7.07-7.07c-1.56-1.56-4.09-1.56-5.66,0l-28.13,28.13c-.56.56-.94,1.27-1.09,2.04Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="38.96" y1="20.32" x2="51.68" y2="33.04" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    edit_l_default = IconEditL;
  }
});

// lib/icons/edit-line-swirl.ts
var edit_line_swirl_exports = {};
__export(edit_line_swirl_exports, {
  IconEditLineSwirl: () => IconEditLineSwirl,
  default: () => edit_line_swirl_default
});
var IconEditLineSwirl, edit_line_swirl_default;
var init_edit_line_swirl = __esm({
  "lib/icons/edit-line-swirl.ts"() {
    IconEditLineSwirl = `<svg id="edit-line-swirl" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.5,58.5l-.95-6.66c-.73-5.09-1.98-10.14-4.32-14.72-1.16-2.26-1.09-5.07.42-7.35l.51-.76c2.34-3.52,7.18-4.3,10.52-1.71l29.26,22.75c2.9,2.25,7.01,2,9.61-.6h0c2.56-2.56,2.85-6.61.68-9.51l-23.22-30.95" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M16.44,43.78l-2.94,14.72,14.72-2.94c.77-.15,1.49-.54,2.04-1.09l28.13-28.13c1.56-1.56,1.56-4.09,0-5.66l-7.07-7.07c-1.56-1.56-4.09-1.56-5.66,0l-28.13,28.13c-.56.56-.94,1.27-1.09,2.04Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M16.44,43.78l-2.94,14.72,14.72-2.94c.77-.15,1.49-.54,2.04-1.09l28.13-28.13c1.56-1.56,1.56-4.09,0-5.66l-7.07-7.07c-1.56-1.56-4.09-1.56-5.66,0l-28.13,28.13c-.56.56-.94,1.27-1.09,2.04Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="38.96" y1="20.32" x2="51.68" y2="33.04" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    edit_line_swirl_default = IconEditLineSwirl;
  }
});

// lib/icons/edit-line.ts
var edit_line_exports = {};
__export(edit_line_exports, {
  IconEditLine: () => IconEditLine,
  default: () => edit_line_default
});
var IconEditLine, edit_line_default;
var init_edit_line = __esm({
  "lib/icons/edit-line.ts"() {
    IconEditLine = `<svg id="edit-line" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M16.44,43.78l-2.94,14.72,14.72-2.94c.77-.15,1.49-.54,2.04-1.09l28.13-28.13c1.56-1.56,1.56-4.09,0-5.66l-7.07-7.07c-1.56-1.56-4.09-1.56-5.66,0l-28.13,28.13c-.56.56-.94,1.27-1.09,2.04Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M16.44,43.78l-2.94,14.72,14.72-2.94c.77-.15,1.49-.54,2.04-1.09l28.13-28.13c1.56-1.56,1.56-4.09,0-5.66l-7.07-7.07c-1.56-1.56-4.09-1.56-5.66,0l-28.13,28.13c-.56.56-.94,1.27-1.09,2.04Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="38.96" y1="20.32" x2="51.68" y2="33.04" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="63" x2="58.5" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    edit_line_default = IconEditLine;
  }
});

// lib/icons/edit-m.ts
var edit_m_exports = {};
__export(edit_m_exports, {
  IconEditM: () => IconEditM,
  default: () => edit_m_default
});
var IconEditM, edit_m_default;
var init_edit_m = __esm({
  "lib/icons/edit-m.ts"() {
    IconEditM = `<svg id="edit-m" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M20.3,42.48l-2.3,11.52,11.52-2.3c.61-.12,1.16-.42,1.6-.86l22.01-22.01c1.22-1.22,1.22-3.2,0-4.43l-5.53-5.53c-1.22-1.22-3.2-1.22-4.43,0l-22.01,22.01c-.44.44-.73.99-.86,1.6Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M20.3,42.48l-2.3,11.52,11.52-2.3c.61-.12,1.16-.42,1.6-.86l22.01-22.01c1.22-1.22,1.22-3.2,0-4.43l-5.53-5.53c-1.22-1.22-3.2-1.22-4.43,0l-22.01,22.01c-.44.44-.73.99-.86,1.6Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="37.92" y1="24.12" x2="47.88" y2="34.08" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    edit_m_default = IconEditM;
  }
});

// lib/icons/edit-s.ts
var edit_s_exports = {};
__export(edit_s_exports, {
  IconEditS: () => IconEditS,
  default: () => edit_s_default
});
var IconEditS, edit_s_default;
var init_edit_s = __esm({
  "lib/icons/edit-s.ts"() {
    IconEditS = `<svg id="edit-s" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M23.97,37.64l-1.47,7.36,7.36-1.47c.39-.08.74-.27,1.02-.55l14.07-14.07c.78-.78.78-2.05,0-2.83l-3.54-3.54c-.78-.78-2.05-.78-2.83,0l-14.07,14.07c-.28.28-.47.63-.55,1.02Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M23.97,37.64l-1.47,7.36,7.36-1.47c.39-.08.74-.27,1.02-.55l14.07-14.07c.78-.78.78-2.05,0-2.83l-3.54-3.54c-.78-.78-2.05-.78-2.83,0l-14.07,14.07c-.28.28-.47.63-.55,1.02Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="35.23" y1="25.91" x2="41.59" y2="32.27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    edit_s_default = IconEditS;
  }
});

// lib/icons/exclamation-mark-fat.ts
var exclamation_mark_fat_exports = {};
__export(exclamation_mark_fat_exports, {
  IconExclamationMarkFat: () => IconExclamationMarkFat,
  default: () => exclamation_mark_fat_default
});
var IconExclamationMarkFat, exclamation_mark_fat_default;
var init_exclamation_mark_fat = __esm({
  "lib/icons/exclamation-mark-fat.ts"() {
    IconExclamationMarkFat = `<svg id="exclamation-mark-fat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="13.5" x2="36" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/><line x1="36" y1="58.5" x2="36" y2="58.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 8px;"/></svg>`;
    exclamation_mark_fat_default = IconExclamationMarkFat;
  }
});

// lib/icons/exclamation-mark-l.ts
var exclamation_mark_l_exports = {};
__export(exclamation_mark_l_exports, {
  IconExclamationMarkL: () => IconExclamationMarkL,
  default: () => exclamation_mark_l_default
});
var IconExclamationMarkL, exclamation_mark_l_default;
var init_exclamation_mark_l = __esm({
  "lib/icons/exclamation-mark-l.ts"() {
    IconExclamationMarkL = `<svg id="exclamation-mark-l" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="13.5" x2="36" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="58.5" x2="36" y2="58.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    exclamation_mark_l_default = IconExclamationMarkL;
  }
});

// lib/icons/exclamation-mark-m.ts
var exclamation_mark_m_exports = {};
__export(exclamation_mark_m_exports, {
  IconExclamationMarkM: () => IconExclamationMarkM,
  default: () => exclamation_mark_m_default
});
var IconExclamationMarkM, exclamation_mark_m_default;
var init_exclamation_mark_m = __esm({
  "lib/icons/exclamation-mark-m.ts"() {
    IconExclamationMarkM = `<svg id="exclamation-mark-m" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="18" x2="36" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="54" x2="36" y2="54" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    exclamation_mark_m_default = IconExclamationMarkM;
  }
});

// lib/icons/exclamation-mark-s.ts
var exclamation_mark_s_exports = {};
__export(exclamation_mark_s_exports, {
  IconExclamationMarkS: () => IconExclamationMarkS,
  default: () => exclamation_mark_s_default
});
var IconExclamationMarkS, exclamation_mark_s_default;
var init_exclamation_mark_s = __esm({
  "lib/icons/exclamation-mark-s.ts"() {
    IconExclamationMarkS = `<svg id="exclamation-mark-s" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="22.5" x2="36" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="49.5" x2="36" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    exclamation_mark_s_default = IconExclamationMarkS;
  }
});

// lib/icons/female-simplified.ts
var female_simplified_exports = {};
__export(female_simplified_exports, {
  IconFemaleSimplified: () => IconFemaleSimplified,
  default: () => female_simplified_default
});
var IconFemaleSimplified, female_simplified_default;
var init_female_simplified = __esm({
  "lib/icons/female-simplified.ts"() {
    IconFemaleSimplified = `<svg id="female-simplified" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M45.26,50.08c4.61-10.09,4.3-18-9-18s-14.2,8.21-9,18c6.66,12.55,12.38,12.3,18,0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><circle cx="36.26" cy="23.08" r="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M45.26,50.08c4.61-10.09,4.3-18-9-18s-14.2,8.21-9,18c6.66,12.55,12.38,12.3,18,0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36.26" cy="23.08" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    female_simplified_default = IconFemaleSimplified;
  }
});

// lib/icons/file-add267.ts
var file_add267_exports = {};
__export(file_add267_exports, {
  IconFileAdd267: () => IconFileAdd267,
  default: () => file_add267_default
});
var IconFileAdd267, file_add267_default;
var init_file_add267 = __esm({
  "lib/icons/file-add267.ts"() {
    IconFileAdd267 = `<svg id="file-add_2" data-name="file-add 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="40.5" y1="54" x2="58.5" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="45" x2="49.5" y2="63" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,45v-18l-18-18h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_add267_default = IconFileAdd267;
  }
});

// lib/icons/file-add269.ts
var file_add269_exports = {};
__export(file_add269_exports, {
  IconFileAdd269: () => IconFileAdd269,
  default: () => file_add269_default
});
var IconFileAdd269, file_add269_default;
var init_file_add269 = __esm({
  "lib/icons/file-add269.ts"() {
    IconFileAdd269 = `<svg id="file-add_2-2" data-name="file-add 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="45" y1="49.5" x2="57.73" y2="62.23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="57.73" y1="49.5" x2="45" y2="62.23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,45v-18l-18-18h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_add269_default = IconFileAdd269;
  }
});

// lib/icons/file-add.ts
var file_add_exports = {};
__export(file_add_exports, {
  IconFileAdd: () => IconFileAdd,
  default: () => file_add_default
});
var IconFileAdd, file_add_default;
var init_file_add = __esm({
  "lib/icons/file-add.ts"() {
    IconFileAdd = `<svg id="file-add" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="27" y1="45" x2="45" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_add_default = IconFileAdd;
  }
});

// lib/icons/file-archive.ts
var file_archive_exports = {};
__export(file_archive_exports, {
  IconFileArchive: () => IconFileArchive,
  default: () => file_archive_default
});
var IconFileArchive, file_archive_default;
var init_file_archive = __esm({
  "lib/icons/file-archive.ts"() {
    IconFileArchive = `<svg id="file-archive" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="9" y="13.5" width="54" height="13.5" rx="1" ry="1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M13.5,27v30.5c0,.55.45,1,1,1h43c.55,0,1-.45,1-1v-30.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="13.5" width="54" height="13.5" rx="1" ry="1" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,27v30.5c0,.55.45,1,1,1h43c.55,0,1-.45,1-1v-30.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="36" x2="45" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_archive_default = IconFileArchive;
  }
});

// lib/icons/file-arrow-up.ts
var file_arrow_up_exports = {};
__export(file_arrow_up_exports, {
  IconFileArrowUp: () => IconFileArrowUp,
  default: () => file_arrow_up_default
});
var IconFileArrowUp, file_arrow_up_default;
var init_file_arrow_up = __esm({
  "lib/icons/file-arrow-up.ts"() {
    IconFileArrowUp = `<svg id="file-arrow-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="40.5 36 49.5 36 49.5 45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 36 36 49.5 31.5 45 22.5 54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_arrow_up_default = IconFileArrowUp;
  }
});

// lib/icons/file-binary.ts
var file_binary_exports = {};
__export(file_binary_exports, {
  IconFileBinary: () => IconFileBinary,
  default: () => file_binary_default
});
var IconFileBinary, file_binary_default;
var init_file_binary = __esm({
  "lib/icons/file-binary.ts"() {
    IconFileBinary = `<svg id="file-binary" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 54 45 36 40.5 36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="54" x2="49.5" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="22.5" y="36" width="9" height="18" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_binary_default = IconFileBinary;
  }
});

// lib/icons/file-broken-heart2.ts
var file_broken_heart2_exports = {};
__export(file_broken_heart2_exports, {
  IconFileBrokenHeart2: () => IconFileBrokenHeart2,
  default: () => file_broken_heart2_default
});
var IconFileBrokenHeart2, file_broken_heart2_default;
var init_file_broken_heart2 = __esm({
  "lib/icons/file-broken-heart2.ts"() {
    IconFileBrokenHeart2 = `<svg id="file-broken-heart_2" data-name="file-broken-heart 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,45v-18l-18-18h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="48 48 50.25 54.75 45.75 57 48 66" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M48,66c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_broken_heart2_default = IconFileBrokenHeart2;
  }
});

// lib/icons/file-broken-heart.ts
var file_broken_heart_exports = {};
__export(file_broken_heart_exports, {
  IconFileBrokenHeart: () => IconFileBrokenHeart,
  default: () => file_broken_heart_default
});
var IconFileBrokenHeart, file_broken_heart_default;
var init_file_broken_heart = __esm({
  "lib/icons/file-broken-heart.ts"() {
    IconFileBrokenHeart = `<svg id="file-broken-heart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 38 38.25 44.75 33.75 47 36 56" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,56c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_broken_heart_default = IconFileBrokenHeart;
  }
});

// lib/icons/file-check2.ts
var file_check2_exports = {};
__export(file_check2_exports, {
  IconFileCheck2: () => IconFileCheck2,
  default: () => file_check2_default
});
var IconFileCheck2, file_check2_default;
var init_file_check2 = __esm({
  "lib/icons/file-check2.ts"() {
    IconFileCheck2 = `<svg id="file-check_2" data-name="file-check 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,40.5v-13.5l-18-18h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="40.5 50.14 48.21 63 58.5 45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_check2_default = IconFileCheck2;
  }
});

// lib/icons/file-check.ts
var file_check_exports = {};
__export(file_check_exports, {
  IconFileCheck: () => IconFileCheck,
  default: () => file_check_default
});
var IconFileCheck, file_check_default;
var init_file_check = __esm({
  "lib/icons/file-check.ts"() {
    IconFileCheck = `<svg id="file-check" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 41.14 34.71 54 45 36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_check_default = IconFileCheck;
  }
});

// lib/icons/file-cloud.ts
var file_cloud_exports = {};
__export(file_cloud_exports, {
  IconFileCloud: () => IconFileCloud,
  default: () => file_cloud_default
});
var IconFileCloud, file_cloud_default;
var init_file_cloud = __esm({
  "lib/icons/file-cloud.ts"() {
    IconFileCloud = `<svg id="file-cloud" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,42.75c-.1,0-.19,0-.29.01-1-3.89-4.51-6.76-8.71-6.76s-7.71,2.88-8.71,6.76c-.1,0-.19-.01-.29-.01-2.49,0-4.5,2.01-4.5,4.5s2.01,4.5,4.5,4.5c.87,0,1.68-.25,2.37-.68,1.65,1.8,4,2.93,6.63,2.93s4.99-1.13,6.63-2.93c.69.43,1.5.68,2.37.68,2.49,0,4.5-2.01,4.5-4.5s-2.01-4.5-4.5-4.5Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_cloud_default = IconFileCloud;
  }
});

// lib/icons/file-code.ts
var file_code_exports = {};
__export(file_code_exports, {
  IconFileCode: () => IconFileCode,
  default: () => file_code_default
});
var IconFileCode, file_code_default;
var init_file_code = __esm({
  "lib/icons/file-code.ts"() {
    IconFileCode = `<svg id="file-code" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="31.5 36 22.5 45 31.5 54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="40.5 54 49.5 45 40.5 36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_code_default = IconFileCode;
  }
});

// lib/icons/file-columns.ts
var file_columns_exports = {};
__export(file_columns_exports, {
  IconFileColumns: () => IconFileColumns,
  default: () => file_columns_default
});
var IconFileColumns, file_columns_default;
var init_file_columns = __esm({
  "lib/icons/file-columns.ts"() {
    IconFileColumns = `<svg id="file-columns" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="22.5" y="36" width="27" height="18" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="45" x2="49.5" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_columns_default = IconFileColumns;
  }
});

// lib/icons/file-edit2.ts
var file_edit2_exports = {};
__export(file_edit2_exports, {
  IconFileEdit2: () => IconFileEdit2,
  default: () => file_edit2_default
});
var IconFileEdit2, file_edit2_default;
var init_file_edit2 = __esm({
  "lib/icons/file-edit2.ts"() {
    IconFileEdit2 = `<svg id="file-edit_2" data-name="file-edit 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,45v-18l-18-18h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M51.14,61.53l7.36,1.47-1.47-7.36c-.08-.39-.27-.74-.55-1.02l-14.07-14.07c-.78-.78-2.05-.78-2.83,0l-3.54,3.54c-.78.78-.78,2.05,0,2.83l14.07,14.07c.28.28.63.47,1.02.55Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="39.41" y1="50.27" x2="45.77" y2="43.91" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    file_edit2_default = IconFileEdit2;
  }
});

// lib/icons/file-edit.ts
var file_edit_exports = {};
__export(file_edit_exports, {
  IconFileEdit: () => IconFileEdit,
  default: () => file_edit_default
});
var IconFileEdit, file_edit_default;
var init_file_edit = __esm({
  "lib/icons/file-edit.ts"() {
    IconFileEdit = `<svg id="file-edit" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M23.97,46.64l-1.47,7.36,7.36-1.47c.39-.08.74-.27,1.02-.55l14.07-14.07c.78-.78.78-2.05,0-2.83l-3.54-3.54c-.78-.78-2.05-.78-2.83,0l-14.07,14.07c-.28.28-.47.63-.55,1.02Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="35.23" y1="34.91" x2="41.59" y2="41.27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_edit_default = IconFileEdit;
  }
});

// lib/icons/file-exclamation-mark2.ts
var file_exclamation_mark2_exports = {};
__export(file_exclamation_mark2_exports, {
  IconFileExclamationMark2: () => IconFileExclamationMark2,
  default: () => file_exclamation_mark2_default
});
var IconFileExclamationMark2, file_exclamation_mark2_default;
var init_file_exclamation_mark2 = __esm({
  "lib/icons/file-exclamation-mark2.ts"() {
    IconFileExclamationMark2 = `<svg id="file-exclamation-mark-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,40.5v-13.5l-18-18h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="49.5" y1="40.5" x2="49.5" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="63" x2="49.5" y2="63" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    file_exclamation_mark2_default = IconFileExclamationMark2;
  }
});

// lib/icons/file-exclamation-mark.ts
var file_exclamation_mark_exports = {};
__export(file_exclamation_mark_exports, {
  IconFileExclamationMark: () => IconFileExclamationMark,
  default: () => file_exclamation_mark_default
});
var IconFileExclamationMark, file_exclamation_mark_default;
var init_file_exclamation_mark = __esm({
  "lib/icons/file-exclamation-mark.ts"() {
    IconFileExclamationMark = `<svg id="file-exclamation-mark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="36" y1="31.5" x2="36" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="54" x2="36" y2="54" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    file_exclamation_mark_default = IconFileExclamationMark;
  }
});

// lib/icons/file-graphs.ts
var file_graphs_exports = {};
__export(file_graphs_exports, {
  IconFileGraphs: () => IconFileGraphs,
  default: () => file_graphs_default
});
var IconFileGraphs, file_graphs_default;
var init_file_graphs = __esm({
  "lib/icons/file-graphs.ts"() {
    IconFileGraphs = `<svg id="file-graphs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="31.5" x2="27" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="40.5" x2="36" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="49.5" x2="45" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_graphs_default = IconFileGraphs;
  }
});

// lib/icons/file-heart2.ts
var file_heart2_exports = {};
__export(file_heart2_exports, {
  IconFileHeart2: () => IconFileHeart2,
  default: () => file_heart2_default
});
var IconFileHeart2, file_heart2_default;
var init_file_heart2 = __esm({
  "lib/icons/file-heart2.ts"() {
    IconFileHeart2 = `<svg id="file-heart_2" data-name="file-heart 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,45v-18l-18-18h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,67.5c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_heart2_default = IconFileHeart2;
  }
});

// lib/icons/file-heart.ts
var file_heart_exports = {};
__export(file_heart_exports, {
  IconFileHeart: () => IconFileHeart,
  default: () => file_heart_default
});
var IconFileHeart, file_heart_default;
var init_file_heart = __esm({
  "lib/icons/file-heart.ts"() {
    IconFileHeart = `<svg id="file-heart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,56c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_heart_default = IconFileHeart;
  }
});

// lib/icons/file-info2.ts
var file_info2_exports = {};
__export(file_info2_exports, {
  IconFileInfo2: () => IconFileInfo2,
  default: () => file_info2_default
});
var IconFileInfo2, file_info2_default;
var init_file_info2 = __esm({
  "lib/icons/file-info2.ts"() {
    IconFileInfo2 = `<svg id="file-info-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,40.5v-13.5l-18-18h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><polyline points="49.5 67.5 49.5 54 45 54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="45" x2="49.5" y2="45" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    file_info2_default = IconFileInfo2;
  }
});

// lib/icons/file-info.ts
var file_info_exports = {};
__export(file_info_exports, {
  IconFileInfo: () => IconFileInfo,
  default: () => file_info_default
});
var IconFileInfo, file_info_default;
var init_file_info = __esm({
  "lib/icons/file-info.ts"() {
    IconFileInfo = `<svg id="file-info" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><polyline points="36 54 36 40.5 31.5 40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="31.5" x2="36" y2="31.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    file_info_default = IconFileInfo;
  }
});

// lib/icons/file-invisible2.ts
var file_invisible2_exports = {};
__export(file_invisible2_exports, {
  IconFileInvisible2: () => IconFileInvisible2,
  default: () => file_invisible2_default
});
var IconFileInvisible2, file_invisible2_default;
var init_file_invisible2 = __esm({
  "lib/icons/file-invisible2.ts"() {
    IconFileInvisible2 = `<svg id="file-invisible_2" data-name="file-invisible 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,45v-18l-18-18h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M67.5,58.5s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="67.5" y1="49.5" x2="40.5" y2="67.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_invisible2_default = IconFileInvisible2;
  }
});

// lib/icons/file-invisible.ts
var file_invisible_exports = {};
__export(file_invisible_exports, {
  IconFileInvisible: () => IconFileInvisible,
  default: () => file_invisible_default
});
var IconFileInvisible, file_invisible_default;
var init_file_invisible = __esm({
  "lib/icons/file-invisible.ts"() {
    IconFileInvisible = `<svg id="file-invisible" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,45s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="36" x2="22.5" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_invisible_default = IconFileInvisible;
  }
});

// lib/icons/file-multiply.ts
var file_multiply_exports = {};
__export(file_multiply_exports, {
  IconFileMultiply: () => IconFileMultiply,
  default: () => file_multiply_default
});
var IconFileMultiply, file_multiply_default;
var init_file_multiply = __esm({
  "lib/icons/file-multiply.ts"() {
    IconFileMultiply = `<svg id="file-multiply" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="29.64" y1="38.64" x2="42.36" y2="51.36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.36" y1="38.64" x2="29.64" y2="51.36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_multiply_default = IconFileMultiply;
  }
});

// lib/icons/file-question-mark2.ts
var file_question_mark2_exports = {};
__export(file_question_mark2_exports, {
  IconFileQuestionMark2: () => IconFileQuestionMark2,
  default: () => file_question_mark2_default
});
var IconFileQuestionMark2, file_question_mark2_default;
var init_file_question_mark2 = __esm({
  "lib/icons/file-question-mark2.ts"() {
    IconFileQuestionMark2 = `<svg id="file-question-mark-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,40.5v-13.5l-18-18h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="48" y1="67.5" x2="48" y2="67.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M42,51c0-3.31,2.69-6,6-6s6,2.69,6,6c0,6-6,6-6,12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_question_mark2_default = IconFileQuestionMark2;
  }
});

// lib/icons/file-question-mark.ts
var file_question_mark_exports = {};
__export(file_question_mark_exports, {
  IconFileQuestionMark: () => IconFileQuestionMark,
  default: () => file_question_mark_default
});
var IconFileQuestionMark, file_question_mark_default;
var init_file_question_mark = __esm({
  "lib/icons/file-question-mark.ts"() {
    IconFileQuestionMark = `<svg id="file-question-mark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="54" x2="36" y2="54" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30,37.5c0-3.31,2.69-6,6-6s6,2.69,6,6c0,6-6,6-6,12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_question_mark_default = IconFileQuestionMark;
  }
});

// lib/icons/file-search2.ts
var file_search2_exports = {};
__export(file_search2_exports, {
  IconFileSearch2: () => IconFileSearch2,
  default: () => file_search2_default
});
var IconFileSearch2, file_search2_default;
var init_file_search2 = __esm({
  "lib/icons/file-search2.ts"() {
    IconFileSearch2 = `<svg id="file-search_2" data-name="file-search 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,40.5v-13.5l-18-18h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="67.5" x2="55.86" y2="60.36" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="54" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_search2_default = IconFileSearch2;
  }
});

// lib/icons/file-search.ts
var file_search_exports = {};
__export(file_search_exports, {
  IconFileSearch: () => IconFileSearch,
  default: () => file_search_default
});
var IconFileSearch, file_search_default;
var init_file_search = __esm({
  "lib/icons/file-search.ts"() {
    IconFileSearch = `<svg id="file-search" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="57.5" x2="42.36" y2="50.36" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="44" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_search_default = IconFileSearch;
  }
});

// lib/icons/file-star2.ts
var file_star2_exports = {};
__export(file_star2_exports, {
  IconFileStar2: () => IconFileStar2,
  default: () => file_star2_default
});
var IconFileStar2, file_star2_default;
var init_file_star2 = __esm({
  "lib/icons/file-star2.ts"() {
    IconFileStar2 = `<svg id="file-star_2" data-name="file-star 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,45v-18l-18-18h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M50.22,61.43l8.18,5.85c.39.28.91-.1.76-.56l-3.18-9.55,8.09-5.98c.39-.28.18-.9-.3-.89l-10.06.08-3.18-9.55c-.15-.45-.8-.45-.94,0l-3.04,9.59-10.06.08c-.48,0-.67.62-.28.9l8.18,5.85-3.04,9.59c-.14.46.38.83.76.55l8.09-5.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_star2_default = IconFileStar2;
  }
});

// lib/icons/file-star.ts
var file_star_exports = {};
__export(file_star_exports, {
  IconFileStar: () => IconFileStar,
  default: () => file_star_default
});
var IconFileStar, file_star_default;
var init_file_star = __esm({
  "lib/icons/file-star.ts"() {
    IconFileStar = `<svg id="file-star" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,47.93l8.18,5.85c.39.28.91-.1.76-.56l-3.18-9.55,8.09-5.98c.39-.28.18-.9-.3-.89l-10.06.08-3.18-9.55c-.15-.45-.8-.45-.94,0l-3.04,9.59-10.06.08c-.48,0-.67.62-.28.9l8.18,5.85-3.04,9.59c-.14.46.38.83.76.55l8.09-5.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_star_default = IconFileStar;
  }
});

// lib/icons/file-subtract2.ts
var file_subtract2_exports = {};
__export(file_subtract2_exports, {
  IconFileSubtract2: () => IconFileSubtract2,
  default: () => file_subtract2_default
});
var IconFileSubtract2, file_subtract2_default;
var init_file_subtract2 = __esm({
  "lib/icons/file-subtract2.ts"() {
    IconFileSubtract2 = `<svg id="file-subtract_2" data-name="file-subtract 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="40.5" y1="54" x2="58.5" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,45v-18l-18-18h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_subtract2_default = IconFileSubtract2;
  }
});

// lib/icons/file-subtract.ts
var file_subtract_exports = {};
__export(file_subtract_exports, {
  IconFileSubtract: () => IconFileSubtract,
  default: () => file_subtract_default
});
var IconFileSubtract, file_subtract_default;
var init_file_subtract = __esm({
  "lib/icons/file-subtract.ts"() {
    IconFileSubtract = `<svg id="file-subtract" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="27" y1="45" x2="45" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_subtract_default = IconFileSubtract;
  }
});

// lib/icons/file-text.ts
var file_text_exports = {};
__export(file_text_exports, {
  IconFileText: () => IconFileText,
  default: () => file_text_default
});
var IconFileText, file_text_default;
var init_file_text = __esm({
  "lib/icons/file-text.ts"() {
    IconFileText = `<svg id="file-text" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="36" x2="49.5" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="45" x2="49.5" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="54" x2="49.5" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_text_default = IconFileText;
  }
});

// lib/icons/file-tray-stack.ts
var file_tray_stack_exports = {};
__export(file_tray_stack_exports, {
  IconFileTrayStack: () => IconFileTrayStack,
  default: () => file_tray_stack_default
});
var IconFileTrayStack, file_tray_stack_default;
var init_file_tray_stack = __esm({
  "lib/icons/file-tray-stack.ts"() {
    IconFileTrayStack = `<svg id="file-tray-stack" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M9,27v34c0,1.1.9,2,2,2h50c1.1,0,2-.9,2-2V27l-8.41-12.61c-.37-.56-1-.89-1.66-.89H19.07c-.67,0-1.29.33-1.66.89l-8.41,12.61Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M9,27h20.25c0,3.73,3.02,6.75,6.75,6.75s6.75-3.02,6.75-6.75h20.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,45h20.25c0,3.73,3.02,6.75,6.75,6.75s6.75-3.02,6.75-6.75h20.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,27v34c0,1.1.9,2,2,2h50c1.1,0,2-.9,2-2V27l-8.41-12.61c-.37-.56-1-.89-1.66-.89H19.07c-.67,0-1.29.33-1.66.89l-8.41,12.61Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_tray_stack_default = IconFileTrayStack;
  }
});

// lib/icons/file-tray.ts
var file_tray_exports = {};
__export(file_tray_exports, {
  IconFileTray: () => IconFileTray,
  default: () => file_tray_default
});
var IconFileTray, file_tray_default;
var init_file_tray = __esm({
  "lib/icons/file-tray.ts"() {
    IconFileTray = `<svg id="file-tray" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M9,36v16c0,1.1.9,2,2,2h50c1.1,0,2-.9,2-2v-16l-8.41-12.61c-.37-.56-1-.89-1.66-.89H19.07c-.67,0-1.29.33-1.66.89l-8.41,12.61Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M9,36v16c0,1.1.9,2,2,2h50c1.1,0,2-.9,2-2v-16l-8.41-12.61c-.37-.56-1-.89-1.66-.89H19.07c-.67,0-1.29.33-1.66.89l-8.41,12.61Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,36h20.25c0,3.73,3.02,6.75,6.75,6.75s6.75-3.02,6.75-6.75h20.25" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_tray_default = IconFileTray;
  }
});

// lib/icons/file-visible2.ts
var file_visible2_exports = {};
__export(file_visible2_exports, {
  IconFileVisible2: () => IconFileVisible2,
  default: () => file_visible2_default
});
var IconFileVisible2, file_visible2_default;
var init_file_visible2 = __esm({
  "lib/icons/file-visible2.ts"() {
    IconFileVisible2 = `<svg id="file-visible_2" data-name="file-visible 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,45v-18l-18-18h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M67.5,58.5s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="54" cy="58.5" r="4.5" style="stroke-width: 0px;"/></svg>`;
    file_visible2_default = IconFileVisible2;
  }
});

// lib/icons/file-visible.ts
var file_visible_exports = {};
__export(file_visible_exports, {
  IconFileVisible: () => IconFileVisible,
  default: () => file_visible_default
});
var IconFileVisible, file_visible_default;
var init_file_visible = __esm({
  "lib/icons/file-visible.ts"() {
    IconFileVisible = `<svg id="file-visible" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,45s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="45" r="4.5" style="stroke-width: 0px;"/></svg>`;
    file_visible_default = IconFileVisible;
  }
});

// lib/icons/file.ts
var file_exports = {};
__export(file_exports, {
  IconFile: () => IconFile,
  default: () => file_default
});
var IconFile, file_default;
var init_file = __esm({
  "lib/icons/file.ts"() {
    IconFile = `<svg id="file" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,9v14c0,2.21,1.79,4,4,4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,9h-23c-2.21,0-4,1.79-4,4v46c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V27l-18-18Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    file_default = IconFile;
  }
});

// lib/icons/folder-add2.ts
var folder_add2_exports = {};
__export(folder_add2_exports, {
  IconFolderAdd2: () => IconFolderAdd2,
  default: () => folder_add2_default
});
var IconFolderAdd2, folder_add2_default;
var init_folder_add2 = __esm({
  "lib/icons/folder-add2.ts"() {
    IconFolderAdd2 = `<svg id="folder-add_2" data-name="folder-add 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="40.5" y1="49.5" x2="58.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="40.5" x2="49.5" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,40.5v-14c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_add2_default = IconFolderAdd2;
  }
});

// lib/icons/folder-add.ts
var folder_add_exports = {};
__export(folder_add_exports, {
  IconFolderAdd: () => IconFolderAdd,
  default: () => folder_add_default
});
var IconFolderAdd, folder_add_default;
var init_folder_add = __esm({
  "lib/icons/folder-add.ts"() {
    IconFolderAdd = `<svg id="folder-add" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="27" y1="40.5" x2="45" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="31.5" x2="36" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_add_default = IconFolderAdd;
  }
});

// lib/icons/folder-broken-heart2.ts
var folder_broken_heart2_exports = {};
__export(folder_broken_heart2_exports, {
  IconFolderBrokenHeart2: () => IconFolderBrokenHeart2,
  default: () => folder_broken_heart2_default
});
var IconFolderBrokenHeart2, folder_broken_heart2_default;
var init_folder_broken_heart2 = __esm({
  "lib/icons/folder-broken-heart2.ts"() {
    IconFolderBrokenHeart2 = `<svg id="folder-broken-heart_2" data-name="folder-broken-heart 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,40.5v-14c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49 45 51.25 51.75 46.75 54 49 63" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49,63c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_broken_heart2_default = IconFolderBrokenHeart2;
  }
});

// lib/icons/folder-broken-heart.ts
var folder_broken_heart_exports = {};
__export(folder_broken_heart_exports, {
  IconFolderBrokenHeart: () => IconFolderBrokenHeart,
  default: () => folder_broken_heart_default
});
var IconFolderBrokenHeart, folder_broken_heart_default;
var init_folder_broken_heart = __esm({
  "lib/icons/folder-broken-heart.ts"() {
    IconFolderBrokenHeart = `<svg id="folder-broken-heart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 35 38.25 41.75 33.75 44 36 53" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,53c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_broken_heart_default = IconFolderBrokenHeart;
  }
});

// lib/icons/folder-check2.ts
var folder_check2_exports = {};
__export(folder_check2_exports, {
  IconFolderCheck2: () => IconFolderCheck2,
  default: () => folder_check2_default
});
var IconFolderCheck2, folder_check2_default;
var init_folder_check2 = __esm({
  "lib/icons/folder-check2.ts"() {
    IconFolderCheck2 = `<svg id="folder-check_2" data-name="folder-check 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,36v-9.5c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="40.5 45.64 48.21 58.5 58.5 40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_check2_default = IconFolderCheck2;
  }
});

// lib/icons/folder-check.ts
var folder_check_exports = {};
__export(folder_check_exports, {
  IconFolderCheck: () => IconFolderCheck,
  default: () => folder_check_default
});
var IconFolderCheck, folder_check_default;
var init_folder_check = __esm({
  "lib/icons/folder-check.ts"() {
    IconFolderCheck = `<svg id="folder-check" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 36.64 34.71 49.5 45 31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_check_default = IconFolderCheck;
  }
});

// lib/icons/folder-edit2.ts
var folder_edit2_exports = {};
__export(folder_edit2_exports, {
  IconFolderEdit2: () => IconFolderEdit2,
  default: () => folder_edit2_default
});
var IconFolderEdit2, folder_edit2_default;
var init_folder_edit2 = __esm({
  "lib/icons/folder-edit2.ts"() {
    IconFolderEdit2 = `<svg id="folder-edit_2" data-name="folder-edit 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,40.5v-14c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M51.14,57.03l7.36,1.47-1.47-7.36c-.08-.39-.27-.74-.55-1.02l-14.07-14.07c-.78-.78-2.05-.78-2.83,0l-3.54,3.54c-.78.78-.78,2.05,0,2.83l14.07,14.07c.28.28.63.47,1.02.55Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="39.41" y1="45.77" x2="45.77" y2="39.41" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    folder_edit2_default = IconFolderEdit2;
  }
});

// lib/icons/folder-edit.ts
var folder_edit_exports = {};
__export(folder_edit_exports, {
  IconFolderEdit: () => IconFolderEdit,
  default: () => folder_edit_default
});
var IconFolderEdit, folder_edit_default;
var init_folder_edit = __esm({
  "lib/icons/folder-edit.ts"() {
    IconFolderEdit = `<svg id="folder-edit" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M23.44,42.68l-1.47,7.36,7.36-1.47c.39-.08.74-.27,1.02-.55l14.07-14.07c.78-.78.78-2.05,0-2.83l-3.54-3.54c-.78-.78-2.05-.78-2.83,0l-14.07,14.07c-.28.28-.47.63-.55,1.02Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="34.69" y1="30.94" x2="41.06" y2="37.31" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    folder_edit_default = IconFolderEdit;
  }
});

// lib/icons/folder-exclamation-mark2.ts
var folder_exclamation_mark2_exports = {};
__export(folder_exclamation_mark2_exports, {
  IconFolderExclamationMark2: () => IconFolderExclamationMark2,
  default: () => folder_exclamation_mark2_default
});
var IconFolderExclamationMark2, folder_exclamation_mark2_default;
var init_folder_exclamation_mark2 = __esm({
  "lib/icons/folder-exclamation-mark2.ts"() {
    IconFolderExclamationMark2 = `<svg id="folder-exclamation-mark-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,36v-9.5c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="40.5" x2="49.5" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="58.5" x2="49.5" y2="58.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_exclamation_mark2_default = IconFolderExclamationMark2;
  }
});

// lib/icons/folder-exclamation-mark.ts
var folder_exclamation_mark_exports = {};
__export(folder_exclamation_mark_exports, {
  IconFolderExclamationMark: () => IconFolderExclamationMark,
  default: () => folder_exclamation_mark_default
});
var IconFolderExclamationMark, folder_exclamation_mark_default;
var init_folder_exclamation_mark = __esm({
  "lib/icons/folder-exclamation-mark.ts"() {
    IconFolderExclamationMark = `<svg id="folder-exclamation-mark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="31.5" x2="36" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="49.5" x2="36" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_exclamation_mark_default = IconFolderExclamationMark;
  }
});

// lib/icons/folder-heart2.ts
var folder_heart2_exports = {};
__export(folder_heart2_exports, {
  IconFolderHeart2: () => IconFolderHeart2,
  default: () => folder_heart2_default
});
var IconFolderHeart2, folder_heart2_default;
var init_folder_heart2 = __esm({
  "lib/icons/folder-heart2.ts"() {
    IconFolderHeart2 = `<svg id="folder-heart_2" data-name="folder-heart 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,40.5v-14c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,63c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_heart2_default = IconFolderHeart2;
  }
});

// lib/icons/folder-heart.ts
var folder_heart_exports = {};
__export(folder_heart_exports, {
  IconFolderHeart: () => IconFolderHeart,
  default: () => folder_heart_default
});
var IconFolderHeart, folder_heart_default;
var init_folder_heart = __esm({
  "lib/icons/folder-heart.ts"() {
    IconFolderHeart = `<svg id="folder-heart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,53c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_heart_default = IconFolderHeart;
  }
});

// lib/icons/folder-info2.ts
var folder_info2_exports = {};
__export(folder_info2_exports, {
  IconFolderInfo2: () => IconFolderInfo2,
  default: () => folder_info2_default
});
var IconFolderInfo2, folder_info2_default;
var init_folder_info2 = __esm({
  "lib/icons/folder-info2.ts"() {
    IconFolderInfo2 = `<svg id="folder-info-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,36v-9.5c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><polyline points="49.5 63 49.5 49.5 45 49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="40.5" x2="49.5" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    folder_info2_default = IconFolderInfo2;
  }
});

// lib/icons/folder-info.ts
var folder_info_exports = {};
__export(folder_info_exports, {
  IconFolderInfo: () => IconFolderInfo,
  default: () => folder_info_default
});
var IconFolderInfo, folder_info_default;
var init_folder_info = __esm({
  "lib/icons/folder-info.ts"() {
    IconFolderInfo = `<svg id="folder-info" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><polyline points="36 54 36 40.5 31.5 40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="31.5" x2="36" y2="31.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    folder_info_default = IconFolderInfo;
  }
});

// lib/icons/folder-invisible2.ts
var folder_invisible2_exports = {};
__export(folder_invisible2_exports, {
  IconFolderInvisible2: () => IconFolderInvisible2,
  default: () => folder_invisible2_default
});
var IconFolderInvisible2, folder_invisible2_default;
var init_folder_invisible2 = __esm({
  "lib/icons/folder-invisible2.ts"() {
    IconFolderInvisible2 = `<svg id="folder-invisible_2" data-name="folder-invisible 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,40.5v-14c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M67.5,54s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="67.5" y1="45" x2="40.5" y2="63" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_invisible2_default = IconFolderInvisible2;
  }
});

// lib/icons/folder-invisible.ts
var folder_invisible_exports = {};
__export(folder_invisible_exports, {
  IconFolderInvisible: () => IconFolderInvisible,
  default: () => folder_invisible_default
});
var IconFolderInvisible, folder_invisible_default;
var init_folder_invisible = __esm({
  "lib/icons/folder-invisible.ts"() {
    IconFolderInvisible = `<svg id="folder-invisible" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,40.5s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="31.5" x2="22.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_invisible_default = IconFolderInvisible;
  }
});

// lib/icons/folder-multiply2.ts
var folder_multiply2_exports = {};
__export(folder_multiply2_exports, {
  IconFolderMultiply2: () => IconFolderMultiply2,
  default: () => folder_multiply2_default
});
var IconFolderMultiply2, folder_multiply2_default;
var init_folder_multiply2 = __esm({
  "lib/icons/folder-multiply2.ts"() {
    IconFolderMultiply2 = `<svg id="folder-multiply_2" data-name="folder-multiply 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="45" y1="45" x2="57.73" y2="57.73" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="57.73" y1="45" x2="45" y2="57.73" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,40.5v-14c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_multiply2_default = IconFolderMultiply2;
  }
});

// lib/icons/folder-multiply.ts
var folder_multiply_exports = {};
__export(folder_multiply_exports, {
  IconFolderMultiply: () => IconFolderMultiply,
  default: () => folder_multiply_default
});
var IconFolderMultiply, folder_multiply_default;
var init_folder_multiply = __esm({
  "lib/icons/folder-multiply.ts"() {
    IconFolderMultiply = `<svg id="folder-multiply" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="29.64" y1="36" x2="42.36" y2="48.73" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.36" y1="36" x2="29.64" y2="48.73" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_multiply_default = IconFolderMultiply;
  }
});

// lib/icons/folder-question-mark2.ts
var folder_question_mark2_exports = {};
__export(folder_question_mark2_exports, {
  IconFolderQuestionMark2: () => IconFolderQuestionMark2,
  default: () => folder_question_mark2_default
});
var IconFolderQuestionMark2, folder_question_mark2_default;
var init_folder_question_mark2 = __esm({
  "lib/icons/folder-question-mark2.ts"() {
    IconFolderQuestionMark2 = `<svg id="folder-question-mark-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,36v-9.5c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="50" y1="63" x2="50" y2="63" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M44,46.5c0-3.31,2.69-6,6-6s6,2.69,6,6c0,6-6,6-6,12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    folder_question_mark2_default = IconFolderQuestionMark2;
  }
});

// lib/icons/folder-question-mark.ts
var folder_question_mark_exports = {};
__export(folder_question_mark_exports, {
  IconFolderQuestionMark: () => IconFolderQuestionMark,
  default: () => folder_question_mark_default
});
var IconFolderQuestionMark, folder_question_mark_default;
var init_folder_question_mark = __esm({
  "lib/icons/folder-question-mark.ts"() {
    IconFolderQuestionMark = `<svg id="folder-question-mark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="36" y1="52" x2="36" y2="52" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30,35.5c0-3.31,2.69-6,6-6s6,2.69,6,6c0,6-6,6-6,12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    folder_question_mark_default = IconFolderQuestionMark;
  }
});

// lib/icons/folder-search2.ts
var folder_search2_exports = {};
__export(folder_search2_exports, {
  IconFolderSearch2: () => IconFolderSearch2,
  default: () => folder_search2_default
});
var IconFolderSearch2, folder_search2_default;
var init_folder_search2 = __esm({
  "lib/icons/folder-search2.ts"() {
    IconFolderSearch2 = `<svg id="folder-search_2" data-name="folder-search 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,36v-9.5c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="63" x2="55.86" y2="55.86" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="49.5" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_search2_default = IconFolderSearch2;
  }
});

// lib/icons/folder-search.ts
var folder_search_exports = {};
__export(folder_search_exports, {
  IconFolderSearch: () => IconFolderSearch,
  default: () => folder_search_default
});
var IconFolderSearch, folder_search_default;
var init_folder_search = __esm({
  "lib/icons/folder-search.ts"() {
    IconFolderSearch = `<svg id="folder-search" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="53" x2="42.36" y2="45.86" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="39.5" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_search_default = IconFolderSearch;
  }
});

// lib/icons/folder-star2.ts
var folder_star2_exports = {};
__export(folder_star2_exports, {
  IconFolderStar2: () => IconFolderStar2,
  default: () => folder_star2_default
});
var IconFolderStar2, folder_star2_default;
var init_folder_star2 = __esm({
  "lib/icons/folder-star2.ts"() {
    IconFolderStar2 = `<svg id="folder-star_2" data-name="folder-star 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,40.5v-14c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M50.22,56.93l8.18,5.85c.39.28.91-.1.76-.56l-3.18-9.55,8.09-5.98c.39-.28.18-.9-.3-.89l-10.06.08-3.18-9.55c-.15-.45-.8-.45-.94,0l-3.04,9.59-10.06.08c-.48,0-.67.62-.28.9l8.18,5.85-3.04,9.59c-.14.46.38.83.76.55l8.09-5.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_star2_default = IconFolderStar2;
  }
});

// lib/icons/folder-star.ts
var folder_star_exports = {};
__export(folder_star_exports, {
  IconFolderStar: () => IconFolderStar,
  default: () => folder_star_default
});
var IconFolderStar, folder_star_default;
var init_folder_star = __esm({
  "lib/icons/folder-star.ts"() {
    IconFolderStar = `<svg id="folder-star" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,47.93l8.18,5.85c.39.28.91-.1.76-.56l-3.18-9.55,8.09-5.98c.39-.28.18-.9-.3-.89l-10.06.08-3.18-9.55c-.15-.45-.8-.45-.94,0l-3.04,9.59-10.06.08c-.48,0-.67.62-.28.9l8.18,5.85-3.04,9.59c-.14.46.38.83.76.55l8.09-5.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_star_default = IconFolderStar;
  }
});

// lib/icons/folder-subtract2.ts
var folder_subtract2_exports = {};
__export(folder_subtract2_exports, {
  IconFolderSubtract2: () => IconFolderSubtract2,
  default: () => folder_subtract2_default
});
var IconFolderSubtract2, folder_subtract2_default;
var init_folder_subtract2 = __esm({
  "lib/icons/folder-subtract2.ts"() {
    IconFolderSubtract2 = `<svg id="folder-subtract_2" data-name="folder-subtract 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="40.5" y1="49.5" x2="58.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,40.5v-14c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_subtract2_default = IconFolderSubtract2;
  }
});

// lib/icons/folder-subtract.ts
var folder_subtract_exports = {};
__export(folder_subtract_exports, {
  IconFolderSubtract: () => IconFolderSubtract,
  default: () => folder_subtract_default
});
var IconFolderSubtract, folder_subtract_default;
var init_folder_subtract = __esm({
  "lib/icons/folder-subtract.ts"() {
    IconFolderSubtract = `<svg id="folder-subtract" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="27" y1="40.5" x2="45" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_subtract_default = IconFolderSubtract;
  }
});

// lib/icons/folder-visible2.ts
var folder_visible2_exports = {};
__export(folder_visible2_exports, {
  IconFolderVisible2: () => IconFolderVisible2,
  default: () => folder_visible2_default
});
var IconFolderVisible2, folder_visible2_default;
var init_folder_visible2 = __esm({
  "lib/icons/folder-visible2.ts"() {
    IconFolderVisible2 = `<svg id="folder-visible_2" data-name="folder-visible 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,40.5v-14c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M67.5,54s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="54" cy="54" r="4.5" style="stroke-width: 0px;"/></svg>`;
    folder_visible2_default = IconFolderVisible2;
  }
});

// lib/icons/folder-visible.ts
var folder_visible_exports = {};
__export(folder_visible_exports, {
  IconFolderVisible: () => IconFolderVisible,
  default: () => folder_visible_default
});
var IconFolderVisible, folder_visible_default;
var init_folder_visible = __esm({
  "lib/icons/folder-visible.ts"() {
    IconFolderVisible = `<svg id="folder-visible" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,40.5s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="40.5" r="4.5" style="stroke-width: 0px;"/></svg>`;
    folder_visible_default = IconFolderVisible;
  }
});

// lib/icons/folder.ts
var folder_exports = {};
__export(folder_exports, {
  IconFolder: () => IconFolder,
  default: () => folder_default
});
var IconFolder, folder_default;
var init_folder = __esm({
  "lib/icons/folder.ts"() {
    IconFolder = `<svg id="folder" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="13.5" y1="31.5" x2="58.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,58.5h37c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4h-18.5l-3.39-6.79c-.68-1.36-2.06-2.21-3.58-2.21h-11.53c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    folder_default = IconFolder;
  }
});

// lib/icons/girl.ts
var girl_exports = {};
__export(girl_exports, {
  IconGirl: () => IconGirl,
  default: () => girl_default
});
var IconGirl, girl_default;
var init_girl = __esm({
  "lib/icons/girl.ts"() {
    IconGirl = `<svg id="girl" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.98,30.16s8.52,2.46,13.02-2.6c4.5,3.94,13.05,2.72,13.05,2.72h0c-1.53-5.78-6.79-10.03-13.05-10.03s-11.45,4.2-13.02,9.91h0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M25.71,15.48c-2.64-2.64-6.91-2.64-9.55,0-2.64,2.64-2.39,7.16-7.16,11.93,7.16,2.39,14.07.25,16.71-2.39,2.64-2.64,2.64-6.91,0-9.55Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M55.84,15.48c-2.64-2.64-6.91-2.64-9.55,0-2.64,2.64-2.64,6.91,0,9.55,2.64,2.64,9.55,4.77,16.71,2.39-4.77-4.77-4.52-9.3-7.16-11.93Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="33.75" r="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M51,61.88c0-4.97-6.72-9-15-9s-15,4.03-15,9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M25.71,15.48c-2.64-2.64-6.91-2.64-9.55,0-2.64,2.64-2.39,7.16-7.16,11.93,7.16,2.39,14.07.25,16.71-2.39,2.64-2.64,2.64-6.91,0-9.55Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M55.84,15.48c-2.64-2.64-6.91-2.64-9.55,0-2.64,2.64-2.64,6.91,0,9.55,2.64,2.64,9.55,4.77,16.71,2.39-4.77-4.77-4.52-9.3-7.16-11.93Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.98,30.16s8.52,2.46,13.02-2.6c4.5,3.94,13.05,2.72,13.05,2.72" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="36" x2="31.5" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="36" x2="40.5" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    girl_default = IconGirl;
  }
});

// lib/icons/git-branch.ts
var git_branch_exports = {};
__export(git_branch_exports, {
  IconGitBranch: () => IconGitBranch,
  default: () => git_branch_default
});
var IconGitBranch, git_branch_default;
var init_git_branch = __esm({
  "lib/icons/git-branch.ts"() {
    IconGitBranch = `<svg id="git-branch" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="22.5" cy="18" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="22.5" cy="54" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="49.5" cy="18" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="22.5" cy="18" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="22.5" cy="54" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="18" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="22.5" x2="22.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,45v-1c0-4.42,3.58-8,8-8h11c4.42,0,8-3.58,8-8v-5.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    git_branch_default = IconGitBranch;
  }
});

// lib/icons/git-compare.ts
var git_compare_exports = {};
__export(git_compare_exports, {
  IconGitCompare: () => IconGitCompare,
  default: () => git_compare_default
});
var IconGitCompare, git_compare_default;
var init_git_compare = __esm({
  "lib/icons/git-compare.ts"() {
    IconGitCompare = `<svg id="git-compare" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="51.75" cy="54" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="18" cy="18" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="51.75" cy="54" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="42.75 11.25 36 18 42.75 24.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,18h7.75c4.42,0,8,3.58,8,8v23.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="18" cy="18" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 60.75 33.75 54 27 47.25" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M33.75,54h-7.75c-4.42,0-8-3.58-8-8v-23.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    git_compare_default = IconGitCompare;
  }
});

// lib/icons/git-merge-queue.ts
var git_merge_queue_exports = {};
__export(git_merge_queue_exports, {
  IconGitMergeQueue: () => IconGitMergeQueue,
  default: () => git_merge_queue_default
});
var IconGitMergeQueue, git_merge_queue_default;
var init_git_merge_queue = __esm({
  "lib/icons/git-merge-queue.ts"() {
    IconGitMergeQueue = `<svg id="git-merge-queue" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="22.5" cy="54" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="49.5" cy="40.5" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="22.5" cy="54" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="40.5" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="27" x2="22.5" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="13.5" x2="22.5" y2="13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/><line x1="31.5" y1="22.5" x2="31.5" y2="22.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/><line x1="40.5" y1="31.5" x2="40.5" y2="31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/></svg>`;
    git_merge_queue_default = IconGitMergeQueue;
  }
});

// lib/icons/git-merge.ts
var git_merge_exports = {};
__export(git_merge_exports, {
  IconGitMerge: () => IconGitMerge,
  default: () => git_merge_default
});
var IconGitMerge, git_merge_default;
var init_git_merge = __esm({
  "lib/icons/git-merge.ts"() {
    IconGitMerge = `<svg id="git-merge" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="22.5" cy="18" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="22.5" cy="54" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="49.5" cy="36" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="22.5" cy="18" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="22.5" cy="54" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="36" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="22.5" x2="22.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,36h-9c-7.46,0-13.5-6.04-13.5-13.5h0" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    git_merge_default = IconGitMerge;
  }
});

// lib/icons/git-pull-request-closed.ts
var git_pull_request_closed_exports = {};
__export(git_pull_request_closed_exports, {
  IconGitPullRequestClosed: () => IconGitPullRequestClosed,
  default: () => git_pull_request_closed_default
});
var IconGitPullRequestClosed, git_pull_request_closed_default;
var init_git_pull_request_closed = __esm({
  "lib/icons/git-pull-request-closed.ts"() {
    IconGitPullRequestClosed = `<svg id="git-pull-request-closed" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="22.5" cy="18" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="22.5" cy="54" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="49.5" cy="54" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="22.5" cy="18" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="22.5" cy="54" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="54" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="22.5" x2="22.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="31.5" x2="49.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.75" y1="13.5" x2="56.25" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="56.25" y1="13.5" x2="42.75" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    git_pull_request_closed_default = IconGitPullRequestClosed;
  }
});

// lib/icons/git-pull-request-draft.ts
var git_pull_request_draft_exports = {};
__export(git_pull_request_draft_exports, {
  IconGitPullRequestDraft: () => IconGitPullRequestDraft,
  default: () => git_pull_request_draft_default
});
var IconGitPullRequestDraft, git_pull_request_draft_default;
var init_git_pull_request_draft = __esm({
  "lib/icons/git-pull-request-draft.ts"() {
    IconGitPullRequestDraft = `<svg id="git-pull-request-draft" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="22.5" cy="18" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="22.5" cy="54" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="49.5" cy="54" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="22.5" cy="18" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="22.5" cy="54" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="54" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="22.5" x2="22.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="40.5" x2="49.5" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/><line x1="49.5" y1="27" x2="49.5" y2="27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/><line x1="49.5" y1="13.5" x2="49.5" y2="13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/></svg>`;
    git_pull_request_draft_default = IconGitPullRequestDraft;
  }
});

// lib/icons/git-pull-request.ts
var git_pull_request_exports = {};
__export(git_pull_request_exports, {
  IconGitPullRequest: () => IconGitPullRequest,
  default: () => git_pull_request_default
});
var IconGitPullRequest, git_pull_request_default;
var init_git_pull_request = __esm({
  "lib/icons/git-pull-request.ts"() {
    IconGitPullRequest = `<svg id="git-pull-request" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="22.5" cy="18" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="22.5" cy="54" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="49.5" cy="54" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="22.5" cy="18" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="22.5" cy="54" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="54" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="22.5" x2="22.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="40.5 11.25 33.75 18 40.5 24.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M33.75,18h7.75c4.42,0,8,3.58,8,8v23.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    git_pull_request_default = IconGitPullRequest;
  }
});

// lib/icons/git-repo-fork.ts
var git_repo_fork_exports = {};
__export(git_repo_fork_exports, {
  IconGitRepoFork: () => IconGitRepoFork,
  default: () => git_repo_fork_default
});
var IconGitRepoFork, git_repo_fork_default;
var init_git_repo_fork = __esm({
  "lib/icons/git-repo-fork.ts"() {
    IconGitRepoFork = `<svg id="git-repo-fork" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="22.5" cy="18" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="54" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="49.5" cy="18" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="22.5" cy="18" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="54" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="18" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,22.5v5.5c0,4.42,3.58,8,8,8h11c4.42,0,8-3.58,8-8v-5.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    git_repo_fork_default = IconGitRepoFork;
  }
});

// lib/icons/heart-broken-small.ts
var heart_broken_small_exports = {};
__export(heart_broken_small_exports, {
  IconHeartBrokenSmall: () => IconHeartBrokenSmall,
  default: () => heart_broken_small_default
});
var IconHeartBrokenSmall, heart_broken_small_default;
var init_heart_broken_small = __esm({
  "lib/icons/heart-broken-small.ts"() {
    IconHeartBrokenSmall = `<svg id="heart-broken-small" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,49.5c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="36 31.5 38.25 38.25 33.75 40.5 36 49.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,49.5c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    heart_broken_small_default = IconHeartBrokenSmall;
  }
});

// lib/icons/heart-fat.ts
var heart_fat_exports = {};
__export(heart_fat_exports, {
  IconHeartFat: () => IconHeartFat,
  default: () => heart_fat_default
});
var IconHeartFat, heart_fat_default;
var init_heart_fat = __esm({
  "lib/icons/heart-fat.ts"() {
    IconHeartFat = `<svg id="heart-fat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,58.5C-10.77,34.02,12.62-3.19,36,21.77c23.38-24.97,46.77,12.24,0,36.73Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36,58.5C-10.77,34.02,12.62-3.19,36,21.77c23.38-24.97,46.77,12.24,0,36.73Z" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/></svg>`;
    heart_fat_default = IconHeartFat;
  }
});

// lib/icons/heart-l.ts
var heart_l_exports = {};
__export(heart_l_exports, {
  IconHeartL: () => IconHeartL,
  default: () => heart_l_default
});
var IconHeartL, heart_l_default;
var init_heart_l = __esm({
  "lib/icons/heart-l.ts"() {
    IconHeartL = `<svg id="heart-l" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,58.5C-10.77,34.02,12.62-3.19,36,21.77c23.38-24.97,46.77,12.24,0,36.73Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36,58.5C-10.77,34.02,12.62-3.19,36,21.77c23.38-24.97,46.77,12.24,0,36.73Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    heart_l_default = IconHeartL;
  }
});

// lib/icons/heart-m.ts
var heart_m_exports = {};
__export(heart_m_exports, {
  IconHeartM: () => IconHeartM,
  default: () => heart_m_default
});
var IconHeartM, heart_m_default;
var init_heart_m = __esm({
  "lib/icons/heart-m.ts"() {
    IconHeartM = `<svg id="heart-m" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,54C-1.41,34.41,17.29,4.64,36,24.62c18.71-19.97,37.41,9.79,0,29.38Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36,54C-1.41,34.41,17.29,4.64,36,24.62c18.71-19.97,37.41,9.79,0,29.38Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    heart_m_default = IconHeartM;
  }
});

// lib/icons/heart-small.ts
var heart_small_exports = {};
__export(heart_small_exports, {
  IconHeartSmall: () => IconHeartSmall,
  default: () => heart_small_default
});
var IconHeartSmall, heart_small_default;
var init_heart_small = __esm({
  "lib/icons/heart-small.ts"() {
    IconHeartSmall = `<svg id="heart-small" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,49.5c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36,49.5c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    heart_small_default = IconHeartSmall;
  }
});

// lib/icons/info-fat.ts
var info_fat_exports = {};
__export(info_fat_exports, {
  IconInfoFat: () => IconInfoFat,
  default: () => info_fat_default
});
var IconInfoFat, info_fat_default;
var init_info_fat = __esm({
  "lib/icons/info-fat.ts"() {
    IconInfoFat = `<svg id="info-fat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="36 58.5 36 31.5 27 31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/><line x1="36" y1="18" x2="36" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 8px;"/></svg>`;
    info_fat_default = IconInfoFat;
  }
});

// lib/icons/info-l.ts
var info_l_exports = {};
__export(info_l_exports, {
  IconInfoL: () => IconInfoL,
  default: () => info_l_default
});
var IconInfoL, info_l_default;
var init_info_l = __esm({
  "lib/icons/info-l.ts"() {
    IconInfoL = `<svg id="info-l" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="36 58.5 36 31.5 31.5 31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="18" x2="36" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    info_l_default = IconInfoL;
  }
});

// lib/icons/info-m.ts
var info_m_exports = {};
__export(info_m_exports, {
  IconInfoM: () => IconInfoM,
  default: () => info_m_default
});
var IconInfoM, info_m_default;
var init_info_m = __esm({
  "lib/icons/info-m.ts"() {
    IconInfoM = `<svg id="info-m" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="36 54 36 31.5 31.5 31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="22.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    info_m_default = IconInfoM;
  }
});

// lib/icons/info-s.ts
var info_s_exports = {};
__export(info_s_exports, {
  IconInfoS: () => IconInfoS,
  default: () => info_s_default
});
var IconInfoS, info_s_default;
var init_info_s = __esm({
  "lib/icons/info-s.ts"() {
    IconInfoS = `<svg id="info-s" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="36 49.5 36 31.5 31.5 31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="22.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    info_s_default = IconInfoS;
  }
});

// lib/icons/invisible-fat.ts
var invisible_fat_exports = {};
__export(invisible_fat_exports, {
  IconInvisibleFat: () => IconInvisibleFat,
  default: () => invisible_fat_default
});
var IconInvisibleFat, invisible_fat_default;
var init_invisible_fat = __esm({
  "lib/icons/invisible-fat.ts"() {
    IconInvisibleFat = `<svg id="invisible-fat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M63,36s-12.09,18-27,18-27-18-27-18c0,0,12.09-18,27-18s27,18,27,18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width: 8px;"/><path d="M63,36s-12.09,18-27,18-27-18-27-18c0,0,12.09-18,27-18s27,18,27,18Z" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/><line x1="58.5" y1="13.5" x2="13.5" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/></svg>`;
    invisible_fat_default = IconInvisibleFat;
  }
});

// lib/icons/invisible-l.ts
var invisible_l_exports = {};
__export(invisible_l_exports, {
  IconInvisibleL: () => IconInvisibleL,
  default: () => invisible_l_default
});
var IconInvisibleL, invisible_l_default;
var init_invisible_l = __esm({
  "lib/icons/invisible-l.ts"() {
    IconInvisibleL = `<svg id="invisible-l" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M63,36s-12.09,18-27,18-27-18-27-18c0,0,12.09-18,27-18s27,18,27,18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,36s-12.09,18-27,18-27-18-27-18c0,0,12.09-18,27-18s27,18,27,18Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="13.5" x2="13.5" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    invisible_l_default = IconInvisibleL;
  }
});

// lib/icons/invisible-m.ts
var invisible_m_exports = {};
__export(invisible_m_exports, {
  IconInvisibleM: () => IconInvisibleM,
  default: () => invisible_m_default
});
var IconInvisibleM, invisible_m_default;
var init_invisible_m = __esm({
  "lib/icons/invisible-m.ts"() {
    IconInvisibleM = `<svg id="invisible-m" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M56.25,36s-9.07,13.5-20.25,13.5-20.25-13.5-20.25-13.5c0,0,9.07-13.5,20.25-13.5s20.25,13.5,20.25,13.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M56.25,36s-9.07,13.5-20.25,13.5-20.25-13.5-20.25-13.5c0,0,9.07-13.5,20.25-13.5s20.25,13.5,20.25,13.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="18" x2="18" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    invisible_m_default = IconInvisibleM;
  }
});

// lib/icons/invisible-s.ts
var invisible_s_exports = {};
__export(invisible_s_exports, {
  IconInvisibleS: () => IconInvisibleS,
  default: () => invisible_s_default
});
var IconInvisibleS, invisible_s_default;
var init_invisible_s = __esm({
  "lib/icons/invisible-s.ts"() {
    IconInvisibleS = `<svg id="invisible-s" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M49.5,36s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,36s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="22.5" x2="22.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    invisible_s_default = IconInvisibleS;
  }
});

// lib/icons/key-backspace.ts
var key_backspace_exports = {};
__export(key_backspace_exports, {
  IconKeyBackspace: () => IconKeyBackspace,
  default: () => key_backspace_default
});
var IconKeyBackspace, key_backspace_default;
var init_key_backspace = __esm({
  "lib/icons/key-backspace.ts"() {
    IconKeyBackspace = `<svg id="key-backspace" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M4.5,36l17.41-17.41c.38-.38.88-.59,1.41-.59h37.67c1.1,0,2,.9,2,2v32c0,1.1-.9,2-2,2H23.33c-.53,0-1.04-.21-1.41-.59L4.5,36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="27" x2="49.5" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="27" x2="31.5" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    key_backspace_default = IconKeyBackspace;
  }
});

// lib/icons/key-delete.ts
var key_delete_exports = {};
__export(key_delete_exports, {
  IconKeyDelete: () => IconKeyDelete,
  default: () => key_delete_default
});
var IconKeyDelete, key_delete_default;
var init_key_delete = __esm({
  "lib/icons/key-delete.ts"() {
    IconKeyDelete = `<svg id="key-delete" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="18" width="35.17" height="36" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="26.17" y1="27" x2="44.17" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="44.17" y1="27" x2="26.17" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    key_delete_default = IconKeyDelete;
  }
});

// lib/icons/key-down.ts
var key_down_exports = {};
__export(key_down_exports, {
  IconKeyDown: () => IconKeyDown,
  default: () => key_down_default
});
var IconKeyDown, key_down_default;
var init_key_down = __esm({
  "lib/icons/key-down.ts"() {
    IconKeyDown = `<svg id="key-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="49.5 40.5 36 54 22.5 40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="18" x2="36" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    key_down_default = IconKeyDown;
  }
});

// lib/icons/key-eject.ts
var key_eject_exports = {};
__export(key_eject_exports, {
  IconKeyEject: () => IconKeyEject,
  default: () => key_eject_default
});
var IconKeyEject, key_eject_default;
var init_key_eject = __esm({
  "lib/icons/key-eject.ts"() {
    IconKeyEject = `<svg id="key-eject" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,36h20.09c.89,0,1.34-1.08.71-1.71l-20.79-20.79-20.79,20.79c-.63.63-.18,1.71.71,1.71h20.09Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M14,45h44v7c0,1.1-.9,2-2,2H16c-1.1,0-2-.9-2-2v-7h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    key_eject_default = IconKeyEject;
  }
});

// lib/icons/key-enter.ts
var key_enter_exports = {};
__export(key_enter_exports, {
  IconKeyEnter: () => IconKeyEnter,
  default: () => key_enter_default
});
var IconKeyEnter, key_enter_default;
var init_key_enter = __esm({
  "lib/icons/key-enter.ts"() {
    IconKeyEnter = `<svg id="key-enter" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="22.5 40.5 13.5 49.5 22.5 58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,49.5h41c2.21,0,4-1.79,4-4v-19c0-2.21-1.79-4-4-4h-9.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    key_enter_default = IconKeyEnter;
  }
});

// lib/icons/key-function.ts
var key_function_exports = {};
__export(key_function_exports, {
  IconKeyFunction: () => IconKeyFunction,
  default: () => key_function_default
});
var IconKeyFunction, key_function_default;
var init_key_function = __esm({
  "lib/icons/key-function.ts"() {
    IconKeyFunction = `<svg id="key-function" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M31.5,18h-1c-4.42,0-8,3.58-8,8v28" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="31.5" x2="36" y2="54" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,54v-13.5c0-4.97-4.03-9-9-9s-9,4.03-9,9" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="31.5" x2="27" y2="31.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    key_function_default = IconKeyFunction;
  }
});

// lib/icons/key-mac-command.ts
var key_mac_command_exports = {};
__export(key_mac_command_exports, {
  IconKeyMacCommand: () => IconKeyMacCommand,
  default: () => key_mac_command_default
});
var IconKeyMacCommand, key_mac_command_default;
var init_key_mac_command = __esm({
  "lib/icons/key-mac-command.ts"() {
    IconKeyMacCommand = `<svg id="key-mac-command" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18,9c-4.97,0-9,4.03-9,9s4.03,9,9,9h9v-9c0-4.97-4.03-9-9-9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,18c0-4.97-4.03-9-9-9s-9,4.03-9,9v9h9c4.97,0,9-4.03,9-9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,63c4.97,0,9-4.03,9-9s-4.03-9-9-9h-9v9c0,4.97,4.03,9,9,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,54c0,4.97,4.03,9,9,9s9-4.03,9-9v-9h-9c-4.97,0-9,4.03-9,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="27" y="27" width="18" height="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    key_mac_command_default = IconKeyMacCommand;
  }
});

// lib/icons/key-option.ts
var key_option_exports = {};
__export(key_option_exports, {
  IconKeyOption: () => IconKeyOption,
  default: () => key_option_default
});
var IconKeyOption, key_option_default;
var init_key_option = __esm({
  "lib/icons/key-option.ts"() {
    IconKeyOption = `<svg id="key-option" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="4.5 27 18 27 31.5 49.5 63 49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="27" x2="31.5" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    key_option_default = IconKeyOption;
  }
});

// lib/icons/key-page-down.ts
var key_page_down_exports = {};
__export(key_page_down_exports, {
  IconKeyPageDown: () => IconKeyPageDown,
  default: () => key_page_down_default
});
var IconKeyPageDown, key_page_down_default;
var init_key_page_down = __esm({
  "lib/icons/key-page-down.ts"() {
    IconKeyPageDown = `<svg id="key-page-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="49.5 36 36 49.5 22.5 36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="58.5" x2="22.5" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="13.5" x2="36" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    key_page_down_default = IconKeyPageDown;
  }
});

// lib/icons/key-page-next.ts
var key_page_next_exports = {};
__export(key_page_next_exports, {
  IconKeyPageNext: () => IconKeyPageNext,
  default: () => key_page_next_default
});
var IconKeyPageNext, key_page_next_default;
var init_key_page_next = __esm({
  "lib/icons/key-page-next.ts"() {
    IconKeyPageNext = `<svg id="key-page-next" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="36 22.5 49.5 36 36 49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="22.5" x2="58.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="36" x2="49.5" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    key_page_next_default = IconKeyPageNext;
  }
});

// lib/icons/key-page-up.ts
var key_page_up_exports = {};
__export(key_page_up_exports, {
  IconKeyPageUp: () => IconKeyPageUp,
  default: () => key_page_up_default
});
var IconKeyPageUp, key_page_up_default;
var init_key_page_up = __esm({
  "lib/icons/key-page-up.ts"() {
    IconKeyPageUp = `<svg id="key-page-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="22.5 36 36 22.5 49.5 36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="13.5" x2="49.5" y2="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="58.5" x2="36" y2="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    key_page_up_default = IconKeyPageUp;
  }
});

// lib/icons/key-previous-up.ts
var key_previous_up_exports = {};
__export(key_previous_up_exports, {
  IconKeyPreviousUp: () => IconKeyPreviousUp,
  default: () => key_previous_up_default
});
var IconKeyPreviousUp, key_previous_up_default;
var init_key_previous_up = __esm({
  "lib/icons/key-previous-up.ts"() {
    IconKeyPreviousUp = `<svg id="key-previous-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="22.5 49.5 36 36 49.5 49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="27" x2="49.5" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    key_previous_up_default = IconKeyPreviousUp;
  }
});

// lib/icons/key-shift.ts
var key_shift_exports = {};
__export(key_shift_exports, {
  IconKeyShift: () => IconKeyShift,
  default: () => key_shift_default
});
var IconKeyShift, key_shift_default;
var init_key_shift = __esm({
  "lib/icons/key-shift.ts"() {
    IconKeyShift = `<svg id="key-shift" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M11.76,36h10.74v17c0,.55.45,1,1,1h25c.55,0,1-.45,1-1v-17h10.74c.94,0,1.36-1.17.64-1.77l-24.88-20.73-24.88,20.73c-.72.6-.3,1.77.64,1.77Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    key_shift_default = IconKeyShift;
  }
});

// lib/icons/key-tab.ts
var key_tab_exports = {};
__export(key_tab_exports, {
  IconKeyTab: () => IconKeyTab,
  default: () => key_tab_default
});
var IconKeyTab, key_tab_default;
var init_key_tab = __esm({
  "lib/icons/key-tab.ts"() {
    IconKeyTab = `<svg id="key-tab" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M11.76,31.5h10.74v9h27v-9h10.74c.94,0,1.36-1.17.64-1.77l-24.88-20.73L11.12,29.73c-.72.6-.3,1.77.64,1.77Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,49.5h27v7c0,1.1-.9,2-2,2h-23c-1.1,0-2-.9-2-2v-7h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    key_tab_default = IconKeyTab;
  }
});

// lib/icons/key-up.ts
var key_up_exports = {};
__export(key_up_exports, {
  IconKeyUp: () => IconKeyUp,
  default: () => key_up_default
});
var IconKeyUp, key_up_default;
var init_key_up = __esm({
  "lib/icons/key-up.ts"() {
    IconKeyUp = `<svg id="key-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="22.5 31.5 36 18 49.5 31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="54" x2="36" y2="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    key_up_default = IconKeyUp;
  }
});

// lib/icons/like.ts
var like_exports = {};
__export(like_exports, {
  IconLike: () => IconLike,
  default: () => like_default
});
var IconLike, like_default;
var init_like = __esm({
  "lib/icons/like.ts"() {
    IconLike = `<svg id="like" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M42.12,54c1.72,0,3.25-1.1,3.79-2.74l6.33-19c.86-2.59-1.06-5.26-3.79-5.26h-13.82s5.49-9.16,5.49-9.16c1.19-1.99-.54-4.34-3.21-4.34h-.47c-1.13,0-2.2.44-2.88,1.2l-11.05,12.3h0v27h19.62Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M15.5,27h7v27h-7c-1.1,0-2-.9-2-2v-23c0-1.1.9-2,2-2Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M42.12,54c1.72,0,3.25-1.1,3.79-2.74l6.33-19c.86-2.59-1.06-5.26-3.79-5.26h-13.82s5.49-9.16,5.49-9.16c1.19-1.99-.54-4.34-3.21-4.34h-.47c-1.13,0-2.2.44-2.88,1.2l-11.05,12.3h0v27h19.62Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    like_default = IconLike;
  }
});

// lib/icons/link.ts
var link_exports = {};
__export(link_exports, {
  IconLink: () => IconLink,
  default: () => link_default
});
var IconLink, link_default;
var init_link = __esm({
  "lib/icons/link.ts"() {
    IconLink = `<svg id="link" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M32.82,39.18c5.27,5.27,10.64,2.09,15.91-3.18s8.45-10.64,3.18-15.91-10.64-2.09-15.91,3.18c-1.12,1.12-2.13,2.24-3,3.36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M39.18,32.82c-5.27-5.27-10.64-2.09-15.91,3.18s-8.45,10.64-3.18,15.91,10.64,2.09,15.91-3.18c1.12-1.12,2.13-2.24,3-3.36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    link_default = IconLink;
  }
});

// lib/icons/loader-dots2.ts
var loader_dots2_exports = {};
__export(loader_dots2_exports, {
  IconLoaderDots2: () => IconLoaderDots2,
  default: () => loader_dots2_default
});
var IconLoaderDots2, loader_dots2_default;
var init_loader_dots2 = __esm({
  "lib/icons/loader-dots2.ts"() {
    IconLoaderDots2 = `<svg id="loader-dots_2" data-name="loader-dots 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="22.5" x2="36" y2="22.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-xl, calc(var(--icon-stroke-width, 5) * 3));"/><line x1="36" y1="54" x2="36" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="20.25" y1="38.25" x2="20.25" y2="38.25" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="51.75" y1="38.25" x2="51.75" y2="38.25" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="24.86" y1="27.11" x2="24.86" y2="27.11" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.14" y1="49.39" x2="47.14" y2="49.39" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="24.86" y1="49.39" x2="24.86" y2="49.39" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.14" y1="27.11" x2="47.14" y2="27.11" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/></svg>`;
    loader_dots2_default = IconLoaderDots2;
  }
});

// lib/icons/loader-dots.ts
var loader_dots_exports = {};
__export(loader_dots_exports, {
  IconLoaderDots: () => IconLoaderDots,
  default: () => loader_dots_default
});
var IconLoaderDots, loader_dots_default;
var init_loader_dots = __esm({
  "lib/icons/loader-dots.ts"() {
    IconLoaderDots = `<svg id="loader-dots" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="22.5" x2="36" y2="22.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-xl, calc(var(--icon-stroke-width, 5) * 3));"/><line x1="36" y1="54" x2="36" y2="54" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="20.25" y1="38.25" x2="20.25" y2="38.25" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="51.75" y1="38.25" x2="51.75" y2="38.25" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="24.86" y1="27.11" x2="24.86" y2="27.11" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/><line x1="47.14" y1="49.39" x2="47.14" y2="49.39" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="24.86" y1="49.39" x2="24.86" y2="49.39" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.14" y1="27.11" x2="47.14" y2="27.11" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width: 8px;"/></svg>`;
    loader_dots_default = IconLoaderDots;
  }
});

// lib/icons/male-simplified.ts
var male_simplified_exports = {};
__export(male_simplified_exports, {
  IconMaleSimplified: () => IconMaleSimplified,
  default: () => male_simplified_default
});
var IconMaleSimplified, male_simplified_default;
var init_male_simplified = __esm({
  "lib/icons/male-simplified.ts"() {
    IconMaleSimplified = `<svg id="male-simplified" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><circle cx="35.76" cy="22.5" r="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M27,41.99c-4.61,10.09-4.3,18,9,18s14.2-8.21,9-18c-6.66-12.55-12.38-12.3-18,0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><circle cx="35.76" cy="22.5" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,41.99c-4.61,10.09-4.3,18,9,18s14.2-8.21,9-18c-6.66-12.55-12.38-12.3-18,0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    male_simplified_default = IconMaleSimplified;
  }
});

// lib/icons/moving-block.ts
var moving_block_exports = {};
__export(moving_block_exports, {
  IconMovingBlock: () => IconMovingBlock,
  default: () => moving_block_default
});
var IconMovingBlock, moving_block_default;
var init_moving_block = __esm({
  "lib/icons/moving-block.ts"() {
    IconMovingBlock = `<svg id="moving-block" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="32.27" y="23.27" width="25.46" height="25.46" rx="2" ry="2" transform="translate(-12.28 42.36) rotate(-45)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="32.27" y="23.27" width="25.46" height="25.46" rx="2" ry="2" transform="translate(-12.28 42.36) rotate(-45)" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="36" x2="18" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="49.5" x2="27" y2="49.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="22.5" x2="27" y2="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    moving_block_default = IconMovingBlock;
  }
});

// lib/icons/multiply-fat.ts
var multiply_fat_exports = {};
__export(multiply_fat_exports, {
  IconMultiplyFat: () => IconMultiplyFat,
  default: () => multiply_fat_default
});
var IconMultiplyFat, multiply_fat_default;
var init_multiply_fat = __esm({
  "lib/icons/multiply-fat.ts"() {
    IconMultiplyFat = `<svg id="multiply-fat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="20.09" y1="20.09" x2="51.91" y2="51.91" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/><line x1="20.09" y1="51.91" x2="51.91" y2="20.09" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/></svg>`;
    multiply_fat_default = IconMultiplyFat;
  }
});

// lib/icons/multiply-l.ts
var multiply_l_exports = {};
__export(multiply_l_exports, {
  IconMultiplyL: () => IconMultiplyL,
  default: () => multiply_l_default
});
var IconMultiplyL, multiply_l_default;
var init_multiply_l = __esm({
  "lib/icons/multiply-l.ts"() {
    IconMultiplyL = `<svg id="multiply-l" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="20.09" y1="20.09" x2="51.91" y2="51.91" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="20.09" y1="51.91" x2="51.91" y2="20.09" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    multiply_l_default = IconMultiplyL;
  }
});

// lib/icons/multiply-m.ts
var multiply_m_exports = {};
__export(multiply_m_exports, {
  IconMultiplyM: () => IconMultiplyM,
  default: () => multiply_m_default
});
var IconMultiplyM, multiply_m_default;
var init_multiply_m = __esm({
  "lib/icons/multiply-m.ts"() {
    IconMultiplyM = `<svg id="multiply-m" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="23.27" y1="23.27" x2="48.73" y2="48.73" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="23.27" y1="48.73" x2="48.73" y2="23.27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    multiply_m_default = IconMultiplyM;
  }
});

// lib/icons/multiply-s.ts
var multiply_s_exports = {};
__export(multiply_s_exports, {
  IconMultiplyS: () => IconMultiplyS,
  default: () => multiply_s_default
});
var IconMultiplyS, multiply_s_default;
var init_multiply_s = __esm({
  "lib/icons/multiply-s.ts"() {
    IconMultiplyS = `<svg id="multiply-s" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="26.45" y1="26.45" x2="45.55" y2="45.55" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="26.45" y1="45.55" x2="45.55" y2="26.45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    multiply_s_default = IconMultiplyS;
  }
});

// lib/icons/note-add2.ts
var note_add2_exports = {};
__export(note_add2_exports, {
  IconNoteAdd2: () => IconNoteAdd2,
  default: () => note_add2_default
});
var IconNoteAdd2, note_add2_default;
var init_note_add2 = __esm({
  "lib/icons/note-add2.ts"() {
    IconNoteAdd2 = `<svg id="note-add_2" data-name="note-add 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="12.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><line x1="40.5" y1="49.5" x2="58.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="40.5" x2="49.5" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M58.5,40.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,40.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="22.5" y1="5.5" x2="22.5" y2="19" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="5.5" x2="31.5" y2="19" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="5.5" x2="40.5" y2="19" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="5.5" x2="49.5" y2="19" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_add2_default = IconNoteAdd2;
  }
});

// lib/icons/note-add.ts
var note_add_exports = {};
__export(note_add_exports, {
  IconNoteAdd: () => IconNoteAdd,
  default: () => note_add_default
});
var IconNoteAdd, note_add_default;
var init_note_add = __esm({
  "lib/icons/note-add.ts"() {
    IconNoteAdd = `<svg id="note-add" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="12.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><line x1="27" y1="36" x2="45" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="12.5" width="45" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="5.5" x2="22.5" y2="19" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="5.5" x2="31.5" y2="19" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="5.5" x2="40.5" y2="19" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="5.5" x2="49.5" y2="19" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_add_default = IconNoteAdd;
  }
});

// lib/icons/note-broken-heart2.ts
var note_broken_heart2_exports = {};
__export(note_broken_heart2_exports, {
  IconNoteBrokenHeart2: () => IconNoteBrokenHeart2,
  default: () => note_broken_heart2_default
});
var IconNoteBrokenHeart2, note_broken_heart2_default;
var init_note_broken_heart2 = __esm({
  "lib/icons/note-broken-heart2.ts"() {
    IconNoteBrokenHeart2 = `<svg id="note-broken-heart_2" data-name="note-broken-heart 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M58.5,41.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,41.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="54 49.5 56.25 56.25 51.75 58.5 54 67.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,67.5c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_broken_heart2_default = IconNoteBrokenHeart2;
  }
});

// lib/icons/note-broken-heart.ts
var note_broken_heart_exports = {};
__export(note_broken_heart_exports, {
  IconNoteBrokenHeart: () => IconNoteBrokenHeart,
  default: () => note_broken_heart_default
});
var IconNoteBrokenHeart, note_broken_heart_default;
var init_note_broken_heart = __esm({
  "lib/icons/note-broken-heart.ts"() {
    IconNoteBrokenHeart = `<svg id="note-broken-heart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 31.5 38.25 38.25 33.75 40.5 36 49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,49.5c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_broken_heart_default = IconNoteBrokenHeart;
  }
});

// lib/icons/note-check2.ts
var note_check2_exports = {};
__export(note_check2_exports, {
  IconNoteCheck2: () => IconNoteCheck2,
  default: () => note_check2_default
});
var IconNoteCheck2, note_check2_default;
var init_note_check2 = __esm({
  "lib/icons/note-check2.ts"() {
    IconNoteCheck2 = `<svg id="note-check_2" data-name="note-check 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.41" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><polyline points="40.5 45.64 48.21 58.5 58.5 40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,36v-18.5c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_check2_default = IconNoteCheck2;
  }
});

// lib/icons/note-check.ts
var note_check_exports = {};
__export(note_check_exports, {
  IconNoteCheck: () => IconNoteCheck,
  default: () => note_check_default
});
var IconNoteCheck, note_check_default;
var init_note_check = __esm({
  "lib/icons/note-check.ts"() {
    IconNoteCheck = `<svg id="note-check" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.41" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="13.5" y="13.41" width="45" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.41" x2="22.5" y2="19.91" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.41" x2="31.5" y2="19.91" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.41" x2="40.5" y2="19.91" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.41" x2="49.5" y2="19.91" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 32.14 34.71 45 45 27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_check_default = IconNoteCheck;
  }
});

// lib/icons/note-edit2.ts
var note_edit2_exports = {};
__export(note_edit2_exports, {
  IconNoteEdit2: () => IconNoteEdit2,
  default: () => note_edit2_default
});
var IconNoteEdit2, note_edit2_default;
var init_note_edit2 = __esm({
  "lib/icons/note-edit2.ts"() {
    IconNoteEdit2 = `<svg id="note-edit_2" data-name="note-edit 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M58.5,41.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,41.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M51.14,57.03l7.36,1.47-1.47-7.36c-.08-.39-.27-.74-.55-1.02l-14.07-14.07c-.78-.78-2.05-.78-2.83,0l-3.54,3.54c-.78.78-.78,2.05,0,2.83l14.07,14.07c.28.28.63.47,1.02.55Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="39.41" y1="45.77" x2="45.77" y2="39.41" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    note_edit2_default = IconNoteEdit2;
  }
});

// lib/icons/note-edit.ts
var note_edit_exports = {};
__export(note_edit_exports, {
  IconNoteEdit: () => IconNoteEdit,
  default: () => note_edit_default
});
var IconNoteEdit, note_edit_default;
var init_note_edit = __esm({
  "lib/icons/note-edit.ts"() {
    IconNoteEdit = `<svg id="note-edit" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M23.97,42.14l-1.47,7.36,7.36-1.47c.39-.08.74-.27,1.02-.55l14.07-14.07c.78-.78.78-2.05,0-2.83l-3.54-3.54c-.78-.78-2.05-.78-2.83,0l-14.07,14.07c-.28.28-.47.63-.55,1.02Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="35.23" y1="30.41" x2="41.59" y2="36.77" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_edit_default = IconNoteEdit;
  }
});

// lib/icons/note-exclamation-mark2.ts
var note_exclamation_mark2_exports = {};
__export(note_exclamation_mark2_exports, {
  IconNoteExclamationMark2: () => IconNoteExclamationMark2,
  default: () => note_exclamation_mark2_default
});
var IconNoteExclamationMark2, note_exclamation_mark2_default;
var init_note_exclamation_mark2 = __esm({
  "lib/icons/note-exclamation-mark2.ts"() {
    IconNoteExclamationMark2 = `<svg id="note-exclamation-mark-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M58.5,36v-18.5c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,36v-18.5c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="49.5" y1="40.5" x2="49.5" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="63" x2="49.5" y2="63" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    note_exclamation_mark2_default = IconNoteExclamationMark2;
  }
});

// lib/icons/note-exclamation-mark.ts
var note_exclamation_mark_exports = {};
__export(note_exclamation_mark_exports, {
  IconNoteExclamationMark: () => IconNoteExclamationMark,
  default: () => note_exclamation_mark_default
});
var IconNoteExclamationMark, note_exclamation_mark_default;
var init_note_exclamation_mark = __esm({
  "lib/icons/note-exclamation-mark.ts"() {
    IconNoteExclamationMark = `<svg id="note-exclamation-mark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="36" y1="27" x2="36" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="49.5" x2="36" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    note_exclamation_mark_default = IconNoteExclamationMark;
  }
});

// lib/icons/note-heart2.ts
var note_heart2_exports = {};
__export(note_heart2_exports, {
  IconNoteHeart2: () => IconNoteHeart2,
  default: () => note_heart2_default
});
var IconNoteHeart2, note_heart2_default;
var init_note_heart2 = __esm({
  "lib/icons/note-heart2.ts"() {
    IconNoteHeart2 = `<svg id="note-heart_2" data-name="note-heart 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M58.5,41.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,41.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,67.5c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_heart2_default = IconNoteHeart2;
  }
});

// lib/icons/note-heart.ts
var note_heart_exports = {};
__export(note_heart_exports, {
  IconNoteHeart: () => IconNoteHeart,
  default: () => note_heart_default
});
var IconNoteHeart, note_heart_default;
var init_note_heart = __esm({
  "lib/icons/note-heart.ts"() {
    IconNoteHeart = `<svg id="note-heart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,49.5c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_heart_default = IconNoteHeart;
  }
});

// lib/icons/note-info2.ts
var note_info2_exports = {};
__export(note_info2_exports, {
  IconNoteInfo2: () => IconNoteInfo2,
  default: () => note_info2_default
});
var IconNoteInfo2, note_info2_default;
var init_note_info2 = __esm({
  "lib/icons/note-info2.ts"() {
    IconNoteInfo2 = `<svg id="note-info-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M58.5,36v-18.5c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,36v-18.5c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><polyline points="49.5 63 49.5 49.5 45 49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="40.5" x2="49.5" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    note_info2_default = IconNoteInfo2;
  }
});

// lib/icons/note-info.ts
var note_info_exports = {};
__export(note_info_exports, {
  IconNoteInfo: () => IconNoteInfo,
  default: () => note_info_default
});
var IconNoteInfo, note_info_default;
var init_note_info = __esm({
  "lib/icons/note-info.ts"() {
    IconNoteInfo = `<svg id="note-info" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><polyline points="36 49.5 36 36 31.5 36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="27" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    note_info_default = IconNoteInfo;
  }
});

// lib/icons/note-invisible2.ts
var note_invisible2_exports = {};
__export(note_invisible2_exports, {
  IconNoteInvisible2: () => IconNoteInvisible2,
  default: () => note_invisible2_default
});
var IconNoteInvisible2, note_invisible2_default;
var init_note_invisible2 = __esm({
  "lib/icons/note-invisible2.ts"() {
    IconNoteInvisible2 = `<svg id="note-invisible_2" data-name="note-invisible 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M58.5,41.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,41.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M67.5,54s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="67.5" y1="45" x2="40.5" y2="63" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_invisible2_default = IconNoteInvisible2;
  }
});

// lib/icons/note-invisible.ts
var note_invisible_exports = {};
__export(note_invisible_exports, {
  IconNoteInvisible: () => IconNoteInvisible,
  default: () => note_invisible_default
});
var IconNoteInvisible, note_invisible_default;
var init_note_invisible = __esm({
  "lib/icons/note-invisible.ts"() {
    IconNoteInvisible = `<svg id="note-invisible" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,40.5s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="31.5" x2="22.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_invisible_default = IconNoteInvisible;
  }
});

// lib/icons/note-multiply2.ts
var note_multiply2_exports = {};
__export(note_multiply2_exports, {
  IconNoteMultiply2: () => IconNoteMultiply2,
  default: () => note_multiply2_default
});
var IconNoteMultiply2, note_multiply2_default;
var init_note_multiply2 = __esm({
  "lib/icons/note-multiply2.ts"() {
    IconNoteMultiply2 = `<svg id="note-multiply_2" data-name="note-multiply 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><line x1="45" y1="45" x2="57.73" y2="57.73" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="57.73" y1="45" x2="45" y2="57.73" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,41.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_multiply2_default = IconNoteMultiply2;
  }
});

// lib/icons/note-multiply.ts
var note_multiply_exports = {};
__export(note_multiply_exports, {
  IconNoteMultiply: () => IconNoteMultiply,
  default: () => note_multiply_default
});
var IconNoteMultiply, note_multiply_default;
var init_note_multiply = __esm({
  "lib/icons/note-multiply.ts"() {
    IconNoteMultiply = `<svg id="note-multiply" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><line x1="29.64" y1="29.64" x2="42.36" y2="42.36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.36" y1="29.64" x2="29.64" y2="42.36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_multiply_default = IconNoteMultiply;
  }
});

// lib/icons/note-question-mark2.ts
var note_question_mark2_exports = {};
__export(note_question_mark2_exports, {
  IconNoteQuestionMark2: () => IconNoteQuestionMark2,
  default: () => note_question_mark2_default
});
var IconNoteQuestionMark2, note_question_mark2_default;
var init_note_question_mark2 = __esm({
  "lib/icons/note-question-mark2.ts"() {
    IconNoteQuestionMark2 = `<svg id="note-question-mark-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M58.5,36v-18.5c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,36v-18.5c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="48" y1="63" x2="48" y2="63" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M42,46.5c0-3.31,2.69-6,6-6s6,2.69,6,6c0,6-6,6-6,12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_question_mark2_default = IconNoteQuestionMark2;
  }
});

// lib/icons/note-question-mark.ts
var note_question_mark_exports = {};
__export(note_question_mark_exports, {
  IconNoteQuestionMark: () => IconNoteQuestionMark,
  default: () => note_question_mark_default
});
var IconNoteQuestionMark, note_question_mark_default;
var init_note_question_mark = __esm({
  "lib/icons/note-question-mark.ts"() {
    IconNoteQuestionMark = `<svg id="note-question-mark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="49.5" x2="36" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30,33c0-3.31,2.69-6,6-6s6,2.69,6,6c0,6-6,6-6,12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_question_mark_default = IconNoteQuestionMark;
  }
});

// lib/icons/note-search2.ts
var note_search2_exports = {};
__export(note_search2_exports, {
  IconNoteSearch2: () => IconNoteSearch2,
  default: () => note_search2_default
});
var IconNoteSearch2, note_search2_default;
var init_note_search2 = __esm({
  "lib/icons/note-search2.ts"() {
    IconNoteSearch2 = `<svg id="note-search_2" data-name="note-search 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M58.5,36v-18.5c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,36v-18.5c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="63" x2="55.86" y2="55.86" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="49.5" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_search2_default = IconNoteSearch2;
  }
});

// lib/icons/note-search.ts
var note_search_exports = {};
__export(note_search_exports, {
  IconNoteSearch: () => IconNoteSearch,
  default: () => note_search_default
});
var IconNoteSearch, note_search_default;
var init_note_search = __esm({
  "lib/icons/note-search.ts"() {
    IconNoteSearch = `<svg id="note-search" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="49.5" x2="42.36" y2="42.36" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_search_default = IconNoteSearch;
  }
});

// lib/icons/note-star2.ts
var note_star2_exports = {};
__export(note_star2_exports, {
  IconNoteStar2: () => IconNoteStar2,
  default: () => note_star2_default
});
var IconNoteStar2, note_star2_default;
var init_note_star2 = __esm({
  "lib/icons/note-star2.ts"() {
    IconNoteStar2 = `<svg id="note-star_2" data-name="note-star 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M58.5,41.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,41.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M50.22,56.93l8.18,5.85c.39.28.91-.1.76-.56l-3.18-9.55,8.09-5.98c.39-.28.18-.9-.3-.89l-10.06.08-3.18-9.55c-.15-.45-.8-.45-.94,0l-3.04,9.59-10.06.08c-.48,0-.67.62-.28.9l8.18,5.85-3.04,9.59c-.14.46.38.83.76.55l8.09-5.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_star2_default = IconNoteStar2;
  }
});

// lib/icons/note-star.ts
var note_star_exports = {};
__export(note_star_exports, {
  IconNoteStar: () => IconNoteStar,
  default: () => note_star_default
});
var IconNoteStar, note_star_default;
var init_note_star = __esm({
  "lib/icons/note-star.ts"() {
    IconNoteStar = `<svg id="note-star" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,45l8.18,5.85c.39.28.91-.1.76-.56l-3.18-9.55,8.09-5.98c.39-.28.18-.9-.3-.89l-10.06.08-3.18-9.55c-.15-.45-.8-.45-.94,0l-3.04,9.59-10.06.08c-.48,0-.67.62-.28.9l8.18,5.85-3.04,9.59c-.14.46.38.83.76.55l8.09-5.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_star_default = IconNoteStar;
  }
});

// lib/icons/note-subtract2.ts
var note_subtract2_exports = {};
__export(note_subtract2_exports, {
  IconNoteSubtract2: () => IconNoteSubtract2,
  default: () => note_subtract2_default
});
var IconNoteSubtract2, note_subtract2_default;
var init_note_subtract2 = __esm({
  "lib/icons/note-subtract2.ts"() {
    IconNoteSubtract2 = `<svg id="note-subtract_2" data-name="note-subtract 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.82" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><line x1="40.5" y1="49.5" x2="58.5" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,41.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h23" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_subtract2_default = IconNoteSubtract2;
  }
});

// lib/icons/note-subtract.ts
var note_subtract_exports = {};
__export(note_subtract_exports, {
  IconNoteSubtract: () => IconNoteSubtract,
  default: () => note_subtract_default
});
var IconNoteSubtract, note_subtract_default;
var init_note_subtract = __esm({
  "lib/icons/note-subtract.ts"() {
    IconNoteSubtract = `<svg id="note-subtract" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.82" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><line x1="27" y1="36" x2="45" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.82" width="45" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.82" x2="22.5" y2="20.32" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.82" x2="31.5" y2="20.32" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.82" x2="40.5" y2="20.32" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.82" x2="49.5" y2="20.32" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_subtract_default = IconNoteSubtract;
  }
});

// lib/icons/note-visible2.ts
var note_visible2_exports = {};
__export(note_visible2_exports, {
  IconNoteVisible2: () => IconNoteVisible2,
  default: () => note_visible2_default
});
var IconNoteVisible2, note_visible2_default;
var init_note_visible2 = __esm({
  "lib/icons/note-visible2.ts"() {
    IconNoteVisible2 = `<svg id="note-visible_2" data-name="note-visible 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M58.5,41.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,41.5v-24c0-2.21-1.79-4-4-4H17.5c-2.21,0-4,1.79-4,4v37c0,2.21,1.79,4,4,4h18.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M67.5,54s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="54" cy="54" r="4.5" style="stroke-width: 0px;"/></svg>`;
    note_visible2_default = IconNoteVisible2;
  }
});

// lib/icons/note-visible.ts
var note_visible_exports = {};
__export(note_visible_exports, {
  IconNoteVisible: () => IconNoteVisible,
  default: () => note_visible_default
});
var IconNoteVisible, note_visible_default;
var init_note_visible = __esm({
  "lib/icons/note-visible.ts"() {
    IconNoteVisible = `<svg id="note-visible" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,40.5s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="40.5" r="4.5" style="stroke-width: 0px;"/></svg>`;
    note_visible_default = IconNoteVisible;
  }
});

// lib/icons/note.ts
var note_exports = {};
__export(note_exports, {
  IconNote: () => IconNote,
  default: () => note_default
});
var IconNote, note_default;
var init_note = __esm({
  "lib/icons/note.ts"() {
    IconNote = `<svg id="note" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="6.5" x2="22.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="6.5" x2="31.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="6.5" x2="40.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.5" x2="49.5" y2="20" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    note_default = IconNote;
  }
});

// lib/icons/on-target.ts
var on_target_exports = {};
__export(on_target_exports, {
  IconOnTarget: () => IconOnTarget,
  default: () => on_target_default
});
var IconOnTarget, on_target_default;
var init_on_target = __esm({
  "lib/icons/on-target.ts"() {
    IconOnTarget = `<svg id="on-target" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M58.5,36c0,6.21-2.52,11.84-6.59,15.91-4.07,4.07-9.7,6.59-15.91,6.59s-11.84-2.52-15.91-6.59c-4.07-4.07-6.59-9.7-6.59-15.91s2.52-11.84,6.59-15.91,9.7-6.59,15.91-6.59" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,36c0,3.73-1.51,7.1-3.95,9.55s-5.82,3.95-9.55,3.95-7.1-1.51-9.55-3.95c-2.44-2.44-3.95-5.82-3.95-9.55s1.51-7.1,3.95-9.55c2.44-2.44,5.82-3.95,9.55-3.95" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,36c0,1.24-.5,2.37-1.32,3.18-.81.81-1.94,1.32-3.18,1.32s-2.37-.5-3.18-1.32-1.32-1.94-1.32-3.18.5-2.37,1.32-3.18,1.94-1.32,3.18-1.32" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="40.5 22.5 40.5 31.5 49.5 31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="13.5" x2="40.5" y2="31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    on_target_default = IconOnTarget;
  }
});

// lib/icons/paragraph.ts
var paragraph_exports = {};
__export(paragraph_exports, {
  IconParagraph: () => IconParagraph,
  default: () => paragraph_default
});
var IconParagraph, paragraph_default;
var init_paragraph = __esm({
  "lib/icons/paragraph.ts"() {
    IconParagraph = `<svg id="paragraph" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="49.5" y1="58.5" x2="49.5" y2="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="58.5" x2="40.5" y2="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,45h-10.12c-8.7,0-15.75-7.05-15.75-15.75s7.05-15.75,15.75-15.75h23.62" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    paragraph_default = IconParagraph;
  }
});

// lib/icons/performance2.ts
var performance2_exports = {};
__export(performance2_exports, {
  IconPerformance2: () => IconPerformance2,
  default: () => performance2_default
});
var IconPerformance2, performance2_default;
var init_performance2 = __esm({
  "lib/icons/performance2.ts"() {
    IconPerformance2 = `<svg id="performance_2" data-name="performance 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M59.38,54c2.3-3.97,3.62-8.58,3.62-13.5,0-14.91-12.09-27-27-27s-27,12.09-27,27c0,4.92,1.32,9.53,3.62,13.5h46.76Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.2,38.4l-4.2-29.4-4.2,29.4c-.19,1.32.26,2.66,1.2,3.6h0c1.66,1.66,4.34,1.66,6,0h0c.94-.94,1.39-2.28,1.2-3.6Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M27.6,14.83c-10.8,3.53-18.6,13.69-18.6,25.67,0,4.92,1.32,9.53,3.62,13.5h46.76c2.3-3.97,3.62-8.58,3.62-13.5,0-11.98-7.8-22.14-18.6-25.67" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.2,38.4l-4.2-29.4-4.2,29.4c-.19,1.32.26,2.66,1.2,3.6h0c1.66,1.66,4.34,1.66,6,0h0c.94-.94,1.39-2.28,1.2-3.6Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="67.5" y1="40.5" x2="58.5" y2="40.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="40.5" x2="4.5" y2="40.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.73" y1="18.23" x2="20.09" y2="24.59" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.27" y1="18.23" x2="51.91" y2="24.59" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="9" x2="36" y2="18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    performance2_default = IconPerformance2;
  }
});

// lib/icons/performance.ts
var performance_exports = {};
__export(performance_exports, {
  IconPerformance: () => IconPerformance,
  default: () => performance_default
});
var IconPerformance, performance_default;
var init_performance = __esm({
  "lib/icons/performance.ts"() {
    IconPerformance = `<svg id="performance" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M59.38,54c2.3-3.97,3.62-8.58,3.62-13.5,0-14.91-12.09-27-27-27s-27,12.09-27,27c0,4.92,1.32,9.53,3.62,13.5h46.76Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.2,38.4l-4.2-29.4-4.2,29.4c-.19,1.32.26,2.66,1.2,3.6h0c1.66,1.66,4.34,1.66,6,0h0c.94-.94,1.39-2.28,1.2-3.6Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M27.6,14.83c-10.8,3.53-18.6,13.69-18.6,25.67,0,4.92,1.32,9.53,3.62,13.5h46.76c2.3-3.97,3.62-8.58,3.62-13.5,0-11.98-7.8-22.14-18.6-25.67" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.2,38.4l-4.2-29.4-4.2,29.4c-.19,1.32.26,2.66,1.2,3.6h0c1.66,1.66,4.34,1.66,6,0h0c.94-.94,1.39-2.28,1.2-3.6Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    performance_default = IconPerformance;
  }
});

// lib/icons/pin-tilted.ts
var pin_tilted_exports = {};
__export(pin_tilted_exports, {
  IconPinTilted: () => IconPinTilted,
  default: () => pin_tilted_default
});
var IconPinTilted, pin_tilted_default;
var init_pin_tilted = __esm({
  "lib/icons/pin-tilted.ts"() {
    IconPinTilted = `<svg id="pin-tilted" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M43.73,37.82l12.73-12.73-9.55-9.55-12.73,12.73c-5.55-1.97-11.97-.75-16.41,3.69l22.27,22.27c4.44-4.44,5.66-10.87,3.69-16.41Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><line x1="29.41" y1="42.59" x2="13.5" y2="58.5" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="42.14" y1="10.77" x2="61.23" y2="29.86" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M43.73,37.82l12.73-12.73-9.55-9.55-12.73,12.73c-5.55-1.97-11.97-.75-16.41,3.69l22.27,22.27c4.44-4.44,5.66-10.87,3.69-16.41Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    pin_tilted_default = IconPinTilted;
  }
});

// lib/icons/pin.ts
var pin_exports = {};
__export(pin_exports, {
  IconPin: () => IconPin,
  default: () => pin_default
});
var IconPin, pin_default;
var init_pin = __esm({
  "lib/icons/pin.ts"() {
    IconPin = `<svg id="pin" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M42.75,31.5V13.5h-13.5v18c-5.32,2.53-9,7.93-9,14.21h31.5c0-6.28-3.68-11.68-9-14.21Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><line x1="36" y1="45" x2="36" y2="67.5" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="22.5" y1="13.5" x2="49.5" y2="13.5" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M42.75,31.5V13.5h-13.5v18c-5.32,2.53-9,7.93-9,14.21h31.5c0-6.28-3.68-11.68-9-14.21Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    pin_default = IconPin;
  }
});

// lib/icons/planner.ts
var planner_exports = {};
__export(planner_exports, {
  IconPlanner: () => IconPlanner,
  default: () => planner_default
});
var IconPlanner, planner_default;
var init_planner = __esm({
  "lib/icons/planner.ts"() {
    IconPlanner = `<svg id="planner" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 72 72"><defs><clipPath id="clippath"><rect x="9" y="13.5" width="54" height="49.5" rx="4" ry="4" style="fill: none; stroke-width: 0px;"/></clipPath></defs><g style="clip-path: url(#clippath);"><g><rect x="4.5" y="22.5" width="18" height="9" rx="1" ry="1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="18" y="40.5" width="13.5" height="9" rx="1" ry="1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="-4.5" y="40.5" width="13.5" height="9" rx="1" ry="1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="40.5" y="22.5" width="13.5" height="9" rx="1" ry="1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="40.5" y="54" width="27" height="9" rx="1" ry="1" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="4.5" y="22.5" width="18" height="9" rx="1" ry="1" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="40.5" width="13.5" height="9" rx="1" ry="1" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="72" y="40.5" width="13.5" height="9" rx="1" ry="1" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="-4.5" y="40.5" width="13.5" height="9" rx="1" ry="1" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="40.5" y="22.5" width="13.5" height="9" rx="1" ry="1" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="40.5" y="54" width="27" height="9" rx="1" ry="1" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></g><rect x="9" y="13.5" width="54" height="49.5" rx="4" ry="4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="9" x2="18" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="9" x2="36" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="9" x2="27" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="9" x2="45" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="9" x2="54" y2="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    planner_default = IconPlanner;
  }
});

// lib/icons/pointer-arrow-line.ts
var pointer_arrow_line_exports = {};
__export(pointer_arrow_line_exports, {
  IconPointerArrowLine: () => IconPointerArrowLine,
  default: () => pointer_arrow_line_default
});
var IconPointerArrowLine, pointer_arrow_line_default;
var init_pointer_arrow_line = __esm({
  "lib/icons/pointer-arrow-line.ts"() {
    IconPointerArrowLine = `<svg id="pointer-arrow-line" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="13.5 13.5 36 63 45 45 63 36 13.5 13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="45" y1="45" x2="13.5" y2="13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="45" x2="63" y2="36" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="45" y1="45" x2="63" y2="36" style="fill: red; stroke-width: 0px;"/><polygon points="13.5 13.5 36 63 45 45 63 36 13.5 13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    pointer_arrow_line_default = IconPointerArrowLine;
  }
});

// lib/icons/pointer-arrow.ts
var pointer_arrow_exports = {};
__export(pointer_arrow_exports, {
  IconPointerArrow: () => IconPointerArrow,
  default: () => pointer_arrow_default
});
var IconPointerArrow, pointer_arrow_default;
var init_pointer_arrow = __esm({
  "lib/icons/pointer-arrow.ts"() {
    IconPointerArrow = `<svg id="pointer-arrow" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="9 13.5 31.5 63 40.5 45 58.5 36 9 13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polygon points="9 13.5 31.5 63 40.5 45 58.5 36 9 13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    pointer_arrow_default = IconPointerArrow;
  }
});

// lib/icons/pointer-cross.ts
var pointer_cross_exports = {};
__export(pointer_cross_exports, {
  IconPointerCross: () => IconPointerCross,
  default: () => pointer_cross_default
});
var IconPointerCross, pointer_cross_default;
var init_pointer_cross = __esm({
  "lib/icons/pointer-cross.ts"() {
    IconPointerCross = `<svg id="pointer-cross" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="9" x2="36" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="40.5" x2="36" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="36" x2="31.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="36" x2="63" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    pointer_cross_default = IconPointerCross;
  }
});

// lib/icons/pointer-hand.ts
var pointer_hand_exports = {};
__export(pointer_hand_exports, {
  IconPointerHand: () => IconPointerHand,
  default: () => pointer_hand_default
});
var IconPointerHand, pointer_hand_default;
var init_pointer_hand = __esm({
  "lib/icons/pointer-hand.ts"() {
    IconPointerHand = `<svg id="pointer-hand" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54,36c-2.49,0-4.5,2.01-4.5,4.5h0v-4.5c0-2.49-2.01-4.5-4.5-4.5s-4.5,2.01-4.5,4.5v4.5-9c0-2.49-2.01-4.5-4.5-4.5s-4.5,2.01-4.5,4.5v9V13.5c0-2.49-2.01-4.5-4.5-4.5s-4.5,2.01-4.5,4.5v31.5l-9-9-4.5,4.15s4.5,13.85,18,27.35h22.5s9-9,9-22.5v-4.5c0-2.49-2.01-4.5-4.5-4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M54,36c-2.49,0-4.5,2.01-4.5,4.5h0v-4.5c0-2.49-2.01-4.5-4.5-4.5s-4.5,2.01-4.5,4.5v4.5-9c0-2.49-2.01-4.5-4.5-4.5s-4.5,2.01-4.5,4.5v9V13.5c0-2.49-2.01-4.5-4.5-4.5s-4.5,2.01-4.5,4.5v31.5l-9-9-4.5,4.15s4.5,13.85,18,27.35h22.5s9-9,9-22.5v-4.5c0-2.49-2.01-4.5-4.5-4.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    pointer_hand_default = IconPointerHand;
  }
});

// lib/icons/pointer-left.ts
var pointer_left_exports = {};
__export(pointer_left_exports, {
  IconPointerLeft: () => IconPointerLeft,
  default: () => pointer_left_default
});
var IconPointerLeft, pointer_left_default;
var init_pointer_left = __esm({
  "lib/icons/pointer-left.ts"() {
    IconPointerLeft = `<svg id="pointer-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="13.5 13.5 31.5 58.5 39 43.5 54 58.5 58.5 54 43.5 39 58.5 31.5 13.5 13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polygon points="13.5 13.5 31.5 58.5 39 43.5 54 58.5 58.5 54 43.5 39 58.5 31.5 13.5 13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    pointer_left_default = IconPointerLeft;
  }
});

// lib/icons/pointer-mouse.ts
var pointer_mouse_exports = {};
__export(pointer_mouse_exports, {
  IconPointerMouse: () => IconPointerMouse,
  default: () => pointer_mouse_default
});
var IconPointerMouse, pointer_mouse_default;
var init_pointer_mouse = __esm({
  "lib/icons/pointer-mouse.ts"() {
    IconPointerMouse = `<svg id="pointer-mouse" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,18c-8.13,0-14.73,6.59-14.73,14.73v15.55c0,8.13,6.59,14.73,14.73,14.73s14.73-6.59,14.73-14.73v-15.55c0-8.13-6.59-14.73-14.73-14.73Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="22.5" y1="36" x2="49.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="4.5" x2="36" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,18c-8.13,0-14.73,6.59-14.73,14.73v15.55c0,8.13,6.59,14.73,14.73,14.73s14.73-6.59,14.73-14.73v-15.55c0-8.13-6.59-14.73-14.73-14.73Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    pointer_mouse_default = IconPointerMouse;
  }
});

// lib/icons/pointer-pen.ts
var pointer_pen_exports = {};
__export(pointer_pen_exports, {
  IconPointerPen: () => IconPointerPen,
  default: () => pointer_pen_default
});
var IconPointerPen, pointer_pen_default;
var init_pointer_pen = __esm({
  "lib/icons/pointer-pen.ts"() {
    IconPointerPen = `<svg id="pointer-pen" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,9l-15.55,27.21c-1.5,2.63-1.39,5.89.29,8.41l6.26,9.39h18l6.26-9.39c1.68-2.52,1.79-5.78.29-8.41l-15.55-27.21Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="36" y1="36" x2="36" y2="9" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,9l-15.55,27.21c-1.5,2.63-1.39,5.89.29,8.41l6.26,9.39h18l6.26-9.39c1.68-2.52,1.79-5.78.29-8.41l-15.55-27.21Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,54h18v7c0,1.1-.9,2-2,2h-14c-1.1,0-2-.9-2-2v-7h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    pointer_pen_default = IconPointerPen;
  }
});

// lib/icons/pointer-text.ts
var pointer_text_exports = {};
__export(pointer_text_exports, {
  IconPointerText: () => IconPointerText,
  default: () => pointer_text_default
});
var IconPointerText, pointer_text_default;
var init_pointer_text = __esm({
  "lib/icons/pointer-text.ts"() {
    IconPointerText = `<svg id="pointer-text" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,18c0-4.97-4.03-9-9-9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,9c-4.97,0-9,4.03-9,9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,54c0,4.97,4.03,9,9,9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,63c4.97,0,9-4.03,9-9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="18" x2="36" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="36" x2="40.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    pointer_text_default = IconPointerText;
  }
});

// lib/icons/question-mark-fat.ts
var question_mark_fat_exports = {};
__export(question_mark_fat_exports, {
  IconQuestionMarkFat: () => IconQuestionMarkFat,
  default: () => question_mark_fat_default
});
var IconQuestionMarkFat, question_mark_fat_default;
var init_question_mark_fat = __esm({
  "lib/icons/question-mark-fat.ts"() {
    IconQuestionMarkFat = `<svg id="question-mark-fat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="54" x2="36" y2="54" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width: 8px;"/><path d="M25.5,24c0-5.8,4.7-10.5,10.5-10.5s10.5,4.7,10.5,10.5c0,10.5-10.5,10.5-10.5,21" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/></svg>`;
    question_mark_fat_default = IconQuestionMarkFat;
  }
});

// lib/icons/question-mark-l.ts
var question_mark_l_exports = {};
__export(question_mark_l_exports, {
  IconQuestionMarkL: () => IconQuestionMarkL,
  default: () => question_mark_l_default
});
var IconQuestionMarkL, question_mark_l_default;
var init_question_mark_l = __esm({
  "lib/icons/question-mark-l.ts"() {
    IconQuestionMarkL = `<svg id="question-mark-l" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="54" x2="36" y2="54" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M25.5,24c0-5.8,4.7-10.5,10.5-10.5s10.5,4.7,10.5,10.5c0,10.5-10.5,10.5-10.5,21" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    question_mark_l_default = IconQuestionMarkL;
  }
});

// lib/icons/question-mark-m.ts
var question_mark_m_exports = {};
__export(question_mark_m_exports, {
  IconQuestionMarkM: () => IconQuestionMarkM,
  default: () => question_mark_m_default
});
var IconQuestionMarkM, question_mark_m_default;
var init_question_mark_m = __esm({
  "lib/icons/question-mark-m.ts"() {
    IconQuestionMarkM = `<svg id="question-mark-m" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="54" x2="36" y2="54" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M28.5,30c0-4.14,3.36-7.5,7.5-7.5s7.5,3.36,7.5,7.5c0,7.5-7.5,7.5-7.5,15" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    question_mark_m_default = IconQuestionMarkM;
  }
});

// lib/icons/question-mark-s.ts
var question_mark_s_exports = {};
__export(question_mark_s_exports, {
  IconQuestionMarkS: () => IconQuestionMarkS,
  default: () => question_mark_s_default
});
var IconQuestionMarkS, question_mark_s_default;
var init_question_mark_s = __esm({
  "lib/icons/question-mark-s.ts"() {
    IconQuestionMarkS = `<svg id="question-mark-s" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="49.5" x2="36" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30,33c0-3.31,2.69-6,6-6s6,2.69,6,6c0,6-6,6-6,12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    question_mark_s_default = IconQuestionMarkS;
  }
});

// lib/icons/remove-lines.ts
var remove_lines_exports = {};
__export(remove_lines_exports, {
  IconRemoveLines: () => IconRemoveLines,
  default: () => remove_lines_default
});
var IconRemoveLines, remove_lines_default;
var init_remove_lines = __esm({
  "lib/icons/remove-lines.ts"() {
    IconRemoveLines = `<svg id="remove-lines" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="54" x2="40.5" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="30" x2="13.5" y2="30" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="42" x2="40.5" y2="42" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.64" y1="55.86" x2="60.36" y2="43.14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.64" y1="43.14" x2="60.36" y2="55.86" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    remove_lines_default = IconRemoveLines;
  }
});

// lib/icons/search-fat.ts
var search_fat_exports = {};
__export(search_fat_exports, {
  IconSearchFat: () => IconSearchFat,
  default: () => search_fat_default
});
var IconSearchFat, search_fat_default;
var init_search_fat = __esm({
  "lib/icons/search-fat.ts"() {
    IconSearchFat = `<svg id="search-fat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="58.5" y1="58.5" x2="44.23" y2="44.23" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width: 8px;"/><circle cx="31.5" cy="31.5" r="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="31.5" cy="31.5" r="18" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/></svg>`;
    search_fat_default = IconSearchFat;
  }
});

// lib/icons/search-l.ts
var search_l_exports = {};
__export(search_l_exports, {
  IconSearchL: () => IconSearchL,
  default: () => search_l_default
});
var IconSearchL, search_l_default;
var init_search_l = __esm({
  "lib/icons/search-l.ts"() {
    IconSearchL = `<svg id="search-l" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="58.5" y1="58.5" x2="44.23" y2="44.23" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="31.5" cy="31.5" r="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="31.5" cy="31.5" r="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    search_l_default = IconSearchL;
  }
});

// lib/icons/search-m.ts
var search_m_exports = {};
__export(search_m_exports, {
  IconSearchM: () => IconSearchM,
  default: () => search_m_default
});
var IconSearchM, search_m_default;
var init_search_m = __esm({
  "lib/icons/search-m.ts"() {
    IconSearchM = `<svg id="search-m" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="54" y1="54" x2="42.58" y2="42.58" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="32.4" cy="32.4" r="14.4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="32.4" cy="32.4" r="14.4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    search_m_default = IconSearchM;
  }
});

// lib/icons/search-small.ts
var search_small_exports = {};
__export(search_small_exports, {
  IconSearchSmall: () => IconSearchSmall,
  default: () => search_small_default
});
var IconSearchSmall, search_small_default;
var init_search_small = __esm({
  "lib/icons/search-small.ts"() {
    IconSearchSmall = `<svg id="search-small" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="49.5" y1="49.5" x2="40.94" y2="40.94" style="fill: white; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="33.3" cy="33.3" r="10.8" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="33.3" cy="33.3" r="10.8" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    search_small_default = IconSearchSmall;
  }
});

// lib/icons/section.ts
var section_exports = {};
__export(section_exports, {
  IconSection: () => IconSection,
  default: () => section_default
});
var IconSection, section_default;
var init_section = __esm({
  "lib/icons/section.ts"() {
    IconSection = `<svg id="section" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M54.5,13.5h-14v2.5c0,1.1-.9,2-2,2H13.5v36.5c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V17.5c0-2.21-1.79-4-4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M40.5,13.5h14c2.21,0,4,1.79,4,4v37c0,2.21-1.79,4-4,4H17.5c-2.21,0-4-1.79-4-4V18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="9" y="9" width="31.5" height="9" rx="2" ry="2" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    section_default = IconSection;
  }
});

// lib/icons/settings2.ts
var settings2_exports = {};
__export(settings2_exports, {
  IconSettings2: () => IconSettings2,
  default: () => settings2_default
});
var IconSettings2, settings2_default;
var init_settings2 = __esm({
  "lib/icons/settings2.ts"() {
    IconSettings2 = `<svg id="settings_2" data-name="settings 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="24.75" cy="22.5" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="47.25" cy="49.5" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="40.5" y1="49.5" x2="9" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="22.5" x2="31.5" y2="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="22.5" x2="9" y2="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="49.5" x2="54" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="24.75" cy="22.5" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="47.25" cy="49.5" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    settings2_default = IconSettings2;
  }
});

// lib/icons/settings3.ts
var settings3_exports = {};
__export(settings3_exports, {
  IconSettings3: () => IconSettings3,
  default: () => settings3_default
});
var IconSettings3, settings3_default;
var init_settings3 = __esm({
  "lib/icons/settings3.ts"() {
    IconSettings3 = `<svg id="settings_3" data-name="settings 3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="29.25" cy="22.5" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="42.75" cy="49.5" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="31.5" y1="49.5" x2="9" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="22.5" x2="40.5" y2="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="22.5" x2="9" y2="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="49.5" x2="54" y2="49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="29.25" cy="22.5" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="42.75" cy="49.5" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    settings3_default = IconSettings3;
  }
});

// lib/icons/settings4.ts
var settings4_exports = {};
__export(settings4_exports, {
  IconSettings4: () => IconSettings4,
  default: () => settings4_default
});
var IconSettings4, settings4_default;
var init_settings4 = __esm({
  "lib/icons/settings4.ts"() {
    IconSettings4 = `<svg id="settings_4" data-name="settings 4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="24.75" cy="18" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="47.25" cy="36" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="33.75" cy="54" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="36" y1="36" x2="9" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="18" x2="36" y2="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="18" x2="9" y2="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="36" x2="58.5" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="54" x2="45" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="54" x2="9" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="24.75" cy="18" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="47.25" cy="36" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="33.75" cy="54" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    settings4_default = IconSettings4;
  }
});

// lib/icons/settings5.ts
var settings5_exports = {};
__export(settings5_exports, {
  IconSettings5: () => IconSettings5,
  default: () => settings5_default
});
var IconSettings5, settings5_default;
var init_settings5 = __esm({
  "lib/icons/settings5.ts"() {
    IconSettings5 = `<svg id="settings_5" data-name="settings 5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="9" y1="54" x2="63" y2="54" style="fill: none;  stroke-dasharray: 0 0 32 22; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><circle cx="51.75" cy="54" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="51.75" cy="54" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="9" y1="36" x2="63" y2="36" style="fill: none;  stroke-dasharray: 0 0 32 22; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><circle cx="51.75" cy="36" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="51.75" cy="36" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="9" y1="18" x2="63" y2="18" style="fill: none;  stroke-dasharray: 0 0 32 22; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><circle cx="51.75" cy="18" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="51.75" cy="18" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    settings5_default = IconSettings5;
  }
});

// lib/icons/settings.ts
var settings_exports = {};
__export(settings_exports, {
  IconSettings: () => IconSettings,
  default: () => settings_default
});
var IconSettings, settings_default;
var init_settings = __esm({
  "lib/icons/settings.ts"() {
    IconSettings = `<svg id="settings" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="20.25" cy="18" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="51.75" cy="36" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="33.75" cy="54" r="6.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="45" y1="36" x2="9" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="18" x2="27" y2="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="18" x2="9" y2="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="36" x2="58.5" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="54" x2="40.5" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="54" x2="9" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="20.25" cy="18" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="51.75" cy="36" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="33.75" cy="54" r="6.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    settings_default = IconSettings;
  }
});

// lib/icons/speech-balloon2.ts
var speech_balloon2_exports = {};
__export(speech_balloon2_exports, {
  IconSpeechBalloon2: () => IconSpeechBalloon2,
  default: () => speech_balloon2_default
});
var IconSpeechBalloon2, speech_balloon2_default;
var init_speech_balloon2 = __esm({
  "lib/icons/speech-balloon2.ts"() {
    IconSpeechBalloon2 = `<svg id="speech-balloon-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M63,30.6c0-14.91-12.09-21.6-27-21.6S9,15.69,9,30.6s12.09,21.6,27,21.6c1.63,0,3.22-.08,4.77-.25l9.74,9.74c.86.86,2.34.25,2.34-.97v-12.32c6.18-3.43,10.15-9.27,10.15-17.81Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M63,30.6c0-14.91-12.09-21.6-27-21.6S9,15.69,9,30.6s12.09,21.6,27,21.6c1.63,0,3.22-.08,4.77-.25l9.74,9.74c.86.86,2.34.25,2.34-.97v-12.32c6.18-3.43,10.15-9.27,10.15-17.81Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    speech_balloon2_default = IconSpeechBalloon2;
  }
});

// lib/icons/speech-balloon-square2.ts
var speech_balloon_square2_exports = {};
__export(speech_balloon_square2_exports, {
  IconSpeechBalloonSquare2: () => IconSpeechBalloonSquare2,
  default: () => speech_balloon_square2_default
});
var IconSpeechBalloonSquare2, speech_balloon_square2_default;
var init_speech_balloon_square2 = __esm({
  "lib/icons/speech-balloon-square2.ts"() {
    IconSpeechBalloonSquare2 = `<svg id="speech-balloon-square_2" data-name="speech-balloon-square 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54.5,13.5H17.5c-2.21,0-4,1.79-4,4v28c0,2.21,1.79,4,4,4h23l9,9v-9h5c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M54.5,13.5H17.5c-2.21,0-4,1.79-4,4v28c0,2.21,1.79,4,4,4h23l9,9v-9h5c2.21,0,4-1.79,4-4v-28c0-2.21-1.79-4-4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    speech_balloon_square2_default = IconSpeechBalloonSquare2;
  }
});

// lib/icons/speech-balloon-square-copy.ts
var speech_balloon_square_copy_exports = {};
__export(speech_balloon_square_copy_exports, {
  IconSpeechBalloonSquareCopy: () => IconSpeechBalloonSquareCopy,
  default: () => speech_balloon_square_copy_default
});
var IconSpeechBalloonSquareCopy, speech_balloon_square_copy_default;
var init_speech_balloon_square_copy = __esm({
  "lib/icons/speech-balloon-square-copy.ts"() {
    IconSpeechBalloonSquareCopy = `<svg id="speech-balloon-square_copy" data-name="speech-balloon-square copy" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54.5,22.5h-28c-2.21,0-4,1.79-4,4v19c0,2.21,1.79,4,4,4h14s9,9,9,9v-9h5c2.21,0,4-1.79,4-4v-19c0-2.21-1.79-4-4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M23.67,48.33c.72.72,1.72,1.17,2.83,1.17h14s9,9,9,9v-9h5c2.21,0,4-1.79,4-4v-19c0-2.21-1.79-4-4-4h-5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,13.5h28c2.21,0,4,1.79,4,4v19c0,2.21-1.79,4-4,4h-14s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-19c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,13.5h28c2.21,0,4,1.79,4,4v19c0,2.21-1.79,4-4,4h-14s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-19c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    speech_balloon_square_copy_default = IconSpeechBalloonSquareCopy;
  }
});

// lib/icons/speech-balloon-square-text.ts
var speech_balloon_square_text_exports = {};
__export(speech_balloon_square_text_exports, {
  IconSpeechBalloonSquareText: () => IconSpeechBalloonSquareText,
  default: () => speech_balloon_square_text_default
});
var IconSpeechBalloonSquareText, speech_balloon_square_text_default;
var init_speech_balloon_square_text = __esm({
  "lib/icons/speech-balloon-square-text.ts"() {
    IconSpeechBalloonSquareText = `<svg id="speech-balloon-square-text" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="22.5" x2="49.5" y2="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="31.5" x2="49.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="40.5" x2="49.5" y2="40.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    speech_balloon_square_text_default = IconSpeechBalloonSquareText;
  }
});

// lib/icons/speech-balloon-square.ts
var speech_balloon_square_exports = {};
__export(speech_balloon_square_exports, {
  IconSpeechBalloonSquare: () => IconSpeechBalloonSquare,
  default: () => speech_balloon_square_default
});
var IconSpeechBalloonSquare, speech_balloon_square_default;
var init_speech_balloon_square = __esm({
  "lib/icons/speech-balloon-square.ts"() {
    IconSpeechBalloonSquare = `<svg id="speech-balloon-square" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    speech_balloon_square_default = IconSpeechBalloonSquare;
  }
});

// lib/icons/speech-balloon.ts
var speech_balloon_exports = {};
__export(speech_balloon_exports, {
  IconSpeechBalloon: () => IconSpeechBalloon,
  default: () => speech_balloon_default
});
var IconSpeechBalloon, speech_balloon_default;
var init_speech_balloon = __esm({
  "lib/icons/speech-balloon.ts"() {
    IconSpeechBalloon = `<svg id="speech-balloon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M9,31.5c0-14.91,12.09-21.6,27-21.6,14.91,0,27,6.69,27,21.6s-12.09,21.6-27,21.6c-1.63,0-3.22-.08-4.77-.25l-9.74,9.74c-.86.86-2.34.25-2.34-.97v-12.32c-6.18-3.43-10.15-9.27-10.15-17.81Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M9,31.5c0-14.91,12.09-21.6,27-21.6,14.91,0,27,6.69,27,21.6s-12.09,21.6-27,21.6c-1.63,0-3.22-.08-4.77-.25l-9.74,9.74c-.86.86-2.34.25-2.34-.97v-12.32c-6.18-3.43-10.15-9.27-10.15-17.81Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    speech_balloon_default = IconSpeechBalloon;
  }
});

// lib/icons/speech-balloons.ts
var speech_balloons_exports = {};
__export(speech_balloons_exports, {
  IconSpeechBalloons: () => IconSpeechBalloons,
  default: () => speech_balloons_default
});
var IconSpeechBalloons, speech_balloons_default;
var init_speech_balloons = __esm({
  "lib/icons/speech-balloons.ts"() {
    IconSpeechBalloons = `<svg id="speech-balloons" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M63,40.5c0-11.18-9.07-16.2-20.25-16.2s-20.25,5.02-20.25,16.2,9.07,16.2,20.25,16.2c2.98,0,5.8-.37,8.35-1.1l5.7,5.7c.63.63,1.71.18,1.71-.71v-8.98c2.81-2.62,4.5-6.29,4.5-11.11Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M49.16,24.92c-1.71-8.74-9.97-12.71-19.91-12.71-11.18,0-20.25,5.02-20.25,16.2,0,4.82,1.69,8.49,4.5,11.11v8.98c0,.89,1.08,1.34,1.71.71l5.7-5.7c.63.18,1.28.34,1.94.48" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,40.5c0-11.18-9.07-16.2-20.25-16.2s-20.25,5.02-20.25,16.2,9.07,16.2,20.25,16.2c2.98,0,5.8-.37,8.35-1.1l5.7,5.7c.63.63,1.71.18,1.71-.71v-8.98c2.81-2.62,4.5-6.29,4.5-11.11Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    speech_balloons_default = IconSpeechBalloons;
  }
});

// lib/icons/squared-add.ts
var squared_add_exports = {};
__export(squared_add_exports, {
  IconSquaredAdd: () => IconSquaredAdd,
  default: () => squared_add_default
});
var IconSquaredAdd, squared_add_default;
var init_squared_add = __esm({
  "lib/icons/squared-add.ts"() {
    IconSquaredAdd = `<svg id="squared-add" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="36" x2="45" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    squared_add_default = IconSquaredAdd;
  }
});

// lib/icons/squared-broken-heart.ts
var squared_broken_heart_exports = {};
__export(squared_broken_heart_exports, {
  IconSquaredBrokenHeart: () => IconSquaredBrokenHeart,
  default: () => squared_broken_heart_default
});
var IconSquaredBrokenHeart, squared_broken_heart_default;
var init_squared_broken_heart = __esm({
  "lib/icons/squared-broken-heart.ts"() {
    IconSquaredBrokenHeart = `<svg id="squared-broken-heart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 31.5 38.25 38.25 33.75 40.5 36 49.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,49.5c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    squared_broken_heart_default = IconSquaredBrokenHeart;
  }
});

// lib/icons/squared-check.ts
var squared_check_exports = {};
__export(squared_check_exports, {
  IconSquaredCheck: () => IconSquaredCheck,
  default: () => squared_check_default
});
var IconSquaredCheck, squared_check_default;
var init_squared_check = __esm({
  "lib/icons/squared-check.ts"() {
    IconSquaredCheck = `<svg id="squared-check" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 32.14 34.71 45 45 27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    squared_check_default = IconSquaredCheck;
  }
});

// lib/icons/squared-edit.ts
var squared_edit_exports = {};
__export(squared_edit_exports, {
  IconSquaredEdit: () => IconSquaredEdit,
  default: () => squared_edit_default
});
var IconSquaredEdit, squared_edit_default;
var init_squared_edit = __esm({
  "lib/icons/squared-edit.ts"() {
    IconSquaredEdit = `<svg id="squared-edit" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M23.97,42.14l-1.47,7.36,7.36-1.47c.39-.08.74-.27,1.02-.55l14.07-14.07c.78-.78.78-2.05,0-2.83l-3.54-3.54c-.78-.78-2.05-.78-2.83,0l-14.07,14.07c-.28.28-.47.63-.55,1.02Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="35.23" y1="30.41" x2="41.59" y2="36.77" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    squared_edit_default = IconSquaredEdit;
  }
});

// lib/icons/squared-exclamation-mark.ts
var squared_exclamation_mark_exports = {};
__export(squared_exclamation_mark_exports, {
  IconSquaredExclamationMark: () => IconSquaredExclamationMark,
  default: () => squared_exclamation_mark_default
});
var IconSquaredExclamationMark, squared_exclamation_mark_default;
var init_squared_exclamation_mark = __esm({
  "lib/icons/squared-exclamation-mark.ts"() {
    IconSquaredExclamationMark = `<svg id="squared-exclamation-mark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="24.75" x2="36" y2="42.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="47.25" x2="36" y2="47.25" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    squared_exclamation_mark_default = IconSquaredExclamationMark;
  }
});

// lib/icons/squared-heart.ts
var squared_heart_exports = {};
__export(squared_heart_exports, {
  IconSquaredHeart: () => IconSquaredHeart,
  default: () => squared_heart_default
});
var IconSquaredHeart, squared_heart_default;
var init_squared_heart = __esm({
  "lib/icons/squared-heart.ts"() {
    IconSquaredHeart = `<svg id="squared-heart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,49.5c-23.38-12.24-11.69-30.85,0-18.36,11.69-12.48,23.38,6.12,0,18.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    squared_heart_default = IconSquaredHeart;
  }
});

// lib/icons/squared-info.ts
var squared_info_exports = {};
__export(squared_info_exports, {
  IconSquaredInfo: () => IconSquaredInfo,
  default: () => squared_info_default
});
var IconSquaredInfo, squared_info_default;
var init_squared_info = __esm({
  "lib/icons/squared-info.ts"() {
    IconSquaredInfo = `<svg id="squared-info" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><polyline points="36 49.5 36 36 31.5 36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="27" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    squared_info_default = IconSquaredInfo;
  }
});

// lib/icons/squared-invisible.ts
var squared_invisible_exports = {};
__export(squared_invisible_exports, {
  IconSquaredInvisible: () => IconSquaredInvisible,
  default: () => squared_invisible_default
});
var IconSquaredInvisible, squared_invisible_default;
var init_squared_invisible = __esm({
  "lib/icons/squared-invisible.ts"() {
    IconSquaredInvisible = `<svg id="squared-invisible" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,36s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="27" x2="22.5" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    squared_invisible_default = IconSquaredInvisible;
  }
});

// lib/icons/squared-multiply.ts
var squared_multiply_exports = {};
__export(squared_multiply_exports, {
  IconSquaredMultiply: () => IconSquaredMultiply,
  default: () => squared_multiply_default
});
var IconSquaredMultiply, squared_multiply_default;
var init_squared_multiply = __esm({
  "lib/icons/squared-multiply.ts"() {
    IconSquaredMultiply = `<svg id="squared-multiply" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="29.64" y1="29.64" x2="42.36" y2="42.36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.36" y1="29.64" x2="29.64" y2="42.36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    squared_multiply_default = IconSquaredMultiply;
  }
});

// lib/icons/squared-question-mark.ts
var squared_question_mark_exports = {};
__export(squared_question_mark_exports, {
  IconSquaredQuestionMark: () => IconSquaredQuestionMark,
  default: () => squared_question_mark_default
});
var IconSquaredQuestionMark, squared_question_mark_default;
var init_squared_question_mark = __esm({
  "lib/icons/squared-question-mark.ts"() {
    IconSquaredQuestionMark = `<svg id="squared-question-mark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="36" y1="47.25" x2="36" y2="47.25" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30,30.75c0-3.31,2.69-6,6-6s6,2.69,6,6c0,6-6,6-6,12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    squared_question_mark_default = IconSquaredQuestionMark;
  }
});

// lib/icons/squared-search.ts
var squared_search_exports = {};
__export(squared_search_exports, {
  IconSquaredSearch: () => IconSquaredSearch,
  default: () => squared_search_default
});
var IconSquaredSearch, squared_search_default;
var init_squared_search = __esm({
  "lib/icons/squared-search.ts"() {
    IconSquaredSearch = `<svg id="squared-search" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="49.5" y1="49.5" x2="42.36" y2="42.36" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    squared_search_default = IconSquaredSearch;
  }
});

// lib/icons/squared-star.ts
var squared_star_exports = {};
__export(squared_star_exports, {
  IconSquaredStar: () => IconSquaredStar,
  default: () => squared_star_default
});
var IconSquaredStar, squared_star_default;
var init_squared_star = __esm({
  "lib/icons/squared-star.ts"() {
    IconSquaredStar = `<svg id="squared-star" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,43.43l8.18,5.85c.39.28.91-.1.76-.56l-3.18-9.55,8.09-5.98c.39-.28.18-.9-.3-.89l-10.06.08-3.18-9.55c-.15-.45-.8-.45-.94,0l-3.04,9.59-10.06.08c-.48,0-.67.62-.28.9l8.18,5.85-3.04,9.59c-.14.46.38.83.76.55l8.09-5.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    squared_star_default = IconSquaredStar;
  }
});

// lib/icons/squared-subtract.ts
var squared_subtract_exports = {};
__export(squared_subtract_exports, {
  IconSquaredSubtract: () => IconSquaredSubtract,
  default: () => squared_subtract_default
});
var IconSquaredSubtract, squared_subtract_default;
var init_squared_subtract = __esm({
  "lib/icons/squared-subtract.ts"() {
    IconSquaredSubtract = `<svg id="squared-subtract" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="36" x2="45" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    squared_subtract_default = IconSquaredSubtract;
  }
});

// lib/icons/squared-visible.ts
var squared_visible_exports = {};
__export(squared_visible_exports, {
  IconSquaredVisible: () => IconSquaredVisible,
  default: () => squared_visible_default
});
var IconSquaredVisible, squared_visible_default;
var init_squared_visible = __esm({
  "lib/icons/squared-visible.ts"() {
    IconSquaredVisible = `<svg id="squared-visible" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,36s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="4.5" style="stroke-width: 0px;"/></svg>`;
    squared_visible_default = IconSquaredVisible;
  }
});

// lib/icons/squared.ts
var squared_exports = {};
__export(squared_exports, {
  IconSquared: () => IconSquared,
  default: () => squared_default
});
var IconSquared, squared_default;
var init_squared = __esm({
  "lib/icons/squared.ts"() {
    IconSquared = `<svg id="squared" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="13.5" width="45" height="45" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    squared_default = IconSquared;
  }
});

// lib/icons/stamp.ts
var stamp_exports = {};
__export(stamp_exports, {
  IconStamp: () => IconStamp,
  default: () => stamp_default
});
var IconStamp, stamp_default;
var init_stamp = __esm({
  "lib/icons/stamp.ts"() {
    IconStamp = `<svg id="stamp" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M30.37,39.91c-.16,1.75-.55,3.49-1.25,5.09h13.74c-.06-.14-.13-.28-.2-.41-2-4.51-1.42-9.87,1.67-13.71,1.47-1.83,2.35-4.16,2.35-6.69,0-6.32-5.48-11.35-11.94-10.62-4.77.54-8.67,4.33-9.33,9.09-.42,3,.42,5.81,2.06,7.97,2.03,2.68,3.19,5.94,2.89,9.28Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polygon points="18 54 18 49.5 29.12 45 42.86 45 54 49.5 54 54 18 54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30.37,39.91c-.16,1.75-.55,3.49-1.25,5.09h13.74c-.06-.14-.13-.28-.2-.41-2-4.51-1.42-9.87,1.67-13.71,1.47-1.83,2.35-4.16,2.35-6.69,0-6.32-5.48-11.35-11.94-10.62-4.77.54-8.67,4.33-9.33,9.09-.42,3,.42,5.81,2.06,7.97,2.03,2.68,3.19,5.94,2.89,9.28Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="63" x2="58.5" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    stamp_default = IconStamp;
  }
});

// lib/icons/star-fat.ts
var star_fat_exports = {};
__export(star_fat_exports, {
  IconStarFat: () => IconStarFat,
  default: () => star_fat_default
});
var IconStarFat, star_fat_default;
var init_star_fat = __esm({
  "lib/icons/star-fat.ts"() {
    IconStarFat = `<svg id="star-fat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M36.16,51.03l16.56,11.84c.79.56,1.84-.21,1.53-1.13l-6.44-19.32,16.38-12.09c.78-.58.37-1.81-.6-1.8l-20.36.15-6.44-19.32c-.31-.92-1.61-.91-1.9.01l-6.14,19.41-20.36.15c-.97,0-1.36,1.25-.57,1.81l16.56,11.84-6.14,19.41c-.29.92.77,1.68,1.55,1.11l16.38-12.09Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M36.16,51.03l16.56,11.84c.79.56,1.84-.21,1.53-1.13l-6.44-19.32,16.38-12.09c.78-.58.37-1.81-.6-1.8l-20.36.15-6.44-19.32c-.31-.92-1.61-.91-1.9.01l-6.14,19.41-20.36.15c-.97,0-1.36,1.25-.57,1.81l16.56,11.84-6.14,19.41c-.29.92.77,1.68,1.55,1.11l16.38-12.09Z" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/></svg>`;
    star_fat_default = IconStarFat;
  }
});

// lib/icons/star-l.ts
var star_l_exports = {};
__export(star_l_exports, {
  IconStarL: () => IconStarL,
  default: () => star_l_default
});
var IconStarL, star_l_default;
var init_star_l = __esm({
  "lib/icons/star-l.ts"() {
    IconStarL = `<svg id="star-l" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M36.16,51.03l16.56,11.84c.79.56,1.84-.21,1.53-1.13l-6.44-19.32,16.38-12.09c.78-.58.37-1.81-.6-1.8l-20.36.15-6.44-19.32c-.31-.92-1.61-.91-1.9.01l-6.14,19.41-20.36.15c-.97,0-1.36,1.25-.57,1.81l16.56,11.84-6.14,19.41c-.29.92.77,1.68,1.55,1.11l16.38-12.09Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M36.16,51.03l16.56,11.84c.79.56,1.84-.21,1.53-1.13l-6.44-19.32,16.38-12.09c.78-.58.37-1.81-.6-1.8l-20.36.15-6.44-19.32c-.31-.92-1.61-.91-1.9.01l-6.14,19.41-20.36.15c-.97,0-1.36,1.25-.57,1.81l16.56,11.84-6.14,19.41c-.29.92.77,1.68,1.55,1.11l16.38-12.09Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    star_l_default = IconStarL;
  }
});

// lib/icons/star-m.ts
var star_m_exports = {};
__export(star_m_exports, {
  IconStarM: () => IconStarM,
  default: () => star_m_default
});
var IconStarM, star_m_default;
var init_star_m = __esm({
  "lib/icons/star-m.ts"() {
    IconStarM = `<svg id="star-m" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M36.13,47.82l13.03,9.31c.62.44,1.44-.17,1.2-.89l-5.06-15.19,12.88-9.51c.61-.45.29-1.43-.47-1.42l-16.01.12-5.06-15.19c-.24-.72-1.27-.72-1.5.01l-4.83,15.27-16.01.12c-.76,0-1.07.98-.45,1.43l13.03,9.31-4.83,15.27c-.23.73.6,1.32,1.22.87l12.89-9.51Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M36.13,47.82l13.03,9.31c.62.44,1.44-.17,1.2-.89l-5.06-15.19,12.88-9.51c.61-.45.29-1.43-.47-1.42l-16.01.12-5.06-15.19c-.24-.72-1.27-.72-1.5.01l-4.83,15.27-16.01.12c-.76,0-1.07.98-.45,1.43l13.03,9.31-4.83,15.27c-.23.73.6,1.32,1.22.87l12.89-9.51Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    star_m_default = IconStarM;
  }
});

// lib/icons/star-small.ts
var star_small_exports = {};
__export(star_small_exports, {
  IconStarSmall: () => IconStarSmall,
  default: () => star_small_default
});
var IconStarSmall, star_small_default;
var init_star_small = __esm({
  "lib/icons/star-small.ts"() {
    IconStarSmall = `<svg id="star-small" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M36.1,45.46l10.42,7.45c.5.35,1.16-.13.96-.71l-4.05-12.15,10.31-7.61c.49-.36.23-1.14-.38-1.14l-12.81.1-4.05-12.15c-.19-.58-1.01-.57-1.2,0l-3.87,12.21-12.81.1c-.61,0-.86.79-.36,1.14l10.42,7.45-3.87,12.21c-.18.58.48,1.06.97.7l10.31-7.61Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M36.1,45.46l10.42,7.45c.5.35,1.16-.13.96-.71l-4.05-12.15,10.31-7.61c.49-.36.23-1.14-.38-1.14l-12.81.1-4.05-12.15c-.19-.58-1.01-.57-1.2,0l-3.87,12.21-12.81.1c-.61,0-.86.79-.36,1.14l10.42,7.45-3.87,12.21c-.18.58.48,1.06.97.7l10.31-7.61Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    star_small_default = IconStarSmall;
  }
});

// lib/icons/sticker.ts
var sticker_exports = {};
__export(sticker_exports, {
  IconSticker: () => IconSticker,
  default: () => sticker_default
});
var IconSticker, sticker_default;
var init_sticker = __esm({
  "lib/icons/sticker.ts"() {
    IconSticker = `<svg id="sticker" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M58.5,40.5h-14c-2.21,0-4,1.79-4,4v14l18-18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.5,58.5v-14c0-2.21,1.79-4,4-4h14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M38.84,58.5h-21.34c-2.21,0-4-1.79-4-4V17.5c0-2.21,1.79-4,4-4h37c2.21,0,4,1.79,4,4v21.34c0,1.06-.42,2.08-1.17,2.83l-15.66,15.66c-.75.75-1.77,1.17-2.83,1.17Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    sticker_default = IconSticker;
  }
});

// lib/icons/stopwatch.ts
var stopwatch_exports = {};
__export(stopwatch_exports, {
  IconStopwatch: () => IconStopwatch,
  default: () => stopwatch_default
});
var IconStopwatch, stopwatch_default;
var init_stopwatch = __esm({
  "lib/icons/stopwatch.ts"() {
    IconStopwatch = `<svg id="stopwatch" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="40.5" r="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="40.5" r="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="13.5" x2="40.5" y2="13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="54 22.5 36 22.5 36 13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="31.5" x2="36" y2="40.5" style="fill: none; transform: rotate(calc((360 / 60 * var(--handle)) * 1deg)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    stopwatch_default = IconStopwatch;
  }
});

// lib/icons/subtract-fat.ts
var subtract_fat_exports = {};
__export(subtract_fat_exports, {
  IconSubtractFat: () => IconSubtractFat,
  default: () => subtract_fat_default
});
var IconSubtractFat, subtract_fat_default;
var init_subtract_fat = __esm({
  "lib/icons/subtract-fat.ts"() {
    IconSubtractFat = `<svg id="subtract-fat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="36" x2="58.5" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/></svg>`;
    subtract_fat_default = IconSubtractFat;
  }
});

// lib/icons/subtract-l.ts
var subtract_l_exports = {};
__export(subtract_l_exports, {
  IconSubtractL: () => IconSubtractL,
  default: () => subtract_l_default
});
var IconSubtractL, subtract_l_default;
var init_subtract_l = __esm({
  "lib/icons/subtract-l.ts"() {
    IconSubtractL = `<svg id="subtract-l" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="36" x2="58.5" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    subtract_l_default = IconSubtractL;
  }
});

// lib/icons/subtract-m.ts
var subtract_m_exports = {};
__export(subtract_m_exports, {
  IconSubtractM: () => IconSubtractM,
  default: () => subtract_m_default
});
var IconSubtractM, subtract_m_default;
var init_subtract_m = __esm({
  "lib/icons/subtract-m.ts"() {
    IconSubtractM = `<svg id="subtract-m" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="18" y1="36" x2="54" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    subtract_m_default = IconSubtractM;
  }
});

// lib/icons/subtract-s.ts
var subtract_s_exports = {};
__export(subtract_s_exports, {
  IconSubtractS: () => IconSubtractS,
  default: () => subtract_s_default
});
var IconSubtractS, subtract_s_default;
var init_subtract_s = __esm({
  "lib/icons/subtract-s.ts"() {
    IconSubtractS = `<svg id="subtract-s" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="22.5" y1="36" x2="49.5" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    subtract_s_default = IconSubtractS;
  }
});

// lib/icons/tables.ts
var tables_exports = {};
__export(tables_exports, {
  IconTables: () => IconTables,
  default: () => tables_default
});
var IconTables, tables_default;
var init_tables = __esm({
  "lib/icons/tables.ts"() {
    IconTables = `<svg id="tables" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="13.5" width="45" height="45" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="27" x2="58.5" y2="27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="29.25" y1="27" x2="29.25" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.75" y1="27" x2="42.75" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    tables_default = IconTables;
  }
});

// lib/icons/talk-add.ts
var talk_add_exports = {};
__export(talk_add_exports, {
  IconTalkAdd: () => IconTalkAdd,
  default: () => talk_add_default
});
var IconTalkAdd, talk_add_default;
var init_talk_add = __esm({
  "lib/icons/talk-add.ts"() {
    IconTalkAdd = `<svg id="talk-add" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="27" y1="31.5" x2="45" y2="31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    talk_add_default = IconTalkAdd;
  }
});

// lib/icons/talk-check.ts
var talk_check_exports = {};
__export(talk_check_exports, {
  IconTalkCheck: () => IconTalkCheck,
  default: () => talk_check_default
});
var IconTalkCheck, talk_check_default;
var init_talk_check = __esm({
  "lib/icons/talk-check.ts"() {
    IconTalkCheck = `<svg id="talk-check" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="28.36 26.64 36.08 39.5 46.36 21.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    talk_check_default = IconTalkCheck;
  }
});

// lib/icons/talk-delete.ts
var talk_delete_exports = {};
__export(talk_delete_exports, {
  IconTalkDelete: () => IconTalkDelete,
  default: () => talk_delete_default
});
var IconTalkDelete, talk_delete_default;
var init_talk_delete = __esm({
  "lib/icons/talk-delete.ts"() {
    IconTalkDelete = `<svg id="talk-delete" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="29.64" y1="25.27" x2="42.36" y2="38" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.36" y1="25.27" x2="29.64" y2="38" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    talk_delete_default = IconTalkDelete;
  }
});

// lib/icons/talk-edit.ts
var talk_edit_exports = {};
__export(talk_edit_exports, {
  IconTalkEdit: () => IconTalkEdit,
  default: () => talk_edit_default
});
var IconTalkEdit, talk_edit_default;
var init_talk_edit = __esm({
  "lib/icons/talk-edit.ts"() {
    IconTalkEdit = `<svg id="talk-edit" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M23.44,33.68l-1.47,7.36,7.36-1.47c.39-.08.74-.27,1.02-.55l14.07-14.07c.78-.78.78-2.05,0-2.83l-3.54-3.54c-.78-.78-2.05-.78-2.83,0l-14.07,14.07c-.28.28-.47.63-.55,1.02Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="34.69" y1="21.94" x2="41.06" y2="28.31" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    talk_edit_default = IconTalkEdit;
  }
});

// lib/icons/talk-exclamation-mark.ts
var talk_exclamation_mark_exports = {};
__export(talk_exclamation_mark_exports, {
  IconTalkExclamationMark: () => IconTalkExclamationMark,
  default: () => talk_exclamation_mark_default
});
var IconTalkExclamationMark, talk_exclamation_mark_default;
var init_talk_exclamation_mark = __esm({
  "lib/icons/talk-exclamation-mark.ts"() {
    IconTalkExclamationMark = `<svg id="talk-exclamation-mark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="40.5" x2="36" y2="40.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    talk_exclamation_mark_default = IconTalkExclamationMark;
  }
});

// lib/icons/talk-heart-broken.ts
var talk_heart_broken_exports = {};
__export(talk_heart_broken_exports, {
  IconTalkHeartBroken: () => IconTalkHeartBroken,
  default: () => talk_heart_broken_default
});
var IconTalkHeartBroken, talk_heart_broken_default;
var init_talk_heart_broken = __esm({
  "lib/icons/talk-heart-broken.ts"() {
    IconTalkHeartBroken = `<svg id="talk-heart-broken" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="36 26.3 37.9 32.01 34.1 33.91 36 41.52" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,41.52c-19.76-10.35-9.88-26.07,0-15.52,9.88-10.55,19.76,5.17,0,15.52Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    talk_heart_broken_default = IconTalkHeartBroken;
  }
});

// lib/icons/talk-heart.ts
var talk_heart_exports = {};
__export(talk_heart_exports, {
  IconTalkHeart: () => IconTalkHeart,
  default: () => talk_heart_default
});
var IconTalkHeart, talk_heart_default;
var init_talk_heart = __esm({
  "lib/icons/talk-heart.ts"() {
    IconTalkHeart = `<svg id="talk-heart" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36,40.47c-18.67-9.78-9.34-24.63,0-14.67,9.34-9.97,18.67,4.89,0,14.67Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    talk_heart_default = IconTalkHeart;
  }
});

// lib/icons/talk-info.ts
var talk_info_exports = {};
__export(talk_info_exports, {
  IconTalkInfo: () => IconTalkInfo,
  default: () => talk_info_default
});
var IconTalkInfo, talk_info_default;
var init_talk_info = __esm({
  "lib/icons/talk-info.ts"() {
    IconTalkInfo = `<svg id="talk-info" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><polyline points="36 45 36 31.5 31.5 31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="22.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    talk_info_default = IconTalkInfo;
  }
});

// lib/icons/talk-invisible.ts
var talk_invisible_exports = {};
__export(talk_invisible_exports, {
  IconTalkInvisible: () => IconTalkInvisible,
  default: () => talk_invisible_default
});
var IconTalkInvisible, talk_invisible_default;
var init_talk_invisible = __esm({
  "lib/icons/talk-invisible.ts"() {
    IconTalkInvisible = `<svg id="talk-invisible" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M49.5,31.5s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="22.5" x2="22.5" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    talk_invisible_default = IconTalkInvisible;
  }
});

// lib/icons/talk-question-mark.ts
var talk_question_mark_exports = {};
__export(talk_question_mark_exports, {
  IconTalkQuestionMark: () => IconTalkQuestionMark,
  default: () => talk_question_mark_default
});
var IconTalkQuestionMark, talk_question_mark_default;
var init_talk_question_mark = __esm({
  "lib/icons/talk-question-mark.ts"() {
    IconTalkQuestionMark = `<svg id="talk-question-mark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="36" y1="42.75" x2="36" y2="42.75" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30,26.25c0-3.31,2.69-6,6-6s6,2.69,6,6c0,6-6,6-6,12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    talk_question_mark_default = IconTalkQuestionMark;
  }
});

// lib/icons/talk-search.ts
var talk_search_exports = {};
__export(talk_search_exports, {
  IconTalkSearch: () => IconTalkSearch,
  default: () => talk_search_default
});
var IconTalkSearch, talk_search_default;
var init_talk_search = __esm({
  "lib/icons/talk-search.ts"() {
    IconTalkSearch = `<svg id="talk-search" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><g><line x1="47.25" y1="42.75" x2="40.11" y2="35.61" style="fill: white;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="33.75" cy="29.25" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    talk_search_default = IconTalkSearch;
  }
});

// lib/icons/talk-star.ts
var talk_star_exports = {};
__export(talk_star_exports, {
  IconTalkStar: () => IconTalkStar,
  default: () => talk_star_default
});
var IconTalkStar, talk_star_default;
var init_talk_star = __esm({
  "lib/icons/talk-star.ts"() {
    IconTalkStar = `<svg id="talk-star" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36.14,37.22l6.34,4.54c.3.22.7-.08.59-.43l-2.47-7.4,6.27-4.63c.3-.22.14-.69-.23-.69l-7.8.06-2.47-7.4c-.12-.35-.62-.35-.73,0l-2.35,7.43-7.8.06c-.37,0-.52.48-.22.69l6.34,4.54-2.35,7.43c-.11.35.29.64.59.42l6.27-4.63Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    talk_star_default = IconTalkStar;
  }
});

// lib/icons/talk-subtract.ts
var talk_subtract_exports = {};
__export(talk_subtract_exports, {
  IconTalkSubtract: () => IconTalkSubtract,
  default: () => talk_subtract_default
});
var IconTalkSubtract, talk_subtract_default;
var init_talk_subtract = __esm({
  "lib/icons/talk-subtract.ts"() {
    IconTalkSubtract = `<svg id="talk-subtract" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="27" y1="31.5" x2="45" y2="31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    talk_subtract_default = IconTalkSubtract;
  }
});

// lib/icons/talk-visible.ts
var talk_visible_exports = {};
__export(talk_visible_exports, {
  IconTalkVisible: () => IconTalkVisible,
  default: () => talk_visible_default
});
var IconTalkVisible, talk_visible_default;
var init_talk_visible = __esm({
  "lib/icons/talk-visible.ts"() {
    IconTalkVisible = `<svg id="talk-visible" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M49.5,31.5s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="31.5" r="4.5" style="stroke-width: 0px;"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    talk_visible_default = IconTalkVisible;
  }
});

// lib/icons/talk.ts
var talk_exports = {};
__export(talk_exports, {
  IconTalk: () => IconTalk,
  default: () => talk_default
});
var IconTalk, talk_default;
var init_talk = __esm({
  "lib/icons/talk.ts"() {
    IconTalk = `<svg id="talk" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M17.5,13.5h37c2.21,0,4,1.79,4,4v28c0,2.21-1.79,4-4,4h-23s-9,9-9,9v-9s-5,0-5,0c-2.21,0-4-1.79-4-4v-28c0-2.21,1.79-4,4-4Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    talk_default = IconTalk;
  }
});

// lib/icons/target.ts
var target_exports = {};
__export(target_exports, {
  IconTarget: () => IconTarget,
  default: () => target_default
});
var IconTarget, target_default;
var init_target = __esm({
  "lib/icons/target.ts"() {
    IconTarget = `<svg id="target" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="36" r="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    target_default = IconTarget;
  }
});

// lib/icons/text-align-center.ts
var text_align_center_exports = {};
__export(text_align_center_exports, {
  IconTextAlignCenter: () => IconTextAlignCenter,
  default: () => text_align_center_default
});
var IconTextAlignCenter, text_align_center_default;
var init_text_align_center = __esm({
  "lib/icons/text-align-center.ts"() {
    IconTextAlignCenter = `<svg id="text-align-center" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="54" x2="54" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="30" x2="22.5" y2="30" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="42" x2="58.5" y2="42" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_align_center_default = IconTextAlignCenter;
  }
});

// lib/icons/text-align-justify-centered.ts
var text_align_justify_centered_exports = {};
__export(text_align_justify_centered_exports, {
  IconTextAlignJustifyCentered: () => IconTextAlignJustifyCentered,
  default: () => text_align_justify_centered_default
});
var IconTextAlignJustifyCentered, text_align_justify_centered_default;
var init_text_align_justify_centered = __esm({
  "lib/icons/text-align-justify-centered.ts"() {
    IconTextAlignJustifyCentered = `<svg id="text-align-justify-centered" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="54" x2="49.5" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="30" x2="13.5" y2="30" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="42" x2="58.5" y2="42" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_align_justify_centered_default = IconTextAlignJustifyCentered;
  }
});

// lib/icons/text-align-justify-left.ts
var text_align_justify_left_exports = {};
__export(text_align_justify_left_exports, {
  IconTextAlignJustifyLeft: () => IconTextAlignJustifyLeft,
  default: () => text_align_justify_left_default
});
var IconTextAlignJustifyLeft, text_align_justify_left_default;
var init_text_align_justify_left = __esm({
  "lib/icons/text-align-justify-left.ts"() {
    IconTextAlignJustifyLeft = `<svg id="text-align-justify-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="54" x2="40.5" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="30" x2="13.5" y2="30" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="42" x2="58.5" y2="42" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_align_justify_left_default = IconTextAlignJustifyLeft;
  }
});

// lib/icons/text-align-justify-right.ts
var text_align_justify_right_exports = {};
__export(text_align_justify_right_exports, {
  IconTextAlignJustifyRight: () => IconTextAlignJustifyRight,
  default: () => text_align_justify_right_default
});
var IconTextAlignJustifyRight, text_align_justify_right_default;
var init_text_align_justify_right = __esm({
  "lib/icons/text-align-justify-right.ts"() {
    IconTextAlignJustifyRight = `<svg id="text-align-justify-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="54" x2="58.5" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="30" x2="13.5" y2="30" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="42" x2="58.5" y2="42" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_align_justify_right_default = IconTextAlignJustifyRight;
  }
});

// lib/icons/text-align-justify.ts
var text_align_justify_exports = {};
__export(text_align_justify_exports, {
  IconTextAlignJustify: () => IconTextAlignJustify,
  default: () => text_align_justify_default
});
var IconTextAlignJustify, text_align_justify_default;
var init_text_align_justify = __esm({
  "lib/icons/text-align-justify.ts"() {
    IconTextAlignJustify = `<svg id="text-align-justify" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="54" x2="58.5" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="30" x2="13.5" y2="30" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="42" x2="58.5" y2="42" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_align_justify_default = IconTextAlignJustify;
  }
});

// lib/icons/text-align-left.ts
var text_align_left_exports = {};
__export(text_align_left_exports, {
  IconTextAlignLeft: () => IconTextAlignLeft,
  default: () => text_align_left_default
});
var IconTextAlignLeft, text_align_left_default;
var init_text_align_left = __esm({
  "lib/icons/text-align-left.ts"() {
    IconTextAlignLeft = `<svg id="text-align-left" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="54" x2="49.5" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="30" x2="13.5" y2="30" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="42" x2="58.5" y2="42" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_align_left_default = IconTextAlignLeft;
  }
});

// lib/icons/text-align-right-order-desc.ts
var text_align_right_order_desc_exports = {};
__export(text_align_right_order_desc_exports, {
  IconTextAlignRightOrderDesc: () => IconTextAlignRightOrderDesc,
  default: () => text_align_right_order_desc_default
});
var IconTextAlignRightOrderDesc, text_align_right_order_desc_default;
var init_text_align_right_order_desc = __esm({
  "lib/icons/text-align-right-order-desc.ts"() {
    IconTextAlignRightOrderDesc = `<svg id="text-align-right-order-desc" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="54" x2="58.5" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="30" x2="22.5" y2="30" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="42" x2="58.5" y2="42" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_align_right_order_desc_default = IconTextAlignRightOrderDesc;
  }
});

// lib/icons/text-align-right.ts
var text_align_right_exports = {};
__export(text_align_right_exports, {
  IconTextAlignRight: () => IconTextAlignRight,
  default: () => text_align_right_default
});
var IconTextAlignRight, text_align_right_default;
var init_text_align_right = __esm({
  "lib/icons/text-align-right.ts"() {
    IconTextAlignRight = `<svg id="text-align-right" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="54" x2="58.5" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="30" x2="31.5" y2="30" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="42" x2="58.5" y2="42" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_align_right_default = IconTextAlignRight;
  }
});

// lib/icons/text-bold.ts
var text_bold_exports = {};
__export(text_bold_exports, {
  IconTextBold: () => IconTextBold,
  default: () => text_bold_default
});
var IconTextBold, text_bold_default;
var init_text_bold = __esm({
  "lib/icons/text-bold.ts"() {
    IconTextBold = `<svg id="text-bold" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.5,36h18c4.97,0,9-4.03,9-9s-4.03-9-9-9h-18v36h18c4.97,0,9-4.03,9-9s-4.03-9-9-9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/></svg>`;
    text_bold_default = IconTextBold;
  }
});

// lib/icons/text-detail-list.ts
var text_detail_list_exports = {};
__export(text_detail_list_exports, {
  IconTextDetailList: () => IconTextDetailList,
  default: () => text_detail_list_default
});
var IconTextDetailList, text_detail_list_default;
var init_text_detail_list = __esm({
  "lib/icons/text-detail-list.ts"() {
    IconTextDetailList = `<svg id="text-detail-list" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="14.62 24.21 21.37 17.46 14.62 10.71" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="17.46" x2="58.5" y2="17.46" style="fill: none;  stroke-linejoin: round; stroke-width: 8px;"/><line x1="13.5" y1="53.46" x2="58.5" y2="53.46" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="29.46" x2="27" y2="29.46" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="41.46" x2="58.5" y2="41.46" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_detail_list_default = IconTextDetailList;
  }
});

// lib/icons/text-indent.ts
var text_indent_exports = {};
__export(text_indent_exports, {
  IconTextIndent: () => IconTextIndent,
  default: () => text_indent_default
});
var IconTextIndent, text_indent_default;
var init_text_indent = __esm({
  "lib/icons/text-indent.ts"() {
    IconTextIndent = `<svg id="text-indent" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="13.5 31.5 13.5 40.5 19 36 13.5 31.5" style="fill: var(--icon-line-color, currentColor);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="17.46" x2="58.5" y2="17.46" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="53.46" x2="58.5" y2="53.46" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="29.46" x2="27" y2="29.46" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="41.46" x2="58.5" y2="41.46" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_indent_default = IconTextIndent;
  }
});

// lib/icons/text-italic.ts
var text_italic_exports = {};
__export(text_italic_exports, {
  IconTextItalic: () => IconTextItalic,
  default: () => text_italic_default
});
var IconTextItalic, text_italic_default;
var init_text_italic = __esm({
  "lib/icons/text-italic.ts"() {
    IconTextItalic = `<svg id="text-italic" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="18" x2="49.5" y2="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="54" x2="40.5" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.75" y1="18" x2="33.75" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_italic_default = IconTextItalic;
  }
});

// lib/icons/text-line-through.ts
var text_line_through_exports = {};
__export(text_line_through_exports, {
  IconTextLineThrough: () => IconTextLineThrough,
  default: () => text_line_through_default
});
var IconTextLineThrough, text_line_through_default;
var init_text_line_through = __esm({
  "lib/icons/text-line-through.ts"() {
    IconTextLineThrough = `<svg id="text-line-through" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M25.14,34.14c-1.63-1.63-2.64-3.88-2.64-6.36s1.01-4.74,2.64-6.36c1.63-1.63,3.88-2.64,6.36-2.64h9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M46.86,34.14c1.63,1.63,2.64,3.88,2.64,6.36s-1.01,4.74-2.64,6.36c-1.63,1.63-3.88,2.64-6.36,2.64h-9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="34.14" x2="58.5" y2="34.14" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_line_through_default = IconTextLineThrough;
  }
});

// lib/icons/text-order-asc114.ts
var text_order_asc114_exports = {};
__export(text_order_asc114_exports, {
  IconTextOrderAsc114: () => IconTextOrderAsc114,
  default: () => text_order_asc114_default
});
var IconTextOrderAsc114, text_order_asc114_default;
var init_text_order_asc114 = __esm({
  "lib/icons/text-order-asc114.ts"() {
    IconTextOrderAsc114 = `<svg id="text-order-asc" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="13.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="54" x2="31.5" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="30" x2="13.5" y2="30" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="42" x2="40.5" y2="42" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_order_asc114_default = IconTextOrderAsc114;
  }
});

// lib/icons/text-order-asc118.ts
var text_order_asc118_exports = {};
__export(text_order_asc118_exports, {
  IconTextOrderAsc118: () => IconTextOrderAsc118,
  default: () => text_order_asc118_default
});
var IconTextOrderAsc118, text_order_asc118_default;
var init_text_order_asc118 = __esm({
  "lib/icons/text-order-asc118.ts"() {
    IconTextOrderAsc118 = `<svg id="text-order-asc-2" data-name="text-order-asc" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="18" y1="13.5" x2="18" y2="54" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 54 18 58.5 22.5 54" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="18" x2="54" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="54" x2="40.5" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="30" x2="31.5" y2="30" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="42" x2="45" y2="42" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_order_asc118_default = IconTextOrderAsc118;
  }
});

// lib/icons/text-order-desc-copy2.ts
var text_order_desc_copy2_exports = {};
__export(text_order_desc_copy2_exports, {
  IconTextOrderDescCopy2: () => IconTextOrderDescCopy2,
  default: () => text_order_desc_copy2_default
});
var IconTextOrderDescCopy2, text_order_desc_copy2_default;
var init_text_order_desc_copy2 = __esm({
  "lib/icons/text-order-desc-copy2.ts"() {
    IconTextOrderDescCopy2 = `<svg id="text-order-desc_copy_2" data-name="text-order-desc copy 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="31.5" y1="36" x2="58.5" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="54" x2="58.5" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="18" cy="18" r="4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="18" cy="36" r="4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="18" cy="54" r="4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_order_desc_copy2_default = IconTextOrderDescCopy2;
  }
});

// lib/icons/text-order-desc-copy3.ts
var text_order_desc_copy3_exports = {};
__export(text_order_desc_copy3_exports, {
  IconTextOrderDescCopy3: () => IconTextOrderDescCopy3,
  default: () => text_order_desc_copy3_default
});
var IconTextOrderDescCopy3, text_order_desc_copy3_default;
var init_text_order_desc_copy3 = __esm({
  "lib/icons/text-order-desc-copy3.ts"() {
    IconTextOrderDescCopy3 = `<svg id="text-order-desc_copy_3" data-name="text-order-desc copy 3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="31.5" y1="36" x2="58.5" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="54" x2="58.5" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="19" y1="13.5" x2="19" y2="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M16,31.5h3.22c2.13,0,3.2,2.58,1.69,4.09l-4.91,4.91h6.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M15.95,49.5h4.81c1.55,0,2.32,1.87,1.23,2.96l-1.54,1.54,1.54,1.54c1.09,1.09.32,2.96-1.23,2.96h-4.81" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_order_desc_copy3_default = IconTextOrderDescCopy3;
  }
});

// lib/icons/text-order-desc-copy.ts
var text_order_desc_copy_exports = {};
__export(text_order_desc_copy_exports, {
  IconTextOrderDescCopy: () => IconTextOrderDescCopy,
  default: () => text_order_desc_copy_default
});
var IconTextOrderDescCopy, text_order_desc_copy_default;
var init_text_order_desc_copy = __esm({
  "lib/icons/text-order-desc-copy.ts"() {
    IconTextOrderDescCopy = `<svg id="text-order-desc_copy" data-name="text-order-desc copy" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="31.5" y1="36" x2="58.5" y2="36" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="54" x2="58.5" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="18" cy="54" r="4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 36 18 40.5 27 31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 18 18 22.5 27 13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_order_desc_copy_default = IconTextOrderDescCopy;
  }
});

// lib/icons/text-order-desc.ts
var text_order_desc_exports = {};
__export(text_order_desc_exports, {
  IconTextOrderDesc: () => IconTextOrderDesc,
  default: () => text_order_desc_default
});
var IconTextOrderDesc, text_order_desc_default;
var init_text_order_desc = __esm({
  "lib/icons/text-order-desc.ts"() {
    IconTextOrderDesc = `<svg id="text-order-desc" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="18" y1="58.5" x2="18" y2="18" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 18 18 13.5 13.5 18" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="54" x2="54" y2="54" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="18" x2="40.5" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="42" x2="31.5" y2="42" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="30" x2="45" y2="30" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_order_desc_default = IconTextOrderDesc;
  }
});

// lib/icons/text-outdent.ts
var text_outdent_exports = {};
__export(text_outdent_exports, {
  IconTextOutdent: () => IconTextOutdent,
  default: () => text_outdent_default
});
var IconTextOutdent, text_outdent_default;
var init_text_outdent = __esm({
  "lib/icons/text-outdent.ts"() {
    IconTextOutdent = `<svg id="text-outdent" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="19 40.5 19 31.5 13.5 36 19 40.5" style="fill: var(--icon-line-color, currentColor);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="17.46" x2="58.5" y2="17.46" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="53.46" x2="58.5" y2="53.46" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="29.46" x2="27" y2="29.46" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="41.46" x2="58.5" y2="41.46" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_outdent_default = IconTextOutdent;
  }
});

// lib/icons/text-underline.ts
var text_underline_exports = {};
__export(text_underline_exports, {
  IconTextUnderline: () => IconTextUnderline,
  default: () => text_underline_default
});
var IconTextUnderline, text_underline_default;
var init_text_underline = __esm({
  "lib/icons/text-underline.ts"() {
    IconTextUnderline = `<svg id="text-underline" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M49.5,18v13.5c0,7.46-6.04,13.5-13.5,13.5s-13.5-6.04-13.5-13.5v-13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="54" x2="49.5" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    text_underline_default = IconTextUnderline;
  }
});

// lib/icons/timer.ts
var timer_exports = {};
__export(timer_exports, {
  IconTimer: () => IconTimer,
  default: () => timer_default
});
var IconTimer, timer_default;
var init_timer = __esm({
  "lib/icons/timer.ts"() {
    IconTimer = `<svg id="timer" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="36" r="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="22.5" x2="36" y2="36" style="fill: none; transform: rotate(calc((360 / 60 * var(--handle)) * 1deg)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    timer_default = IconTimer;
  }
});

// lib/icons/trash2.ts
var trash2_exports = {};
__export(trash2_exports, {
  IconTrash2: () => IconTrash2,
  default: () => trash2_default
});
var IconTrash2, trash2_default;
var init_trash2 = __esm({
  "lib/icons/trash2.ts"() {
    IconTrash2 = `<svg id="trash-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="29.25 18 29.25 9 42.75 9 42.75 18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,18v36.5c0,2.21,1.79,4,4,4h28c2.21,0,4-1.79,4-4V18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M18,18v36.5c0,2.21,1.79,4,4,4h28c2.21,0,4-1.79,4-4V18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    trash2_default = IconTrash2;
  }
});

// lib/icons/trash.ts
var trash_exports = {};
__export(trash_exports, {
  IconTrash: () => IconTrash,
  default: () => trash_default
});
var IconTrash, trash_default;
var init_trash = __esm({
  "lib/icons/trash.ts"() {
    IconTrash = `<svg id="trash" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="29.25 18 29.25 9 42.75 9 42.75 18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,18v38.5c0,1.1.9,2,2,2h32c1.1,0,2-.9,2-2V18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M18,18v38.5c0,1.1.9,2,2,2h32c1.1,0,2-.9,2-2V18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="51.81" x2="36" y2="29.31" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="51.81" x2="27" y2="29.31" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="51.81" x2="45" y2="29.31" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="18" x2="58.5" y2="18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    trash_default = IconTrash;
  }
});

// lib/icons/triangled-exclamation-mark.ts
var triangled_exclamation_mark_exports = {};
__export(triangled_exclamation_mark_exports, {
  IconTriangledExclamationMark: () => IconTriangledExclamationMark,
  default: () => triangled_exclamation_mark_default
});
var IconTriangledExclamationMark, triangled_exclamation_mark_default;
var init_triangled_exclamation_mark = __esm({
  "lib/icons/triangled-exclamation-mark.ts"() {
    IconTriangledExclamationMark = `<svg id="triangled-exclamation-mark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M34.29,16.36L10.82,55.47c-.8,1.33.16,3.03,1.71,3.03h46.94c1.55,0,2.51-1.7,1.71-3.03l-23.47-39.11c-.78-1.29-2.65-1.29-3.43,0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M34.29,16.36L10.82,55.47c-.8,1.33.16,3.03,1.71,3.03h46.94c1.55,0,2.51-1.7,1.71-3.03l-23.47-39.11c-.78-1.29-2.65-1.29-3.43,0Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="45" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="49.5" x2="36" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    triangled_exclamation_mark_default = IconTriangledExclamationMark;
  }
});

// lib/icons/triangled-info.ts
var triangled_info_exports = {};
__export(triangled_info_exports, {
  IconTriangledInfo: () => IconTriangledInfo,
  default: () => triangled_info_default
});
var IconTriangledInfo, triangled_info_default;
var init_triangled_info = __esm({
  "lib/icons/triangled-info.ts"() {
    IconTriangledInfo = `<svg id="triangled-info" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M34.29,16.36L10.82,55.47c-.8,1.33.16,3.03,1.71,3.03h46.94c1.55,0,2.51-1.7,1.71-3.03l-23.47-39.11c-.78-1.29-2.65-1.29-3.43,0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M34.29,16.36L10.82,55.47c-.8,1.33.16,3.03,1.71,3.03h46.94c1.55,0,2.51-1.7,1.71-3.03l-23.47-39.11c-.78-1.29-2.65-1.29-3.43,0Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><polyline points="36 54 36 40.5 31.5 40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="31.5" x2="36" y2="31.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    triangled_info_default = IconTriangledInfo;
  }
});

// lib/icons/triangled-question-mark.ts
var triangled_question_mark_exports = {};
__export(triangled_question_mark_exports, {
  IconTriangledQuestionMark: () => IconTriangledQuestionMark,
  default: () => triangled_question_mark_default
});
var IconTriangledQuestionMark, triangled_question_mark_default;
var init_triangled_question_mark = __esm({
  "lib/icons/triangled-question-mark.ts"() {
    IconTriangledQuestionMark = `<svg id="triangled-question-mark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M34.29,16.36L10.82,55.47c-.8,1.33.16,3.03,1.71,3.03h46.94c1.55,0,2.51-1.7,1.71-3.03l-23.47-39.11c-.78-1.29-2.65-1.29-3.43,0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M34.29,16.36L10.82,55.47c-.8,1.33.16,3.03,1.71,3.03h46.94c1.55,0,2.51-1.7,1.71-3.03l-23.47-39.11c-.78-1.29-2.65-1.29-3.43,0Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><line x1="36" y1="53" x2="36" y2="53" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30,36.5c0-3.31,2.69-6,6-6s6,2.69,6,6c0,6-6,6-6,12" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    triangled_question_mark_default = IconTriangledQuestionMark;
  }
});

// lib/icons/triangled.ts
var triangled_exports = {};
__export(triangled_exports, {
  IconTriangled: () => IconTriangled,
  default: () => triangled_default
});
var IconTriangled, triangled_default;
var init_triangled = __esm({
  "lib/icons/triangled.ts"() {
    IconTriangled = `<svg id="triangled" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M34.29,16.36L10.82,55.47c-.8,1.33.16,3.03,1.71,3.03h46.94c1.55,0,2.51-1.7,1.71-3.03l-23.47-39.11c-.78-1.29-2.65-1.29-3.43,0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M34.29,16.36L10.82,55.47c-.8,1.33.16,3.03,1.71,3.03h46.94c1.55,0,2.51-1.7,1.71-3.03l-23.47-39.11c-.78-1.29-2.65-1.29-3.43,0Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    triangled_default = IconTriangled;
  }
});

// lib/icons/user-add.ts
var user_add_exports = {};
__export(user_add_exports, {
  IconUserAdd: () => IconUserAdd,
  default: () => user_add_default
});
var IconUserAdd, user_add_default;
var init_user_add = __esm({
  "lib/icons/user-add.ts"() {
    IconUserAdd = `<svg id="user-add" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><circle cx="36" cy="22.5" r="11.25" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M55.29,53.04c0,7.71-19.29,7.71-19.29,7.71,0,0-19.29,0-19.29-7.71,0-10.65,8.63-19.29,19.29-19.29s19.29,8.63,19.29,19.29Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><circle cx="36" cy="22.5" r="11.25" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M55.29,53.04c0,7.71-19.29,7.71-19.29,7.71,0,0-19.29,0-19.29-7.71,0-10.65,8.63-19.29,19.29-19.29s19.29,8.63,19.29,19.29Z" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="36" y1="40.5" x2="36" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="29.25" y1="47.25" x2="42.75" y2="47.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    user_add_default = IconUserAdd;
  }
});

// lib/icons/user-delete.ts
var user_delete_exports = {};
__export(user_delete_exports, {
  IconUserDelete: () => IconUserDelete,
  default: () => user_delete_default
});
var IconUserDelete, user_delete_default;
var init_user_delete = __esm({
  "lib/icons/user-delete.ts"() {
    IconUserDelete = `<svg id="user-delete" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><circle cx="36" cy="22.5" r="11.25" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M55.29,53.04c0,7.71-19.29,7.71-19.29,7.71,0,0-19.29,0-19.29-7.71,0-10.65,8.63-19.29,19.29-19.29s19.29,8.63,19.29,19.29Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><circle cx="36" cy="22.5" r="11.25" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M55.29,53.04c0,7.71-19.29,7.71-19.29,7.71,0,0-19.29,0-19.29-7.71,0-10.65,8.63-19.29,19.29-19.29s19.29,8.63,19.29,19.29Z" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="31.5" y1="42.75" x2="40.5" y2="51.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="51.75" x2="40.5" y2="42.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    user_delete_default = IconUserDelete;
  }
});

// lib/icons/user-group.ts
var user_group_exports = {};
__export(user_group_exports, {
  IconUserGroup: () => IconUserGroup,
  default: () => user_group_default
});
var IconUserGroup, user_group_default;
var init_user_group = __esm({
  "lib/icons/user-group.ts"() {
    IconUserGroup = `<svg id="user-group" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M26.89,13.75c-.68-.16-1.38-.25-2.11-.25-5.08,0-9.2,4.12-9.2,9.2s4.12,9.2,9.2,9.2c2.13,0,4.08-.73,5.64-1.94" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M41.7,29.97c1.56,1.21,3.51,1.94,5.64,1.94,5.08,0,9.2-4.12,9.2-9.2s-4.12-9.2-9.2-9.2c-.73,0-1.43.09-2.11.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M29.55,32.65c-1.51-.48-3.11-.74-4.77-.74-8.71,0-15.78,7.06-15.78,15.78,0,3.35,4.44,4.92,8.61,5.66" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54.5,53.35c4.17-.74,8.61-2.31,8.61-5.66,0-8.71-7.06-15.78-15.78-15.78-1.66,0-3.27.26-4.77.74" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36.06" cy="20.25" r="11.25" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M55.34,50.79c0,7.71-19.29,7.71-19.29,7.71,0,0-19.29,0-19.29-7.71,0-10.65,8.63-19.29,19.29-19.29s19.29,8.63,19.29,19.29Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36.06" cy="20.25" r="11.25" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M55.34,50.79c0,7.71-19.29,7.71-19.29,7.71,0,0-19.29,0-19.29-7.71,0-10.65,8.63-19.29,19.29-19.29s19.29,8.63,19.29,19.29Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    user_group_default = IconUserGroup;
  }
});

// lib/icons/user.ts
var user_exports = {};
__export(user_exports, {
  IconUser: () => IconUser,
  default: () => user_default
});
var IconUser, user_default;
var init_user = __esm({
  "lib/icons/user.ts"() {
    IconUser = `<svg id="user" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><circle cx="36" cy="22.5" r="11.25" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M55.29,53.04c0,7.71-19.29,7.71-19.29,7.71,0,0-19.29,0-19.29-7.71,0-10.65,8.63-19.29,19.29-19.29s19.29,8.63,19.29,19.29Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><circle cx="36" cy="22.5" r="11.25" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M55.29,53.04c0,7.71-19.29,7.71-19.29,7.71,0,0-19.29,0-19.29-7.71,0-10.65,8.63-19.29,19.29-19.29s19.29,8.63,19.29,19.29Z" style="fill: none;  stroke-linecap: square; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    user_default = IconUser;
  }
});

// lib/icons/users.ts
var users_exports = {};
__export(users_exports, {
  IconUsers: () => IconUsers,
  default: () => users_default
});
var IconUsers, users_default;
var init_users = __esm({
  "lib/icons/users.ts"() {
    IconUsers = `<svg id="users" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><circle cx="28.34" cy="20.25" r="11.25" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M47.63,50.79c0,7.71-19.29,7.71-19.29,7.71,0,0-19.29,0-19.29-7.71,0-10.65,8.63-19.29,19.29-19.29s19.29,8.63,19.29,19.29Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M35.21,29.14c1.67,1.7,4,2.76,6.57,2.76,5.08,0,9.2-4.12,9.2-9.2s-4.12-9.2-9.2-9.2c-1.38,0-2.69.31-3.87.86" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M46.5,53.7c4.65-.53,11.06-1.98,11.06-6.01,0-8.71-7.06-15.78-15.78-15.78-2.08,0-4.05.41-5.87,1.14" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="28.34" cy="20.25" r="11.25" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M47.63,50.79c0,7.71-19.29,7.71-19.29,7.71,0,0-19.29,0-19.29-7.71,0-10.65,8.63-19.29,19.29-19.29s19.29,8.63,19.29,19.29Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    users_default = IconUsers;
  }
});

// lib/icons/visible-fat.ts
var visible_fat_exports = {};
__export(visible_fat_exports, {
  IconVisibleFat: () => IconVisibleFat,
  default: () => visible_fat_default
});
var IconVisibleFat, visible_fat_default;
var init_visible_fat = __esm({
  "lib/icons/visible-fat.ts"() {
    IconVisibleFat = `<svg id="visible-fat" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M63,36s-12.09,18-27,18-27-18-27-18c0,0,12.09-18,27-18s27,18,27,18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width: 8px;"/><path d="M63,36s-12.09,18-27,18-27-18-27-18c0,0,12.09-18,27-18s27,18,27,18Z" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/><circle cx="36" cy="36" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width: 8px;"/></svg>`;
    visible_fat_default = IconVisibleFat;
  }
});

// lib/icons/visible-l.ts
var visible_l_exports = {};
__export(visible_l_exports, {
  IconVisibleL: () => IconVisibleL,
  default: () => visible_l_default
});
var IconVisibleL, visible_l_default;
var init_visible_l = __esm({
  "lib/icons/visible-l.ts"() {
    IconVisibleL = `<svg id="visible-l" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M63,36s-12.09,18-27,18-27-18-27-18c0,0,12.09-18,27-18s27,18,27,18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,36s-12.09,18-27,18-27-18-27-18c0,0,12.09-18,27-18s27,18,27,18Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    visible_l_default = IconVisibleL;
  }
});

// lib/icons/visible-m.ts
var visible_m_exports = {};
__export(visible_m_exports, {
  IconVisibleM: () => IconVisibleM,
  default: () => visible_m_default
});
var IconVisibleM, visible_m_default;
var init_visible_m = __esm({
  "lib/icons/visible-m.ts"() {
    IconVisibleM = `<svg id="visible-m" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M56.25,36s-9.07,13.5-20.25,13.5-20.25-13.5-20.25-13.5c0,0,9.07-13.5,20.25-13.5s20.25,13.5,20.25,13.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M56.25,36s-9.07,13.5-20.25,13.5-20.25-13.5-20.25-13.5c0,0,9.07-13.5,20.25-13.5s20.25,13.5,20.25,13.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="6.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    visible_m_default = IconVisibleM;
  }
});

// lib/icons/visible-s.ts
var visible_s_exports = {};
__export(visible_s_exports, {
  IconVisibleS: () => IconVisibleS,
  default: () => visible_s_default
});
var IconVisibleS, visible_s_default;
var init_visible_s = __esm({
  "lib/icons/visible-s.ts"() {
    IconVisibleS = `<svg id="visible-s" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M49.5,36s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,36s-6.04,9-13.5,9-13.5-9-13.5-9c0,0,6.04-9,13.5-9s13.5,9,13.5,9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="4.5" style="stroke-width: 0px;"/></svg>`;
    visible_s_default = IconVisibleS;
  }
});

// lib/icons/wheelchair-action.ts
var wheelchair_action_exports = {};
__export(wheelchair_action_exports, {
  IconWheelchairAction: () => IconWheelchairAction,
  default: () => wheelchair_action_default
});
var IconWheelchairAction, wheelchair_action_default;
var init_wheelchair_action = __esm({
  "lib/icons/wheelchair-action.ts"() {
    IconWheelchairAction = `<svg id="wheelchair-action" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72.05"><circle cx="54" cy="17.95" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="27" cy="44.95" r="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,58.45v-11.5c0-1.1-.9-2-2-2h-7" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,44.95l17.68-17.68c.78-.78.78-2.05,0-2.83l-3.54-3.54c-.78-.78-2.05-.78-2.83,0l-4.95,4.95" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="54" cy="17.95" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    wheelchair_action_default = IconWheelchairAction;
  }
});

// lib/icons/wheelchair.ts
var wheelchair_exports = {};
__export(wheelchair_exports, {
  IconWheelchair: () => IconWheelchair,
  default: () => wheelchair_default
});
var IconWheelchair, wheelchair_default;
var init_wheelchair = __esm({
  "lib/icons/wheelchair.ts"() {
    IconWheelchair = `<svg id="wheelchair" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72.05"><circle cx="27" cy="18" r="4.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="27" cy="18" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,54v-11.5c0-1.1-.9-2-2-2h-14.56c-.86,0-1.63-.55-1.9-1.37l-4.04-12.13" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="31.5" x2="27" y2="31.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M28.92,31.75c-2.55.49-4.99,1.73-6.97,3.71-5.27,5.27-5.27,13.82,0,19.09s13.82,5.27,19.09,0" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M41.05,54.55c3.8-3.8,4.86-9.3,3.19-14.05" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    wheelchair_default = IconWheelchair;
  }
});

// lib/icons/airplane-arrivals.ts
var airplane_arrivals_exports = {};
__export(airplane_arrivals_exports, {
  IconAirplaneArrivals: () => IconAirplaneArrivals,
  default: () => airplane_arrivals_default
});
var IconAirplaneArrivals, airplane_arrivals_default;
var init_airplane_arrivals = __esm({
  "lib/icons/airplane-arrivals.ts"() {
    IconAirplaneArrivals = `<svg id="airplane-arrivals" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M58.52,38.94L19.2,22.66l-4.35-6.49c-.11-.16-.27-.29-.45-.37l-2.38-.99c-.69-.29-1.43.25-1.38.99l-.04.46c-.64,7.21,3.47,14,10.16,16.77l4.56,1.89-9.54,14.24c-.35.52-.13,1.24.45,1.48l2.59,1.07c.28.12.6.1.87-.05l19.77-10.89,15.8,6.54c2.43,1.01,5.24-.27,6.03-2.85.69-2.25-.59-4.64-2.76-5.54Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M36.61,10.79c-.08-.29-.3-.53-.58-.65l-2.59-1.07c-.58-.24-1.24.11-1.36.73l-2.78,14.04,12.6,5.22-5.29-18.27Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><line x1="31.5" y1="63.2" x2="63" y2="63.2" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M16.23,50.65l2.59,1.07c.28.12.6.1.87-.05l19.77-10.89,15.8,6.54c2.43,1.01,5.24-.27,6.03-2.85.69-2.25-.59-4.64-2.76-5.54L19.2,22.66l-4.35-6.49c-.11-.16-.27-.29-.45-.37l-2.38-.99c-.69-.29-1.43.25-1.38.99l-.04.46c-.64,7.21,3.47,14,10.16,16.77l4.56,1.89-9.54,14.24c-.35.52-.13,1.24.45,1.48Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36.04,10.15l-2.59-1.07c-.58-.24-1.24.11-1.36.73l-2.78,14.04,12.6,5.22-5.29-18.27c-.08-.29-.3-.53-.58-.65Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    airplane_arrivals_default = IconAirplaneArrivals;
  }
});

// lib/icons/airplane-departures.ts
var airplane_departures_exports = {};
__export(airplane_departures_exports, {
  IconAirplaneDepartures: () => IconAirplaneDepartures,
  default: () => airplane_departures_default
});
var IconAirplaneDepartures, airplane_departures_default;
var init_airplane_departures = __esm({
  "lib/icons/airplane-departures.ts"() {
    IconAirplaneDepartures = `<svg id="airplane-departures" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M63.95,17.7c-1.1-2.08-3.7-2.86-5.87-1.96l-39.32,16.29-7.66-1.52c-.19-.04-.39-.02-.58.06l-2.38.99c-.69.28-.83,1.19-.27,1.68l.3.36c4.64,5.55,12.35,7.45,19.04,4.68l4.56-1.89,3.33,16.81c.12.62.78.97,1.36.73l2.59-1.07c.28-.12.49-.35.58-.65l6.28-21.68,15.8-6.54c2.43-1.01,3.51-3.9,2.25-6.28Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M26.75,25.72l12.6-5.22-16.66-9.18c-.27-.15-.58-.16-.87-.05l-2.59,1.07c-.58.24-.8.96-.45,1.48l7.96,11.89Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><line x1="9" y1="63" x2="40.5" y2="63" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M8.17,33.59c4.64,5.55,12.35,7.45,19.04,4.68l4.56-1.89,3.33,16.81c.12.62.78.97,1.36.73l2.59-1.07c.28-.12.49-.35.58-.65l6.28-21.68,15.8-6.54c2.43-1.01,3.51-3.9,2.25-6.28-1.1-2.08-3.7-2.86-5.87-1.96l-39.32,16.29-7.66-1.52c-.19-.04-.39-.02-.58.06l-2.38.99c-.69.28-.83,1.19-.27,1.68l.3.36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M26.75,25.72l12.6-5.22-16.66-9.18c-.27-.15-.58-.16-.87-.05l-2.59,1.07c-.58.24-.8.96-.45,1.48l7.96,11.89Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    airplane_departures_default = IconAirplaneDepartures;
  }
});

// lib/icons/airplane.ts
var airplane_exports = {};
__export(airplane_exports, {
  IconAirplane: () => IconAirplane,
  default: () => airplane_default
});
var IconAirplane, airplane_default;
var init_airplane = __esm({
  "lib/icons/airplane.ts"() {
    IconAirplane = `<svg id="airplane" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M56.46,15.54c-1.76-1.76-6.36,0-9.55,3.18l-8.91,8.91-22.43-2.49c-.3-.03-.6.07-.82.29l-1.98,1.98c-.45.45-.37,1.19.15,1.54l14.29,9.53c-1.19,1.38-3.4,4.22-5.36,7.1l-10.36,2.43c-.19.04-.37.13-.51.27l-1.12,1.12c-.53.53-.31,1.42.39,1.66l8.01,2.67,2.67,8.01c.24.71,1.13.92,1.66.39l1.12-1.12c.14-.14.23-.32.27-.51l2.43-10.36c2.88-1.96,5.72-4.17,7.1-5.36l9.53,14.29c.35.52,1.09.6,1.54.15l1.98-1.98c.21-.21.32-.52.29-.82l-2.49-22.43,8.91-8.91c3.18-3.18,4.94-7.79,3.18-9.55Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M56.46,15.54c-1.76-1.76-6.36,0-9.55,3.18l-8.91,8.91-22.43-2.49c-.3-.03-.6.07-.82.29l-1.98,1.98c-.45.45-.37,1.19.15,1.54l14.29,9.53c-1.19,1.38-3.4,4.22-5.36,7.1l-10.36,2.43c-.19.04-.37.13-.51.27l-1.12,1.12c-.53.53-.31,1.42.39,1.66l8.01,2.67,2.67,8.01c.24.71,1.13.92,1.66.39l1.12-1.12c.14-.14.23-.32.27-.51l2.43-10.36c2.88-1.96,5.72-4.17,7.1-5.36l9.53,14.29c.35.52,1.09.6,1.54.15l1.98-1.98c.21-.21.32-.52.29-.82l-2.49-22.43,8.91-8.91c3.18-3.18,4.94-7.79,3.18-9.55Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    airplane_default = IconAirplane;
  }
});

// lib/icons/airport-connect-flights.ts
var airport_connect_flights_exports = {};
__export(airport_connect_flights_exports, {
  IconAirportConnectFlights: () => IconAirportConnectFlights,
  default: () => airport_connect_flights_default
});
var IconAirportConnectFlights, airport_connect_flights_default;
var init_airport_connect_flights = __esm({
  "lib/icons/airport-connect-flights.ts"() {
    IconAirportConnectFlights = `<svg id="airport-connect-flights" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="27" y1="36" x2="27" y2="36" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><line x1="31.5" y1="36" x2="31.5" y2="36" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><line x1="36" y1="36" x2="36" y2="36" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><line x1="40.5" y1="36" x2="40.5" y2="36" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><line x1="45" y1="36" x2="45" y2="36" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><g ><path d="M5.32,55.36l14.68-2.94v-12.4l-15.24,12.2c-.16.13-.26.33-.26.54v1.93c0,.43.4.76.82.68Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M34.68,55.36l-14.68-2.94v-12.4l15.24,12.2c.16.13.26.33.26.54v1.93c0,.43-.4.76-.82.68Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M13.8,66.81v-1.09c0-.14.04-.27.12-.38l6.09-9.82,6.09,9.82c.08.11.12.25.12.38v1.09c0,.51-.54.85-1,.62l-5.2-2.6-5.2,2.6c-.46.23-1-.1-1-.62Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M23.1,33.82v18.6c0,1.71-1.39,12.4-3.1,12.4h0c-1.71,0-3.1-10.69-3.1-12.4v-18.6c0-3.1,1.39-6.2,3.1-6.2h0c1.71,0,3.1,3.1,3.1,6.2Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g ><path d="M37.32,32.24l14.68-2.94v-12.4l-15.24,12.2c-.16.13-.26.33-.26.54v1.93c0,.43.4.76.82.68Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M66.68,32.24l-14.68-2.94v-12.4l15.24,12.2c.16.13.26.33.26.54v1.93c0,.43-.4.76-.82.68Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M45.8,43.69v-1.09c0-.14.04-.27.12-.38l6.09-9.82,6.09,9.82c.08.11.12.25.12.38v1.09c0,.51-.54.85-1,.62l-5.2-2.6-5.2,2.6c-.46.23-1-.1-1-.62Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M55.1,10.7v18.6c0,1.71-1.39,12.4-3.1,12.4h0c-1.71,0-3.1-10.69-3.1-12.4V10.7c0-3.1,1.39-6.2,3.1-6.2h0c1.71,0,3.1,3.1,3.1,6.2Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M23.1,42.5v-8.68c0-3.1-1.39-6.2-3.1-6.2s-3.1,3.1-3.1,6.2v8.68l-12.14,9.71c-.16.13-.26.33-.26.54v1.93c0,.43.4.76.82.68l11.61-2.32c.09,1.25.4,3.72.85,6.07l-3.86,6.23c-.08.11-.12.25-.12.38v1.09c0,.51.54.85,1,.62l5.2-2.6,5.2,2.6c.46.23,1-.1,1-.62v-1.09c0-.14-.04-.27-.12-.38l-3.86-6.23c.45-2.35.76-4.82.85-6.07l11.61,2.32c.43.09.82-.24.82-.68v-1.93c0-.21-.1-.41-.26-.54l-12.14-9.71Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M67.24,29.1l-12.14-9.72v-8.68c0-3.1-1.39-6.2-3.1-6.2h0c-1.71,0-3.1,3.1-3.1,6.2v8.68l-12.14,9.72c-.16.13-.26.33-.26.54v1.93c0,.43.4.76.82.68l11.61-2.32c.09,1.25.4,3.72.85,6.07l-3.86,6.23c-.08.11-.12.25-.12.38v1.09c0,.51.54.85,1,.62l5.2-2.6,5.2,2.6c.46.23,1-.1,1-.62v-1.09c0-.14-.04-.27-.12-.38l-3.86-6.23c.45-2.35.76-4.82.85-6.07l11.61,2.32c.43.09.82-.24.82-.68v-1.93c0-.21-.1-.41-.26-.54Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    airport_connect_flights_default = IconAirportConnectFlights;
  }
});

// lib/icons/airport-transfer2.ts
var airport_transfer2_exports = {};
__export(airport_transfer2_exports, {
  IconAirportTransfer2: () => IconAirportTransfer2,
  default: () => airport_transfer2_default
});
var IconAirportTransfer2, airport_transfer2_default;
var init_airport_transfer2 = __esm({
  "lib/icons/airport-transfer2.ts"() {
    IconAirportTransfer2 = `<svg id="airport-transfer_2" data-name="airport-transfer 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="46.86 16.14 40.5 22.5 46.86 28.86" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M19.74,57.7l5.49-8.2,7.56,3.13-11.28,6.21c-.12.07-.27.07-.39.02l-1.18-.49c-.26-.11-.36-.43-.2-.67Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M40.41,55.57c.31-1.02-.27-2.11-1.26-2.52l-17.87-7.4-1.97-2.95c-.05-.07-.12-.13-.2-.17l-1.08-.45c-.31-.13-.65.11-.63.45l-.02.21c-.29,3.28,1.58,6.36,4.62,7.62l15.67,6.49c1.1.46,2.38-.12,2.74-1.3Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M25.89,46.19l5.72,2.37-2.41-8.3c-.04-.13-.14-.24-.26-.29l-1.18-.49c-.26-.11-.56.05-.62.33l-1.26,6.38Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></g><g><path d="M22.35,31.13l1.92-9.68-7.56-3.13,3.58,12.37c.04.13.14.24.26.29l1.18.49c.26.11.56-.05.62-.33Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M9.24,15.01c.5-.94,1.68-1.3,2.67-.89l17.87,7.4,3.48-.69c.09-.02.18,0,.26.03l1.08.45c.31.13.38.54.12.76l-.14.16c-2.11,2.52-5.61,3.38-8.65,2.13l-15.67-6.49c-1.1-.46-1.59-1.77-1.02-2.85Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M26.14,18.65l-5.72-2.37,7.57-4.17c.12-.07.27-.07.39-.02l1.18.49c.26.11.36.43.2.67l-3.62,5.4Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></g><path d="M45,58.5c9.94,0,18-8.06,18-18s-8.06-18-18-18h-4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    airport_transfer2_default = IconAirportTransfer2;
  }
});

// lib/icons/airport-transfer.ts
var airport_transfer_exports = {};
__export(airport_transfer_exports, {
  IconAirportTransfer: () => IconAirportTransfer,
  default: () => airport_transfer_default
});
var IconAirportTransfer, airport_transfer_default;
var init_airport_transfer = __esm({
  "lib/icons/airport-transfer.ts"() {
    IconAirportTransfer = `<svg id="airport-transfer" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="49.27 54 58.27 54 58.27 45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="36" x2="58.27" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.73 18 40.73 18 40.73 27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="36" x2="40.73" y2="18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M11.38,53.2l5.49-8.2,7.56,3.13-11.28,6.21c-.12.07-.27.07-.39.02l-1.18-.49c-.26-.11-.36-.43-.2-.67Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M32.06,51.07c.31-1.02-.27-2.11-1.26-2.52l-17.87-7.4-1.97-2.95c-.05-.07-.12-.13-.2-.17l-1.08-.45c-.31-.13-.65.11-.63.45l-.02.21c-.29,3.28,1.58,6.36,4.62,7.62l15.67,6.49c1.1.46,2.38-.12,2.74-1.3Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M17.53,41.69l5.72,2.37-2.41-8.3c-.04-.13-.14-.24-.26-.29l-1.18-.49c-.26-.11-.56.05-.62.33l-1.26,6.38Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></g><g><path d="M22.35,26.63l1.92-9.68-7.56-3.13,3.58,12.37c.04.13.14.24.26.29l1.18.49c.26.11.56-.05.62-.33Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M9.24,10.51c.5-.94,1.68-1.3,2.67-.89l17.87,7.4,3.48-.69c.09-.02.18,0,.26.03l1.08.45c.31.13.38.54.12.76l-.14.16c-2.11,2.52-5.61,3.38-8.65,2.13l-15.67-6.49c-1.1-.46-1.59-1.77-1.02-2.85Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M26.14,14.15l-5.72-2.37,7.57-4.17c.12-.07.27-.07.39-.02l1.18.49c.26.11.36.43.2.67l-3.62,5.4Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></g><line x1="31.5" y1="63" x2="63" y2="63" style="fill: var(--icon-line-color, currentColor);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    airport_transfer_default = IconAirportTransfer;
  }
});

// lib/icons/anchor.ts
var anchor_exports = {};
__export(anchor_exports, {
  IconAnchor: () => IconAnchor,
  default: () => anchor_default
});
var IconAnchor, anchor_default;
var init_anchor = __esm({
  "lib/icons/anchor.ts"() {
    IconAnchor = `<svg id="anchor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="58.5" x2="36" y2="22.5" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="31.5" x2="40.5" y2="31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,40.5c0,8.7-8.06,15.75-18,15.75s-18-7.05-18-15.75" style="fill: none;  stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="18" r="4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="13.5 40.5 18 36 22.5 40.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 40.5 54 36 58.5 40.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    anchor_default = IconAnchor;
  }
});

// lib/icons/bicycle-surfboard.ts
var bicycle_surfboard_exports = {};
__export(bicycle_surfboard_exports, {
  IconBicycleSurfboard: () => IconBicycleSurfboard,
  default: () => bicycle_surfboard_default
});
var IconBicycleSurfboard, bicycle_surfboard_default;
var init_bicycle_surfboard = __esm({
  "lib/icons/bicycle-surfboard.ts"() {
    IconBicycleSurfboard = `<svg id="bicycle-surfboard" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M57.38,11.87c-1.04-1.82-2.18-2.87-3.38-2.87s-2.33,1.05-3.38,2.85v49.68c1.04.94,2.18,1.47,3.38,1.47s2.3-.59,3.38-1.63V11.87Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="18" cy="18" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="18" cy="54" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="38.06" y1="45.9" x2="18" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,18l18.75,9.44c1.44.73,2.41,2.14,2.57,3.75l.38,3.82" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="38.06" y1="39.4" x2="38.06" y2="50.4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="32 25.08 18 36 18 54 32 42 32 25.08" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,44.31c0,9.69-4.5,18.69-9,18.69-4.97,0-9-9-9-19.62,0-16.38,4.03-34.38,9-34.38s9,18,9,35.31Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M57.38,11.87c-1.04-1.82-2.18-2.87-3.38-2.87s-2.33,1.05-3.38,2.85v49.68c1.04.94,2.18,1.47,3.38,1.47s2.3-.59,3.38-1.63V11.87Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/></svg>`;
    bicycle_surfboard_default = IconBicycleSurfboard;
  }
});

// lib/icons/bicycle.ts
var bicycle_exports = {};
__export(bicycle_exports, {
  IconBicycle: () => IconBicycle,
  default: () => bicycle_default
});
var IconBicycle, bicycle_default;
var init_bicycle = __esm({
  "lib/icons/bicycle.ts"() {
    IconBicycle = `<svg id="bicycle" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="18" cy="43.75" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="54" cy="43.75" r="9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45.9" y1="23.69" x2="36" y2="43.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,43.75l9.44-18.75c.73-1.44,2.14-2.41,3.75-2.57l3.82-.38" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="39.4" y1="23.69" x2="50.4" y2="23.69" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="25.08 29.75 36 43.75 54 43.75 42 29.75 25.08 29.75" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    bicycle_default = IconBicycle;
  }
});

// lib/icons/briefcase-cross.ts
var briefcase_cross_exports = {};
__export(briefcase_cross_exports, {
  IconBriefcaseCross: () => IconBriefcaseCross,
  default: () => briefcase_cross_default
});
var IconBriefcaseCross, briefcase_cross_default;
var init_briefcase_cross = __esm({
  "lib/icons/briefcase-cross.ts"() {
    IconBriefcaseCross = `<svg id="briefcase-cross" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54.5,18H17.5c-2.21,0-4,1.79-4,4v36c0,2.21,1.79,4,4,4h37c2.21,0,4-1.79,4-4V22c0-2.21-1.79-4-4-4ZM49.5,44.5h-9v9h-9v-9h-9v-9h9v-9h9v9h9v9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="18.5" width="45" height="44" rx="4" ry="4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M29.25,18v-5c0-2.21,1.79-4,4-4h5.5c2.21,0,4,1.79,4,4v5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="31.5 27 40.5 27 40.5 36 49.5 36 49.5 45 40.5 45 40.5 54 31.5 54 31.5 45 22.5 45 22.5 36 31.5 36 31.5 27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    briefcase_cross_default = IconBriefcaseCross;
  }
});

// lib/icons/car-parking-indoor.ts
var car_parking_indoor_exports = {};
__export(car_parking_indoor_exports, {
  IconCarParkingIndoor: () => IconCarParkingIndoor,
  default: () => car_parking_indoor_default
});
var IconCarParkingIndoor, car_parking_indoor_default;
var init_car_parking_indoor = __esm({
  "lib/icons/car-parking-indoor.ts"() {
    IconCarParkingIndoor = `<svg id="car-parking-indoor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="38.5" width="45" height="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M13.5,38.5l7.85-15.78c.68-1.36,2.06-2.22,3.58-2.22h22.14c1.52,0,2.91.86,3.58,2.22l7.85,15.78v13.5H13.5v-13.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="38.5" x2="58.5" y2="38.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M52.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M52.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><line x1="18" y1="45.5" x2="27" y2="45.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="45.5" x2="54" y2="45.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="34" x2="15.74" y2="34" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="56.26" y1="34" x2="63" y2="34" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="63 27 63 9 9 9 9 27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    car_parking_indoor_default = IconCarParkingIndoor;
  }
});

// lib/icons/car-parking-outside.ts
var car_parking_outside_exports = {};
__export(car_parking_outside_exports, {
  IconCarParkingOutside: () => IconCarParkingOutside,
  default: () => car_parking_outside_default
});
var IconCarParkingOutside, car_parking_outside_default;
var init_car_parking_outside = __esm({
  "lib/icons/car-parking-outside.ts"() {
    IconCarParkingOutside = `<svg id="car-parking-outside" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="38.5" width="45" height="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M13.5,38.5l7.85-15.78c.68-1.36,2.06-2.22,3.58-2.22h22.14c1.52,0,2.91.86,3.58,2.22l7.85,15.78v13.5H13.5v-13.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="38.5" x2="58.5" y2="38.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M52.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M52.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><line x1="18" y1="45.5" x2="27" y2="45.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="45.5" x2="54" y2="45.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="34" x2="15.74" y2="34" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="56.26" y1="34" x2="63" y2="34" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="56.26" cy="14.85" r="4.44" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10;"/><circle cx="56.26" cy="14.85" r="4.44" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="56.26" y1="3.6" x2="56.26" y2="5.47" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45.01" y1="14.85" x2="46.89" y2="14.85" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="65.64" y1="14.85" x2="67.51" y2="14.85" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="48.31" y1="6.89" x2="49.63" y2="8.22" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="62.89" y1="21.47" x2="64.22" y2="22.8" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="62.89" y1="8.22" x2="64.22" y2="6.89" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    car_parking_outside_default = IconCarParkingOutside;
  }
});

// lib/icons/car-parking.ts
var car_parking_exports = {};
__export(car_parking_exports, {
  IconCarParking: () => IconCarParking,
  default: () => car_parking_default
});
var IconCarParking, car_parking_default;
var init_car_parking = __esm({
  "lib/icons/car-parking.ts"() {
    IconCarParking = `<svg id="car-parking" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="54" cy="18" r="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="8.47" y="46.42" width="37.3" height="11.19" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M8.47,46.42l6.5-13.08c.56-1.13,1.71-1.84,2.97-1.84h18.36c1.26,0,2.41.71,2.97,1.84l6.5,13.08v11.19H8.47v-11.19Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="8.47" y1="46.42" x2="45.77" y2="46.42" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M8.47,57.61h4.97v3.39c0,1.1-.9,2-2,2h-.97c-1.1,0-2-.9-2-2v-3.39h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.8,57.61h4.97v3.39c0,1.1-.9,2-2,2h-.97c-1.1,0-2-.9-2-2v-3.39h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M8.47,57.61h4.97v3.39c0,1.1-.9,2-2,2h-.97c-1.1,0-2-.9-2-2v-3.39h0Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M40.8,57.61h4.97v3.39c0,1.1-.9,2-2,2h-.97c-1.1,0-2-.9-2-2v-3.39h0Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><line x1="12.2" y1="52.22" x2="19.66" y2="52.22" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="34.58" y1="52.22" x2="42.04" y2="52.22" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="4.74" y1="42.69" x2="10.32" y2="42.69" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="43.91" y1="42.69" x2="49.5" y2="42.69" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="54" cy="18" r="13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="50.79" y1="12.21" x2="50.79" y2="23.79" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M50.79,12.21h3.86c2.13,0,3.86,1.73,3.86,3.86s-1.73,3.86-3.86,3.86h-3.86" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: square; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    car_parking_default = IconCarParking;
  }
});

// lib/icons/car.ts
var car_exports = {};
__export(car_exports, {
  IconCar: () => IconCar,
  default: () => car_default
});
var IconCar, car_default;
var init_car = __esm({
  "lib/icons/car.ts"() {
    IconCar = `<svg id="car" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="38.5" width="45" height="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M13.5,38.5l7.85-15.78c.68-1.36,2.06-2.22,3.58-2.22h22.14c1.52,0,2.91.86,3.58,2.22l7.85,15.78v13.5H13.5v-13.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="38.5" x2="58.5" y2="38.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M52.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M52.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><line x1="18" y1="45.5" x2="27" y2="45.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="45.5" x2="54" y2="45.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="34" x2="15.74" y2="34" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="56.26" y1="34" x2="63" y2="34" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    car_default = IconCar;
  }
});

// lib/icons/changing-area.ts
var changing_area_exports = {};
__export(changing_area_exports, {
  IconChangingArea: () => IconChangingArea,
  default: () => changing_area_default
});
var IconChangingArea, changing_area_default;
var init_changing_area = __esm({
  "lib/icons/changing-area.ts"() {
    IconChangingArea = `<svg id="changing-area" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="56.25" cy="45" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="29.25" cy="11.25" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M31.5,36h9v9c0,4.97-4.03,9-9,9h0v-18h0Z" transform="translate(81 9) rotate(90)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M22.5,49.5H4.5v-13.5l12.35-12.35c.74-.74,1.74-1.15,2.79-1.15h0c3.15,0,5.03,3.51,3.28,6.13l-4.91,7.37,4.5,13.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="45 31.5 45 40.5 45 49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,31.5l-4.5,9h18v9h-9c-4.97,0-9-4.03-9-9h0" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M19.63,22.5h6.44c.61,0,1.22.14,1.76.42l6.9,3.45c.83.42,1.75.63,2.68.63h3.08" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,63v-13.5h-4.5v-13.5l12.35-12.35c.74-.74,1.74-1.15,2.79-1.15h0c3.15,0,5.03,3.51,3.28,6.13l-4.91,7.37,4.5,13.5h-4.5v13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="56.25" cy="45" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="29.25" cy="11.25" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="49.5" x2="18" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="58.5" x2="63" y2="58.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    changing_area_default = IconChangingArea;
  }
});

// lib/icons/check-in.ts
var check_in_exports = {};
__export(check_in_exports, {
  IconCheckIn: () => IconCheckIn,
  default: () => check_in_default
});
var IconCheckIn, check_in_default;
var init_check_in = __esm({
  "lib/icons/check-in.ts"() {
    IconCheckIn = `<svg id="check_in" data-name="check in" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M9,11v2.5c0,2.49,2.01,4.5,4.5,4.5s4.5-2.01,4.5-4.5v-2.5h-9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="45" width="9" height="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="15.75" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="31.5" y="27" width="9" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="22.5" width="9" height="9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="22.5 40.5 31.5 27 40.5 27 49.5 40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="31.5 63 31.5 45 31.5 27 40.5 27 40.5 45 40.5 63" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="9 31.5 9 22.5 18 22.5 18 31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><line x1="31.5" y1="45" x2="40.5" y2="45" style="fill: white;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="15.75" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="45" width="9" height="13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="49.5" y="45" width="13.5" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="49.5" y="45" width="13.5" height="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M56,31.5h.5c1.1,0,2,.9,2,2v11.5h-4.5v-11.5c0-1.1.9-2,2-2Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><path d="M9,11v2.5c0,2.49,2.01,4.5,4.5,4.5s4.5-2.01,4.5-4.5v-2.5h-9Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><line x1="4.5" y1="31.5" x2="22.5" y2="31.5" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><line x1="20.25" y1="11" x2="18" y2="11" style="fill: white;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><rect x="9" y="6.66" width="9" height="4.34" style="fill: white;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/></svg>`;
    check_in_default = IconCheckIn;
  }
});

// lib/icons/city-bus.ts
var city_bus_exports = {};
__export(city_bus_exports, {
  IconCityBus: () => IconCityBus,
  default: () => city_bus_default
});
var IconCityBus, city_bus_default;
var init_city_bus = __esm({
  "lib/icons/city-bus.ts"() {
    IconCityBus = `<svg id="city-bus" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><path d="M18,43v11.5c0,1.1.9,2,2,2h32c1.1,0,2-.9,2-2v-11.5H18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M54,20.5v-5c0-2.21-1.79-4-4-4h-28c-2.21,0-4,1.79-4,4v5h36Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/></g><path d="M20,56.5h32c1.1,0,2-.9,2-2V15.5c0-2.21-1.79-4-4-4h-28c-2.21,0-4,1.79-4,4v39c0,1.1.9,2,2,2Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="43" x2="54" y2="43" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M63,34v-9.5c0-2.21-1.79-4-4-4H13c-2.21,0-4,1.79-4,4v14" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M24.5,63h.5c1.1,0,2-.9,2-2v-4.5s-4.5,0-4.5,0v4.5c0,1.1.9,2,2,2Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M47,63h.5c1.1,0,2-.9,2-2v-4.5h-4.5v4.5c0,1.1.9,2,2,2Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="49.75" x2="31.5" y2="49.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="49.75" x2="49.5" y2="49.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    city_bus_default = IconCityBus;
  }
});

// lib/icons/cross-circled.ts
var cross_circled_exports = {};
__export(cross_circled_exports, {
  IconCrossCircled: () => IconCrossCircled,
  default: () => cross_circled_default
});
var IconCrossCircled, cross_circled_default;
var init_cross_circled = __esm({
  "lib/icons/cross-circled.ts"() {
    IconCrossCircled = `<svg id="cross-circled" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,9c-14.91,0-27,12.09-27,27s12.09,27,27,27,27-12.09,27-27-12.09-27-27-27ZM49.5,40.5h-9v9h-9v-9h-9v-9h9v-9h9v9h9v9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polygon points="31.5 22.5 40.5 22.5 40.5 31.5 49.5 31.5 49.5 40.5 40.5 40.5 40.5 49.5 31.5 49.5 31.5 40.5 22.5 40.5 22.5 31.5 31.5 31.5 31.5 22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cross_circled_default = IconCrossCircled;
  }
});

// lib/icons/cross.ts
var cross_exports = {};
__export(cross_exports, {
  IconCross: () => IconCross,
  default: () => cross_default
});
var IconCross, cross_default;
var init_cross = __esm({
  "lib/icons/cross.ts"() {
    IconCross = `<svg id="cross" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="27 9 45 9 45 27 63 27 63 45 45 45 45 63 27 63 27 45 9 45 9 27 27 27 27 9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polygon points="27 9 45 9 45 27 63 27 63 45 45 45 45 63 27 63 27 45 9 45 9 27 27 27 27 9" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cross_default = IconCross;
  }
});

// lib/icons/cruiseship.ts
var cruiseship_exports = {};
__export(cruiseship_exports, {
  IconCruiseship: () => IconCruiseship,
  default: () => cruiseship_default
});
var IconCruiseship, cruiseship_default;
var init_cruiseship = __esm({
  "lib/icons/cruiseship.ts"() {
    IconCruiseship = `<svg id="cruiseship" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M31.62,30.85c2.84-.95,5.91-.96,8.75-.03l10.88,3.53c.73.24,1.44-.4,1.29-1.15l-2.48-12.4c-.09-.47-.5-.8-.98-.8h-26.16c-.48,0-.89.34-.98.8l-2.51,12.53c-.15.75.57,1.39,1.3,1.14l10.89-3.63Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M43.28,14.55l-1.67-3.34c-.68-1.36-2.06-2.21-3.58-2.21h-4.06c-1.51,0-2.9.86-3.58,2.21l-1.67,3.34c-.33.66.15,1.45.89,1.45h12.76c.74,0,1.23-.78.89-1.45Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><path d="M39.14,34.62c-2.03-.66-4.22-.65-6.25.02l-18.43,6.15c-.48.16-.76.65-.66,1.14l2.45,12.24c3.09.82,6.18,4.32,9.26,4.32,3.5,0,7-4.5,10.5-4.5s7,4.5,10.5,4.5c3.09,0,6.18-3.5,9.26-4.32l2.48-12.42c.1-.5-.19-.99-.67-1.15l-18.44-5.99Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><path d="M31.62,30.85c2.84-.95,5.91-.96,8.75-.03l10.88,3.53c.73.24,1.44-.4,1.29-1.15l-2.48-12.4c-.09-.47-.5-.8-.98-.8h-26.16c-.48,0-.89.34-.98.8l-2.51,12.53c-.15.75.57,1.39,1.3,1.14l10.89-3.63Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M43.28,14.55l-1.67-3.34c-.68-1.36-2.06-2.21-3.58-2.21h-4.06c-1.51,0-2.9.86-3.58,2.21l-1.67,3.34c-.33.66.15,1.45.89,1.45h12.76c.74,0,1.23-.78.89-1.45Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M39.14,34.62c-2.03-.66-4.22-.65-6.25.02l-18.43,6.15c-.48.16-.76.65-.66,1.14l2.45,12.24c3.09.82,6.18,4.32,9.26,4.32,3.5,0,7-4.5,10.5-4.5s7,4.5,10.5,4.5c3.09,0,6.18-3.5,9.26-4.32l2.48-12.42c.1-.5-.19-.99-.67-1.15l-18.44-5.99Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><path d="M4.5,58.5c3.5,0,7-4.5,10.5-4.5s7,4.5,10.5,4.5,7-4.5,10.5-4.5,7,4.5,10.5,4.5,7-4.5,10.5-4.5,7,4.5,10.5,4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cruiseship_default = IconCruiseship;
  }
});

// lib/icons/elevator1.ts
var elevator1_exports = {};
__export(elevator1_exports, {
  IconElevator1: () => IconElevator1,
  default: () => elevator1_default
});
var IconElevator1, elevator1_default;
var init_elevator1 = __esm({
  "lib/icons/elevator1.ts"() {
    IconElevator1 = `<svg id="elevator_1" data-name="elevator 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="9" y="9" width="54" height="54" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="9" width="54" height="54" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="9" x2="36" y2="63" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="15.75 42.75 22.5 49.5 29.25 42.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="27" x2="22.5" y2="49.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="56.25 29.25 49.5 22.5 42.75 29.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="45" x2="49.5" y2="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    elevator1_default = IconElevator1;
  }
});

// lib/icons/elevator2.ts
var elevator2_exports = {};
__export(elevator2_exports, {
  IconElevator2: () => IconElevator2,
  default: () => elevator2_default
});
var IconElevator2, elevator2_default;
var init_elevator2 = __esm({
  "lib/icons/elevator2.ts"() {
    IconElevator2 = `<svg id="elevator_2" data-name="elevator 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="9" y="9" width="54" height="54" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="9" width="54" height="54" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g ><path d="M31.5,41.5c0,3.73-3.02,10.12-6.75,10.12s-6.75-6.4-6.75-10.12,3.02-6.75,6.75-6.75,6.75,3.02,6.75,6.75Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><circle cx="24.75" cy="27.56" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><polyline points="54 31.5 47.25 24.75 40.5 31.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="54 40.5 47.25 47.25 40.5 40.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    elevator2_default = IconElevator2;
  }
});

// lib/icons/elevator3.ts
var elevator3_exports = {};
__export(elevator3_exports, {
  IconElevator3: () => IconElevator3,
  default: () => elevator3_default
});
var IconElevator3, elevator3_default;
var init_elevator3 = __esm({
  "lib/icons/elevator3.ts"() {
    IconElevator3 = `<svg id="elevator_3" data-name="elevator 3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.5,26.5v32h36V26.5c0-2.21-1.79-4-4-4h-28c-2.21,0-4,1.79-4,4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="31.5" y1="22.5" x2="31.5" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,26.5v32h36V26.5c0-2.21-1.79-4-4-4h-28c-2.21,0-4,1.79-4,4Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 9 22.5 13.5 18 9" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 13.5 40.5 9 36 13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="27" x2="58.5" y2="27" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="36" x2="58.5" y2="36" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="45" x2="58.5" y2="45" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    elevator3_default = IconElevator3;
  }
});

// lib/icons/elevator4.ts
var elevator4_exports = {};
__export(elevator4_exports, {
  IconElevator4: () => IconElevator4,
  default: () => elevator4_default
});
var IconElevator4, elevator4_default;
var init_elevator4 = __esm({
  "lib/icons/elevator4.ts"() {
    IconElevator4 = `<svg id="elevator_4" data-name="elevator 4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="9" y="9" width="54" height="54" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="9" width="54" height="54" rx="4" ry="4" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 42.75 29.25 49.5 36 42.75" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="29.25" y1="27" x2="29.25" y2="49.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 29.25 42.75 22.5 36 29.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.75" y1="45" x2="42.75" y2="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    elevator4_default = IconElevator4;
  }
});

// lib/icons/escalator-down.ts
var escalator_down_exports = {};
__export(escalator_down_exports, {
  IconEscalatorDown: () => IconEscalatorDown,
  default: () => escalator_down_default
});
var IconEscalatorDown, escalator_down_default;
var init_escalator_down = __esm({
  "lib/icons/escalator-down.ts"() {
    IconEscalatorDown = `<svg id="escalator-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M49.5,31.38c0,3.73-3.02,10.12-6.75,10.12s-6.75-6.4-6.75-10.12,3.02-6.75,6.75-6.75,6.75,3.02,6.75,6.75Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="42.75" cy="17.44" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="26.77 58.5 35.77 58.5 35.77 49.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="40.5" x2="35.77" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="9 18 18 18 54 54 63 54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/></svg>`;
    escalator_down_default = IconEscalatorDown;
  }
});

// lib/icons/escalator-up.ts
var escalator_up_exports = {};
__export(escalator_up_exports, {
  IconEscalatorUp: () => IconEscalatorUp,
  default: () => escalator_up_default
});
var IconEscalatorUp, escalator_up_default;
var init_escalator_up = __esm({
  "lib/icons/escalator-up.ts"() {
    IconEscalatorUp = `<svg id="escalator-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M49.5,31.38c0,3.73-3.02,10.12-6.75,10.12s-6.75-6.4-6.75-10.12,3.02-6.75,6.75-6.75,6.75,3.02,6.75,6.75Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="42.75" cy="17.44" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="22.73 40.5 13.73 40.5 13.73 49.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="58.5" x2="13.73" y2="40.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="9 18 18 18 54 54 63 54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/></svg>`;
    escalator_up_default = IconEscalatorUp;
  }
});

// lib/icons/escalator.ts
var escalator_exports = {};
__export(escalator_exports, {
  IconEscalator: () => IconEscalator,
  default: () => escalator_default
});
var IconEscalator, escalator_default;
var init_escalator = __esm({
  "lib/icons/escalator.ts"() {
    IconEscalator = `<svg id="escalator" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M49.5,31.38c0,3.73-3.02,10.12-6.75,10.12s-6.75-6.4-6.75-10.12,3.02-6.75,6.75-6.75,6.75,3.02,6.75,6.75Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="42.75" cy="17.44" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="9 18 18 18 54 54 63 54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/></svg>`;
    escalator_default = IconEscalator;
  }
});

// lib/icons/family.ts
var family_exports = {};
__export(family_exports, {
  IconFamily: () => IconFamily,
  default: () => family_default
});
var IconFamily, family_default;
var init_family = __esm({
  "lib/icons/family.ts"() {
    IconFamily = `<svg id="family" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="13.5" cy="15.75" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="35.22" cy="15.75" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M13.5,27h0c2.48,0,4.5,2.02,4.5,4.5v13.5h-9v-13.5c0-2.48,2.02-4.5,4.5-4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M45,49.5h-18l4.5-9v-9c0-2.49,2.01-4.5,4.5-4.5h0c2.49,0,4.5,2.01,4.5,4.5v9l4.5,9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M4.5,45l1.6-11.36c.52-3.69,3.59-6.6,7.32-6.64.03,0,.06,0,.08,0h0c2.81,0,5.44,1.41,7,3.74l4.36,10.33" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M9,63v-31.5c0-2.49,2.01-4.5,4.5-4.5h0c2.49,0,4.5,2.01,4.5,4.5v31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="45" x2="18" y2="45" style="fill: white;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M24.85,41.07l4.15-10.33c1.56-2.34,4.18-3.74,7-3.74h0c2.81,0,5.44,1.41,7,3.74l6.5,9.76" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,63v-13.5h-4.5l4.5-9v-9c0-2.49,2.01-4.5,4.5-4.5h0c2.49,0,4.5,2.01,4.5,4.5v9l4.5,9h-4.5v13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="13.5" cy="15.75" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="58.5" cy="24.75" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,36h0c2.48,0,4.5,2.02,4.5,4.5v9h-9v-9c0-2.48,2.02-4.5,4.5-4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M45,45l6.5-6.5c1.56-1.56,4.18-2.5,7-2.5h0s.06,0,.08,0c3.79.03,6.98,2.88,7.66,6.61l1.25,6.89" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,63v-22.5c0-2.49,2.01-4.5,4.5-4.5h0c2.49,0,4.5,2.01,4.5,4.5v22.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="49.5" x2="63" y2="49.5" style="fill: white;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="58.5" cy="24.75" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="35.22" cy="15.75" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="49.5" x2="40.5" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    family_default = IconFamily;
  }
});

// lib/icons/ferry.ts
var ferry_exports = {};
__export(ferry_exports, {
  IconFerry: () => IconFerry,
  default: () => ferry_default
});
var IconFerry, ferry_default;
var init_ferry = __esm({
  "lib/icons/ferry.ts"() {
    IconFerry = `<svg id="ferry" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M13.5,54l.33.16c.39-.1.78-.16,1.17-.16,2.5,0,5,2.29,7.5,3.6v-7.6c0-.28.22-.5.5-.5h26c.28,0,.5.22.5.5v7.6c2.5-1.31,5-3.6,7.5-3.6.39,0,.78.06,1.17.16l.33-.16,4.37-13.24c.08-.16.07-.35-.03-.5l-7.92-11.88c-.27-.41-.92-.22-.92.28v6.85c0,.28-.22.5-.5.5H18.5c-.28,0-.5-.22-.5-.5v-6.85c0-.49-.64-.69-.92-.28l-7.92,11.88c-.1.15-.11.34-.03.5l4.37,13.24Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g ><rect x="22.5" y="22.5" width="27" height="9" rx=".5" ry=".5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g ><rect x="31.5" y="13.5" width="9" height="4.5" rx=".5" ry=".5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><rect x="22.5" y="22.5" width="27" height="9" rx=".5" ry=".5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="31.5" y="13.5" width="9" height="4.5" rx=".5" ry=".5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,54l.33.16c.39-.1.78-.16,1.17-.16,2.5,0,5,2.29,7.5,3.6v-7.6c0-.28.22-.5.5-.5h26c.28,0,.5.22.5.5v7.6c2.5-1.31,5-3.6,7.5-3.6.39,0,.78.06,1.17.16l.33-.16,4.37-13.24c.08-.16.07-.35-.03-.5l-7.92-11.88c-.27-.41-.92-.22-.92.28v6.85c0,.28-.22.5-.5.5H18.5c-.28,0-.5-.22-.5-.5v-6.85c0-.49-.64-.69-.92-.28l-7.92,11.88c-.1.15-.11.34-.03.5l4.37,13.24Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M4.5,58.5c3.5,0,7-4.5,10.5-4.5s7,4.5,10.5,4.5,7-4.5,10.5-4.5,7,4.5,10.5,4.5,7-4.5,10.5-4.5,7,4.5,10.5,4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    ferry_default = IconFerry;
  }
});

// lib/icons/fire-extinguisher.ts
var fire_extinguisher_exports = {};
__export(fire_extinguisher_exports, {
  IconFireExtinguisher: () => IconFireExtinguisher,
  default: () => fire_extinguisher_default
});
var IconFireExtinguisher, fire_extinguisher_default;
var init_fire_extinguisher = __esm({
  "lib/icons/fire-extinguisher.ts"() {
    IconFireExtinguisher = `<svg id="fire-extinguisher" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M27,63h18v-31.5c0-4.97-4.03-9-9-9h0c-4.97,0-9,4.03-9,9v31.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="36" y1="13.5" x2="36" y2="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,54c0-22.5,18-40.5-9-40.5h-18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,63h18v-31.5c0-4.97-4.03-9-9-9h0c-4.97,0-9,4.03-9,9v31.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    fire_extinguisher_default = IconFireExtinguisher;
  }
});

// lib/icons/fire-flame.ts
var fire_flame_exports = {};
__export(fire_flame_exports, {
  IconFireFlame: () => IconFireFlame,
  default: () => fire_flame_default
});
var IconFireFlame, fire_flame_default;
var init_fire_flame = __esm({
  "lib/icons/fire-flame.ts"() {
    IconFireFlame = `<svg id="fire" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M18,45c0,9.94,8.06,18,18,18,13.5,0,31.5-13.5,13.5-36,0,0,0,9-4.5,9-9,0-4.5-18-13.5-27,0,18-13.5,18-13.5,36Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M18,45c0,9.94,8.06,18,18,18,13.5,0,31.5-13.5,13.5-36,0,0,0,9-4.5,9-9,0-4.5-18-13.5-27,0,18-13.5,18-13.5,36Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M39.86,48.86c-6.43,0-8.36-12.86-8.36-12.86,0,0-4.5,8.41-4.5,12.86,0,5.33,4.32,9.64,9.64,9.64s9.64-4.32,9.64-9.64c0-1.26-.25-2.45-.68-3.55-1.06,2.11-3.23,3.55-5.74,3.55Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/></svg>`;
    fire_flame_default = IconFireFlame;
  }
});

// lib/icons/fire-hose.ts
var fire_hose_exports = {};
__export(fire_hose_exports, {
  IconFireHose: () => IconFireHose,
  default: () => fire_hose_default
});
var IconFireHose, fire_hose_default;
var init_fire_hose = __esm({
  "lib/icons/fire-hose.ts"() {
    IconFireHose = `<svg id="fire-hose" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="49.5" y1="63" x2="49.5" y2="67.5" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="36" x2="22.5" y2="36" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="13.5" x2="22.5" y2="58.5" style="fill: var(--icon-line-color, currentColor);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="31.5" y1="13.5" x2="31.5" y2="58.5" style="fill: var(--icon-line-color, currentColor);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="40.5" y1="13.5" x2="40.5" y2="58.5" style="fill: var(--icon-line-color, currentColor);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="49.5" y1="13.5" x2="49.5" y2="58.5" style="fill: var(--icon-line-color, currentColor);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/></svg>`;
    fire_hose_default = IconFireHose;
  }
});

// lib/icons/gravestone2.ts
var gravestone2_exports = {};
__export(gravestone2_exports, {
  IconGravestone2: () => IconGravestone2,
  default: () => gravestone2_default
});
var IconGravestone2, gravestone2_default;
var init_gravestone2 = __esm({
  "lib/icons/gravestone2.ts"() {
    IconGravestone2 = `<svg id="gravestone_2" data-name="gravestone 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M30.5,27h11c4.42,0,8,3.58,8,8v28h-27v-28c0-4.42,3.58-8,8-8Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="36" y1="9" x2="36" y2="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="18" x2="45" y2="18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30.5,27h11c4.42,0,8,3.58,8,8v28h-27v-28c0-4.42,3.58-8,8-8Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="63" x2="58.5" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    gravestone2_default = IconGravestone2;
  }
});

// lib/icons/gravestone3.ts
var gravestone3_exports = {};
__export(gravestone3_exports, {
  IconGravestone3: () => IconGravestone3,
  default: () => gravestone3_default
});
var IconGravestone3, gravestone3_default;
var init_gravestone3 = __esm({
  "lib/icons/gravestone3.ts"() {
    IconGravestone3 = `<svg id="gravestone_3" data-name="gravestone 3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="27 63 27 40.5 13.5 40.5 13.5 22.5 27 22.5 27 9 45 9 45 22.5 58.5 22.5 58.5 40.5 45 40.5 45 63" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="27 63 27 40.5 13.5 40.5 13.5 22.5 27 22.5 27 9 45 9 45 22.5 58.5 22.5 58.5 40.5 45 40.5 45 63" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="63" x2="58.5" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    gravestone3_default = IconGravestone3;
  }
});

// lib/icons/gravestone.ts
var gravestone_exports = {};
__export(gravestone_exports, {
  IconGravestone: () => IconGravestone,
  default: () => gravestone_default
});
var IconGravestone, gravestone_default;
var init_gravestone = __esm({
  "lib/icons/gravestone.ts"() {
    IconGravestone = `<svg id="gravestone" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M30.5,19h11c4.42,0,8,3.58,8,8v31.5h-27v-31.5c0-4.42,3.58-8,8-8Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M30.5,19h11c4.42,0,8,3.58,8,8v31.5h-27v-31.5c0-4.42,3.58-8,8-8Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="58.5" x2="58.5" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    gravestone_default = IconGravestone;
  }
});

// lib/icons/hello-goodbye.ts
var hello_goodbye_exports = {};
__export(hello_goodbye_exports, {
  IconHelloGoodbye: () => IconHelloGoodbye,
  default: () => hello_goodbye_default
});
var IconHelloGoodbye, hello_goodbye_default;
var init_hello_goodbye = __esm({
  "lib/icons/hello-goodbye.ts"() {
    IconHelloGoodbye = `<svg id="hello-goodbye" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="45" width="9" height="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="15.75" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M35.5,27h5v18h-9v-14c0-2.21,1.79-4,4-4Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M22.5,40.5l7.81-11.72c.74-1.11,1.99-1.78,3.33-1.78h12.15c2.27,0,4.35-1.28,5.37-3.32l2.84-5.68" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,63V31c0-2.21,1.79-4,4-4h5v36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="45" x2="40.5" y2="45" style="fill: white;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="15.75" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="45" width="9" height="13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="49.5" y="45" width="13.5" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="49.5" y="45" width="13.5" height="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M56,31.5h.5c1.1,0,2,.9,2,2v11.5h-4.5v-11.5c0-1.1.9-2,2-2Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/></svg>`;
    hello_goodbye_default = IconHelloGoodbye;
  }
});

// lib/icons/location-marker.ts
var location_marker_exports = {};
__export(location_marker_exports, {
  IconLocationMarker: () => IconLocationMarker,
  default: () => location_marker_default
});
var IconLocationMarker, location_marker_default;
var init_location_marker = __esm({
  "lib/icons/location-marker.ts"() {
    IconLocationMarker = `<svg id="location-marker" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,9c-12.43,0-22.5,10.07-22.5,22.5,0,18,22.5,31.5,22.5,31.5,0,0,22.5-13.5,22.5-31.5,0-12.43-10.07-22.5-22.5-22.5ZM36,40.5c-4.97,0-9-4.03-9-9s4.03-9,9-9,9,4.03,9,9-4.03,9-9,9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,31.5c0,18-22.5,31.5-22.5,31.5,0,0-22.5-13.5-22.5-31.5,0-12.43,10.07-22.5,22.5-22.5s22.5,10.07,22.5,22.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="31.5" r="9" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    location_marker_default = IconLocationMarker;
  }
});

// lib/icons/location-path2.ts
var location_path2_exports = {};
__export(location_path2_exports, {
  IconLocationPath2: () => IconLocationPath2,
  default: () => location_path2_default
});
var IconLocationPath2, location_path2_default;
var init_location_path2 = __esm({
  "lib/icons/location-path2.ts"() {
    IconLocationPath2 = `<svg id="location-path_2" data-name="location-path 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><path d="M60.75,16.39c0,6.75-6.75,10.61-6.75,10.61,0,0-6.75-3.86-6.75-10.61,0-3.73,3.02-6.75,6.75-6.75s6.75,3.02,6.75,6.75Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="16.34" x2="54" y2="16.34" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g><line x1="36" y1="54" x2="36" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M41.57,53.12c6.35-2.06,11.15-7.56,12.21-14.31" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-dasharray: 0 0 0 5.65; stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="36" x2="54" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><path d="M22.5,31.5c-6.21,0-11.25,5.04-11.25,11.25,0,9,11.25,15.75,11.25,15.75,0,0,11.25-6.75,11.25-15.75,0-6.21-5.04-11.25-11.25-11.25ZM22.5,47.25c-2.49,0-4.5-2.01-4.5-4.5s2.01-4.5,4.5-4.5,4.5,2.01,4.5,4.5-2.01,4.5-4.5,4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M33.75,42.75c0,9-11.25,15.75-11.25,15.75,0,0-11.25-6.75-11.25-15.75,0-6.21,5.04-11.25,11.25-11.25s11.25,5.04,11.25,11.25Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="22.5" cy="42.75" r="4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    location_path2_default = IconLocationPath2;
  }
});

// lib/icons/location-path.ts
var location_path_exports = {};
__export(location_path_exports, {
  IconLocationPath: () => IconLocationPath,
  default: () => location_path_default
});
var IconLocationPath, location_path_default;
var init_location_path = __esm({
  "lib/icons/location-path.ts"() {
    IconLocationPath = `<svg id="location-path" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><path d="M58.5,20.89c0,6.75-6.75,10.61-6.75,10.61,0,0-6.75-3.86-6.75-10.61,0-3.73,3.02-6.75,6.75-6.75s6.75,3.02,6.75,6.75Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="51.75" y1="20.84" x2="51.75" y2="20.84" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g><path d="M27,51.75c0,6.75-6.75,10.61-6.75,10.61,0,0-6.75-3.86-6.75-10.61,0-3.73,3.02-6.75,6.75-6.75s6.75,3.02,6.75,6.75Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="20.25" y1="51.7" x2="20.25" y2="51.7" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g><line x1="36" y1="22.5" x2="36" y2="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30.08,22.5h-11.35c-2.89,0-5.23,2.34-5.23,5.23,0,2.25,1.44,4.25,3.58,4.96l33.35,11.12c2.14.71,3.58,2.71,3.58,4.96,0,2.89-2.34,5.23-5.23,5.23h-9.81" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-dasharray: 0 0 0 5.92; stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="54" x2="36" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    location_path_default = IconLocationPath;
  }
});

// lib/icons/location-pin.ts
var location_pin_exports = {};
__export(location_pin_exports, {
  IconLocationPin: () => IconLocationPin,
  default: () => location_pin_default
});
var IconLocationPin, location_pin_default;
var init_location_pin = __esm({
  "lib/icons/location-pin.ts"() {
    IconLocationPin = `<svg id="location-pin" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="22.73" r="13.27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="36" y1="63" x2="36" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="35.77" cy="22.73" r="13.27" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    location_pin_default = IconLocationPin;
  }
});

// lib/icons/lounge.ts
var lounge_exports = {};
__export(lounge_exports, {
  IconLounge: () => IconLounge,
  default: () => lounge_default
});
var IconLounge, lounge_default;
var init_lounge = __esm({
  "lib/icons/lounge.ts"() {
    IconLounge = `<svg id="lounge" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M13.5,58.5l-4.13-37.17c-.2-1.78,1.19-3.33,2.98-3.33h3.62c1.23,0,2.33.75,2.79,1.89l8.25,20.61h26.65c2.23,0,3.68,2.35,2.68,4.34l-6.83,13.66H13.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M31.5,35h9l-4-10.23c-.3-.77-1.04-1.27-1.86-1.27h-4.7c-1.41,0-2.38,1.42-1.86,2.73l3.43,8.77Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="27.56" cy="12.94" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="27.56" cy="12.94" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,58.5l-4.13-37.17c-.2-1.78,1.19-3.33,2.98-3.33h3.62c1.23,0,2.33.75,2.79,1.89l8.25,20.61h26.65c2.23,0,3.68,2.35,2.68,4.34l-6.83,13.66H13.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,35h9l-4-10.23c-.3-.77-1.04-1.27-1.86-1.27h-4.7c-1.41,0-2.38,1.42-1.86,2.73l3.43,8.77Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="35" x2="40.5" y2="35" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="63" y1="58.5" x2="56.33" y2="44.84" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    lounge_default = IconLounge;
  }
});

// lib/icons/luggage-belt.ts
var luggage_belt_exports = {};
__export(luggage_belt_exports, {
  IconLuggageBelt: () => IconLuggageBelt,
  default: () => luggage_belt_default
});
var IconLuggageBelt, luggage_belt_default;
var init_luggage_belt = __esm({
  "lib/icons/luggage-belt.ts"() {
    IconLuggageBelt = `<svg id="luggage-belt" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="9" y="27" width="36" height="22.5" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="9" y="27" width="36" height="22.5" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M21.38,27v-5c0-1.1.9-2,2-2h7.25c1.1,0,2,.9,2,2v5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="58.5" x2="9" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="18" y1="58.5" x2="18" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="27" y1="58.5" x2="27" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="36" y1="58.5" x2="36" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="45" y1="58.5" x2="45" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="54" y1="58.5" x2="54" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="63" y1="58.5" x2="63" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/></svg>`;
    luggage_belt_default = IconLuggageBelt;
  }
});

// lib/icons/luggage-locker.ts
var luggage_locker_exports = {};
__export(luggage_locker_exports, {
  IconLuggageLocker: () => IconLuggageLocker,
  default: () => luggage_locker_default
});
var IconLuggageLocker, luggage_locker_default;
var init_luggage_locker = __esm({
  "lib/icons/luggage-locker.ts"() {
    IconLuggageLocker = `<svg id="luggage-locker" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="29.5" width="36" height="22.5" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="18" y="29.5" width="36" height="22.5" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M30.38,29.5v-5c0-1.1.9-2,2-2h7.25c1.1,0,2,.9,2,2v5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="9" y="9" width="54" height="54" rx="4" ry="4" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    luggage_locker_default = IconLuggageLocker;
  }
});

// lib/icons/luggage-trolley.ts
var luggage_trolley_exports = {};
__export(luggage_trolley_exports, {
  IconLuggageTrolley: () => IconLuggageTrolley,
  default: () => luggage_trolley_default
});
var IconLuggageTrolley, luggage_trolley_default;
var init_luggage_trolley = __esm({
  "lib/icons/luggage-trolley.ts"() {
    IconLuggageTrolley = `<svg id="luggage-trolley" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="22.5" width="36" height="22.5" rx="2" ry="2" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="13.5" y="22.5" width="36" height="22.5" rx="2" ry="2" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M25.88,22.5v-5c0-1.1.9-2,2-2h7.25c1.1,0,2,.9,2,2v5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="63" x2="36" y2="63" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="45" y1="63" x2="45" y2="63" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><path d="M13.5,54h41c2.21,0,4-1.79,4-4V13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    luggage_trolley_default = IconLuggageTrolley;
  }
});

// lib/icons/luggage.ts
var luggage_exports = {};
__export(luggage_exports, {
  IconLuggage: () => IconLuggage,
  default: () => luggage_default
});
var IconLuggage, luggage_default;
var init_luggage = __esm({
  "lib/icons/luggage.ts"() {
    IconLuggage = `<svg id="luggage" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="27" width="45" height="31.5" rx="4" ry="4" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="27" y1="27" x2="27" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="27" x2="45" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="13.5" y="27" width="45" height="31.5" rx="4" ry="4" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M29.25,27v-5c0-2.21,1.79-4,4-4h5.5c2.21,0,4,1.79,4,4v5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    luggage_default = IconLuggage;
  }
});

// lib/icons/map.ts
var map_exports = {};
__export(map_exports, {
  IconMap: () => IconMap,
  default: () => map_default
});
var IconMap, map_default;
var init_map = __esm({
  "lib/icons/map.ts"() {
    IconMap = `<svg id="map" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="27 18 27 58.5 45 54 45 13.5 27 18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M10.24,13.81c-.63-.16-1.24.32-1.24.97v38.44c0,.46.31.86.76.97l17.24,4.31V18l-16.76-4.19Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M62.24,17.81l-17.24-4.31v40.5l16.76,4.19c.63.16,1.24-.32,1.24-.97V18.78c0-.46-.31-.86-.76-.97Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="27" y1="18" x2="27" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="13.5" x2="45" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M62.24,17.81l-17.24-4.31-18,4.5-16.76-4.19c-.63-.16-1.24.32-1.24.97v38.44c0,.46.31.86.76.97l17.24,4.31,18-4.5,16.76,4.19c.63.16,1.24-.32,1.24-.97V18.78c0-.46-.31-.86-.76-.97Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    map_default = IconMap;
  }
});

// lib/icons/map2.ts
var map2_exports = {};
__export(map2_exports, {
  IconMap2: () => IconMap2,
  default: () => map2_default
});
var IconMap2, map2_default;
var init_map2 = __esm({
  "lib/icons/map2.ts"() {
    IconMap2 = `<svg id="map2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M41.81,13.5H13.5v45h45v-23.14s-13.76-7.89-16.69-21.86Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="27" y1="13.5" x2="58.5" y2="45" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="27" x2="40.5" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="24.86" y1="40.25" x2="13.5" y2="47.9" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="32.29" y1="48.92" x2="49.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="58.5 36 58.5 58.5 13.5 58.5 13.5 49.5 13.5 13.5 40.5 13.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><path d="M65.25,16.39c0,6.75-6.75,10.61-6.75,10.61,0,0-6.75-3.86-6.75-10.61,0-3.73,3.02-6.75,6.75-6.75s6.75,3.02,6.75,6.75Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="16.34" x2="58.5" y2="16.34" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    map2_default = IconMap2;
  }
});

// lib/icons/map3.ts
var map3_exports = {};
__export(map3_exports, {
  IconMap3: () => IconMap3,
  default: () => map3_default
});
var IconMap3, map3_default;
var init_map3 = __esm({
  "lib/icons/map3.ts"() {
    IconMap3 = `<svg id="map3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g><polygon points="31.26 37.18 27 58.5 44.18 54.41 40.5 36 31.26 37.18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M23.08,36.08c-.29-.04-.67.08-.77.25l-10.47,17.45c-.22.37-.14.7.22.79l14.95,3.93,4.26-21.32-8.19-1.11Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M49.78,37.13l-9.28-1.13,3.68,18.41,17.4,3.78c.72.16,1.05-.31.67-.94l-11.91-19.85c-.08-.13-.31-.24-.56-.27Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="31.26" y1="37.18" x2="27" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="36" x2="44.18" y2="54.41" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.78,37.13l-9.28-1.13-9.24,1.18-8.19-1.11c-.29-.04-.67.08-.77.25l-10.47,17.45c-.22.37-.14.7.22.79l14.95,3.93,17.18-4.09,17.4,3.78c.72.16,1.05-.31.67-.94l-11.91-19.85c-.08-.13-.31-.24-.56-.27Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><g><path d="M42.75,20.89c0,6.75-6.75,10.61-6.75,10.61,0,0-6.75-3.86-6.75-10.61,0-3.73,3.02-6.75,6.75-6.75s6.75,3.02,6.75,6.75Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="20.84" x2="36" y2="20.84" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    map3_default = IconMap3;
  }
});

// lib/icons/metro2.ts
var metro2_exports = {};
__export(metro2_exports, {
  IconMetro2: () => IconMetro2,
  default: () => metro2_default
});
var IconMetro2, metro2_default;
var init_metro2 = __esm({
  "lib/icons/metro2.ts"() {
    IconMetro2 = `<svg id="metro_2" data-name="metro 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M50.05,59.06c7.76-4.74,12.95-13.29,12.95-23.06,0-14.91-12.09-27-27-27s-27,12.09-27,27c0,9.76,5.18,18.31,12.95,23.06" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,40.5h27v5.5c0,4.42-3.58,8-8,8h-11c-4.42,0-8-3.58-8-8v-5.5h0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="13.5" y1="67.5" x2="27" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="67.5" x2="45" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="63" x2="54" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="22.5" y="22.5" width="27" height="31.5" rx="8" ry="8" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="40.5" x2="49.5" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    metro2_default = IconMetro2;
  }
});

// lib/icons/metro.ts
var metro_exports = {};
__export(metro_exports, {
  IconMetro: () => IconMetro,
  default: () => metro_default
});
var IconMetro, metro_default;
var init_metro = __esm({
  "lib/icons/metro.ts"() {
    IconMetro = `<svg id="metro" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18,36h36v10c0,4.42-3.58,8-8,8h-20c-4.42,0-8-3.58-8-8v-10h0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="13.5" y1="67.5" x2="27" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="67.5" x2="45" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="63" x2="54" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="13.5" width="36" height="40.5" rx="8" ry="8" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="36" x2="54" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="45" x2="27" y2="45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="45" y1="45" x2="45" y2="45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="36" y1="13.5" x2="36" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    metro_default = IconMetro;
  }
});

// lib/icons/no-smoking-circled.ts
var no_smoking_circled_exports = {};
__export(no_smoking_circled_exports, {
  IconNoSmokingCircled: () => IconNoSmokingCircled,
  default: () => no_smoking_circled_default
});
var IconNoSmokingCircled, no_smoking_circled_default;
var init_no_smoking_circled = __esm({
  "lib/icons/no-smoking-circled.ts"() {
    IconNoSmokingCircled = `<svg id="no-smoking-circled" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="27" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="22.5" y="31.5" width="31.5" height="9" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M18,28.8c0-3.15,6.3-9.45,15.75-3.15s15.75,0,15.75-3.15" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="31.5" x2="18" y2="40.5" style="fill: var(--icon-line-color, currentColor);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="16.91" y1="16.91" x2="55.09" y2="55.09" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="36" r="27" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    no_smoking_circled_default = IconNoSmokingCircled;
  }
});

// lib/icons/no-smoking.ts
var no_smoking_exports = {};
__export(no_smoking_exports, {
  IconNoSmoking: () => IconNoSmoking,
  default: () => no_smoking_default
});
var IconNoSmoking, no_smoking_default;
var init_no_smoking = __esm({
  "lib/icons/no-smoking.ts"() {
    IconNoSmoking = `<svg id="no-smoking" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="36" width="45" height="9" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M13.5,31.5c0-4.5,9-13.5,22.5-4.5s22.5,0,22.5-4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="36" x2="13.5" y2="45" style="fill: var(--icon-line-color, currentColor);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="13.5" x2="58.5" y2="58.5" style="fill: var(--icon-line-color, currentColor); stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    no_smoking_default = IconNoSmoking;
  }
});

// lib/icons/office-space.ts
var office_space_exports = {};
__export(office_space_exports, {
  IconOfficeSpace: () => IconOfficeSpace,
  default: () => office_space_default
});
var IconOfficeSpace, office_space_default;
var init_office_space = __esm({
  "lib/icons/office-space.ts"() {
    IconOfficeSpace = `<svg id="office-space" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M40.5,27h5.72c1.91,0,3.55,1.35,3.92,3.22l2.9,14.5c.5,2.48-1.4,4.78-3.92,4.78h-4.12l-4.5-22.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="41.06" cy="15.75" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="41.06" cy="15.75" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="9 27 13.5 40.5 27 40.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="45" x2="31.5" y2="45" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="20.25" y1="63" x2="20.25" y2="45" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,54h10c4.42,0,8-3.58,8-8v-10" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="63" x2="49.5" y2="54" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="36 63 31.5 49.5 45 49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.5,27h5.72c1.91,0,3.55,1.35,3.92,3.22l2.9,14.5c.5,2.48-1.4,4.78-3.92,4.78h-4.12l-4.5-22.5Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 36 36 36 40.5 27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    office_space_default = IconOfficeSpace;
  }
});

// lib/icons/palmtree-island-wave.ts
var palmtree_island_wave_exports = {};
__export(palmtree_island_wave_exports, {
  IconPalmtreeIslandWave: () => IconPalmtreeIslandWave,
  default: () => palmtree_island_wave_default
});
var IconPalmtreeIslandWave, palmtree_island_wave_default;
var init_palmtree_island_wave = __esm({
  "lib/icons/palmtree-island-wave.ts"() {
    IconPalmtreeIslandWave = `<svg id="palmtree-island-wave" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,19.98c6.77,9.03,13.54,13.54,20.31,15.8,0-8.73-9.09-15.8-20.31-15.8s-20.31,7.07-20.31,15.8c4.51-2.26,15.8-6.77,20.31-15.8" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36,19.98c-4.84-6.45-9.67-9.67-14.51-11.29,0,6.23,6.5,11.29,14.51,11.29s14.51-5.05,14.51-11.29c-3.22,1.61-11.29,4.84-14.51,11.29" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.51,31.26c0,6.23-4.51,11.29-4.51,11.29,0,0-4.51-5.05-4.51-11.29s4.51-11.29,4.51-11.29c0,0,4.51,5.05,4.51,11.29Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36,19.98s-9,11.52-6.45,30.09" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,19.98c6.77,9.03,13.54,13.54,20.31,15.8,0-8.73-9.09-15.8-20.31-15.8s-20.31,7.07-20.31,15.8c4.51-2.26,15.8-6.77,20.31-15.8" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,19.98c-4.84-6.45-9.67-9.67-14.51-11.29,0,6.23,6.5,11.29,14.51,11.29s14.51-5.05,14.51-11.29c-3.22,1.61-11.29,4.84-14.51,11.29" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.51,31.26c0,6.23-4.51,11.29-4.51,11.29,0,0-4.51-5.05-4.51-11.29s4.51-11.29,4.51-11.29c0,0,4.51,5.05,4.51,11.29Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M15,58.5c3.5,0,7,4.5,10.5,4.5s7-4.5,10.5-4.5,7,4.5,10.5,4.5,7-4.5,10.5-4.5c.07,0,.15.01.22.02-3.08-5.25-11.42-9.02-21.22-9.02s-18.14,3.77-21.22,9.02c.08,0,.15-.02.22-.02Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M57,58.5c.07,0,.15.01.22.02-3.08-5.25-11.42-9.02-21.22-9.02s-18.14,3.77-21.22,9.02c.08,0,.15-.02.22-.02" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M4.5,63c3.5,0,7-4.5,10.5-4.5s7,4.5,10.5,4.5,7-4.5,10.5-4.5,7,4.5,10.5,4.5,7-4.5,10.5-4.5,7,4.5,10.5,4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    palmtree_island_wave_default = IconPalmtreeIslandWave;
  }
});

// lib/icons/palmtree-island.ts
var palmtree_island_exports = {};
__export(palmtree_island_exports, {
  IconPalmtreeIsland: () => IconPalmtreeIsland,
  default: () => palmtree_island_default
});
var IconPalmtreeIsland, palmtree_island_default;
var init_palmtree_island = __esm({
  "lib/icons/palmtree-island.ts"() {
    IconPalmtreeIsland = `<svg id="palmtree-island" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,19.98s-13.5,16.02-4.5,34.02" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,63c0-4.97-10.07-9-22.5-9s-22.5,4.03-22.5,9h45Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,63c0-4.97-10.07-9-22.5-9s-22.5,4.03-22.5,9h45Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,19.98c6.77,9.03,13.54,13.54,20.31,15.8,0-8.73-9.09-15.8-20.31-15.8s-20.31,7.07-20.31,15.8c4.51-2.26,15.8-6.77,20.31-15.8" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36,19.98c-4.84-6.45-9.67-9.67-14.51-11.29,0,6.23,6.5,11.29,14.51,11.29s14.51-5.05,14.51-11.29c-3.22,1.61-11.29,4.84-14.51,11.29" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M40.51,31.26c0,6.23-4.51,11.29-4.51,11.29,0,0-4.51-5.05-4.51-11.29s4.51-11.29,4.51-11.29c0,0,4.51,5.05,4.51,11.29Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36,19.98c6.77,9.03,13.54,13.54,20.31,15.8,0-8.73-9.09-15.8-20.31-15.8s-20.31,7.07-20.31,15.8c4.51-2.26,15.8-6.77,20.31-15.8" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,19.98c-4.84-6.45-9.67-9.67-14.51-11.29,0,6.23,6.5,11.29,14.51,11.29s14.51-5.05,14.51-11.29c-3.22,1.61-11.29,4.84-14.51,11.29" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M40.51,31.26c0,6.23-4.51,11.29-4.51,11.29,0,0-4.51-5.05-4.51-11.29s4.51-11.29,4.51-11.29c0,0,4.51,5.05,4.51,11.29Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    palmtree_island_default = IconPalmtreeIsland;
  }
});

// lib/icons/palmtree.ts
var palmtree_exports = {};
__export(palmtree_exports, {
  IconPalmtree: () => IconPalmtree,
  default: () => palmtree_default
});
var IconPalmtree, palmtree_default;
var init_palmtree = __esm({
  "lib/icons/palmtree.ts"() {
    IconPalmtree = `<svg id="palmtree" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,22.5c8.1,10.8,16.2,16.2,24.3,18.9,0-10.44-10.88-18.9-24.3-18.9s-24.3,8.46-24.3,18.9c5.4-2.7,18.9-8.1,24.3-18.9" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36,22.5c-5.79-7.71-11.57-11.57-17.36-13.5,0,7.46,7.77,13.5,17.36,13.5s17.36-6.04,17.36-13.5c-3.86,1.93-13.5,5.79-17.36,13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M41.4,36c0,7.46-5.4,13.5-5.4,13.5,0,0-5.4-6.04-5.4-13.5s5.4-13.5,5.4-13.5c0,0,5.4,6.04,5.4,13.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36,22.5s-18,22.5-4.5,40.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="63" x2="58.5" y2="63" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,22.5c8.1,10.8,16.2,16.2,24.3,18.9,0-10.44-10.88-18.9-24.3-18.9s-24.3,8.46-24.3,18.9c5.4-2.7,18.9-8.1,24.3-18.9" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,22.5c-5.79-7.71-11.57-11.57-17.36-13.5,0,7.46,7.77,13.5,17.36,13.5s17.36-6.04,17.36-13.5c-3.86,1.93-13.5,5.79-17.36,13.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M41.4,36c0,7.46-5.4,13.5-5.4,13.5,0,0-5.4-6.04-5.4-13.5s5.4-13.5,5.4-13.5c0,0,5.4,6.04,5.4,13.5Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    palmtree_default = IconPalmtree;
  }
});

// lib/icons/parasol-island-wave.ts
var parasol_island_wave_exports = {};
__export(parasol_island_wave_exports, {
  IconParasolIslandWave: () => IconParasolIslandWave,
  default: () => parasol_island_wave_default
});
var IconParasolIslandWave, parasol_island_wave_default;
var init_parasol_island_wave = __esm({
  "lib/icons/parasol-island-wave.ts"() {
    IconParasolIslandWave = `<svg id="parasol-island-wave" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M23.42,12.77c-11.48,4.76-16.93,17.92-12.18,29.4,0,0,1.43-4.07,4.71-5.43s7.17.51,7.17.51c0,0,2.76-4.62,7.68-6.66s10.14-.72,10.14-.72c0,0,1.43-4.07,4.71-5.43s7.17.51,7.17.51c-4.76-11.48-17.92-16.93-29.4-12.18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M40.94,29.87c-7.38-17.82-17.52-17.1-17.52-17.1,0,0-7.68,6.66-.3,24.48" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="30.8" y1="30.59" x2="36" y2="49.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M23.42,12.77c-11.48,4.76-16.93,17.92-12.18,29.4,0,0,1.43-4.07,4.71-5.43s7.17.51,7.17.51c0,0,2.76-4.62,7.68-6.66s10.14-.72,10.14-.72c0,0,1.43-4.07,4.71-5.43s7.17.51,7.17.51c-4.76-11.48-17.92-16.93-29.4-12.18Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M15,58.5c3.5,0,7,4.5,10.5,4.5s7-4.5,10.5-4.5,7,4.5,10.5,4.5,7-4.5,10.5-4.5c.07,0,.15.01.22.02-3.08-5.25-11.42-9.02-21.22-9.02s-18.14,3.77-21.22,9.02c.08,0,.15-.02.22-.02Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M57,58.5c.07,0,.15.01.22.02-3.08-5.25-11.42-9.02-21.22-9.02s-18.14,3.77-21.22,9.02c.08,0,.15-.02.22-.02" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M4.5,63c3.5,0,7-4.5,10.5-4.5s7,4.5,10.5,4.5,7-4.5,10.5-4.5,7,4.5,10.5,4.5,7-4.5,10.5-4.5,7,4.5,10.5,4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    parasol_island_wave_default = IconParasolIslandWave;
  }
});

// lib/icons/parasol-island.ts
var parasol_island_exports = {};
__export(parasol_island_exports, {
  IconParasolIsland: () => IconParasolIsland,
  default: () => parasol_island_default
});
var IconParasolIsland, parasol_island_default;
var init_parasol_island = __esm({
  "lib/icons/parasol-island.ts"() {
    IconParasolIsland = `<svg id="parasol-island" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M26.06,12.77c-11.48,4.76-16.93,17.92-12.18,29.4,0,0,1.43-4.07,4.71-5.43s7.17.51,7.17.51c0,0,2.76-4.62,7.68-6.66s10.14-.72,10.14-.72c0,0,1.43-4.07,4.71-5.43s7.17.51,7.17.51c-4.76-11.48-17.92-16.93-29.4-12.18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M58.5,63c0-4.97-10.07-9-22.5-9s-22.5,4.03-22.5,9h45Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M43.58,29.87c-7.38-17.82-17.52-17.1-17.52-17.1,0,0-7.68,6.66-.3,24.48" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="33.44" y1="30.59" x2="43.14" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M26.06,12.77c-11.48,4.76-16.93,17.92-12.18,29.4,0,0,1.43-4.07,4.71-5.43s7.17.51,7.17.51c0,0,2.76-4.62,7.68-6.66s10.14-.72,10.14-.72c0,0,1.43-4.07,4.71-5.43s7.17.51,7.17.51c-4.76-11.48-17.92-16.93-29.4-12.18Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M58.5,63c0-4.97-10.07-9-22.5-9s-22.5,4.03-22.5,9h45Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    parasol_island_default = IconParasolIsland;
  }
});

// lib/icons/parasol.ts
var parasol_exports = {};
__export(parasol_exports, {
  IconParasol: () => IconParasol,
  default: () => parasol_default
});
var IconParasol, parasol_default;
var init_parasol = __esm({
  "lib/icons/parasol.ts"() {
    IconParasol = `<svg id="parasol" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M36,13.5c-12.43,0-22.5,10.07-22.5,22.5,0,0,2.88-3.21,6.43-3.21s6.43,3.21,6.43,3.21c0,0,4.32-3.21,9.64-3.21s9.64,3.21,9.64,3.21c0,0,2.88-3.21,6.43-3.21s6.43,3.21,6.43,3.21c0-12.43-10.07-22.5-22.5-22.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M45.64,36c0-19.29-9.64-22.5-9.64-22.5,0,0-9.64,3.21-9.64,22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="32.79" x2="36" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,13.5c-12.43,0-22.5,10.07-22.5,22.5,0,0,2.88-3.21,6.43-3.21s6.43,3.21,6.43,3.21c0,0,4.32-3.21,9.64-3.21s9.64,3.21,9.64,3.21c0,0,2.88-3.21,6.43-3.21s6.43,3.21,6.43,3.21c0-12.43-10.07-22.5-22.5-22.5Z" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="63" x2="58.5" y2="63" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    parasol_default = IconParasol;
  }
});

// lib/icons/plaster.ts
var plaster_exports = {};
__export(plaster_exports, {
  IconPlaster: () => IconPlaster,
  default: () => plaster_default
});
var IconPlaster, plaster_default;
var init_plaster = __esm({
  "lib/icons/plaster.ts"() {
    IconPlaster = `<svg id="plaster" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M39.18,13.73l-25.46,25.46c-5.27,5.27-5.27,13.82,0,19.09s13.82,5.27,19.09,0l25.46-25.46c5.27-5.27,5.27-13.82,0-19.09-5.27-5.27-13.82-5.27-19.09,0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="16.91" y1="36" x2="36" y2="55.09" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="16.91" x2="55.09" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="29.64" y1="36" x2="29.64" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="29.64" x2="36" y2="29.64" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="42.36" x2="36" y2="42.36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.36" y1="36" x2="42.36" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M39.18,13.73l-25.46,25.46c-5.27,5.27-5.27,13.82,0,19.09s13.82,5.27,19.09,0l25.46-25.46c5.27-5.27,5.27-13.82,0-19.09-5.27-5.27-13.82-5.27-19.09,0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    plaster_default = IconPlaster;
  }
});

// lib/icons/plasters.ts
var plasters_exports = {};
__export(plasters_exports, {
  IconPlasters: () => IconPlasters,
  default: () => plasters_default
});
var IconPlasters, plasters_default;
var init_plasters = __esm({
  "lib/icons/plasters.ts"() {
    IconPlasters = `<svg id="plasters" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M39.18,13.73l-25.46,25.46c-5.27,5.27-5.27,13.82,0,19.09,5.27,5.27,13.82,5.27,19.09,0l25.46-25.46c5.27-5.27,5.27-13.82,0-19.09-5.27-5.27-13.82-5.27-19.09,0Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M13.73,32.82l25.46,25.46c5.27,5.27,13.82,5.27,19.09,0s5.27-13.82,0-19.09l-25.46-25.46c-5.27-5.27-13.82-5.27-19.09,0-5.27,5.27-5.27,13.82,0,19.09Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="16.91" y1="36" x2="36" y2="55.09" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="16.91" x2="55.09" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="29.64" y1="36" x2="29.64" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="29.64" x2="36" y2="29.64" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="42.36" x2="36" y2="42.36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="42.36" y1="36" x2="42.36" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M39.18,13.73l-25.46,25.46c-5.27,5.27-5.27,13.82,0,19.09,5.27,5.27,13.82,5.27,19.09,0l25.46-25.46c5.27-5.27,5.27-13.82,0-19.09-5.27-5.27-13.82-5.27-19.09,0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    plasters_default = IconPlasters;
  }
});

// lib/icons/pointer-target.ts
var pointer_target_exports = {};
__export(pointer_target_exports, {
  IconPointerTarget: () => IconPointerTarget,
  default: () => pointer_target_default
});
var IconPointerTarget, pointer_target_default;
var init_pointer_target = __esm({
  "lib/icons/pointer-target.ts"() {
    IconPointerTarget = `<svg id="pointer-target" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="22.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="36" r="22.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="4.5" x2="36" y2="22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="49.5" x2="36" y2="67.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="4.5" y1="36" x2="22.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="36" x2="67.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="31.5" x2="36" y2="40.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.5" y1="36" x2="40.5" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    pointer_target_default = IconPointerTarget;
  }
});

// lib/icons/rental-car.ts
var rental_car_exports = {};
__export(rental_car_exports, {
  IconRentalCar: () => IconRentalCar,
  default: () => rental_car_default
});
var IconRentalCar, rental_car_default;
var init_rental_car = __esm({
  "lib/icons/rental-car.ts"() {
    IconRentalCar = `<svg id="rental-car" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="40.5" width="45" height="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M13.5,40.5l7.85-15.78c.68-1.36,2.06-2.22,3.58-2.22h22.14c1.52,0,2.91.86,3.58,2.22l7.85,15.78v13.5H13.5v-13.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="40.5" x2="58.5" y2="40.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,54h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M52.5,54h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,54h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M52.5,54h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><line x1="18" y1="47.5" x2="27" y2="47.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="47.5" x2="54" y2="47.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="36" x2="15.74" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="56.26" y1="36" x2="63" y2="36" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="27" cy="13.5" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="49.5 13.5 45 13.5 31.5 13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="40.5" y1="18" x2="40.5" y2="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="18" x2="45" y2="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    rental_car_default = IconRentalCar;
  }
});

// lib/icons/restroom.ts
var restroom_exports = {};
__export(restroom_exports, {
  IconRestroom: () => IconRestroom,
  default: () => restroom_default
});
var IconRestroom, restroom_default;
var init_restroom = __esm({
  "lib/icons/restroom.ts"() {
    IconRestroom = `<svg id="restroom" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="20.25" cy="15.75" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="50.97" cy="15.75" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M20.25,27h0c2.48,0,4.5,2.02,4.5,4.5v13.5h-9v-13.5c0-2.48,2.02-4.5,4.5-4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M60.75,49.5h-18l4.5-9v-9c0-2.49,2.01-4.5,4.5-4.5h0c2.49,0,4.5,2.01,4.5,4.5v9l4.5,9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M6.75,40.5l6.5-9.76c1.56-2.34,4.18-3.74,7-3.74h0c2.81,0,5.44,1.41,7,3.74l6.5,9.76" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M15.75,63v-31.5c0-2.49,2.01-4.5,4.5-4.5h0c2.49,0,4.5,2.01,4.5,4.5v31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="15.75" y1="45" x2="24.75" y2="45" style="fill: white;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M38.25,40.5l6.5-9.76c1.56-2.34,4.18-3.74,7-3.74h0c2.81,0,5.44,1.41,7,3.74l6.5,9.76" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M47.25,63v-13.5h-4.5l4.5-9v-9c0-2.49,2.01-4.5,4.5-4.5h0c2.49,0,4.5,2.01,4.5,4.5v9l4.5,9h-4.5v13.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="20.25" cy="15.75" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="50.97" cy="15.75" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="47.25" y1="49.5" x2="56.25" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    restroom_default = IconRestroom;
  }
});

// lib/icons/security-camera2.ts
var security_camera2_exports = {};
__export(security_camera2_exports, {
  IconSecurityCamera2: () => IconSecurityCamera2,
  default: () => security_camera2_default
});
var IconSecurityCamera2, security_camera2_default;
var init_security_camera2 = __esm({
  "lib/icons/security-camera2.ts"() {
    IconSecurityCamera2 = `<svg id="security_camera_2" data-name="security camera 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="14.21" y="25.64" width="40.5" height="18" rx="2" ry="2" transform="translate(34.58 -14.22) rotate(45)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><line x1="58.33" y1="52.14" x2="51.96" y2="58.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M18,58.5h7c1.1,0,2-.9,2-2v-16" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><g><rect x="14.21" y="25.64" width="40.5" height="18" rx="2" ry="2" transform="translate(34.58 -14.22) rotate(45)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.33" y1="52.14" x2="51.96" y2="58.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><path d="M13.5,54v9c2.49,0,4.5-2.01,4.5-4.5s-2.01-4.5-4.5-4.5Z" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="27" x2="27" y2="27" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    security_camera2_default = IconSecurityCamera2;
  }
});

// lib/icons/security-camera3.ts
var security_camera3_exports = {};
__export(security_camera3_exports, {
  IconSecurityCamera3: () => IconSecurityCamera3,
  default: () => security_camera3_default
});
var IconSecurityCamera3, security_camera3_default;
var init_security_camera3 = __esm({
  "lib/icons/security-camera3.ts"() {
    IconSecurityCamera3 = `<svg id="security_camera_3" data-name="security camera 3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M18,31.5v4.5c0,9.94,8.06,18,18,18s18-8.06,18-18v-4.5H18Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="45" r="9" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M18,31.5v4.5c0,9.94,8.06,18,18,18s18-8.06,18-18v-4.5H18Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,18h45v11.5c0,1.1-.9,2-2,2H15.5c-1.1,0-2-.9-2-2v-11.5h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="45" x2="36" y2="45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    security_camera3_default = IconSecurityCamera3;
  }
});

// lib/icons/security-camera.ts
var security_camera_exports = {};
__export(security_camera_exports, {
  IconSecurityCamera: () => IconSecurityCamera,
  default: () => security_camera_default
});
var IconSecurityCamera, security_camera_default;
var init_security_camera = __esm({
  "lib/icons/security-camera.ts"() {
    IconSecurityCamera = `<svg id="security_camera" data-name="security camera" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><rect x="13.74" y="24.99" width="40.5" height="18" rx="2" ry="2" transform="translate(33.99 -14.08) rotate(45)" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /><line x1="57.86" y1="51.5" x2="51.5" y2="57.86" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><g><rect x="13.74" y="24.99" width="40.5" height="18" rx="2" ry="2" transform="translate(33.99 -14.08) rotate(45)" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="57.86" y1="51.5" x2="51.5" y2="57.86" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><line x1="36" y1="9" x2="36" y2="36" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27.04" y1="26.26" x2="27.04" y2="26.26" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    security_camera_default = IconSecurityCamera;
  }
});

// lib/icons/security-check.ts
var security_check_exports = {};
__export(security_check_exports, {
  IconSecurityCheck: () => IconSecurityCheck,
  default: () => security_check_default
});
var IconSecurityCheck, security_check_default;
var init_security_check = __esm({
  "lib/icons/security-check.ts"() {
    IconSecurityCheck = `<svg id="security-check" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="18" cy="15.75" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="49.5" cy="19.88" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M18,27h0c2.48,0,4.5,2.02,4.5,4.5v13.5h-9v-13.5c0-2.48,2.02-4.5,4.5-4.5Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polygon points="58.5 49.5 40.5 49.5 45 40.5 45 31.5 54 31.5 54 40.5 58.5 49.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polyline points="4.5 45 4.5 36 13.5 27 22.5 27 31.5 40.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,63v-31.5c0-2.49,2.01-4.5,4.5-4.5h0c2.49,0,4.5,2.01,4.5,4.5v31.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="45" x2="22.5" y2="45" style="fill: white;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="61 18 61 27 54 31.5 45 31.5 38 27 38 18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="45 63 45 49.5 40.5 49.5 45 40.5 45 31.5 54 31.5 54 40.5 58.5 49.5 54 49.5 54 63" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="18" cy="15.75" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="49.5" cy="19.88" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="49.5" x2="54" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="31.5 63 31.5 4.5 67.5 4.5 67.5 63" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    security_check_default = IconSecurityCheck;
  }
});

// lib/icons/ship.ts
var ship_exports = {};
__export(ship_exports, {
  IconShip: () => IconShip,
  default: () => ship_default
});
var IconShip, ship_default;
var init_ship = __esm({
  "lib/icons/ship.ts"() {
    IconShip = `<svg id="ship" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="18 54.86 13.5 40.5 36 27 58.5 40.5 54 54.86" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="18 37.8 22.5 18 49.5 18 54 37.8" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45 18 27 18 31.5 9 40.5 9 45 18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="36" x2="36" y2="54" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="14.98 45.22 36 36 57.02 45.22" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M4.5,58.5c3.5,0,7-4.5,10.5-4.5s7,4.5,10.5,4.5,7-4.5,10.5-4.5,7,4.5,10.5,4.5,7-4.5,10.5-4.5,7,4.5,10.5,4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    ship_default = IconShip;
  }
});

// lib/icons/signpost2.ts
var signpost2_exports = {};
__export(signpost2_exports, {
  IconSignpost2: () => IconSignpost2,
  default: () => signpost2_default
});
var IconSignpost2, signpost2_default;
var init_signpost2 = __esm({
  "lib/icons/signpost2.ts"() {
    IconSignpost2 = `<svg id="signpost-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="45 18 22.5 18 13.5 24.75 22.5 31.5 54 31.5 54 18 45 18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><polygon points="33 49.5 48 49.5 54 45 48 40.5 27 40.5 27 49.5 33 49.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="36" y1="49.5" x2="36" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="31.5" x2="36" y2="40.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="9" x2="36" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="58.5" x2="58.5" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45 18 22.5 18 13.5 24.75 22.5 31.5 54 31.5 54 18 45 18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="33 49.5 48 49.5 54 45 48 40.5 27 40.5 27 49.5 33 49.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    signpost2_default = IconSignpost2;
  }
});

// lib/icons/signpost.ts
var signpost_exports = {};
__export(signpost_exports, {
  IconSignpost: () => IconSignpost,
  default: () => signpost_default
});
var IconSignpost, signpost_default;
var init_signpost = __esm({
  "lib/icons/signpost.ts"() {
    IconSignpost = `<svg id="signpost" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polygon points="45 18 22.5 18 13.5 24.75 22.5 31.5 54 31.5 54 18 45 18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="36" y1="31.5" x2="36" y2="58.5" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="9" x2="36" y2="18" style="fill: none;  stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="58.5" x2="58.5" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polygon points="45 18 22.5 18 13.5 24.75 22.5 31.5 54 31.5 54 18 45 18" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    signpost_default = IconSignpost;
  }
});

// lib/icons/smoking.ts
var smoking_exports = {};
__export(smoking_exports, {
  IconSmoking: () => IconSmoking,
  default: () => smoking_default
});
var IconSmoking, smoking_default;
var init_smoking = __esm({
  "lib/icons/smoking.ts"() {
    IconSmoking = `<svg id="smoking" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="36" width="45" height="9" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M13.5,31.5c0-4.5,9-13.5,22.5-4.5s22.5,0,22.5-4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="36" x2="13.5" y2="45" style="fill: var(--icon-line-color, currentColor);  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    smoking_default = IconSmoking;
  }
});

// lib/icons/stairs-down.ts
var stairs_down_exports = {};
__export(stairs_down_exports, {
  IconStairsDown: () => IconStairsDown,
  default: () => stairs_down_default
});
var IconStairsDown, stairs_down_default;
var init_stairs_down = __esm({
  "lib/icons/stairs-down.ts"() {
    IconStairsDown = `<svg id="stairs-down" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="18 63 18 54 27 54 27 45 36 45 36 36 45 36 45 27 54 27 54 18 63 18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.61 31.39 13.61 31.39 13.61 22.39" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="31.39" y1="13.39" x2="13.61" y2="31.39" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    stairs_down_default = IconStairsDown;
  }
});

// lib/icons/stairs-up.ts
var stairs_up_exports = {};
__export(stairs_up_exports, {
  IconStairsUp: () => IconStairsUp,
  default: () => stairs_up_default
});
var IconStairsUp, stairs_up_default;
var init_stairs_up = __esm({
  "lib/icons/stairs-up.ts"() {
    IconStairsUp = `<svg id="stairs-up" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="18 63 18 54 27 54 27 45 36 45 36 36 45 36 45 27 54 27 54 18 63 18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 13.5 31.5 13.5 31.5 22.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.73" y1="31.5" x2="31.5" y2="13.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    stairs_up_default = IconStairsUp;
  }
});

// lib/icons/stairs.ts
var stairs_exports = {};
__export(stairs_exports, {
  IconStairs: () => IconStairs,
  default: () => stairs_default
});
var IconStairs, stairs_default;
var init_stairs = __esm({
  "lib/icons/stairs.ts"() {
    IconStairs = `<svg id="stairs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><polyline points="18 63 18 54 27 54 27 45 36 45 36 36 45 36 45 27 54 27 54 18 63 18" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    stairs_default = IconStairs;
  }
});

// lib/icons/taxi-stop.ts
var taxi_stop_exports = {};
__export(taxi_stop_exports, {
  IconTaxiStop: () => IconTaxiStop,
  default: () => taxi_stop_default
});
var IconTaxiStop, taxi_stop_default;
var init_taxi_stop = __esm({
  "lib/icons/taxi-stop.ts"() {
    IconTaxiStop = `<svg id="taxi-stop" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="4.5" y="45" width="9" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="27" cy="15.75" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><rect x="22.5" y="27" width="9" height="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M13.5,40.5l9-13.5h14.29c2.27,0,4.35-1.28,5.37-3.32l2.84-5.68" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="22.5 63 22.5 45 22.5 27 31.5 27 31.5 45 31.5 63" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="45" x2="31.5" y2="45" style="fill: white;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="27" cy="15.75" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="4.5" y="45" width="9" height="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="49.5" y="43" width="22.5" height="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M72,56.5h-22.5v-13.5l7.85-15.78c.68-1.36,2.06-2.22,3.58-2.22h11.07" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="43" x2="72" y2="43" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,56.5h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M49.5,56.5h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><line x1="54" y1="50" x2="63" y2="50" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="38.5" x2="51.74" y2="38.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    taxi_stop_default = IconTaxiStop;
  }
});

// lib/icons/taxi.ts
var taxi_exports = {};
__export(taxi_exports, {
  IconTaxi: () => IconTaxi,
  default: () => taxi_default
});
var IconTaxi, taxi_default;
var init_taxi = __esm({
  "lib/icons/taxi.ts"() {
    IconTaxi = `<svg id="taxi" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="13.5" y="38.5" width="45" height="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M29,11.5h14c1.1,0,2,.9,2,2v7h-18v-7c0-1.1.9-2,2-2Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M13.5,38.5l7.85-15.78c.68-1.36,2.06-2.22,3.58-2.22h22.14c1.52,0,2.91.86,3.58,2.22l7.85,15.78v13.5H13.5v-13.5Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="38.5" x2="58.5" y2="38.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M52.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M13.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><path d="M52.5,52h6v4.5c0,1.1-.9,2-2,2h-2c-1.1,0-2-.9-2-2v-4.5h0Z" style="fill: var(--icon-line-color, currentColor); stroke-width: 0px;"/><line x1="18" y1="45.5" x2="27" y2="45.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45" y1="45.5" x2="54" y2="45.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="9" y1="34" x2="15.74" y2="34" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="56.26" y1="34" x2="63" y2="34" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M27,20.5v-7c0-1.1.9-2,2-2h14c1.1,0,2,.9,2,2v7" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    taxi_default = IconTaxi;
  }
});

// lib/icons/train-track.ts
var train_track_exports = {};
__export(train_track_exports, {
  IconTrainTrack: () => IconTrainTrack,
  default: () => train_track_default
});
var IconTrainTrack, train_track_default;
var init_train_track = __esm({
  "lib/icons/train-track.ts"() {
    IconTrainTrack = `<svg id="train-track" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="22.5" y1="6.75" x2="22.5" y2="65.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="6.75" x2="49.5" y2="65.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="15.75" x2="58.5" y2="15.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="13.5" y1="29.25" x2="58.5" y2="29.25" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="13.5" y1="42.75" x2="58.5" y2="42.75" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/><line x1="13.5" y1="56.25" x2="58.5" y2="56.25" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-l,  calc(var(--icon-stroke-width, 5) * 1.5));"/></svg>`;
    train_track_default = IconTrainTrack;
  }
});

// lib/icons/train.ts
var train_exports = {};
__export(train_exports, {
  IconTrain: () => IconTrain,
  default: () => train_default
});
var IconTrain, train_default;
var init_train = __esm({
  "lib/icons/train.ts"() {
    IconTrain = `<svg id="train" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M45,45h-18l-7.88-27.57c-.71,1.19-1.12,2.58-1.12,4.07v24.5c0,4.42,3.58,8,8,8h20c4.42,0,8-3.58,8-8v-24.5c0-1.49-.41-2.88-1.12-4.07l-7.88,27.57Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><line x1="13.78" y1="67.5" x2="27.28" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.78" y1="67.5" x2="45.28" y2="54" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18.28" y1="63" x2="54.28" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><rect x="18" y="13.5" width="36" height="40.5" rx="8" ry="8" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="19.11 17.39 27 45 45 45 52.89 17.39" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="22.5" y1="4.5" x2="49.5" y2="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><line x1="27" y1="4.5" x2="31.5" y2="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/><line x1="45" y1="4.5" x2="40.5" y2="13.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/></svg>`;
    train_default = IconTrain;
  }
});

// lib/icons/walking2.ts
var walking2_exports = {};
__export(walking2_exports, {
  IconWalking2: () => IconWalking2,
  default: () => walking2_default
});
var IconWalking2, walking2_default;
var init_walking2 = __esm({
  "lib/icons/walking2.ts"() {
    IconWalking2 = `<svg id="walking_2" data-name="walking 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><rect x="18" y="49.5" width="9" height="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="47" cy="15.75" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M45,45h-9l3.67-14.69c.49-1.94,2.23-3.31,4.24-3.31h0c2.84,0,4.92,2.67,4.24,5.42l-3.14,12.58Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M27,40.5l3.61-7.21c.58-1.16,1.52-2.1,2.68-2.68l3.97-1.98c2.13-1.07,4.48-1.62,6.87-1.62h3.04c1.46,0,2.82.73,3.63,1.94l3.35,5.02c.43.65.98,1.2,1.63,1.64l7.23,4.89" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M31.5,63l3.87-7.73c.42-.83.63-1.75.63-2.68v-7.58l3.67-14.69c.49-1.94,2.23-3.31,4.24-3.31h0c2.84,0,4.92,2.67,4.24,5.42l-3.14,12.58,3.87,7.73c.42.83.63,1.75.63,2.68v7.58" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="45" x2="45" y2="45" style="fill: white;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="47" cy="15.75" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><polyline points="27 49.5 27 63 18 63 18 49.5 27 49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="40.5" x2="27" y2="49.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-s, calc(var(--icon-stroke-width, 5) * 0.5));"/></svg>`;
    walking2_default = IconWalking2;
  }
});

// lib/icons/walking.ts
var walking_exports = {};
__export(walking_exports, {
  IconWalking: () => IconWalking,
  default: () => walking_default
});
var IconWalking, walking_default;
var init_walking = __esm({
  "lib/icons/walking.ts"() {
    IconWalking = `<svg id="walking" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="38" cy="15.75" r="5.06" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36,45h-9l3.67-14.69c.49-1.94,2.23-3.31,4.24-3.31h0c2.84,0,4.92,2.67,4.24,5.42l-3.14,12.58Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M18,40.5l4.5-9,6.54-3.27c1.62-.81,3.41-1.23,5.22-1.23h0c3.9,0,7.55,1.95,9.71,5.2l1.83,2.75,8.2,5.55" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M22.5,63l3.87-7.73c.42-.83.63-1.75.63-2.68v-7.58l3.67-14.69c.49-1.94,2.23-3.31,4.24-3.31h0c2.84,0,4.92,2.67,4.24,5.42l-3.14,12.58,3.87,7.73c.42.83.63,1.75.63,2.68v7.58" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="27" y1="45" x2="36" y2="45" style="fill: white;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="38" cy="15.75" r="5.06" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    walking_default = IconWalking;
  }
});

// lib/icons/cloud-lightning.ts
var cloud_lightning_exports = {};
__export(cloud_lightning_exports, {
  IconCloudLightning: () => IconCloudLightning,
  default: () => cloud_lightning_default
});
var IconCloudLightning, cloud_lightning_default;
var init_cloud_lightning = __esm({
  "lib/icons/cloud-lightning.ts"() {
    IconCloudLightning = `<svg id="cloud-lightning" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M30.7,46.19v7.14c0,.55.45,1,1,1h4.3v6.67c0,1.02,1.35,1.39,1.86.5l6.5-11.2c.39-.67-.09-1.5-.87-1.5h-3v-2.39" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,24.5c-.2,0-.39.02-.58.03-1.99-7.77-9.02-13.53-17.42-13.53s-15.43,5.76-17.42,13.53c-.19-.01-.39-.03-.58-.03-4.97,0-9,4.03-9,9s4.03,9,9,9c1.74,0,3.36-.5,4.74-1.36,3.29,3.59,8.01,5.86,13.26,5.86s9.97-2.27,13.26-5.86c1.38.86,3,1.36,4.74,1.36,4.97,0,9-4.03,9-9s-4.03-9-9-9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M54,24.5c-.2,0-.39.02-.58.03-1.99-7.77-9.02-13.53-17.42-13.53s-15.43,5.76-17.42,13.53c-.19-.01-.39-.03-.58-.03-4.97,0-9,4.03-9,9s4.03,9,9,9c1.74,0,3.36-.5,4.74-1.36,3.29,3.59,8.01,5.86,13.26,5.86s9.97-2.27,13.26-5.86c1.38.86,3,1.36,4.74,1.36,4.97,0,9-4.03,9-9s-4.03-9-9-9Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cloud_lightning_default = IconCloudLightning;
  }
});

// lib/icons/cloud-rain2.ts
var cloud_rain2_exports = {};
__export(cloud_rain2_exports, {
  IconCloudRain2: () => IconCloudRain2,
  default: () => cloud_rain2_default
});
var IconCloudRain2, cloud_rain2_default;
var init_cloud_rain2 = __esm({
  "lib/icons/cloud-rain2.ts"() {
    IconCloudRain2 = `<svg id="cloud-rain_copy_2" data-name="cloud-rain copy 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54,24.5c-.2,0-.39.02-.58.03-1.99-7.77-9.02-13.53-17.42-13.53s-15.43,5.76-17.42,13.53c-.19-.01-.39-.03-.58-.03-4.97,0-9,4.03-9,9s4.03,9,9,9c1.74,0,3.36-.5,4.74-1.36,3.29,3.59,8.01,5.86,13.26,5.86s9.97-2.27,13.26-5.86c1.38.86,3,1.36,4.74,1.36,4.97,0,9-4.03,9-9s-4.03-9-9-9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M54,24.5c-.2,0-.39.02-.58.03-1.99-7.77-9.02-13.53-17.42-13.53s-15.43,5.76-17.42,13.53c-.19-.01-.39-.03-.58-.03-4.97,0-9,4.03-9,9s4.03,9,9,9c1.74,0,3.36-.5,4.74-1.36,3.29,3.59,8.01,5.86,13.26,5.86s9.97-2.27,13.26-5.86c1.38.86,3,1.36,4.74,1.36,4.97,0,9-4.03,9-9s-4.03-9-9-9Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="26" y1="51.5" x2="21.5" y2="60.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="54" x2="31.5" y2="63" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="49.5" x2="45" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="54" x2="56.25" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.5" y1="54" x2="11.25" y2="58.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cloud_rain2_default = IconCloudRain2;
  }
});

// lib/icons/cloud-small-rain.ts
var cloud_small_rain_exports = {};
__export(cloud_small_rain_exports, {
  IconCloudSmallRain: () => IconCloudSmallRain,
  default: () => cloud_small_rain_default
});
var IconCloudSmallRain, cloud_small_rain_default;
var init_cloud_small_rain = __esm({
  "lib/icons/cloud-small-rain.ts"() {
    IconCloudSmallRain = `<svg id="cloud-small-rain" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54,25.5c-.2,0-.39.02-.58.03-1.99-7.77-9.02-13.53-17.42-13.53s-15.43,5.76-17.42,13.53c-.19-.01-.39-.03-.58-.03-4.97,0-9,4.03-9,9s4.03,9,9,9c1.74,0,3.36-.5,4.74-1.36,3.29,3.59,8.01,5.86,13.26,5.86s9.97-2.27,13.26-5.86c1.38.86,3,1.36,4.74,1.36,4.97,0,9-4.03,9-9s-4.03-9-9-9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M54,25.5c-.2,0-.39.02-.58.03-1.99-7.77-9.02-13.53-17.42-13.53s-15.43,5.76-17.42,13.53c-.19-.01-.39-.03-.58-.03-4.97,0-9,4.03-9,9s4.03,9,9,9c1.74,0,3.36-.5,4.74-1.36,3.29,3.59,8.01,5.86,13.26,5.86s9.97-2.27,13.26-5.86c1.38.86,3,1.36,4.74,1.36,4.97,0,9-4.03,9-9s-4.03-9-9-9Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="18" y1="52.5" x2="18" y2="52.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="57" x2="36" y2="57" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54" y1="52.5" x2="54" y2="52.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cloud_small_rain_default = IconCloudSmallRain;
  }
});

// lib/icons/cloud-sun.ts
var cloud_sun_exports = {};
__export(cloud_sun_exports, {
  IconCloudSun: () => IconCloudSun,
  default: () => cloud_sun_default
});
var IconCloudSun, cloud_sun_default;
var init_cloud_sun = __esm({
  "lib/icons/cloud-sun.ts"() {
    IconCloudSun = `<svg id="cloud-sun" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="45.22" y1="3.41" x2="45.22" y2="9.68" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="60.88" y1="25.33" x2="67.14" y2="25.33" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="29.73" y1="9.83" x2="34.15" y2="14.26" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="56.29" y1="14.26" x2="60.72" y2="9.83" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M35.15,22.6c1.2-4.44,5.26-7.7,10.07-7.7,5.76,0,10.44,4.67,10.44,10.44,0,2.88-1.17,5.49-3.06,7.38" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M54,36c-.2,0-.39.02-.58.03-1.99-7.77-9.02-13.53-17.42-13.53s-15.43,5.76-17.42,13.53c-.19-.01-.39-.03-.58-.03-4.97,0-9,4.03-9,9s4.03,9,9,9c1.74,0,3.36-.5,4.74-1.36,3.29,3.59,8.01,5.86,13.26,5.86s9.97-2.27,13.26-5.86c1.38.86,3,1.36,4.74,1.36,4.97,0,9-4.03,9-9s-4.03-9-9-9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M54,36c-.2,0-.39.02-.58.03-1.99-7.77-9.02-13.53-17.42-13.53s-15.43,5.76-17.42,13.53c-.19-.01-.39-.03-.58-.03-4.97,0-9,4.03-9,9s4.03,9,9,9c1.74,0,3.36-.5,4.74-1.36,3.29,3.59,8.01,5.86,13.26,5.86s9.97-2.27,13.26-5.86c1.38.86,3,1.36,4.74,1.36,4.97,0,9-4.03,9-9s-4.03-9-9-9Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cloud_sun_default = IconCloudSun;
  }
});

// lib/icons/cloud-thermometer.ts
var cloud_thermometer_exports = {};
__export(cloud_thermometer_exports, {
  IconCloudThermometer: () => IconCloudThermometer,
  default: () => cloud_thermometer_default
});
var IconCloudThermometer, cloud_thermometer_default;
var init_cloud_thermometer = __esm({
  "lib/icons/cloud-thermometer.ts"() {
    IconCloudThermometer = `<svg id="cloud-thermometer" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="51.75" cy="51.75" r="4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="51.75" y1="16.5" x2="51.75" y2="47.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,22.67c-2.65-1.54-5.72-2.42-9-2.42-8.39,0-15.43,5.76-17.42,13.53-.19-.01-.39-.03-.58-.03-4.97,0-9,4.03-9,9s4.03,9,9,9c1.74,0,3.36-.5,4.74-1.36,3.29,3.59,8.01,5.86,13.26,5.86,1.79,0,3.52-.26,5.15-.75" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M58.5,42.77V15.75c0-3.73-3.02-6.75-6.75-6.75s-6.75,3.02-6.75,6.75v27.02c-2.73,2.05-4.5,5.31-4.5,8.98,0,6.21,5.04,11.25,11.25,11.25s11.25-5.04,11.25-11.25c0-3.68-1.77-6.93-4.5-8.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,22.67c-2.65-1.54-5.72-2.42-9-2.42-8.39,0-15.43,5.76-17.42,13.53-.19-.01-.39-.03-.58-.03-4.97,0-9,4.03-9,9s4.03,9,9,9c1.74,0,3.36-.5,4.74-1.36,3.29,3.59,8.01,5.86,13.26,5.86,1.79,0,3.52-.26,5.15-.75" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cloud_thermometer_default = IconCloudThermometer;
  }
});

// lib/icons/cloud.ts
var cloud_exports = {};
__export(cloud_exports, {
  IconCloud: () => IconCloud,
  default: () => cloud_default
});
var IconCloud, cloud_default;
var init_cloud = __esm({
  "lib/icons/cloud.ts"() {
    IconCloud = `<svg id="cloud" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M54,30c-.2,0-.39.02-.58.03-1.99-7.77-9.02-13.53-17.42-13.53s-15.43,5.76-17.42,13.53c-.19-.01-.39-.03-.58-.03-4.97,0-9,4.03-9,9s4.03,9,9,9c1.74,0,3.36-.5,4.74-1.36,3.29,3.59,8.01,5.86,13.26,5.86s9.97-2.27,13.26-5.86c1.38.86,3,1.36,4.74,1.36,4.97,0,9-4.03,9-9s-4.03-9-9-9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M54,30c-.2,0-.39.02-.58.03-1.99-7.77-9.02-13.53-17.42-13.53s-15.43,5.76-17.42,13.53c-.19-.01-.39-.03-.58-.03-4.97,0-9,4.03-9,9s4.03,9,9,9c1.74,0,3.36-.5,4.74-1.36,3.29,3.59,8.01,5.86,13.26,5.86s9.97-2.27,13.26-5.86c1.38.86,3,1.36,4.74,1.36,4.97,0,9-4.03,9-9s-4.03-9-9-9Z" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    cloud_default = IconCloud;
  }
});

// lib/icons/light-dark-mode2.ts
var light_dark_mode2_exports = {};
__export(light_dark_mode2_exports, {
  IconLightDarkMode2: () => IconLightDarkMode2,
  default: () => light_dark_mode2_default
});
var IconLightDarkMode2, light_dark_mode2_default;
var init_light_dark_mode2 = __esm({
  "lib/icons/light-dark-mode2.ts"() {
    IconLightDarkMode2 = `<svg id="light-dark-mode-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M45,45c-9.94,0-18-8.06-18-18,0-2.64.58-5.14,1.6-7.4-6.25,2.82-10.6,9.1-10.6,16.4,0,9.94,8.06,18,18,18,7.3,0,13.57-4.36,16.4-10.6-2.26,1.02-4.76,1.6-7.4,1.6Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><g><line x1="36" y1="6.5" x2="36" y2="11" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="60.5" x2="36" y2="65" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,45c-9.94,0-18-8.06-18-18,0-2.64.58-5.14,1.6-7.4-6.25,2.82-10.6,9.1-10.6,16.4,0,9.94,8.06,18,18,18,7.3,0,13.57-4.36,16.4-10.6-2.26,1.02-4.76,1.6-7.4,1.6Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M36,18c9.94,0,18,8.06,18,18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="6.75" y1="35.75" x2="11.25" y2="35.75" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="60.75" y1="35.75" x2="65.25" y2="35.75" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="15.32" y1="15.07" x2="18.5" y2="18.25" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="53.5" y1="53.25" x2="56.68" y2="56.43" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="15.32" y1="56.43" x2="18.5" y2="53.25" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="53.5" y1="18.25" x2="56.68" y2="15.07" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    light_dark_mode2_default = IconLightDarkMode2;
  }
});

// lib/icons/light-dark-mode3.ts
var light_dark_mode3_exports = {};
__export(light_dark_mode3_exports, {
  IconLightDarkMode3: () => IconLightDarkMode3,
  default: () => light_dark_mode3_default
});
var IconLightDarkMode3, light_dark_mode3_default;
var init_light_dark_mode3 = __esm({
  "lib/icons/light-dark-mode3.ts"() {
    IconLightDarkMode3 = `<svg id="light-dark-mode-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M45,45.25c-9.94,0-18-8.06-18-18,0-2.64.58-5.14,1.6-7.4-6.25,2.82-10.6,9.1-10.6,16.4,0,9.94,8.06,18,18,18,7.3,0,13.57-4.36,16.4-10.6-2.26,1.02-4.76,1.6-7.4,1.6Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><g><line x1="36" y1="6.75" x2="36" y2="11.25" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="60.75" x2="36" y2="65.25" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M45,45.25c-9.94,0-18-8.06-18-18,0-2.64.58-5.14,1.6-7.4-6.25,2.82-10.6,9.1-10.6,16.4,0,9.94,8.06,18,18,18,7.3,0,13.57-4.36,16.4-10.6-2.26,1.02-4.76,1.6-7.4,1.6Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="6.75" y1="36" x2="11.25" y2="36" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="60.75" y1="36" x2="65.25" y2="36" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="15.32" y1="15.32" x2="18.5" y2="18.5" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="53.5" y1="53.5" x2="56.68" y2="56.68" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="15.32" y1="56.68" x2="18.5" y2="53.5" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="53.5" y1="18.5" x2="56.68" y2="15.32" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g></svg>`;
    light_dark_mode3_default = IconLightDarkMode3;
  }
});

// lib/icons/lightning-flash.ts
var lightning_flash_exports = {};
__export(lightning_flash_exports, {
  IconLightningFlash: () => IconLightningFlash,
  default: () => lightning_flash_default
});
var IconLightningFlash, lightning_flash_default;
var init_lightning_flash = __esm({
  "lib/icons/lightning-flash.ts"() {
    IconLightningFlash = `<svg id="lightning-flash" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M22.5,9h27l-4.5,22.5h7.48c.72,0,1.2.73.92,1.39l-10.98,25.63c-.43,1-1.92.69-1.92-.39v-17.63h-17c-.55,0-1-.45-1-1V9Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M22.5,9h27l-4.5,22.5h7.48c.72,0,1.2.73.92,1.39l-10.98,25.63c-.43,1-1.92.69-1.92-.39v-17.63h-17c-.55,0-1-.45-1-1V9Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    lightning_flash_default = IconLightningFlash;
  }
});

// lib/icons/moon01.ts
var moon01_exports = {};
__export(moon01_exports, {
  IconMoon01: () => IconMoon01,
  default: () => moon01_default
});
var IconMoon01, moon01_default;
var init_moon01 = __esm({
  "lib/icons/moon01.ts"() {
    IconMoon01 = `<svg id="moon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M36,34.5c0-7.72,3.89-14.53,9.82-18.58.63-.43.57-1.39-.12-1.72-3.77-1.8-8.11-2.6-12.69-2-10.17,1.32-18.26,9.6-19.37,19.79-1.47,13.55,9.11,25.02,22.36,25.02,3.47,0,6.76-.79,9.69-2.2.69-.33.76-1.29.12-1.73-5.93-4.05-9.82-10.86-9.82-18.58Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M36,34.5c0-7.72,3.89-14.53,9.82-18.58.63-.43.57-1.39-.12-1.72-3.77-1.8-8.11-2.6-12.69-2-10.17,1.32-18.26,9.6-19.37,19.79-1.47,13.55,9.11,25.02,22.36,25.02,3.47,0,6.76-.79,9.69-2.2.69-.33.76-1.29.12-1.73-5.93-4.05-9.82-10.86-9.82-18.58Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    moon01_default = IconMoon01;
  }
});

// lib/icons/moon19.ts
var moon19_exports = {};
__export(moon19_exports, {
  IconMoon19: () => IconMoon19,
  default: () => moon19_default
});
var IconMoon19, moon19_default;
var init_moon19 = __esm({
  "lib/icons/moon19.ts"() {
    IconMoon19 = `<svg id="moon-2" data-name="moon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M41.19,53.67c-9.18-9.18-9.18-24.05,0-33.23,2.44-2.44,5.28-4.21,8.31-5.35-8.37-3.16-18.18-1.39-24.92,5.35-9.18,9.18-9.18,24.05,0,33.23,6.74,6.74,16.55,8.51,24.92,5.35-3.03-1.14-5.87-2.91-8.31-5.35Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M41.19,53.67c-9.18-9.18-9.18-24.05,0-33.23,2.44-2.44,5.28-4.21,8.31-5.35-8.37-3.16-18.18-1.39-24.92,5.35-9.18,9.18-9.18,24.05,0,33.23,6.74,6.74,16.55,8.51,24.92,5.35-3.03-1.14-5.87-2.91-8.31-5.35Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    moon19_default = IconMoon19;
  }
});

// lib/icons/moon-dark-mode.ts
var moon_dark_mode_exports = {};
__export(moon_dark_mode_exports, {
  IconMoonDarkMode: () => IconMoonDarkMode,
  default: () => moon_dark_mode_default
});
var IconMoonDarkMode, moon_dark_mode_default;
var init_moon_dark_mode = __esm({
  "lib/icons/moon-dark-mode.ts"() {
    IconMoonDarkMode = `<svg id="moon-dark-mode" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><g ><path d="M45,45.25c-9.94,0-18-8.06-18-18,0-2.64.58-5.14,1.6-7.4-6.25,2.82-10.6,9.1-10.6,16.4,0,9.94,8.06,18,18,18,7.3,0,13.57-4.36,16.4-10.6-2.26,1.02-4.76,1.6-7.4,1.6Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1);" /></g><path d="M45,45.25c-9.94,0-18-8.06-18-18,0-2.64.58-5.14,1.6-7.4-6.25,2.82-10.6,9.1-10.6,16.4,0,9.94,8.06,18,18,18,7.3,0,13.57-4.36,16.4-10.6-2.26,1.02-4.76,1.6-7.4,1.6Z" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    moon_dark_mode_default = IconMoonDarkMode;
  }
});

// lib/icons/simple-sun.ts
var simple_sun_exports = {};
__export(simple_sun_exports, {
  IconSimpleSun: () => IconSimpleSun,
  default: () => simple_sun_default
});
var IconSimpleSun, simple_sun_default;
var init_simple_sun = __esm({
  "lib/icons/simple-sun.ts"() {
    IconSimpleSun = `<svg id="simple-sun" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><line x1="36" y1="49.5" x2="36" y2="67.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="4.5" x2="36" y2="22.5" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="49.5" y1="36" x2="67.5" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="4.5" y1="36" x2="22.5" y2="36" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45.55" y1="45.55" x2="58.27" y2="58.27" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.73" y1="13.73" x2="26.45" y2="26.45" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="45.55" y1="26.45" x2="58.27" y2="13.73" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.73" y1="58.27" x2="26.45" y2="45.55" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    simple_sun_default = IconSimpleSun;
  }
});

// lib/icons/sun2.ts
var sun2_exports = {};
__export(sun2_exports, {
  IconSun2: () => IconSun2,
  default: () => sun2_default
});
var IconSun2, sun2_default;
var init_sun2 = __esm({
  "lib/icons/sun2.ts"() {
    IconSun2 = `<svg id="sun_2" data-name="sun 2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="13.5" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="36" r="13.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="4.5" x2="36" y2="13.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="58.5" x2="36" y2="67.5" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="4.5" y1="36" x2="13.5" y2="36" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="58.5" y1="36" x2="67.5" y2="36" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.73" y1="13.73" x2="20.09" y2="20.09" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="51.91" y1="51.91" x2="58.27" y2="58.27" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="13.73" y1="58.27" x2="20.09" y2="51.91" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="51.91" y1="20.09" x2="58.27" y2="13.73" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    sun2_default = IconSun2;
  }
});

// lib/icons/sun-light-mode.ts
var sun_light_mode_exports = {};
__export(sun_light_mode_exports, {
  IconSunLightMode: () => IconSunLightMode,
  default: () => sun_light_mode_default
});
var IconSunLightMode, sun_light_mode_default;
var init_sun_light_mode = __esm({
  "lib/icons/sun-light-mode.ts"() {
    IconSunLightMode = `<svg id="sun-light-mode" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><g><line x1="36" y1="6.75" x2="36" y2="11.25" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="60.75" x2="36" y2="65.25" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="6.75" y1="36" x2="11.25" y2="36" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="60.75" y1="36" x2="65.25" y2="36" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="15.32" y1="15.32" x2="18.5" y2="18.5" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="53.5" y1="53.5" x2="56.68" y2="56.68" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="15.32" y1="56.68" x2="18.5" y2="53.5" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="53.5" y1="18.5" x2="56.68" y2="15.32" style="fill: white;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></g><circle cx="36" cy="36" r="18" style="fill: none;  stroke-linecap: round; stroke-linejoin: round; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    sun_light_mode_default = IconSunLightMode;
  }
});

// lib/icons/sun.ts
var sun_exports = {};
__export(sun_exports, {
  IconSun: () => IconSun,
  default: () => sun_default
});
var IconSun, sun_default;
var init_sun = __esm({
  "lib/icons/sun.ts"() {
    IconSun = `<svg id="sun" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="36" r="18" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><circle cx="36" cy="36" r="18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="5.14" x2="36" y2="10.29" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="61.71" x2="36" y2="66.86" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="5.14" y1="36" x2="10.29" y2="36" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="61.71" y1="36" x2="66.86" y2="36" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="14.18" y1="14.18" x2="17.82" y2="17.82" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54.18" y1="54.18" x2="57.82" y2="57.82" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="14.18" y1="57.82" x2="17.82" y2="54.18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="54.18" y1="17.82" x2="57.82" y2="14.18" style="fill: none;  stroke-linecap: round; stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    sun_default = IconSun;
  }
});

// lib/icons/thermometer-cold.ts
var thermometer_cold_exports = {};
__export(thermometer_cold_exports, {
  IconThermometerCold: () => IconThermometerCold,
  default: () => thermometer_cold_default
});
var IconThermometerCold, thermometer_cold_default;
var init_thermometer_cold = __esm({
  "lib/icons/thermometer-cold.ts"() {
    IconThermometerCold = `<svg id="thermometer-cold" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="51.75" r="4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="40.5" x2="36" y2="47.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M42.75,42.77V15.75c0-3.73-3.02-6.75-6.75-6.75s-6.75,3.02-6.75,6.75v27.02c-2.73,2.05-4.5,5.31-4.5,8.98,0,6.21,5.04,11.25,11.25,11.25s11.25-5.04,11.25-11.25c0-3.68-1.77-6.93-4.5-8.98Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M42.75,42.77V15.75c0-3.73-3.02-6.75-6.75-6.75s-6.75,3.02-6.75,6.75v27.02c-2.73,2.05-4.5,5.31-4.5,8.98,0,6.21,5.04,11.25,11.25,11.25s11.25-5.04,11.25-11.25c0-3.68-1.77-6.93-4.5-8.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    thermometer_cold_default = IconThermometerCold;
  }
});

// lib/icons/thermometer-hot.ts
var thermometer_hot_exports = {};
__export(thermometer_hot_exports, {
  IconThermometerHot: () => IconThermometerHot,
  default: () => thermometer_hot_default
});
var IconThermometerHot, thermometer_hot_default;
var init_thermometer_hot = __esm({
  "lib/icons/thermometer-hot.ts"() {
    IconThermometerHot = `<svg id="thermometer-hot" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path d="M42.75,42.77V15.75c0-3.73-3.02-6.75-6.75-6.75s-6.75,3.02-6.75,6.75v27.02c-2.73,2.05-4.5,5.31-4.5,8.98,0,6.21,5.04,11.25,11.25,11.25s11.25-5.04,11.25-11.25c0-3.68-1.77-6.93-4.5-8.98Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M42.75,42.77V15.75c0-3.73-3.02-6.75-6.75-6.75s-6.75,3.02-6.75,6.75v27.02c-2.73,2.05-4.5,5.31-4.5,8.98,0,6.21,5.04,11.25,11.25,11.25s11.25-5.04,11.25-11.25c0-3.68-1.77-6.93-4.5-8.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><circle cx="36" cy="51.75" r="4.5" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="18" x2="36" y2="47.25" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    thermometer_hot_default = IconThermometerHot;
  }
});

// lib/icons/thermometer.ts
var thermometer_exports = {};
__export(thermometer_exports, {
  IconThermometer: () => IconThermometer,
  default: () => thermometer_default
});
var IconThermometer, thermometer_default;
var init_thermometer = __esm({
  "lib/icons/thermometer.ts"() {
    IconThermometer = `<svg id="thermometer" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><circle cx="36" cy="51.75" r="4.5" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><line x1="36" y1="27" x2="36" y2="47.25" style="fill: none; stroke: var(--icon-stroke-color-secondary, var(--icon-stroke-color, currentColor)); stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/><path d="M42.75,42.77V15.75c0-3.73-3.02-6.75-6.75-6.75s-6.75,3.02-6.75,6.75v27.02c-2.73,2.05-4.5,5.31-4.5,8.98,0,6.21,5.04,11.25,11.25,11.25s11.25-5.04,11.25-11.25c0-3.68-1.77-6.93-4.5-8.98Z" style="fill: var(--icon-fill, rgba(0, 0, 0, 0)); opacity: var(--icon-fill-opacity, 1); stroke-width: 0px;"/><path d="M42.75,42.77V15.75c0-3.73-3.02-6.75-6.75-6.75s-6.75,3.02-6.75,6.75v27.02c-2.73,2.05-4.5,5.31-4.5,8.98,0,6.21,5.04,11.25,11.25,11.25s11.25-5.04,11.25-11.25c0-3.68-1.77-6.93-4.5-8.98Z" style="fill: none;  stroke-miterlimit: 10; stroke-width:var(--icon-stroke-width-m, calc(var(--icon-stroke-width, 5) * 1));"/></svg>`;
    thermometer_default = IconThermometer;
  }
});

// lib/meta/icon_animal-step.svg.ts
var icon_animal_step_svg_exports = {};
__export(icon_animal_step_svg_exports, {
  default: () => icon_animal_step_svg_default,
  meta: () => meta
});
var meta, icon_animal_step_svg_default;
var init_icon_animal_step_svg = __esm({
  "lib/meta/icon_animal-step.svg.ts"() {
    meta = {
      "description": "The icon animal-step depicts an animal taking a step, symbolizing movement, progress, or wildlife in motion. This icon can be used in designs related to nature, animals, walking, hiking, or wildlife conservation.",
      "category": [
        "Animals"
      ],
      "tag": [
        "movement",
        "progress",
        "wildlife",
        "nature",
        "step",
        "walking",
        "hiking",
        "motion",
        "conservation"
      ],
      "title": "Animal Step"
    };
    icon_animal_step_svg_default = meta;
  }
});

// lib/meta/icon_butterfly.svg.ts
var icon_butterfly_svg_exports = {};
__export(icon_butterfly_svg_exports, {
  default: () => icon_butterfly_svg_default,
  meta: () => meta2
});
var meta2, icon_butterfly_svg_default;
var init_icon_butterfly_svg = __esm({
  "lib/meta/icon_butterfly.svg.ts"() {
    meta2 = {
      "description": "A butterfly icon, symbolizing beauty, transformation, and growth. Butterflies are known for their colorful wings and graceful movements.",
      "category": [
        "Animals"
      ],
      "tag": [
        "insect",
        "nature",
        "beauty",
        "transformation",
        "growth",
        "wings",
        "graceful",
        "flutter",
        "symbol"
      ],
      "title": "Butterfly"
    };
    icon_butterfly_svg_default = meta2;
  }
});

// lib/meta/icon_cat-head.svg.ts
var icon_cat_head_svg_exports = {};
__export(icon_cat_head_svg_exports, {
  default: () => icon_cat_head_svg_default,
  meta: () => meta3
});
var meta3, icon_cat_head_svg_default;
var init_icon_cat_head_svg = __esm({
  "lib/meta/icon_cat-head.svg.ts"() {
    meta3 = {
      "description": "A cute and adorable icon of a cat head, with pointy ears and whiskers. Perfect for any design related to cats, pets, or animal lovers.",
      "category": [
        "Animals"
      ],
      "tag": [
        "cat",
        "pet",
        "feline",
        "kitten",
        "whiskers",
        "cute",
        "adorable",
        "animal lover",
        "domestic",
        "mammal"
      ],
      "title": "Cat Head"
    };
    icon_cat_head_svg_default = meta3;
  }
});

// lib/meta/icon_cat-head2.svg.ts
var icon_cat_head2_svg_exports = {};
__export(icon_cat_head2_svg_exports, {
  default: () => icon_cat_head2_svg_default,
  meta: () => meta4
});
var meta4, icon_cat_head2_svg_default;
var init_icon_cat_head2_svg = __esm({
  "lib/meta/icon_cat-head2.svg.ts"() {
    meta4 = {
      "description": "A cute and playful icon of a cat's head with big eyes and pointy ears. It can be used to represent cats, pets, feline animals, cuteness, and playfulness.",
      "category": [
        "Animals"
      ],
      "tag": [
        "cat",
        "head",
        "pet",
        "feline",
        "cute",
        "playful",
        "mascot",
        "whiskers",
        "ears",
        "big eyes"
      ],
      "title": "Cat Head 2"
    };
    icon_cat_head2_svg_default = meta4;
  }
});

// lib/meta/icon_cat.svg.ts
var icon_cat_svg_exports = {};
__export(icon_cat_svg_exports, {
  default: () => icon_cat_svg_default,
  meta: () => meta5
});
var meta5, icon_cat_svg_default;
var init_icon_cat_svg = __esm({
  "lib/meta/icon_cat.svg.ts"() {
    meta5 = {
      "description": "An icon of a cute and playful cat, commonly used to represent pets, feline animals, or domestic animals.",
      "category": [
        "Animals"
      ],
      "tag": [
        "cat",
        "pet",
        "feline",
        "domestic animals",
        "mammal",
        "playful",
        "cute",
        "kitten",
        "adorable",
        "whiskers"
      ],
      "title": "Cat"
    };
    icon_cat_svg_default = meta5;
  }
});

// lib/meta/icon_cat2.svg.ts
var icon_cat2_svg_exports = {};
__export(icon_cat2_svg_exports, {
  default: () => icon_cat2_svg_default,
  meta: () => meta6
});
var meta6, icon_cat2_svg_default;
var init_icon_cat2_svg = __esm({
  "lib/meta/icon_cat2.svg.ts"() {
    meta6 = {
      "description": "Cat icon representing a cute and cuddly feline animal",
      "category": [
        "Animals"
      ],
      "tag": [
        "cat",
        "pet",
        "feline",
        "whiskers",
        "meow",
        "kitten",
        "adorable",
        "mammal",
        "purr"
      ],
      "title": "Cat Icon"
    };
    icon_cat2_svg_default = meta6;
  }
});

// lib/meta/icon_cat3.svg.ts
var icon_cat3_svg_exports = {};
__export(icon_cat3_svg_exports, {
  default: () => icon_cat3_svg_default,
  meta: () => meta7
});
var meta7, icon_cat3_svg_default;
var init_icon_cat3_svg = __esm({
  "lib/meta/icon_cat3.svg.ts"() {
    meta7 = {
      "description": "A cute and playful icon of a cat with big eyes and a fluffy tail, perfect for any project related to animals or pets.",
      "category": [
        "Animals"
      ],
      "tag": [
        "cat",
        "pet",
        "feline",
        "kitten",
        "whiskers",
        "adorable",
        "playful",
        "fluffy",
        "cute",
        "animal lover"
      ],
      "title": "Cat 3"
    };
    icon_cat3_svg_default = meta7;
  }
});

// lib/meta/icon_fish.svg.ts
var icon_fish_svg_exports = {};
__export(icon_fish_svg_exports, {
  default: () => icon_fish_svg_default,
  meta: () => meta8
});
var meta8, icon_fish_svg_default;
var init_icon_fish_svg = __esm({
  "lib/meta/icon_fish.svg.ts"() {
    meta8 = {
      "description": "An icon depicting a fish, commonly found in water bodies such as oceans, rivers, and lakes. Fish are known for their diverse species and are a popular subject in fishing and aquaculture.",
      "category": [
        "Animals"
      ],
      "tag": [
        "aquatic",
        "marine life",
        "sea creature",
        "aquarium",
        "fishing",
        "aquatic animal",
        "wildlife",
        "underwater",
        "ocean",
        "river"
      ],
      "title": "Fish"
    };
    icon_fish_svg_default = meta8;
  }
});

// lib/meta/icon_fish2.svg.ts
var icon_fish2_svg_exports = {};
__export(icon_fish2_svg_exports, {
  default: () => icon_fish2_svg_default,
  meta: () => meta9
});
var meta9, icon_fish2_svg_default;
var init_icon_fish2_svg = __esm({
  "lib/meta/icon_fish2.svg.ts"() {
    meta9 = {
      "description": "The icon 'fish2' represents a fish swimming underwater. It is designed with a flat style and is suitable for various projects related to marine life, oceans, aquariums, and underwater environments.",
      "category": [
        "Animals"
      ],
      "tag": [
        "fish",
        "marine life",
        "ocean",
        "aquarium",
        "underwater",
        "swimming",
        "sea creature",
        "water",
        "wildlife"
      ],
      "title": "Fish 2"
    };
    icon_fish2_svg_default = meta9;
  }
});

// lib/meta/icon_jellyfish.svg.ts
var icon_jellyfish_svg_exports = {};
__export(icon_jellyfish_svg_exports, {
  default: () => icon_jellyfish_svg_default,
  meta: () => meta10
});
var meta10, icon_jellyfish_svg_default;
var init_icon_jellyfish_svg = __esm({
  "lib/meta/icon_jellyfish.svg.ts"() {
    meta10 = {
      "description": "A cute jellyfish icon that represents marine life. It has a bell-shaped body and long tentacles.",
      "category": [
        "Animals"
      ],
      "tag": [
        "sea creature",
        "ocean life",
        "underwater",
        "marine biology",
        "jelly",
        "tentacles",
        "aquatic",
        "wildlife",
        "marine animal",
        "ocean"
      ],
      "title": "Jellyfish"
    };
    icon_jellyfish_svg_default = meta10;
  }
});

// lib/meta/icon_lobster.svg.ts
var icon_lobster_svg_exports = {};
__export(icon_lobster_svg_exports, {
  default: () => icon_lobster_svg_default,
  meta: () => meta11
});
var meta11, icon_lobster_svg_default;
var init_icon_lobster_svg = __esm({
  "lib/meta/icon_lobster.svg.ts"() {
    meta11 = {
      "description": "A cute and vibrant icon of a lobster, showcasing its distinct features like large claws and segmented body. Known for its delicious taste, lobsters are popular marine crustaceans often found in seafood dishes.",
      "category": [
        "Animals"
      ],
      "tag": [
        "marine life",
        "sea creature",
        "seafood",
        "ocean",
        "claws",
        "crustacean",
        "delicacy",
        "vibrant",
        "cute",
        "sea"
      ],
      "title": "Lobster"
    };
    icon_lobster_svg_default = meta11;
  }
});

// lib/meta/icon_pufferfish.svg.ts
var icon_pufferfish_svg_exports = {};
__export(icon_pufferfish_svg_exports, {
  default: () => icon_pufferfish_svg_default,
  meta: () => meta12
});
var meta12, icon_pufferfish_svg_default;
var init_icon_pufferfish_svg = __esm({
  "lib/meta/icon_pufferfish.svg.ts"() {
    meta12 = {
      "description": "A cute and spiky pufferfish icon, commonly found in oceans. Known for their ability to inflate themselves when threatened.",
      "category": [
        "Animals"
      ],
      "tag": [
        "ocean",
        "marine life",
        "aquatic",
        "blowfish",
        "underwater",
        "spiky",
        "sea creature",
        "pufferfish",
        "fish"
      ],
      "title": "Pufferfish"
    };
    icon_pufferfish_svg_default = meta12;
  }
});

// lib/meta/icon_sea-star.svg.ts
var icon_sea_star_svg_exports = {};
__export(icon_sea_star_svg_exports, {
  default: () => icon_sea_star_svg_default,
  meta: () => meta13
});
var meta13, icon_sea_star_svg_default;
var init_icon_sea_star_svg = __esm({
  "lib/meta/icon_sea-star.svg.ts"() {
    meta13 = {
      "description": "A sea star, also known as a starfish, is a marine animal with multiple arms extending from a central disc. They come in various colors and sizes, and are commonly found in oceans around the world.",
      "category": [
        "Animals"
      ],
      "tag": [
        "marine life",
        "ocean creature",
        "star shape",
        "underwater",
        "aquatic animal",
        "marine biology",
        "sea creature",
        "marine fauna",
        "marine organism",
        "marine species"
      ],
      "title": "Sea Star"
    };
    icon_sea_star_svg_default = meta13;
  }
});

// lib/meta/icon_squid.svg.ts
var icon_squid_svg_exports = {};
__export(icon_squid_svg_exports, {
  default: () => icon_squid_svg_default,
  meta: () => meta14
});
var meta14, icon_squid_svg_default;
var init_icon_squid_svg = __esm({
  "lib/meta/icon_squid.svg.ts"() {
    meta14 = {
      "description": "A cute and quirky icon of a squid, featuring eight tentacles and a distinctive triangular head with large eyes. Squids are marine animals known for their unique anatomy and complex behaviors.",
      "category": [
        "Animals"
      ],
      "tag": [
        "marine life",
        "ocean",
        "creature",
        "tentacles",
        "aquatic",
        "mollusk",
        "seafood",
        "cephalopod",
        "underwater",
        "marine biology"
      ],
      "title": "Squid"
    };
    icon_squid_svg_default = meta14;
  }
});

// lib/meta/icon_stingray.svg.ts
var icon_stingray_svg_exports = {};
__export(icon_stingray_svg_exports, {
  default: () => icon_stingray_svg_default,
  meta: () => meta15
});
var meta15, icon_stingray_svg_default;
var init_icon_stingray_svg = __esm({
  "lib/meta/icon_stingray.svg.ts"() {
    meta15 = {
      "description": "Stingrays are a group of sea rays, which are cartilaginous fish related to sharks. They are known for their flattened bodies and long, slender tails with barbed stingers.",
      "category": [
        "Animals"
      ],
      "tag": [
        "stingray",
        "sea creature",
        "marine life",
        "ocean",
        "underwater",
        "cartilaginous fish",
        "flat body",
        "barbed stinger",
        "sea ray",
        "shark"
      ],
      "title": "Stingray"
    };
    icon_stingray_svg_default = meta15;
  }
});

// lib/meta/icon_turtle.svg.ts
var icon_turtle_svg_exports = {};
__export(icon_turtle_svg_exports, {
  default: () => icon_turtle_svg_default,
  meta: () => meta16
});
var meta16, icon_turtle_svg_default;
var init_icon_turtle_svg = __esm({
  "lib/meta/icon_turtle.svg.ts"() {
    meta16 = {
      "description": "The turtle icon represents a slow-moving reptile with a hard shell. It is often associated with concepts such as patience, wisdom, and longevity.",
      "category": [
        "Animals"
      ],
      "tag": [
        "reptile",
        "slow",
        "patience",
        "wisdom",
        "longevity",
        "shell",
        "animal",
        "nature",
        "symbol"
      ],
      "title": "Turtle"
    };
    icon_turtle_svg_default = meta16;
  }
});

// lib/meta/icon_whale.svg.ts
var icon_whale_svg_exports = {};
__export(icon_whale_svg_exports, {
  default: () => icon_whale_svg_default,
  meta: () => meta17
});
var meta17, icon_whale_svg_default;
var init_icon_whale_svg = __esm({
  "lib/meta/icon_whale.svg.ts"() {
    meta17 = {
      "description": "The icon depicts a stylized whale, a large marine mammal known for its massive size and peaceful nature. Whales are often associated with the ocean and are symbols of strength and intelligence.",
      "category": [
        "Animals"
      ],
      "tag": [
        "whale",
        "marine",
        "mammal",
        "ocean",
        "sea",
        "wildlife",
        "nature",
        "oceanography",
        "marine biology",
        "creature"
      ],
      "title": "Whale"
    };
    icon_whale_svg_default = meta17;
  }
});

// lib/meta/icon-24.svg.ts
var icon_24_svg_exports = {};
__export(icon_24_svg_exports, {
  default: () => icon_24_svg_default,
  meta: () => meta18
});
var meta18, icon_24_svg_default;
var init_icon_24_svg = __esm({
  "lib/meta/icon-24.svg.ts"() {
    meta18 = {
      "description": "A 24x24 pixels icon depicting an arrow. It is commonly used to indicate directions, navigation, or movement.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "navigation",
        "direction",
        "movement",
        "pointer",
        "24x24",
        "icon",
        "symbol",
        "interface",
        "graphic"
      ],
      "title": "Arrow Icon - 24x24"
    };
    icon_24_svg_default = meta18;
  }
});

// lib/meta/icon_arrow-corner-down.svg.ts
var icon_arrow_corner_down_svg_exports = {};
__export(icon_arrow_corner_down_svg_exports, {
  default: () => icon_arrow_corner_down_svg_default,
  meta: () => meta19
});
var meta19, icon_arrow_corner_down_svg_default;
var init_icon_arrow_corner_down_svg = __esm({
  "lib/meta/icon_arrow-corner-down.svg.ts"() {
    meta19 = {
      "description": "The arrow-corner-down icon features a downward-pointing arrow that turns at a 90-degree angle at the corner. It symbolizes the direction of movement downwards and to the side.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "down",
        "corner",
        "direction",
        "movement",
        "navigation",
        "pointer",
        "turn",
        "angular",
        "shape"
      ],
      "title": "Arrow Corner Down"
    };
    icon_arrow_corner_down_svg_default = meta19;
  }
});

// lib/meta/icon_arrow-corner-left.svg.ts
var icon_arrow_corner_left_svg_exports = {};
__export(icon_arrow_corner_left_svg_exports, {
  default: () => icon_arrow_corner_left_svg_default,
  meta: () => meta20
});
var meta20, icon_arrow_corner_left_svg_default;
var init_icon_arrow_corner_left_svg = __esm({
  "lib/meta/icon_arrow-corner-left.svg.ts"() {
    meta20 = {
      "description": "The arrow-corner-left icon depicts an arrow pointing towards the upper left corner. It is commonly used to indicate a direction or to navigate back to the previous page.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "navigation",
        "direction",
        "left",
        "corner",
        "pointer",
        "arrow",
        "navigate",
        "back",
        "previous"
      ],
      "title": "Arrow Corner Left"
    };
    icon_arrow_corner_left_svg_default = meta20;
  }
});

// lib/meta/icon_arrow-corner-right.svg.ts
var icon_arrow_corner_right_svg_exports = {};
__export(icon_arrow_corner_right_svg_exports, {
  default: () => icon_arrow_corner_right_svg_default,
  meta: () => meta21
});
var meta21, icon_arrow_corner_right_svg_default;
var init_icon_arrow_corner_right_svg = __esm({
  "lib/meta/icon_arrow-corner-right.svg.ts"() {
    meta21 = {
      "description": "An arrow icon pointing to the right corner, typically used to indicate navigation or direction.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "right",
        "corner",
        "navigation",
        "direction",
        "icon",
        "symbol",
        "interface"
      ],
      "title": "Arrow Corner Right"
    };
    icon_arrow_corner_right_svg_default = meta21;
  }
});

// lib/meta/icon_arrow-corner-up.svg.ts
var icon_arrow_corner_up_svg_exports = {};
__export(icon_arrow_corner_up_svg_exports, {
  default: () => icon_arrow_corner_up_svg_default,
  meta: () => meta22
});
var meta22, icon_arrow_corner_up_svg_default;
var init_icon_arrow_corner_up_svg = __esm({
  "lib/meta/icon_arrow-corner-up.svg.ts"() {
    meta22 = {
      "description": "The arrow-corner-up icon depicts an arrow pointing upwards in a diagonal corner position. It is commonly used to indicate to scroll or navigate upwards on a page or interface.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "up",
        "scroll",
        "navigate",
        "direction",
        "corner",
        "point",
        "indicator",
        "web",
        "button"
      ],
      "title": "Arrow Corner Up"
    };
    icon_arrow_corner_up_svg_default = meta22;
  }
});

// lib/meta/icon_arrow-diagonal-bl-tr-stop.svg.ts
var icon_arrow_diagonal_bl_tr_stop_svg_exports = {};
__export(icon_arrow_diagonal_bl_tr_stop_svg_exports, {
  default: () => icon_arrow_diagonal_bl_tr_stop_svg_default,
  meta: () => meta23
});
var meta23, icon_arrow_diagonal_bl_tr_stop_svg_default;
var init_icon_arrow_diagonal_bl_tr_stop_svg = __esm({
  "lib/meta/icon_arrow-diagonal-bl-tr-stop.svg.ts"() {
    meta23 = {
      "description": "An icon representing a diagonal arrow pointing from bottom-left to top-right with a stop or pause symbol in the middle, indicating movement interruption or termination.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "direction",
        "movement",
        "pause",
        "stop",
        "diagonal",
        "pointing",
        "interruption",
        "termination",
        "navigation"
      ],
      "title": "Arrow Diagonal Bottom Left to Top Right with Stop"
    };
    icon_arrow_diagonal_bl_tr_stop_svg_default = meta23;
  }
});

// lib/meta/icon_arrow-diagonal-br-tl-stop.svg.ts
var icon_arrow_diagonal_br_tl_stop_svg_exports = {};
__export(icon_arrow_diagonal_br_tl_stop_svg_exports, {
  default: () => icon_arrow_diagonal_br_tl_stop_svg_default,
  meta: () => meta24
});
var meta24, icon_arrow_diagonal_br_tl_stop_svg_default;
var init_icon_arrow_diagonal_br_tl_stop_svg = __esm({
  "lib/meta/icon_arrow-diagonal-br-tl-stop.svg.ts"() {
    meta24 = {
      "description": "An icon of a diagonal arrow pointing from bottom right to top left with a stop sign at the end, symbolizing halt or end. This icon is commonly used to indicate termination or interruption.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "diagonal arrow",
        "stop",
        "end",
        "terminating arrow",
        "direction",
        "interruption",
        "termination",
        "navigation",
        "pointing",
        "arrow icon"
      ],
      "title": "Diagonal Arrow with Stop Sign (Bottom-Right to Top-Left)"
    };
    icon_arrow_diagonal_br_tl_stop_svg_default = meta24;
  }
});

// lib/meta/icon_arrow-diagonal-in-lt-br.svg.ts
var icon_arrow_diagonal_in_lt_br_svg_exports = {};
__export(icon_arrow_diagonal_in_lt_br_svg_exports, {
  default: () => icon_arrow_diagonal_in_lt_br_svg_default,
  meta: () => meta25
});
var meta25, icon_arrow_diagonal_in_lt_br_svg_default;
var init_icon_arrow_diagonal_in_lt_br_svg = __esm({
  "lib/meta/icon_arrow-diagonal-in-lt-br.svg.ts"() {
    meta25 = {
      "description": "An arrow pointing diagonally in the bottom-left direction. This icon is commonly used for indicating movement or direction.",
      "category": [
        "Arrows",
        "Shapes"
      ],
      "tag": [
        "arrow",
        "diagonal",
        "movement",
        "direction",
        "bottom-left",
        "pointer",
        "navigation",
        "symbol",
        "icon"
      ],
      "title": "Arrow Diagonal In Bottom-Left"
    };
    icon_arrow_diagonal_in_lt_br_svg_default = meta25;
  }
});

// lib/meta/icon_arrow-diagonal-in-tr-bl.svg.ts
var icon_arrow_diagonal_in_tr_bl_svg_exports = {};
__export(icon_arrow_diagonal_in_tr_bl_svg_exports, {
  default: () => icon_arrow_diagonal_in_tr_bl_svg_default,
  meta: () => meta26
});
var meta26, icon_arrow_diagonal_in_tr_bl_svg_default;
var init_icon_arrow_diagonal_in_tr_bl_svg = __esm({
  "lib/meta/icon_arrow-diagonal-in-tr-bl.svg.ts"() {
    meta26 = {
      "description": "The arrow-diagonal-in-tr-bl icon features a diagonal arrow pointing from the top right to the bottom left direction. It is commonly used to indicate movement or a specific direction.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "diagonal",
        "movement",
        "direction",
        "top right",
        "bottom left",
        "graphic",
        "symbol",
        "icon"
      ],
      "title": "Diagonal Arrow Top Right to Bottom Left"
    };
    icon_arrow_diagonal_in_tr_bl_svg_default = meta26;
  }
});

// lib/meta/icon_arrow-diagonal-tl-br-split.svg.ts
var icon_arrow_diagonal_tl_br_split_svg_exports = {};
__export(icon_arrow_diagonal_tl_br_split_svg_exports, {
  default: () => icon_arrow_diagonal_tl_br_split_svg_default,
  meta: () => meta27
});
var meta27, icon_arrow_diagonal_tl_br_split_svg_default;
var init_icon_arrow_diagonal_tl_br_split_svg = __esm({
  "lib/meta/icon_arrow-diagonal-tl-br-split.svg.ts"() {
    meta27 = {
      "description": "The arrow diagonal TL BR split icon features a diagonal split arrow pointing from the top-left to the bottom-right direction. This icon is commonly used to indicate a diagonal movement or split direction.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "split arrow",
        "direction",
        "movement",
        "diagonal arrow",
        "top-left",
        "bottom-right",
        "pointer",
        "navigation"
      ],
      "title": "Arrow Diagonal Top-Left Bottom-Right Split"
    };
    icon_arrow_diagonal_tl_br_split_svg_default = meta27;
  }
});

// lib/meta/icon_arrow-diagonal-tl-br-stop.svg.ts
var icon_arrow_diagonal_tl_br_stop_svg_exports = {};
__export(icon_arrow_diagonal_tl_br_stop_svg_exports, {
  default: () => icon_arrow_diagonal_tl_br_stop_svg_default,
  meta: () => meta28
});
var meta28, icon_arrow_diagonal_tl_br_stop_svg_default;
var init_icon_arrow_diagonal_tl_br_stop_svg = __esm({
  "lib/meta/icon_arrow-diagonal-tl-br-stop.svg.ts"() {
    meta28 = {
      "description": "The arrow diagonal tl br stop icon features a diagonal arrow pointing from the top left to the bottom right with a stop symbol in the middle, indicating a halt or end of a process.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "diagonal",
        "tl",
        "br",
        "stop",
        "halt",
        "end",
        "direction",
        "navigation",
        "pointer"
      ],
      "title": "Arrow Diagonal Top Left Bottom Right Stop"
    };
    icon_arrow_diagonal_tl_br_stop_svg_default = meta28;
  }
});

// lib/meta/icon_arrow-diagonal-tl-br.svg.ts
var icon_arrow_diagonal_tl_br_svg_exports = {};
__export(icon_arrow_diagonal_tl_br_svg_exports, {
  default: () => icon_arrow_diagonal_tl_br_svg_default,
  meta: () => meta29
});
var meta29, icon_arrow_diagonal_tl_br_svg_default;
var init_icon_arrow_diagonal_tl_br_svg = __esm({
  "lib/meta/icon_arrow-diagonal-tl-br.svg.ts"() {
    meta29 = {
      "description": "An arrow icon pointing diagonally from top left to bottom right. This icon can be used to indicate direction or movement in a diagonal manner.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "diagonal",
        "direction",
        "movement",
        "top left",
        "bottom right"
      ],
      "title": "Arrow Diagonal Top Left Bottom Right"
    };
    icon_arrow_diagonal_tl_br_svg_default = meta29;
  }
});

// lib/meta/icon_arrow-diagonal-tr-bl-split.svg.ts
var icon_arrow_diagonal_tr_bl_split_svg_exports = {};
__export(icon_arrow_diagonal_tr_bl_split_svg_exports, {
  default: () => icon_arrow_diagonal_tr_bl_split_svg_default,
  meta: () => meta30
});
var meta30, icon_arrow_diagonal_tr_bl_split_svg_default;
var init_icon_arrow_diagonal_tr_bl_split_svg = __esm({
  "lib/meta/icon_arrow-diagonal-tr-bl-split.svg.ts"() {
    meta30 = {
      "description": "The arrow diagonal tr bl split icon features a split arrow pointing from the top right to the bottom left direction. It is commonly used in interfaces to indicate diagonal movement or direction.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "diagonal",
        "direction",
        "split",
        "movement",
        "navigation",
        "pointer",
        "user interface",
        "interaction",
        "graphic"
      ],
      "title": "Arrow Diagonal Top Right Bottom Left Split"
    };
    icon_arrow_diagonal_tr_bl_split_svg_default = meta30;
  }
});

// lib/meta/icon_arrow-diagonal-tr-bl-stop.svg.ts
var icon_arrow_diagonal_tr_bl_stop_svg_exports = {};
__export(icon_arrow_diagonal_tr_bl_stop_svg_exports, {
  default: () => icon_arrow_diagonal_tr_bl_stop_svg_default,
  meta: () => meta31
});
var meta31, icon_arrow_diagonal_tr_bl_stop_svg_default;
var init_icon_arrow_diagonal_tr_bl_stop_svg = __esm({
  "lib/meta/icon_arrow-diagonal-tr-bl-stop.svg.ts"() {
    meta31 = {
      "description": "The arrow diagonal TR to BL with a stop symbol is a directional icon indicating movement from the top right corner to the bottom left corner with a stop symbol in between.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "directional",
        "movement",
        "stop",
        "diagonal",
        "top right",
        "bottom left",
        "symbol",
        "navigation",
        "pointer",
        "transition"
      ],
      "title": "Arrow Diagonal Top Right to Bottom Left with Stop"
    };
    icon_arrow_diagonal_tr_bl_stop_svg_default = meta31;
  }
});

// lib/meta/icon_arrow-diagonal-tr-bl.svg.ts
var icon_arrow_diagonal_tr_bl_svg_exports = {};
__export(icon_arrow_diagonal_tr_bl_svg_exports, {
  default: () => icon_arrow_diagonal_tr_bl_svg_default,
  meta: () => meta32
});
var meta32, icon_arrow_diagonal_tr_bl_svg_default;
var init_icon_arrow_diagonal_tr_bl_svg = __esm({
  "lib/meta/icon_arrow-diagonal-tr-bl.svg.ts"() {
    meta32 = {
      "description": "An icon of a diagonal arrow pointing from top right to bottom left, indicating movement or direction from top right to bottom left.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "diagonal",
        "arrow",
        "direction",
        "movement",
        "top right",
        "bottom left",
        "navigation",
        "pointer",
        "symbol",
        "graphic"
      ],
      "title": "Arrow Diagonal Top Right to Bottom Left"
    };
    icon_arrow_diagonal_tr_bl_svg_default = meta32;
  }
});

// lib/meta/icon_arrow-down copy.svg.ts
var icon_arrow_down_copy_svg_exports = {};
__export(icon_arrow_down_copy_svg_exports, {
  default: () => icon_arrow_down_copy_svg_default,
  meta: () => meta33
});
var meta33, icon_arrow_down_copy_svg_default;
var init_icon_arrow_down_copy_svg = __esm({
  "lib/meta/icon_arrow-down copy.svg.ts"() {
    meta33 = {
      "description": "The arrow-down copy icon represents a downward pointing arrow with a duplicate symbol, indicating the action of copying an item or content downwards. This icon is commonly used in interfaces to signify the ability to duplicate and move content in a downward direction.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow down",
        "copy",
        "duplicate",
        "downward",
        "action",
        "interface",
        "symbol",
        "content",
        "move",
        "item"
      ],
      "title": "Arrow Down Copy"
    };
    icon_arrow_down_copy_svg_default = meta33;
  }
});

// lib/meta/icon_arrow-down-left.svg.ts
var icon_arrow_down_left_svg_exports = {};
__export(icon_arrow_down_left_svg_exports, {
  default: () => icon_arrow_down_left_svg_default,
  meta: () => meta34
});
var meta34, icon_arrow_down_left_svg_default;
var init_icon_arrow_down_left_svg = __esm({
  "lib/meta/icon_arrow-down-left.svg.ts"() {
    meta34 = {
      "description": "The arrow-down-left icon depicts an arrow pointing downwards and to the left. It is commonly used to indicate movement or direction in that particular way.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "down",
        "left",
        "direction",
        "movement",
        "navigation",
        "pointer",
        "symbol",
        "graphic",
        "interface"
      ],
      "title": "Arrow Down Left"
    };
    icon_arrow_down_left_svg_default = meta34;
  }
});

// lib/meta/icon_arrow-down-right.svg.ts
var icon_arrow_down_right_svg_exports = {};
__export(icon_arrow_down_right_svg_exports, {
  default: () => icon_arrow_down_right_svg_default,
  meta: () => meta35
});
var meta35, icon_arrow_down_right_svg_default;
var init_icon_arrow_down_right_svg = __esm({
  "lib/meta/icon_arrow-down-right.svg.ts"() {
    meta35 = {
      "description": "An icon depicting an arrow pointing downwards and to the right, indicating the direction. It is commonly used in user interfaces to show the option to scroll or navigate in a diagonal downward direction.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "down",
        "right",
        "direction",
        "pointer",
        "navigation",
        "UI",
        "scrolling",
        "diagonal",
        "movement"
      ],
      "title": "Arrow Down Right"
    };
    icon_arrow_down_right_svg_default = meta35;
  }
});

// lib/meta/icon_arrow-down.svg.ts
var icon_arrow_down_svg_exports = {};
__export(icon_arrow_down_svg_exports, {
  default: () => icon_arrow_down_svg_default,
  meta: () => meta36
});
var meta36, icon_arrow_down_svg_default;
var init_icon_arrow_down_svg = __esm({
  "lib/meta/icon_arrow-down.svg.ts"() {
    meta36 = {
      "description": "A simple icon depicting a downward arrow, often used to indicate scrolling down or downloading content.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "down",
        "navigation",
        "scrolling",
        "download",
        "direction",
        "pointer",
        "pointing",
        "symbol",
        "interface"
      ],
      "title": "Arrow Down"
    };
    icon_arrow_down_svg_default = meta36;
  }
});

// lib/meta/icon_arrow-download.svg.ts
var icon_arrow_download_svg_exports = {};
__export(icon_arrow_download_svg_exports, {
  default: () => icon_arrow_download_svg_default,
  meta: () => meta37
});
var meta37, icon_arrow_download_svg_default;
var init_icon_arrow_download_svg = __esm({
  "lib/meta/icon_arrow-download.svg.ts"() {
    meta37 = {
      "description": "The arrow-download icon is a simple arrow pointing downwards, indicating the action of downloading. It is commonly used to represent the act of downloading files or data.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "download",
        "downwards",
        "action",
        "file transfer",
        "data transfer",
        "direction",
        "pointer",
        "navigation",
        "symbol"
      ],
      "title": "Arrow Download"
    };
    icon_arrow_download_svg_default = meta37;
  }
});

// lib/meta/icon_arrow-headed-corner-down.svg.ts
var icon_arrow_headed_corner_down_svg_exports = {};
__export(icon_arrow_headed_corner_down_svg_exports, {
  default: () => icon_arrow_headed_corner_down_svg_default,
  meta: () => meta38
});
var meta38, icon_arrow_headed_corner_down_svg_default;
var init_icon_arrow_headed_corner_down_svg = __esm({
  "lib/meta/icon_arrow-headed-corner-down.svg.ts"() {
    meta38 = {
      "description": "An icon depicting a corner arrow pointing downwards, commonly used to indicate a downward direction or to navigate to content below. The arrow also has a distinctive arrow head design at its tip.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "corner arrow",
        "downwards",
        "navigation",
        "direction",
        "corner arrow",
        "arrow head",
        "pointing down",
        "interface",
        "graphic",
        "symbol"
      ],
      "title": "Arrow Headed Corner Down"
    };
    icon_arrow_headed_corner_down_svg_default = meta38;
  }
});

// lib/meta/icon_arrow-headed-corner-left-.svg.ts
var icon_arrow_headed_corner_left_svg_exports = {};
__export(icon_arrow_headed_corner_left_svg_exports, {
  default: () => icon_arrow_headed_corner_left_svg_default,
  meta: () => meta39
});
var meta39, icon_arrow_headed_corner_left_svg_default;
var init_icon_arrow_headed_corner_left_svg = __esm({
  "lib/meta/icon_arrow-headed-corner-left-.svg.ts"() {
    meta39 = {
      "description": "This icon features a left-facing arrow with a distinct arrowhead at the corner, pointing towards the top left direction. It is commonly used to indicate navigation or direction change to the left.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "left",
        "corner",
        "navigation",
        "direction",
        "pointer",
        "top left",
        "pointer",
        "symbol"
      ],
      "title": "Arrow Headed Corner Left"
    };
    icon_arrow_headed_corner_left_svg_default = meta39;
  }
});

// lib/meta/icon_arrow-headed-corner-right.svg.ts
var icon_arrow_headed_corner_right_svg_exports = {};
__export(icon_arrow_headed_corner_right_svg_exports, {
  default: () => icon_arrow_headed_corner_right_svg_default,
  meta: () => meta40
});
var meta40, icon_arrow_headed_corner_right_svg_default;
var init_icon_arrow_headed_corner_right_svg = __esm({
  "lib/meta/icon_arrow-headed-corner-right.svg.ts"() {
    meta40 = {
      "description": "The arrow-headed-corner-right icon features an angled arrow pointing towards the upper-right corner. It is commonly used to indicate a rightward or upward direction.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "corner",
        "right",
        "direction",
        "navigation",
        "pointer",
        "angle",
        "upward",
        "rightward",
        "indicator"
      ],
      "title": "Arrow Headed Corner Right"
    };
    icon_arrow_headed_corner_right_svg_default = meta40;
  }
});

// lib/meta/icon_arrow-headed-corner-up.svg.ts
var icon_arrow_headed_corner_up_svg_exports = {};
__export(icon_arrow_headed_corner_up_svg_exports, {
  default: () => icon_arrow_headed_corner_up_svg_default,
  meta: () => meta41
});
var meta41, icon_arrow_headed_corner_up_svg_default;
var init_icon_arrow_headed_corner_up_svg = __esm({
  "lib/meta/icon_arrow-headed-corner-up.svg.ts"() {
    meta41 = {
      "description": "An arrow-headed corner pointing upwards, indicating a direction. This icon is commonly used in various UI designs and graphics to represent moving upwards or navigating to a higher level.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow-headed",
        "corner",
        "upwards",
        "direction",
        "navigation",
        "UI design",
        "graphic design",
        "moving upwards",
        "higher level"
      ],
      "title": "Arrow Headed Corner Up"
    };
    icon_arrow_headed_corner_up_svg_default = meta41;
  }
});

// lib/meta/icon_arrow-headed-diagonal-bl-tr-stop.svg.ts
var icon_arrow_headed_diagonal_bl_tr_stop_svg_exports = {};
__export(icon_arrow_headed_diagonal_bl_tr_stop_svg_exports, {
  default: () => icon_arrow_headed_diagonal_bl_tr_stop_svg_default,
  meta: () => meta42
});
var meta42, icon_arrow_headed_diagonal_bl_tr_stop_svg_default;
var init_icon_arrow_headed_diagonal_bl_tr_stop_svg = __esm({
  "lib/meta/icon_arrow-headed-diagonal-bl-tr-stop.svg.ts"() {
    meta42 = {
      "description": "This icon features an arrow pointing diagonally from the bottom left to top right with a stop symbol at the tip of the arrowhead. It represents a pause or halt in movement or progression.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "diagonal arrow",
        "stop",
        "pause",
        "movement",
        "progression",
        "direction",
        "navigation",
        "pointer",
        "symbol",
        "icon"
      ],
      "title": "Diagonal Arrow with Stop Symbol"
    };
    icon_arrow_headed_diagonal_bl_tr_stop_svg_default = meta42;
  }
});

// lib/meta/icon_arrow-headed-diagonal-br-tl-stop.svg.ts
var icon_arrow_headed_diagonal_br_tl_stop_svg_exports = {};
__export(icon_arrow_headed_diagonal_br_tl_stop_svg_exports, {
  default: () => icon_arrow_headed_diagonal_br_tl_stop_svg_default,
  meta: () => meta43
});
var meta43, icon_arrow_headed_diagonal_br_tl_stop_svg_default;
var init_icon_arrow_headed_diagonal_br_tl_stop_svg = __esm({
  "lib/meta/icon_arrow-headed-diagonal-br-tl-stop.svg.ts"() {
    meta43 = {
      "description": "This icon features an arrow pointing diagonally from bottom right to top left, with a stop or end symbol at the arrowhead. It symbolizes halting or ending movement in that direction.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "diagonal",
        "stop",
        "direction",
        "movement",
        "end",
        "navigation",
        "pointer",
        "symbol",
        "halt"
      ],
      "title": "Arrow Headed Diagonal Bottom Right to Top Left with Stop"
    };
    icon_arrow_headed_diagonal_br_tl_stop_svg_default = meta43;
  }
});

// lib/meta/icon_arrow-headed-diagonal-in-lt-br.svg.ts
var icon_arrow_headed_diagonal_in_lt_br_svg_exports = {};
__export(icon_arrow_headed_diagonal_in_lt_br_svg_exports, {
  default: () => icon_arrow_headed_diagonal_in_lt_br_svg_default,
  meta: () => meta44
});
var meta44, icon_arrow_headed_diagonal_in_lt_br_svg_default;
var init_icon_arrow_headed_diagonal_in_lt_br_svg = __esm({
  "lib/meta/icon_arrow-headed-diagonal-in-lt-br.svg.ts"() {
    meta44 = {
      "description": "This icon features a diagonal arrow pointing in the top left direction with a unique design at the head.",
      "category": [
        "Arrows",
        "Shapes"
      ],
      "tag": [
        "diagonal arrow",
        "arrow head",
        "direction",
        "top left",
        "pointer",
        "movement",
        "navigation",
        "symbol",
        "graphic",
        "design"
      ],
      "title": "Arrow Headed Diagonal In Left Top Corner"
    };
    icon_arrow_headed_diagonal_in_lt_br_svg_default = meta44;
  }
});

// lib/meta/icon_arrow-headed-diagonal-in-tr-bl.svg.ts
var icon_arrow_headed_diagonal_in_tr_bl_svg_exports = {};
__export(icon_arrow_headed_diagonal_in_tr_bl_svg_exports, {
  default: () => icon_arrow_headed_diagonal_in_tr_bl_svg_default,
  meta: () => meta45
});
var meta45, icon_arrow_headed_diagonal_in_tr_bl_svg_default;
var init_icon_arrow_headed_diagonal_in_tr_bl_svg = __esm({
  "lib/meta/icon_arrow-headed-diagonal-in-tr-bl.svg.ts"() {
    meta45 = {
      "description": "This icon depicts an arrow pointing diagonally from top right to bottom left. The arrow has a distinctive arrowhead at the end.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "diagonal",
        "top-right",
        "bottom-left",
        "direction",
        "movement",
        "pointer",
        "navigation",
        "icon"
      ],
      "title": "Arrow Headed Diagonal Top Right to Bottom Left"
    };
    icon_arrow_headed_diagonal_in_tr_bl_svg_default = meta45;
  }
});

// lib/meta/icon_arrow-headed-diagonal-tl-br-split.svg.ts
var icon_arrow_headed_diagonal_tl_br_split_svg_exports = {};
__export(icon_arrow_headed_diagonal_tl_br_split_svg_exports, {
  default: () => icon_arrow_headed_diagonal_tl_br_split_svg_default,
  meta: () => meta46
});
var meta46, icon_arrow_headed_diagonal_tl_br_split_svg_default;
var init_icon_arrow_headed_diagonal_tl_br_split_svg = __esm({
  "lib/meta/icon_arrow-headed-diagonal-tl-br-split.svg.ts"() {
    meta46 = {
      "description": "This icon features a split design with an arrow pointing from the top left to the bottom right. The arrow is separated into two distinct sections, creating a dynamic and eye-catching visual. It can be used to indicate direction, separation, or division in a design.",
      "category": [
        "Arrows",
        "Shapes"
      ],
      "tag": [
        "arrow",
        "split",
        "diagonal",
        "direction",
        "design",
        "dynamic",
        "separation",
        "division",
        "icon"
      ],
      "title": "Arrow Headed Diagonal Top Left Bottom Right Split"
    };
    icon_arrow_headed_diagonal_tl_br_split_svg_default = meta46;
  }
});

// lib/meta/icon_arrow-headed-diagonal-tl-br-stop.svg.ts
var icon_arrow_headed_diagonal_tl_br_stop_svg_exports = {};
__export(icon_arrow_headed_diagonal_tl_br_stop_svg_exports, {
  default: () => icon_arrow_headed_diagonal_tl_br_stop_svg_default,
  meta: () => meta47
});
var meta47, icon_arrow_headed_diagonal_tl_br_stop_svg_default;
var init_icon_arrow_headed_diagonal_tl_br_stop_svg = __esm({
  "lib/meta/icon_arrow-headed-diagonal-tl-br-stop.svg.ts"() {
    meta47 = {
      "description": "This icon features an arrow pointing diagonally from the top left to the bottom right with a stop symbol at the end, indicating a halt or end point.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "diagonal",
        "top-left",
        "bottom-right",
        "stop",
        "halt",
        "direction",
        "navigation",
        "pointer"
      ],
      "title": "Arrow Headed Diagonal TL-BR Stop"
    };
    icon_arrow_headed_diagonal_tl_br_stop_svg_default = meta47;
  }
});

// lib/meta/icon_arrow-headed-diagonal-tl-br.svg.ts
var icon_arrow_headed_diagonal_tl_br_svg_exports = {};
__export(icon_arrow_headed_diagonal_tl_br_svg_exports, {
  default: () => icon_arrow_headed_diagonal_tl_br_svg_default,
  meta: () => meta48
});
var meta48, icon_arrow_headed_diagonal_tl_br_svg_default;
var init_icon_arrow_headed_diagonal_tl_br_svg = __esm({
  "lib/meta/icon_arrow-headed-diagonal-tl-br.svg.ts"() {
    meta48 = {
      "description": "An arrow icon pointing diagonally from top left to bottom right, with a distinctive arrowhead. This icon is commonly used to indicate direction or movement.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow-headed",
        "diagonal",
        "direction",
        "movement",
        "top-left",
        "bottom-right",
        "navigation",
        "pointer",
        "angle",
        "icon"
      ],
      "title": "Arrow Headed Diagonal Top Left to Bottom Right"
    };
    icon_arrow_headed_diagonal_tl_br_svg_default = meta48;
  }
});

// lib/meta/icon_arrow-headed-diagonal-tr-bl-split.svg.ts
var icon_arrow_headed_diagonal_tr_bl_split_svg_exports = {};
__export(icon_arrow_headed_diagonal_tr_bl_split_svg_exports, {
  default: () => icon_arrow_headed_diagonal_tr_bl_split_svg_default,
  meta: () => meta49
});
var meta49, icon_arrow_headed_diagonal_tr_bl_split_svg_default;
var init_icon_arrow_headed_diagonal_tr_bl_split_svg = __esm({
  "lib/meta/icon_arrow-headed-diagonal-tr-bl-split.svg.ts"() {
    meta49 = {
      "description": "This icon features a diagonal arrow split into two with one side pointing towards the bottom left and the other towards the top right. It is commonly used to indicate a split or division in direction.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "diagonal",
        "split",
        "direction",
        "division",
        "pointer",
        "navigation",
        "movement",
        "pointing",
        "symbol"
      ],
      "title": "Arrow Headed Diagonal Top Left Bottom Right Split"
    };
    icon_arrow_headed_diagonal_tr_bl_split_svg_default = meta49;
  }
});

// lib/meta/icon_arrow-headed-diagonal-tr-bl-stop.svg.ts
var icon_arrow_headed_diagonal_tr_bl_stop_svg_exports = {};
__export(icon_arrow_headed_diagonal_tr_bl_stop_svg_exports, {
  default: () => icon_arrow_headed_diagonal_tr_bl_stop_svg_default,
  meta: () => meta50
});
var meta50, icon_arrow_headed_diagonal_tr_bl_stop_svg_default;
var init_icon_arrow_headed_diagonal_tr_bl_stop_svg = __esm({
  "lib/meta/icon_arrow-headed-diagonal-tr-bl-stop.svg.ts"() {
    meta50 = {
      "description": "An arrow icon pointing diagonally from top right to bottom left with a stop sign at the end, representing a halt or an end point.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "direction",
        "stop",
        "pointing",
        "halt",
        "diagonal",
        "bottom",
        "left",
        "top",
        "right"
      ],
      "title": "Arrow Headed Diagonal Top Right Bottom Left with Stop"
    };
    icon_arrow_headed_diagonal_tr_bl_stop_svg_default = meta50;
  }
});

// lib/meta/icon_arrow-headed-diagonal-tr-bl.svg.ts
var icon_arrow_headed_diagonal_tr_bl_svg_exports = {};
__export(icon_arrow_headed_diagonal_tr_bl_svg_exports, {
  default: () => icon_arrow_headed_diagonal_tr_bl_svg_default,
  meta: () => meta51
});
var meta51, icon_arrow_headed_diagonal_tr_bl_svg_default;
var init_icon_arrow_headed_diagonal_tr_bl_svg = __esm({
  "lib/meta/icon_arrow-headed-diagonal-tr-bl.svg.ts"() {
    meta51 = {
      "description": "This icon features a diagonal arrow pointing from top right to bottom left with a triangular arrowhead on one end. It is commonly used to indicate direction, movement, or progression.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "diagonal",
        "direction",
        "movement",
        "progression",
        "triangle",
        "icon",
        "navigation",
        "pointing",
        "arrowhead"
      ],
      "title": "Arrow Headed Diagonal Top Right to Bottom Left"
    };
    icon_arrow_headed_diagonal_tr_bl_svg_default = meta51;
  }
});

// lib/meta/icon_arrow-headed-down-left.svg.ts
var icon_arrow_headed_down_left_svg_exports = {};
__export(icon_arrow_headed_down_left_svg_exports, {
  default: () => icon_arrow_headed_down_left_svg_default,
  meta: () => meta52
});
var meta52, icon_arrow_headed_down_left_svg_default;
var init_icon_arrow_headed_down_left_svg = __esm({
  "lib/meta/icon_arrow-headed-down-left.svg.ts"() {
    meta52 = {
      "description": "An icon of an arrow pointing down and left, representing navigation or indicating to move or scroll in those directions.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "direction",
        "pointing",
        "navigation",
        "move",
        "scroll",
        "down",
        "left",
        "diagonal",
        "symbol"
      ],
      "title": "Arrow Headed Down Left"
    };
    icon_arrow_headed_down_left_svg_default = meta52;
  }
});

// lib/meta/icon_arrow-headed-down-right.svg.ts
var icon_arrow_headed_down_right_svg_exports = {};
__export(icon_arrow_headed_down_right_svg_exports, {
  default: () => icon_arrow_headed_down_right_svg_default,
  meta: () => meta53
});
var meta53, icon_arrow_headed_down_right_svg_default;
var init_icon_arrow_headed_down_right_svg = __esm({
  "lib/meta/icon_arrow-headed-down-right.svg.ts"() {
    meta53 = {
      "description": "An arrow icon pointing down-right, indicating a diagonal direction.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "direction",
        "diagonal",
        "navigation",
        "pointer",
        "move",
        "down",
        "right",
        "movement",
        "icon",
        "arrow"
      ],
      "title": "Arrow Headed Down Right"
    };
    icon_arrow_headed_down_right_svg_default = meta53;
  }
});

// lib/meta/icon_arrow-headed-down-stop.svg.ts
var icon_arrow_headed_down_stop_svg_exports = {};
__export(icon_arrow_headed_down_stop_svg_exports, {
  default: () => icon_arrow_headed_down_stop_svg_default,
  meta: () => meta54
});
var meta54, icon_arrow_headed_down_stop_svg_default;
var init_icon_arrow_headed_down_stop_svg = __esm({
  "lib/meta/icon_arrow-headed-down-stop.svg.ts"() {
    meta54 = {
      "description": "The icon depicts a downward-facing arrow with a stop sign at the tip. It signifies a halt or stopping action in a directional context.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "down arrow",
        "stop",
        "directional",
        "navigation",
        "bottom",
        "action",
        "halt",
        "pointer",
        "instruction",
        "UI"
      ],
      "title": "Arrow Headed Down Stop"
    };
    icon_arrow_headed_down_stop_svg_default = meta54;
  }
});

// lib/meta/icon_arrow-headed-down.svg.ts
var icon_arrow_headed_down_svg_exports = {};
__export(icon_arrow_headed_down_svg_exports, {
  default: () => icon_arrow_headed_down_svg_default,
  meta: () => meta55
});
var meta55, icon_arrow_headed_down_svg_default;
var init_icon_arrow_headed_down_svg = __esm({
  "lib/meta/icon_arrow-headed-down.svg.ts"() {
    meta55 = {
      "description": "An icon depicting a downward-facing arrow with a sharp triangular head, symbolizing the action of moving or scrolling downwards. It is commonly used in user interfaces to indicate a decrease in value or a need to navigate downwards.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "down",
        "arrow",
        "direction",
        "scroll",
        "move",
        "navigation",
        "point",
        "decrease",
        "user interface",
        "triangular"
      ],
      "title": "Arrow Headed Down"
    };
    icon_arrow_headed_down_svg_default = meta55;
  }
});

// lib/meta/icon_arrow-headed-download.svg.ts
var icon_arrow_headed_download_svg_exports = {};
__export(icon_arrow_headed_download_svg_exports, {
  default: () => icon_arrow_headed_download_svg_default,
  meta: () => meta56
});
var meta56, icon_arrow_headed_download_svg_default;
var init_icon_arrow_headed_download_svg = __esm({
  "lib/meta/icon_arrow-headed-download.svg.ts"() {
    meta56 = {
      "description": "An icon depicting an arrow pointing downwards with a distinctive arrowhead at the tip, symbolizing the action of downloading.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow-headed-download",
        "arrow",
        "download",
        "direction",
        "pointer",
        "navigation",
        "technology",
        "internet",
        "web",
        "symbol"
      ],
      "title": "Arrow Headed Download"
    };
    icon_arrow_headed_download_svg_default = meta56;
  }
});

// lib/meta/icon_arrow-headed-in-center.svg.ts
var icon_arrow_headed_in_center_svg_exports = {};
__export(icon_arrow_headed_in_center_svg_exports, {
  default: () => icon_arrow_headed_in_center_svg_default,
  meta: () => meta57
});
var meta57, icon_arrow_headed_in_center_svg_default;
var init_icon_arrow_headed_in_center_svg = __esm({
  "lib/meta/icon_arrow-headed-in-center.svg.ts"() {
    meta57 = {
      "description": "The arrow-headed-in-center icon features a single arrow pointing in the center of the icon. This design is often used to depict direction or focus towards a central point.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "pointer",
        "centered",
        "direction",
        "navigation",
        "focus",
        "arrowhead",
        "central",
        "location",
        "guidance"
      ],
      "title": "Arrow Headed in Center"
    };
    icon_arrow_headed_in_center_svg_default = meta57;
  }
});

// lib/meta/icon_arrow-headed-in-diagonal.svg.ts
var icon_arrow_headed_in_diagonal_svg_exports = {};
__export(icon_arrow_headed_in_diagonal_svg_exports, {
  default: () => icon_arrow_headed_in_diagonal_svg_default,
  meta: () => meta58
});
var meta58, icon_arrow_headed_in_diagonal_svg_default;
var init_icon_arrow_headed_in_diagonal_svg = __esm({
  "lib/meta/icon_arrow-headed-in-diagonal.svg.ts"() {
    meta58 = {
      "description": "An arrow symbol with a pointy head, oriented diagonally. It typically signifies direction, movement, or progression.",
      "category": [
        "Arrows",
        "Symbol"
      ],
      "tag": [
        "arrow",
        "diagonal",
        "direction",
        "movement",
        "progression",
        "pointy",
        "navigation",
        "indicator",
        "pointer",
        "vector"
      ],
      "title": "Arrow Headed in Diagonal"
    };
    icon_arrow_headed_in_diagonal_svg_default = meta58;
  }
});

// lib/meta/icon_arrow-headed-in.svg.ts
var icon_arrow_headed_in_svg_exports = {};
__export(icon_arrow_headed_in_svg_exports, {
  default: () => icon_arrow_headed_in_svg_default,
  meta: () => meta59
});
var meta59, icon_arrow_headed_in_svg_default;
var init_icon_arrow_headed_in_svg = __esm({
  "lib/meta/icon_arrow-headed-in.svg.ts"() {
    meta59 = {
      "description": "This icon features an arrow with a distinct arrowhead pointing inwards. It symbolizes direction, navigation, and focusing towards a central point.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "inward",
        "direction",
        "navigation",
        "focus",
        "point"
      ],
      "title": "Arrow Headed In"
    };
    icon_arrow_headed_in_svg_default = meta59;
  }
});

// lib/meta/icon_arrow-headed-left-right-split.svg.ts
var icon_arrow_headed_left_right_split_svg_exports = {};
__export(icon_arrow_headed_left_right_split_svg_exports, {
  default: () => icon_arrow_headed_left_right_split_svg_default,
  meta: () => meta60
});
var meta60, icon_arrow_headed_left_right_split_svg_default;
var init_icon_arrow_headed_left_right_split_svg = __esm({
  "lib/meta/icon_arrow-headed-left-right-split.svg.ts"() {
    meta60 = {
      "description": "An arrow icon pointing to the left and right, splitting into two directions from the center.",
      "category": [
        "Arrows",
        "Shapes"
      ],
      "tag": [
        "arrow",
        "left",
        "right",
        "split",
        "direction",
        "movement",
        "navigation",
        "symbol",
        "graphic",
        "pointer"
      ],
      "title": "Arrow Headed Left Right Split"
    };
    icon_arrow_headed_left_right_split_svg_default = meta60;
  }
});

// lib/meta/icon_arrow-headed-left-right-stop.svg.ts
var icon_arrow_headed_left_right_stop_svg_exports = {};
__export(icon_arrow_headed_left_right_stop_svg_exports, {
  default: () => icon_arrow_headed_left_right_stop_svg_default,
  meta: () => meta61
});
var meta61, icon_arrow_headed_left_right_stop_svg_default;
var init_icon_arrow_headed_left_right_stop_svg = __esm({
  "lib/meta/icon_arrow-headed-left-right-stop.svg.ts"() {
    meta61 = {
      "description": "An icon featuring an arrow pointing left, an arrow pointing right, and a stop square in the middle, symbolizing the options to go left, right, or stop.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "left",
        "right",
        "stop",
        "direction",
        "navigation",
        "options",
        "turn",
        "choice",
        "interface",
        "button"
      ],
      "title": "Arrow Headed Left Right Stop"
    };
    icon_arrow_headed_left_right_stop_svg_default = meta61;
  }
});

// lib/meta/icon_arrow-headed-left-right.svg.ts
var icon_arrow_headed_left_right_svg_exports = {};
__export(icon_arrow_headed_left_right_svg_exports, {
  default: () => icon_arrow_headed_left_right_svg_default,
  meta: () => meta62
});
var meta62, icon_arrow_headed_left_right_svg_default;
var init_icon_arrow_headed_left_right_svg = __esm({
  "lib/meta/icon_arrow-headed-left-right.svg.ts"() {
    meta62 = {
      "description": "This icon depicts an arrow pointing left and right, commonly used to indicate the ability to navigate or switch between options in both directions.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "navigation",
        "direction",
        "switch",
        "movement",
        "left",
        "right",
        "interface design",
        "web",
        "app",
        "UI"
      ],
      "title": "Arrow Headed Left Right"
    };
    icon_arrow_headed_left_right_svg_default = meta62;
  }
});

// lib/meta/icon_arrow-headed-left-stop.svg.ts
var icon_arrow_headed_left_stop_svg_exports = {};
__export(icon_arrow_headed_left_stop_svg_exports, {
  default: () => icon_arrow_headed_left_stop_svg_default,
  meta: () => meta63
});
var meta63, icon_arrow_headed_left_stop_svg_default;
var init_icon_arrow_headed_left_stop_svg = __esm({
  "lib/meta/icon_arrow-headed-left-stop.svg.ts"() {
    meta63 = {
      "description": "An icon representing a leftward arrow next to an octagonal stop sign, indicating stopping or pausing in the left direction.",
      "category": [
        "Arrows",
        "Symbol"
      ],
      "tag": [
        "left",
        "arrow",
        "stop",
        "direction",
        "pause",
        "navigation",
        "traffic",
        "warning",
        "sign",
        "safety"
      ],
      "title": "Arrow Headed Left Stop"
    };
    icon_arrow_headed_left_stop_svg_default = meta63;
  }
});

// lib/meta/icon_arrow-headed-left.svg.ts
var icon_arrow_headed_left_svg_exports = {};
__export(icon_arrow_headed_left_svg_exports, {
  default: () => icon_arrow_headed_left_svg_default,
  meta: () => meta64
});
var meta64, icon_arrow_headed_left_svg_default;
var init_icon_arrow_headed_left_svg = __esm({
  "lib/meta/icon_arrow-headed-left.svg.ts"() {
    meta64 = {
      "description": "An icon featuring an arrow pointing to the left, with a distinct arrowhead at one end.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "Left arrow",
        "Pointing",
        "Direction",
        "Navigation",
        "Back",
        "Symbol",
        "Arrowhead",
        "Simple",
        "Minimalistic"
      ],
      "title": "Arrow Headed Left"
    };
    icon_arrow_headed_left_svg_default = meta64;
  }
});

// lib/meta/icon_arrow-headed-out-center.svg.ts
var icon_arrow_headed_out_center_svg_exports = {};
__export(icon_arrow_headed_out_center_svg_exports, {
  default: () => icon_arrow_headed_out_center_svg_default,
  meta: () => meta65
});
var meta65, icon_arrow_headed_out_center_svg_default;
var init_icon_arrow_headed_out_center_svg = __esm({
  "lib/meta/icon_arrow-headed-out-center.svg.ts"() {
    meta65 = {
      "description": "The arrow-headed-out-center icon illustrates an arrow pointing outwards from the center, symbolizing expansion or navigation away from a central point. This icon is commonly used to indicate zooming out, navigation to different sections, or redirecting focus to external content.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "direction",
        "centered",
        "expansion",
        "navigation",
        "zoom out",
        "pointer",
        "external",
        "focus",
        "move"
      ],
      "title": "Arrow Headed Out Center"
    };
    icon_arrow_headed_out_center_svg_default = meta65;
  }
});

// lib/meta/icon_arrow-headed-reload-down-up.svg.ts
var icon_arrow_headed_reload_down_up_svg_exports = {};
__export(icon_arrow_headed_reload_down_up_svg_exports, {
  default: () => icon_arrow_headed_reload_down_up_svg_default,
  meta: () => meta66
});
var meta66, icon_arrow_headed_reload_down_up_svg_default;
var init_icon_arrow_headed_reload_down_up_svg = __esm({
  "lib/meta/icon_arrow-headed-reload-down-up.svg.ts"() {
    meta66 = {
      "description": "This icon features a stylized arrow with a distinct arrowhead pointing downward and upward, symbolizing a reload action. The icon is commonly used in user interfaces to indicate the option to refresh or reload content.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "refresh",
        "reload",
        "arrowhead",
        "direction",
        "navigation",
        "circular motion",
        "user interface",
        "digital design",
        "symbol"
      ],
      "title": "Arrow Headed Reload Down Up"
    };
    icon_arrow_headed_reload_down_up_svg_default = meta66;
  }
});

// lib/meta/icon_arrow-headed-reload-left-right.svg.ts
var icon_arrow_headed_reload_left_right_svg_exports = {};
__export(icon_arrow_headed_reload_left_right_svg_exports, {
  default: () => icon_arrow_headed_reload_left_right_svg_default,
  meta: () => meta67
});
var meta67, icon_arrow_headed_reload_left_right_svg_default;
var init_icon_arrow_headed_reload_left_right_svg = __esm({
  "lib/meta/icon_arrow-headed-reload-left-right.svg.ts"() {
    meta67 = {
      "description": "The arrow-headed-reload-left-right icon features a circular arrow design with arrowheads at both ends, symbolizing a reload or refresh action that can be performed in either direction.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "circular arrow",
        "reload",
        "refresh",
        "left",
        "right",
        "navigation",
        "update",
        "circular motion",
        "opposite direction",
        "loop"
      ],
      "title": "Arrow Headed Reload Left Right"
    };
    icon_arrow_headed_reload_left_right_svg_default = meta67;
  }
});

// lib/meta/icon_arrow-headed-reload-right-left.svg.ts
var icon_arrow_headed_reload_right_left_svg_exports = {};
__export(icon_arrow_headed_reload_right_left_svg_exports, {
  default: () => icon_arrow_headed_reload_right_left_svg_default,
  meta: () => meta68
});
var meta68, icon_arrow_headed_reload_right_left_svg_default;
var init_icon_arrow_headed_reload_right_left_svg = __esm({
  "lib/meta/icon_arrow-headed-reload-right-left.svg.ts"() {
    meta68 = {
      "description": "An icon depicting a reload symbol with arrows pointing both right and left. This can be used to indicate actions such as refreshing, restarting, or reloading.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "reload",
        "refresh",
        "restart",
        "circular",
        "navigation",
        "direction",
        "symmetric",
        "opposite",
        "sync",
        "loop"
      ],
      "title": "Arrow Headed Reload Right Left"
    };
    icon_arrow_headed_reload_right_left_svg_default = meta68;
  }
});

// lib/meta/icon_arrow-headed-reload-up-down.svg.ts
var icon_arrow_headed_reload_up_down_svg_exports = {};
__export(icon_arrow_headed_reload_up_down_svg_exports, {
  default: () => icon_arrow_headed_reload_up_down_svg_default,
  meta: () => meta69
});
var meta69, icon_arrow_headed_reload_up_down_svg_default;
var init_icon_arrow_headed_reload_up_down_svg = __esm({
  "lib/meta/icon_arrow-headed-reload-up-down.svg.ts"() {
    meta69 = {
      "description": "This icon features arrows pointing up and down with a reload circle, representing a refresh or update action in both upward and downward directions.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "reload",
        "refresh",
        "up",
        "down",
        "circular",
        "movement",
        "direction",
        "update",
        "navigation",
        "sync"
      ],
      "title": "Arrow Headed Reload Up Down"
    };
    icon_arrow_headed_reload_up_down_svg_default = meta69;
  }
});

// lib/meta/icon_arrow-headed-return-down.svg.ts
var icon_arrow_headed_return_down_svg_exports = {};
__export(icon_arrow_headed_return_down_svg_exports, {
  default: () => icon_arrow_headed_return_down_svg_default,
  meta: () => meta70
});
var meta70, icon_arrow_headed_return_down_svg_default;
var init_icon_arrow_headed_return_down_svg = __esm({
  "lib/meta/icon_arrow-headed-return-down.svg.ts"() {
    meta70 = {
      "description": "An icon depicting an arrow pointing downwards with a unique arrowhead design at the tip, symbolizing a return action or movement downwards.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "return",
        "downward",
        "navigation",
        "direction",
        "pointer",
        "symbol",
        "action",
        "arrowhead",
        "motion",
        "arrow"
      ],
      "title": "Arrow Headed Return Down"
    };
    icon_arrow_headed_return_down_svg_default = meta70;
  }
});

// lib/meta/icon_arrow-headed-return-left.svg.ts
var icon_arrow_headed_return_left_svg_exports = {};
__export(icon_arrow_headed_return_left_svg_exports, {
  default: () => icon_arrow_headed_return_left_svg_default,
  meta: () => meta71
});
var meta71, icon_arrow_headed_return_left_svg_default;
var init_icon_arrow_headed_return_left_svg = __esm({
  "lib/meta/icon_arrow-headed-return-left.svg.ts"() {
    meta71 = {
      "description": "The arrow-headed-return-left icon is a simple graphic depicting an arrow pointing to the left, symbolizing a return or back navigation. It is commonly used in user interfaces to indicate an action to go back to the previous page or step.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "return",
        "left",
        "navigation",
        "back",
        "direction",
        "symbol",
        "graphic",
        "user interface",
        "previous"
      ],
      "title": "Arrow Headed Return Left"
    };
    icon_arrow_headed_return_left_svg_default = meta71;
  }
});

// lib/meta/icon_arrow-headed-return-right.svg.ts
var icon_arrow_headed_return_right_svg_exports = {};
__export(icon_arrow_headed_return_right_svg_exports, {
  default: () => icon_arrow_headed_return_right_svg_default,
  meta: () => meta72
});
var meta72, icon_arrow_headed_return_right_svg_default;
var init_icon_arrow_headed_return_right_svg = __esm({
  "lib/meta/icon_arrow-headed-return-right.svg.ts"() {
    meta72 = {
      "description": "An arrow-headed return right icon typically indicates a return or back action to the right direction. This can be used in various interfaces to signify going back or returning to a previous point.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "return",
        "navigation",
        "direction",
        "right",
        "back",
        "interface",
        "symbol",
        "revert",
        "undo"
      ],
      "title": "Arrow Headed Return Right"
    };
    icon_arrow_headed_return_right_svg_default = meta72;
  }
});

// lib/meta/icon_arrow-headed-return-up.svg.ts
var icon_arrow_headed_return_up_svg_exports = {};
__export(icon_arrow_headed_return_up_svg_exports, {
  default: () => icon_arrow_headed_return_up_svg_default,
  meta: () => meta73
});
var meta73, icon_arrow_headed_return_up_svg_default;
var init_icon_arrow_headed_return_up_svg = __esm({
  "lib/meta/icon_arrow-headed-return-up.svg.ts"() {
    meta73 = {
      "description": "An icon of an arrow pointing up with a distinct arrowhead shape at the end, indicating a return action or going back to the top of a page.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "return",
        "up",
        "arrowhead",
        "navigation",
        "direction",
        "symbol",
        "website",
        "refresh",
        "reverse",
        "top"
      ],
      "title": "Arrow Headed Return Up"
    };
    icon_arrow_headed_return_up_svg_default = meta73;
  }
});

// lib/meta/icon_arrow-headed-right.svg.ts
var icon_arrow_headed_right_svg_exports = {};
__export(icon_arrow_headed_right_svg_exports, {
  default: () => icon_arrow_headed_right_svg_default,
  meta: () => meta74
});
var meta74, icon_arrow_headed_right_svg_default;
var init_icon_arrow_headed_right_svg = __esm({
  "lib/meta/icon_arrow-headed-right.svg.ts"() {
    meta74 = {
      "description": "The arrow-headed-right icon is a simple arrow pointing to the right direction. It is commonly used to indicate moving forward, navigating to the next page, or progressing in a process.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "forward",
        "next",
        "progress",
        "navigation",
        "direction",
        "pointer",
        "arrow",
        "simple",
        "minimalist",
        "basic"
      ],
      "title": "Arrow Headed Right"
    };
    icon_arrow_headed_right_svg_default = meta74;
  }
});

// lib/meta/icon_arrow-headed-rotate-bottom-left.svg.ts
var icon_arrow_headed_rotate_bottom_left_svg_exports = {};
__export(icon_arrow_headed_rotate_bottom_left_svg_exports, {
  default: () => icon_arrow_headed_rotate_bottom_left_svg_default,
  meta: () => meta75
});
var meta75, icon_arrow_headed_rotate_bottom_left_svg_default;
var init_icon_arrow_headed_rotate_bottom_left_svg = __esm({
  "lib/meta/icon_arrow-headed-rotate-bottom-left.svg.ts"() {
    meta75 = {
      "description": "The arrow-headed-rotate-bottom-left icon features an arrow pointing downwards and to the left, with a circular head. This icon symbolizes rotation or turning in a counter-clockwise direction.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "rotate",
        "direction",
        "counter-clockwise",
        "movement",
        "navigation",
        "arrow",
        "symbol",
        "rotate icon",
        "arrow icon",
        "bottom-left"
      ],
      "title": "Arrow Headed Rotate Bottom Left"
    };
    icon_arrow_headed_rotate_bottom_left_svg_default = meta75;
  }
});

// lib/meta/icon_arrow-headed-rotate-bottom-right.svg.ts
var icon_arrow_headed_rotate_bottom_right_svg_exports = {};
__export(icon_arrow_headed_rotate_bottom_right_svg_exports, {
  default: () => icon_arrow_headed_rotate_bottom_right_svg_default,
  meta: () => meta76
});
var meta76, icon_arrow_headed_rotate_bottom_right_svg_default;
var init_icon_arrow_headed_rotate_bottom_right_svg = __esm({
  "lib/meta/icon_arrow-headed-rotate-bottom-right.svg.ts"() {
    meta76 = {
      "description": "An icon depicting an arrow pointing to the bottom right corner with a distinctive arrowhead, symbolizing rotation or direction change.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "pointer",
        "rotation",
        "direction",
        "movement",
        "navigation",
        "arrowhead",
        "angled",
        "change",
        "transition",
        "rotate"
      ],
      "title": "Arrow Headed Rotate Bottom Right"
    };
    icon_arrow_headed_rotate_bottom_right_svg_default = meta76;
  }
});

// lib/meta/icon_arrow-headed-rotate-top-left.svg.ts
var icon_arrow_headed_rotate_top_left_svg_exports = {};
__export(icon_arrow_headed_rotate_top_left_svg_exports, {
  default: () => icon_arrow_headed_rotate_top_left_svg_default,
  meta: () => meta77
});
var meta77, icon_arrow_headed_rotate_top_left_svg_default;
var init_icon_arrow_headed_rotate_top_left_svg = __esm({
  "lib/meta/icon_arrow-headed-rotate-top-left.svg.ts"() {
    meta77 = {
      "description": "The arrow-headed-rotate-top-left icon features an arrow pointing towards the top left corner, symbolizing rotation or movement in that direction. This icon can be used to indicate a return to a previous state or to rotate an object or element.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "rotate",
        "top left",
        "movement",
        "direction",
        "return",
        "previous state",
        "rotate object",
        "rotate element"
      ],
      "title": "Arrow Headed Rotate Top Left"
    };
    icon_arrow_headed_rotate_top_left_svg_default = meta77;
  }
});

// lib/meta/icon_arrow-headed-rotate-top-right.svg.ts
var icon_arrow_headed_rotate_top_right_svg_exports = {};
__export(icon_arrow_headed_rotate_top_right_svg_exports, {
  default: () => icon_arrow_headed_rotate_top_right_svg_default,
  meta: () => meta78
});
var meta78, icon_arrow_headed_rotate_top_right_svg_default;
var init_icon_arrow_headed_rotate_top_right_svg = __esm({
  "lib/meta/icon_arrow-headed-rotate-top-right.svg.ts"() {
    meta78 = {
      "description": "The arrow-headed-rotate-top-right icon features an arrow pointing to the top right with a rotation symbol, indicating a movement or rotation in that direction. It can represent turning, rotating, or switching to a different direction.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "rotate",
        "up",
        "right",
        "direction",
        "movement",
        "switch",
        "navigation",
        "pointer",
        "symbol"
      ],
      "title": "Arrow Headed Rotate Top Right"
    };
    icon_arrow_headed_rotate_top_right_svg_default = meta78;
  }
});

// lib/meta/icon_arrow-headed-rounded-left-up.svg.ts
var icon_arrow_headed_rounded_left_up_svg_exports = {};
__export(icon_arrow_headed_rounded_left_up_svg_exports, {
  default: () => icon_arrow_headed_rounded_left_up_svg_default,
  meta: () => meta79
});
var meta79, icon_arrow_headed_rounded_left_up_svg_default;
var init_icon_arrow_headed_rounded_left_up_svg = __esm({
  "lib/meta/icon_arrow-headed-rounded-left-up.svg.ts"() {
    meta79 = {
      "description": "This icon features an arrow pointing up and to the left, with a rounded design at the tip of the arrowhead. It can symbolize direction, movement, or navigation.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "up",
        "left",
        "direction",
        "navigation",
        "rounded",
        "movement",
        "pointer",
        "pointing",
        "symbol"
      ],
      "title": "Arrow Headed Rounded Left Up"
    };
    icon_arrow_headed_rounded_left_up_svg_default = meta79;
  }
});

// lib/meta/icon_arrow-headed-rounded-right-down.svg.ts
var icon_arrow_headed_rounded_right_down_svg_exports = {};
__export(icon_arrow_headed_rounded_right_down_svg_exports, {
  default: () => icon_arrow_headed_rounded_right_down_svg_default,
  meta: () => meta80
});
var meta80, icon_arrow_headed_rounded_right_down_svg_default;
var init_icon_arrow_headed_rounded_right_down_svg = __esm({
  "lib/meta/icon_arrow-headed-rounded-right-down.svg.ts"() {
    meta80 = {
      "description": "The arrow-headed-rounded-right-down icon is an arrow symbol pointing towards the lower right direction, with a rounded arrowhead. This icon is commonly used to indicate a downward and rightward direction or movement.",
      "category": [
        "Arrows",
        "Shapes"
      ],
      "tag": [
        "arrow",
        "down",
        "right",
        "direction",
        "movement",
        "navigation",
        "pointer",
        "symbol",
        "rounded",
        "pointing"
      ],
      "title": "Arrow Headed Rounded Right Down"
    };
    icon_arrow_headed_rounded_right_down_svg_default = meta80;
  }
});

// lib/meta/icon_arrow-headed-rounded-right-up.svg.ts
var icon_arrow_headed_rounded_right_up_svg_exports = {};
__export(icon_arrow_headed_rounded_right_up_svg_exports, {
  default: () => icon_arrow_headed_rounded_right_up_svg_default,
  meta: () => meta81
});
var meta81, icon_arrow_headed_rounded_right_up_svg_default;
var init_icon_arrow_headed_rounded_right_up_svg = __esm({
  "lib/meta/icon_arrow-headed-rounded-right-up.svg.ts"() {
    meta81 = {
      "description": "This icon features an arrow pointing right and upward with a rounded head, depicting movement and progress.",
      "category": [
        "Arrows",
        "Shapes"
      ],
      "tag": [
        "arrow",
        "arrowhead",
        "rounded",
        "upward",
        "movement",
        "progress",
        "direction",
        "navigation",
        "pointer",
        "symbol"
      ],
      "title": "Arrow Headed Rounded Right Up"
    };
    icon_arrow_headed_rounded_right_up_svg_default = meta81;
  }
});

// lib/meta/icon_arrow-headed-rouned-left-down.svg.ts
var icon_arrow_headed_rouned_left_down_svg_exports = {};
__export(icon_arrow_headed_rouned_left_down_svg_exports, {
  default: () => icon_arrow_headed_rouned_left_down_svg_default,
  meta: () => meta82
});
var meta82, icon_arrow_headed_rouned_left_down_svg_default;
var init_icon_arrow_headed_rouned_left_down_svg = __esm({
  "lib/meta/icon_arrow-headed-rouned-left-down.svg.ts"() {
    meta82 = {
      "description": "This icon features an arrow with a rounded head pointing towards the bottom left direction. It is commonly used to indicate a downward and left movement or navigation.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "left",
        "down",
        "direction",
        "navigation",
        "pointer",
        "movement",
        "rounded",
        "icon",
        "symbol"
      ],
      "title": "Arrow Headed Rounded Left Down"
    };
    icon_arrow_headed_rouned_left_down_svg_default = meta82;
  }
});

// lib/meta/icon_arrow-headed-share.svg.ts
var icon_arrow_headed_share_svg_exports = {};
__export(icon_arrow_headed_share_svg_exports, {
  default: () => icon_arrow_headed_share_svg_default,
  meta: () => meta83
});
var meta83, icon_arrow_headed_share_svg_default;
var init_icon_arrow_headed_share_svg = __esm({
  "lib/meta/icon_arrow-headed-share.svg.ts"() {
    meta83 = {
      "description": "An arrow-headed-share icon typically represents the action of sharing or spreading information. The icon features a directional arrow pointed to the right with a distinct arrowhead, symbolizing the transfer or dissemination of data.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "share",
        "arrow",
        "direction",
        "transfer",
        "spread",
        "communication",
        "social media",
        "networking",
        "information",
        "technology"
      ],
      "title": "Arrow Headed Share"
    };
    icon_arrow_headed_share_svg_default = meta83;
  }
});

// lib/meta/icon_arrow-headed-spread-split.svg.ts
var icon_arrow_headed_spread_split_svg_exports = {};
__export(icon_arrow_headed_spread_split_svg_exports, {
  default: () => icon_arrow_headed_spread_split_svg_default,
  meta: () => meta84
});
var meta84, icon_arrow_headed_spread_split_svg_default;
var init_icon_arrow_headed_spread_split_svg = __esm({
  "lib/meta/icon_arrow-headed-spread-split.svg.ts"() {
    meta84 = {
      "description": "The arrow-headed-spread-split icon features a single arrow that splits into two distinct directions, symbolizing divergence or branching paths. This icon is commonly used in flowcharts, diagrams, and presentations to represent choices, options, or different paths.",
      "category": [
        "Arrows",
        "Shapes",
        "Interface"
      ],
      "tag": [
        "direction",
        "choice",
        "flowchart",
        "options",
        "divergence",
        "paths",
        "splitting",
        "branching",
        "diagrams"
      ],
      "title": "Arrow Headed Spread Split"
    };
    icon_arrow_headed_spread_split_svg_default = meta84;
  }
});

// lib/meta/icon_arrow-headed-spread.svg.ts
var icon_arrow_headed_spread_svg_exports = {};
__export(icon_arrow_headed_spread_svg_exports, {
  default: () => icon_arrow_headed_spread_svg_default,
  meta: () => meta85
});
var meta85, icon_arrow_headed_spread_svg_default;
var init_icon_arrow_headed_spread_svg = __esm({
  "lib/meta/icon_arrow-headed-spread.svg.ts"() {
    meta85 = {
      "description": "The arrow-headed-spread icon features an arrow with two heads pointing outward, symbolizing spreading or divergence. This icon is commonly used to indicate expansion, growth, or distribution in various contexts.",
      "category": [
        "Arrows",
        "Shapes",
        "Interface"
      ],
      "tag": [
        "spread",
        "arrow",
        "expand",
        "growth",
        "direction",
        "distribution",
        "divergence",
        "movement",
        "navigation",
        "pointing"
      ],
      "title": "Arrow Headed Spread"
    };
    icon_arrow_headed_spread_svg_default = meta85;
  }
});

// lib/meta/icon_arrow-headed-twoway-diagonal-lr.svg.ts
var icon_arrow_headed_twoway_diagonal_lr_svg_exports = {};
__export(icon_arrow_headed_twoway_diagonal_lr_svg_exports, {
  default: () => icon_arrow_headed_twoway_diagonal_lr_svg_default,
  meta: () => meta86
});
var meta86, icon_arrow_headed_twoway_diagonal_lr_svg_default;
var init_icon_arrow_headed_twoway_diagonal_lr_svg = __esm({
  "lib/meta/icon_arrow-headed-twoway-diagonal-lr.svg.ts"() {
    meta86 = {
      "description": "This icon features a two-way arrow with heads pointing in opposite directions diagonally from left to right. It represents bidirectional movement or communication.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "two-way",
        "diagonal",
        "lr",
        "bidirectional",
        "movement",
        "communication",
        "direction",
        "opposite",
        "exchange"
      ],
      "title": "Arrow Headed Two-Way Diagonal LR"
    };
    icon_arrow_headed_twoway_diagonal_lr_svg_default = meta86;
  }
});

// lib/meta/icon_arrow-headed-twoway-diagonal-rl.svg.ts
var icon_arrow_headed_twoway_diagonal_rl_svg_exports = {};
__export(icon_arrow_headed_twoway_diagonal_rl_svg_exports, {
  default: () => icon_arrow_headed_twoway_diagonal_rl_svg_default,
  meta: () => meta87
});
var meta87, icon_arrow_headed_twoway_diagonal_rl_svg_default;
var init_icon_arrow_headed_twoway_diagonal_rl_svg = __esm({
  "lib/meta/icon_arrow-headed-twoway-diagonal-rl.svg.ts"() {
    meta87 = {
      "description": "The arrow-headed twoway diagonal pointing from right to left is a directional icon that represents bidirectional movement or interchange in a diagonal path from right to left.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "diagonal",
        "bidirectional",
        "motion",
        "navigation",
        "direction",
        "twoway",
        "transfer",
        "pointing",
        "exchange"
      ],
      "title": "Arrow Headed Twoway Diagonal RL"
    };
    icon_arrow_headed_twoway_diagonal_rl_svg_default = meta87;
  }
});

// lib/meta/icon_arrow-headed-twoway-horizontal.svg.ts
var icon_arrow_headed_twoway_horizontal_svg_exports = {};
__export(icon_arrow_headed_twoway_horizontal_svg_exports, {
  default: () => icon_arrow_headed_twoway_horizontal_svg_default,
  meta: () => meta88
});
var meta88, icon_arrow_headed_twoway_horizontal_svg_default;
var init_icon_arrow_headed_twoway_horizontal_svg = __esm({
  "lib/meta/icon_arrow-headed-twoway-horizontal.svg.ts"() {
    meta88 = {
      "description": "An icon depicting a horizontal arrow with arrowheads on both ends, indicating a two-way movement or interaction. The arrowheads point in opposite directions.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "Horizontal",
        "Two-way",
        "Arrowheads",
        "Movement",
        "Interaction",
        "Opposite directions",
        "Navigation",
        "Directional",
        "Communication"
      ],
      "title": "Arrow Headed Two-Way Horizontal"
    };
    icon_arrow_headed_twoway_horizontal_svg_default = meta88;
  }
});

// lib/meta/icon_arrow-headed-twoway-vertical.svg.ts
var icon_arrow_headed_twoway_vertical_svg_exports = {};
__export(icon_arrow_headed_twoway_vertical_svg_exports, {
  default: () => icon_arrow_headed_twoway_vertical_svg_default,
  meta: () => meta89
});
var meta89, icon_arrow_headed_twoway_vertical_svg_default;
var init_icon_arrow_headed_twoway_vertical_svg = __esm({
  "lib/meta/icon_arrow-headed-twoway-vertical.svg.ts"() {
    meta89 = {
      "description": "This icon features a two-way arrow pointing upwards and downwards, with a unique arrowhead design. It can symbolize bidirectional movement or exchanges in a vertical direction.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "two-way",
        "vertical",
        "exchange",
        "movement",
        "upwards",
        "downwards",
        "navigation",
        "direction",
        "communication"
      ],
      "title": "Arrow Headed Two-Way Vertical"
    };
    icon_arrow_headed_twoway_vertical_svg_default = meta89;
  }
});

// lib/meta/icon_arrow-headed-up-down-split.svg.ts
var icon_arrow_headed_up_down_split_svg_exports = {};
__export(icon_arrow_headed_up_down_split_svg_exports, {
  default: () => icon_arrow_headed_up_down_split_svg_default,
  meta: () => meta90
});
var meta90, icon_arrow_headed_up_down_split_svg_default;
var init_icon_arrow_headed_up_down_split_svg = __esm({
  "lib/meta/icon_arrow-headed-up-down-split.svg.ts"() {
    meta90 = {
      "description": "The arrow-headed-up-down-split icon features an arrow pointing up and an arrow pointing down, split at the center. It can be used to represent various concepts like sorting, toggling between two options, or indicating a dual-directional movement.",
      "category": [
        "Arrows",
        "Interface",
        "Symbol"
      ],
      "tag": [
        "arrow",
        "up",
        "down",
        "split",
        "toggle",
        "directional",
        "sorting",
        "movement",
        "dual",
        "choice"
      ],
      "title": "Arrow Headed Up Down Split"
    };
    icon_arrow_headed_up_down_split_svg_default = meta90;
  }
});

// lib/meta/icon_arrow-headed-up-down-stop.svg.ts
var icon_arrow_headed_up_down_stop_svg_exports = {};
__export(icon_arrow_headed_up_down_stop_svg_exports, {
  default: () => icon_arrow_headed_up_down_stop_svg_default,
  meta: () => meta91
});
var meta91, icon_arrow_headed_up_down_stop_svg_default;
var init_icon_arrow_headed_up_down_stop_svg = __esm({
  "lib/meta/icon_arrow-headed-up-down-stop.svg.ts"() {
    meta91 = {
      "description": "An icon featuring an arrow pointing up and an arrow pointing down, both attached to a square stop sign. This icon represents the ability to move in both directions or to come to a stop.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "up",
        "down",
        "stop",
        "direction",
        "movement",
        "navigation",
        "transport",
        "control"
      ],
      "title": "Arrow Headed Up Down Stop"
    };
    icon_arrow_headed_up_down_stop_svg_default = meta91;
  }
});

// lib/meta/icon_arrow-headed-up-down.svg.ts
var icon_arrow_headed_up_down_svg_exports = {};
__export(icon_arrow_headed_up_down_svg_exports, {
  default: () => icon_arrow_headed_up_down_svg_default,
  meta: () => meta92
});
var meta92, icon_arrow_headed_up_down_svg_default;
var init_icon_arrow_headed_up_down_svg = __esm({
  "lib/meta/icon_arrow-headed-up-down.svg.ts"() {
    meta92 = {
      "description": "An icon depicting an arrow pointing up and down with a head on each end, representing bidirectional movement or options.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "up",
        "down",
        "bidirectional",
        "movement",
        "options",
        "direction",
        "pointing",
        "navigation",
        "symbol"
      ],
      "title": "Arrow Headed Up Down"
    };
    icon_arrow_headed_up_down_svg_default = meta92;
  }
});

// lib/meta/icon_arrow-headed-up-left.svg.ts
var icon_arrow_headed_up_left_svg_exports = {};
__export(icon_arrow_headed_up_left_svg_exports, {
  default: () => icon_arrow_headed_up_left_svg_default,
  meta: () => meta93
});
var meta93, icon_arrow_headed_up_left_svg_default;
var init_icon_arrow_headed_up_left_svg = __esm({
  "lib/meta/icon_arrow-headed-up-left.svg.ts"() {
    meta93 = {
      "description": "The arrow-headed-up-left icon depicts an arrow pointing upwards and to the left. It is commonly used to indicate direction or to symbolize moving upwards and leftwards.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "up",
        "left",
        "direction",
        "move",
        "point",
        "navigation",
        "diagonal",
        "symbol",
        "icon"
      ],
      "title": "Arrow Headed Up Left"
    };
    icon_arrow_headed_up_left_svg_default = meta93;
  }
});

// lib/meta/icon_arrow-headed-up-right.svg.ts
var icon_arrow_headed_up_right_svg_exports = {};
__export(icon_arrow_headed_up_right_svg_exports, {
  default: () => icon_arrow_headed_up_right_svg_default,
  meta: () => meta94
});
var meta94, icon_arrow_headed_up_right_svg_default;
var init_icon_arrow_headed_up_right_svg = __esm({
  "lib/meta/icon_arrow-headed-up-right.svg.ts"() {
    meta94 = {
      "description": "An arrow pointing up and to the right, commonly used to indicate movement or direction.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "up",
        "right",
        "direction",
        "movement",
        "navigation",
        "pointer",
        "diagonal",
        "icon",
        "symbol"
      ],
      "title": "Arrow Headed Up Right"
    };
    icon_arrow_headed_up_right_svg_default = meta94;
  }
});

// lib/meta/icon_arrow-headed-up-stop-76.svg.ts
var icon_arrow_headed_up_stop_76_svg_exports = {};
__export(icon_arrow_headed_up_stop_76_svg_exports, {
  default: () => icon_arrow_headed_up_stop_76_svg_default,
  meta: () => meta95
});
var meta95, icon_arrow_headed_up_stop_76_svg_default;
var init_icon_arrow_headed_up_stop_76_svg = __esm({
  "lib/meta/icon_arrow-headed-up-stop-76.svg.ts"() {
    meta95 = {
      "description": "An icon of an arrow pointing up with a stop sign at the tip, representing a halt or stop action. It is commonly used to indicate pausing or ending a process.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "up",
        "stop",
        "halt",
        "pause",
        "end",
        "direction",
        "navigation",
        "symbol",
        "action"
      ],
      "title": "Arrow Headed Up Stop"
    };
    icon_arrow_headed_up_stop_76_svg_default = meta95;
  }
});

// lib/meta/icon_arrow-headed-up-stop-78.svg.ts
var icon_arrow_headed_up_stop_78_svg_exports = {};
__export(icon_arrow_headed_up_stop_78_svg_exports, {
  default: () => icon_arrow_headed_up_stop_78_svg_default,
  meta: () => meta96
});
var meta96, icon_arrow_headed_up_stop_78_svg_default;
var init_icon_arrow_headed_up_stop_78_svg = __esm({
  "lib/meta/icon_arrow-headed-up-stop-78.svg.ts"() {
    meta96 = {
      "description": "An arrow pointing up with a unique stop sign design at the tip of the arrowhead, suitable for indicating stopping or pausing actions.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "up",
        "stop",
        "pause",
        "navigation",
        "direction",
        "pointing",
        "alert",
        "indicator",
        "action"
      ],
      "title": "Arrow Headed Up Stop 78"
    };
    icon_arrow_headed_up_stop_78_svg_default = meta96;
  }
});

// lib/meta/icon_arrow-headed-up.svg.ts
var icon_arrow_headed_up_svg_exports = {};
__export(icon_arrow_headed_up_svg_exports, {
  default: () => icon_arrow_headed_up_svg_default,
  meta: () => meta97
});
var meta97, icon_arrow_headed_up_svg_default;
var init_icon_arrow_headed_up_svg = __esm({
  "lib/meta/icon_arrow-headed-up.svg.ts"() {
    meta97 = {
      "description": "An icon of an arrow with a sharp head pointing upwards, commonly used to indicate an upward direction or action.",
      "category": [
        "Arrows",
        "Shapes"
      ],
      "tag": [
        "arrow",
        "up",
        "direction",
        "navigation",
        "pointing",
        "movement",
        "indicator",
        "graphic",
        "symbol",
        "icon"
      ],
      "title": "Arrow Headed Up"
    };
    icon_arrow_headed_up_svg_default = meta97;
  }
});

// lib/meta/icon_arrow-headed-upload.svg.ts
var icon_arrow_headed_upload_svg_exports = {};
__export(icon_arrow_headed_upload_svg_exports, {
  default: () => icon_arrow_headed_upload_svg_default,
  meta: () => meta98
});
var meta98, icon_arrow_headed_upload_svg_default;
var init_icon_arrow_headed_upload_svg = __esm({
  "lib/meta/icon_arrow-headed-upload.svg.ts"() {
    meta98 = {
      "description": "The arrow-headed-upload icon is a symbol representing the action of uploading or sending data in an upward direction. It features a simple arrow pointing upwards with a distinct arrowhead at the tip.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "upload",
        "arrow",
        "direction",
        "data transfer",
        "send",
        "upward",
        "uploading icon",
        "arrowhead",
        "symbol",
        "action"
      ],
      "title": "Arrow Headed Upload"
    };
    icon_arrow_headed_upload_svg_default = meta98;
  }
});

// lib/meta/icon_arrow-in-center.svg.ts
var icon_arrow_in_center_svg_exports = {};
__export(icon_arrow_in_center_svg_exports, {
  default: () => icon_arrow_in_center_svg_default,
  meta: () => meta99
});
var meta99, icon_arrow_in_center_svg_default;
var init_icon_arrow_in_center_svg = __esm({
  "lib/meta/icon_arrow-in-center.svg.ts"() {
    meta99 = {
      "description": "An arrow icon with another arrow in the center, pointing inwards. This icon is commonly used to indicate a call to action or a direction towards the center.",
      "category": [
        "Arrows",
        "Interface",
        "Symbol"
      ],
      "tag": [
        "arrow",
        "direction",
        "center",
        "pointer",
        "navigation",
        "action",
        "arrows",
        "inwards"
      ],
      "title": "Arrow in Center"
    };
    icon_arrow_in_center_svg_default = meta99;
  }
});

// lib/meta/icon_arrow-invert.svg.ts
var icon_arrow_invert_svg_exports = {};
__export(icon_arrow_invert_svg_exports, {
  default: () => icon_arrow_invert_svg_default,
  meta: () => meta100
});
var meta100, icon_arrow_invert_svg_default;
var init_icon_arrow_invert_svg = __esm({
  "lib/meta/icon_arrow-invert.svg.ts"() {
    meta100 = {
      "description": "This icon shows an inverted arrow, pointing in the opposite direction. It can be used to symbolize a return, revert, or undo action.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "invert",
        "opposite",
        "return",
        "revert",
        "undo",
        "direction",
        "navigation",
        "reverse"
      ],
      "title": "Arrow Invert"
    };
    icon_arrow_invert_svg_default = meta100;
  }
});

// lib/meta/icon_arrow-left-right-split.svg.ts
var icon_arrow_left_right_split_svg_exports = {};
__export(icon_arrow_left_right_split_svg_exports, {
  default: () => icon_arrow_left_right_split_svg_default,
  meta: () => meta101
});
var meta101, icon_arrow_left_right_split_svg_default;
var init_icon_arrow_left_right_split_svg = __esm({
  "lib/meta/icon_arrow-left-right-split.svg.ts"() {
    meta101 = {
      "description": "The arrow-left-right-split icon features an arrow split into two separate arrows, pointing in opposite directions. This icon symbolizes the ability to switch or toggle between two different options or directions.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "split",
        "direction",
        "toggle",
        "switch",
        "opposite",
        "navigation",
        "left",
        "right",
        "interface"
      ],
      "title": "Arrow Left Right Split"
    };
    icon_arrow_left_right_split_svg_default = meta101;
  }
});

// lib/meta/icon_arrow-left-right-stop.svg.ts
var icon_arrow_left_right_stop_svg_exports = {};
__export(icon_arrow_left_right_stop_svg_exports, {
  default: () => icon_arrow_left_right_stop_svg_default,
  meta: () => meta102
});
var meta102, icon_arrow_left_right_stop_svg_default;
var init_icon_arrow_left_right_stop_svg = __esm({
  "lib/meta/icon_arrow-left-right-stop.svg.ts"() {
    meta102 = {
      "description": "The arrow-left-right-stop icon represents a combination of arrows pointing left and right, accompanied by a stop sign. It symbolizes the ability to navigate in both directions with the option to halt or pause.",
      "category": [
        "Arrows",
        "Interface",
        "Symbol"
      ],
      "tag": [
        "navigation",
        "direction",
        "control",
        "halt",
        "pause",
        "arrow left",
        "arrow right",
        "stop",
        "movement",
        "bidirectional"
      ],
      "title": "Arrow Left Right Stop"
    };
    icon_arrow_left_right_stop_svg_default = meta102;
  }
});

// lib/meta/icon_arrow-left-right.svg.ts
var icon_arrow_left_right_svg_exports = {};
__export(icon_arrow_left_right_svg_exports, {
  default: () => icon_arrow_left_right_svg_default,
  meta: () => meta103
});
var meta103, icon_arrow_left_right_svg_default;
var init_icon_arrow_left_right_svg = __esm({
  "lib/meta/icon_arrow-left-right.svg.ts"() {
    meta103 = {
      "description": "The arrow-left-right icon depicts an arrow pointing to the left and another arrow pointing to the right, symbolizing bidirectional movement or navigation.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "left",
        "right",
        "direction",
        "navigation",
        "bidirectional",
        "movement",
        "symbol",
        "icon",
        "pointer"
      ],
      "title": "Arrow Left Right"
    };
    icon_arrow_left_right_svg_default = meta103;
  }
});

// lib/meta/icon_arrow-left-stop.svg.ts
var icon_arrow_left_stop_svg_exports = {};
__export(icon_arrow_left_stop_svg_exports, {
  default: () => icon_arrow_left_stop_svg_default,
  meta: () => meta104
});
var meta104, icon_arrow_left_stop_svg_default;
var init_icon_arrow_left_stop_svg = __esm({
  "lib/meta/icon_arrow-left-stop.svg.ts"() {
    meta104 = {
      "description": "The icon 'arrow-left-stop' represents a left arrow pointing towards a stop sign. It can be used to indicate stopping or going back in a user interface.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "left arrow",
        "stop sign",
        "navigation",
        "direction",
        "user interface",
        "back",
        "action",
        "button",
        "pointer"
      ],
      "title": "Arrow Left Stop"
    };
    icon_arrow_left_stop_svg_default = meta104;
  }
});

// lib/meta/icon_arrow-left.svg.ts
var icon_arrow_left_svg_exports = {};
__export(icon_arrow_left_svg_exports, {
  default: () => icon_arrow_left_svg_default,
  meta: () => meta105
});
var meta105, icon_arrow_left_svg_default;
var init_icon_arrow_left_svg = __esm({
  "lib/meta/icon_arrow-left.svg.ts"() {
    meta105 = {
      "description": "The arrow-left icon indicates the direction of moving or navigating to the left side. It is commonly used in various interfaces and applications to signify going back or returning to a previous step.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "Navigation",
        "Direction",
        "Left",
        "Back",
        "Previous",
        "Move",
        "Navigate",
        "Button",
        "Symbol"
      ],
      "title": "Arrow Left"
    };
    icon_arrow_left_svg_default = meta105;
  }
});

// lib/meta/icon_arrow-out-center.svg.ts
var icon_arrow_out_center_svg_exports = {};
__export(icon_arrow_out_center_svg_exports, {
  default: () => icon_arrow_out_center_svg_default,
  meta: () => meta106
});
var meta106, icon_arrow_out_center_svg_default;
var init_icon_arrow_out_center_svg = __esm({
  "lib/meta/icon_arrow-out-center.svg.ts"() {
    meta106 = {
      "description": "The arrow-out-center icon depicts an arrow pointing outwards from the center. This icon is commonly used to indicate expanding or outward movement.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "outward",
        "movement",
        "expand",
        "direction",
        "center",
        "arrow",
        "navigation",
        "pointer",
        "symbol",
        "graphic"
      ],
      "title": "Arrow Out Center"
    };
    icon_arrow_out_center_svg_default = meta106;
  }
});

// lib/meta/icon_arrow-reload-down-up.svg.ts
var icon_arrow_reload_down_up_svg_exports = {};
__export(icon_arrow_reload_down_up_svg_exports, {
  default: () => icon_arrow_reload_down_up_svg_default,
  meta: () => meta107
});
var meta107, icon_arrow_reload_down_up_svg_default;
var init_icon_arrow_reload_down_up_svg = __esm({
  "lib/meta/icon_arrow-reload-down-up.svg.ts"() {
    meta107 = {
      "description": "This icon depicts an arrow pointing downwards and upwards in a circular motion, representing a reload or refresh action. It symbolizes a two-way movement or update process.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "reload",
        "refresh",
        "update",
        "circular motion",
        "down",
        "up",
        "movement",
        "sync",
        "rotation"
      ],
      "title": "Arrow Reload Down Up"
    };
    icon_arrow_reload_down_up_svg_default = meta107;
  }
});

// lib/meta/icon_arrow-reload-left-right.svg.ts
var icon_arrow_reload_left_right_svg_exports = {};
__export(icon_arrow_reload_left_right_svg_exports, {
  default: () => icon_arrow_reload_left_right_svg_default,
  meta: () => meta108
});
var meta108, icon_arrow_reload_left_right_svg_default;
var init_icon_arrow_reload_left_right_svg = __esm({
  "lib/meta/icon_arrow-reload-left-right.svg.ts"() {
    meta108 = {
      "description": "The arrow-reload-left-right icon features two curved arrows pointing in opposite directions, symbolizing a reload action. This icon is commonly used to indicate the option to refresh or reload content in both left and right directions.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "rotate",
        "refresh",
        "update",
        "sync",
        "exchange",
        "circular",
        "opposite",
        "reverse",
        "renew",
        "loop"
      ],
      "title": "Arrow Reload Left Right"
    };
    icon_arrow_reload_left_right_svg_default = meta108;
  }
});

// lib/meta/icon_arrow-reload-right-left.svg.ts
var icon_arrow_reload_right_left_svg_exports = {};
__export(icon_arrow_reload_right_left_svg_exports, {
  default: () => icon_arrow_reload_right_left_svg_default,
  meta: () => meta109
});
var meta109, icon_arrow_reload_right_left_svg_default;
var init_icon_arrow_reload_right_left_svg = __esm({
  "lib/meta/icon_arrow-reload-right-left.svg.ts"() {
    meta109 = {
      "description": "The arrow-reload-right-left icon is a symbol representing a circular arrow that points to the right and left directions, indicating a reload or refresh action. This icon is commonly used in user interfaces to symbolize the option to reload or refresh content.",
      "category": [
        "Arrows",
        "Interface",
        "Symbol"
      ],
      "tag": [
        "refresh",
        "circular",
        "direction",
        "navigation",
        "update",
        "rotate",
        "loop",
        "renewal",
        "interface",
        "arrow"
      ],
      "title": "Arrow Reload Right Left"
    };
    icon_arrow_reload_right_left_svg_default = meta109;
  }
});

// lib/meta/icon_arrow-reload-up-down.svg.ts
var icon_arrow_reload_up_down_svg_exports = {};
__export(icon_arrow_reload_up_down_svg_exports, {
  default: () => icon_arrow_reload_up_down_svg_default,
  meta: () => meta110
});
var meta110, icon_arrow_reload_up_down_svg_default;
var init_icon_arrow_reload_up_down_svg = __esm({
  "lib/meta/icon_arrow-reload-up-down.svg.ts"() {
    meta110 = {
      "description": "This icon features a circular arrow pointing upwards and downwards, indicating a reload or refresh action. It is commonly used in interfaces to indicate a bi-directional refreshing process.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "circular arrow",
        "reload",
        "refresh",
        "up arrow",
        "down arrow",
        "bi-directional",
        "interface",
        "navigation",
        "circular motion",
        "update"
      ],
      "title": "Arrow Reload Up Down"
    };
    icon_arrow_reload_up_down_svg_default = meta110;
  }
});

// lib/meta/icon_arrow-return-down.svg.ts
var icon_arrow_return_down_svg_exports = {};
__export(icon_arrow_return_down_svg_exports, {
  default: () => icon_arrow_return_down_svg_default,
  meta: () => meta111
});
var meta111, icon_arrow_return_down_svg_default;
var init_icon_arrow_return_down_svg = __esm({
  "lib/meta/icon_arrow-return-down.svg.ts"() {
    meta111 = {
      "description": "The arrow-return-down icon is used to indicate a return action, typically taking the user back to the starting point or previous location. It symbolizes a downward direction.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "return",
        "down",
        "navigation",
        "direction",
        "back",
        "loop",
        "reload",
        "refresh",
        "reverse"
      ],
      "title": "Arrow Return Down"
    };
    icon_arrow_return_down_svg_default = meta111;
  }
});

// lib/meta/icon_arrow-return-left.svg.ts
var icon_arrow_return_left_svg_exports = {};
__export(icon_arrow_return_left_svg_exports, {
  default: () => icon_arrow_return_left_svg_default,
  meta: () => meta112
});
var meta112, icon_arrow_return_left_svg_default;
var init_icon_arrow_return_left_svg = __esm({
  "lib/meta/icon_arrow-return-left.svg.ts"() {
    meta112 = {
      "description": "The arrow-return-left icon is an arrow pointing to the left, indicating a return or backward action. This icon is commonly used in navigation interfaces to go back to a previous page or step.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "return",
        "left",
        "navigation",
        "back",
        "direction",
        "pointer",
        "interface",
        "symbol",
        "action"
      ],
      "title": "Arrow Return Left"
    };
    icon_arrow_return_left_svg_default = meta112;
  }
});

// lib/meta/icon_arrow-return-right.svg.ts
var icon_arrow_return_right_svg_exports = {};
__export(icon_arrow_return_right_svg_exports, {
  default: () => icon_arrow_return_right_svg_default,
  meta: () => meta113
});
var meta113, icon_arrow_return_right_svg_default;
var init_icon_arrow_return_right_svg = __esm({
  "lib/meta/icon_arrow-return-right.svg.ts"() {
    meta113 = {
      "description": "The arrow-return-right icon represents a right pointing arrow with a curved tail, indicating a return or back action. It is commonly used in user interfaces to indicate a return to the previous step or page.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "return",
        "direction",
        "navigation",
        "back",
        "right",
        "arrow",
        "curve",
        "user interface",
        "previous"
      ],
      "title": "Arrow Return Right"
    };
    icon_arrow_return_right_svg_default = meta113;
  }
});

// lib/meta/icon_arrow-return-up.svg.ts
var icon_arrow_return_up_svg_exports = {};
__export(icon_arrow_return_up_svg_exports, {
  default: () => icon_arrow_return_up_svg_default,
  meta: () => meta114
});
var meta114, icon_arrow_return_up_svg_default;
var init_icon_arrow_return_up_svg = __esm({
  "lib/meta/icon_arrow-return-up.svg.ts"() {
    meta114 = {
      "description": "The arrow-return-up icon depicts an upward-pointing arrow, symbolizing a return or go-to-top action. It is commonly used in interfaces to navigate back to the beginning or top of a page.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "return",
        "up",
        "navigation",
        "direction",
        "scroll",
        "button",
        "website",
        "interface",
        "back to top",
        "go to top"
      ],
      "title": "Arrow Return Up"
    };
    icon_arrow_return_up_svg_default = meta114;
  }
});

// lib/meta/icon_arrow-right-stop.svg.ts
var icon_arrow_right_stop_svg_exports = {};
__export(icon_arrow_right_stop_svg_exports, {
  default: () => icon_arrow_right_stop_svg_default,
  meta: () => meta115
});
var meta115, icon_arrow_right_stop_svg_default;
var init_icon_arrow_right_stop_svg = __esm({
  "lib/meta/icon_arrow-right-stop.svg.ts"() {
    meta115 = {
      "description": "The arrow-right-stop icon is a graphical representation of a right arrow with a stop symbol, indicating the action of stopping or halting the rightward movement. This icon is commonly used in interfaces and applications to indicate a pause or cancellation of a process.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "right",
        "stop",
        "navigation",
        "direction",
        "interface",
        "symbol",
        "pause",
        "cancel",
        "halt"
      ],
      "title": "Arrow Right Stop"
    };
    icon_arrow_right_stop_svg_default = meta115;
  }
});

// lib/meta/icon_arrow-right.svg.ts
var icon_arrow_right_svg_exports = {};
__export(icon_arrow_right_svg_exports, {
  default: () => icon_arrow_right_svg_default,
  meta: () => meta116
});
var meta116, icon_arrow_right_svg_default;
var init_icon_arrow_right_svg = __esm({
  "lib/meta/icon_arrow-right.svg.ts"() {
    meta116 = {
      "description": "The arrow-right icon is a simple and sleek design depicting a right-pointing arrow. It is commonly used to indicate moving forward, proceeding, or navigating to the right.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "navigation",
        "direction",
        "pointer",
        "horizontal",
        "move",
        "forward",
        "next",
        "right",
        "proceed"
      ],
      "title": "Arrow Right"
    };
    icon_arrow_right_svg_default = meta116;
  }
});

// lib/meta/icon_arrow-roate-bottom-right.svg.ts
var icon_arrow_roate_bottom_right_svg_exports = {};
__export(icon_arrow_roate_bottom_right_svg_exports, {
  default: () => icon_arrow_roate_bottom_right_svg_default,
  meta: () => meta117
});
var meta117, icon_arrow_roate_bottom_right_svg_default;
var init_icon_arrow_roate_bottom_right_svg = __esm({
  "lib/meta/icon_arrow-roate-bottom-right.svg.ts"() {
    meta117 = {
      "description": "An arrow icon pointing towards the bottom right direction, indicating a downward and rightward movement or rotation. Commonly used to symbolize a diagonal movement or rotation in various applications.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "rotation",
        "downward",
        "diagonal",
        "movement",
        "directional",
        "navigation",
        "pointer",
        "symbol",
        "icon"
      ],
      "title": "Arrow Rotate Bottom Right"
    };
    icon_arrow_roate_bottom_right_svg_default = meta117;
  }
});

// lib/meta/icon_arrow-rotate-bottom-left.svg.ts
var icon_arrow_rotate_bottom_left_svg_exports = {};
__export(icon_arrow_rotate_bottom_left_svg_exports, {
  default: () => icon_arrow_rotate_bottom_left_svg_default,
  meta: () => meta118
});
var meta118, icon_arrow_rotate_bottom_left_svg_default;
var init_icon_arrow_rotate_bottom_left_svg = __esm({
  "lib/meta/icon_arrow-rotate-bottom-left.svg.ts"() {
    meta118 = {
      "description": "This icon depicts an arrow rotating in a clockwise direction towards the bottom left corner. It symbolizes movement, rotation, and direction.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "rotate",
        "clockwise",
        "movement",
        "direction",
        "bottom left",
        "spin",
        "turn",
        "point"
      ],
      "title": "Arrow Rotate Bottom Left"
    };
    icon_arrow_rotate_bottom_left_svg_default = meta118;
  }
});

// lib/meta/icon_arrow-rotate-top-left.svg.ts
var icon_arrow_rotate_top_left_svg_exports = {};
__export(icon_arrow_rotate_top_left_svg_exports, {
  default: () => icon_arrow_rotate_top_left_svg_default,
  meta: () => meta119
});
var meta119, icon_arrow_rotate_top_left_svg_default;
var init_icon_arrow_rotate_top_left_svg = __esm({
  "lib/meta/icon_arrow-rotate-top-left.svg.ts"() {
    meta119 = {
      "description": "The arrow-rotate-top-left icon depicts an arrow rotating in a counter-clockwise direction towards the top-left. It is commonly used to indicate a rotation or a change in direction.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "rotate",
        "counter-clockwise",
        "direction",
        "change",
        "movement",
        "top-left",
        "navigation",
        "symbol",
        "turn"
      ],
      "title": "Arrow Rotate Top Left"
    };
    icon_arrow_rotate_top_left_svg_default = meta119;
  }
});

// lib/meta/icon_arrow-rotate-top-right.svg.ts
var icon_arrow_rotate_top_right_svg_exports = {};
__export(icon_arrow_rotate_top_right_svg_exports, {
  default: () => icon_arrow_rotate_top_right_svg_default,
  meta: () => meta120
});
var meta120, icon_arrow_rotate_top_right_svg_default;
var init_icon_arrow_rotate_top_right_svg = __esm({
  "lib/meta/icon_arrow-rotate-top-right.svg.ts"() {
    meta120 = {
      "description": "An icon representing an arrow pointing towards the top right direction, indicating a rotation movement.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "rotate",
        "top right",
        "direction",
        "movement",
        "pointer",
        "navigation",
        "turning",
        "spin",
        "reposition"
      ],
      "title": "Arrow Rotate Top Right"
    };
    icon_arrow_rotate_top_right_svg_default = meta120;
  }
});

// lib/meta/icon_arrow-rounded-left-down.svg.ts
var icon_arrow_rounded_left_down_svg_exports = {};
__export(icon_arrow_rounded_left_down_svg_exports, {
  default: () => icon_arrow_rounded_left_down_svg_default,
  meta: () => meta121
});
var meta121, icon_arrow_rounded_left_down_svg_default;
var init_icon_arrow_rounded_left_down_svg = __esm({
  "lib/meta/icon_arrow-rounded-left-down.svg.ts"() {
    meta121 = {
      "description": "The arrow-rounded-left-down icon is a simple arrow pointing towards the bottom left direction. It features a rounded design for a softer look.",
      "category": [
        "Arrows",
        "Shapes"
      ],
      "tag": [
        "arrow",
        "direction",
        "bottom left",
        "rounded",
        "navigation",
        "pointer",
        "movement",
        "downwards",
        "leftwards"
      ],
      "title": "Arrow Rounded Left Down"
    };
    icon_arrow_rounded_left_down_svg_default = meta121;
  }
});

// lib/meta/icon_arrow-rounded-left-up.svg.ts
var icon_arrow_rounded_left_up_svg_exports = {};
__export(icon_arrow_rounded_left_up_svg_exports, {
  default: () => icon_arrow_rounded_left_up_svg_default,
  meta: () => meta122
});
var meta122, icon_arrow_rounded_left_up_svg_default;
var init_icon_arrow_rounded_left_up_svg = __esm({
  "lib/meta/icon_arrow-rounded-left-up.svg.ts"() {
    meta122 = {
      "description": "The arrow-rounded-left-up icon depicts an arrow pointing to the left and upward, with rounded edges. It is commonly used to indicate navigation or direction to go back or move upwards.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "rounded",
        "left",
        "up",
        "navigation",
        "direction",
        "back",
        "move",
        "pointer",
        "pointer"
      ],
      "title": "Arrow Rounded Left Up"
    };
    icon_arrow_rounded_left_up_svg_default = meta122;
  }
});

// lib/meta/icon_arrow-rounded-right-down.svg.ts
var icon_arrow_rounded_right_down_svg_exports = {};
__export(icon_arrow_rounded_right_down_svg_exports, {
  default: () => icon_arrow_rounded_right_down_svg_default,
  meta: () => meta123
});
var meta123, icon_arrow_rounded_right_down_svg_default;
var init_icon_arrow_rounded_right_down_svg = __esm({
  "lib/meta/icon_arrow-rounded-right-down.svg.ts"() {
    meta123 = {
      "description": "An icon depicting a rounded arrow pointing right and down, symbolizing a diagonal direction. The arrow is rounded at the tip for a smooth appearance.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "rounded",
        "arrow",
        "direction",
        "diagonal",
        "navigation",
        "pointer",
        "symbol",
        "interface",
        "downward",
        "right"
      ],
      "title": "Arrow Rounded Right Down"
    };
    icon_arrow_rounded_right_down_svg_default = meta123;
  }
});

// lib/meta/icon_arrow-rounded-right-up.svg.ts
var icon_arrow_rounded_right_up_svg_exports = {};
__export(icon_arrow_rounded_right_up_svg_exports, {
  default: () => icon_arrow_rounded_right_up_svg_default,
  meta: () => meta124
});
var meta124, icon_arrow_rounded_right_up_svg_default;
var init_icon_arrow_rounded_right_up_svg = __esm({
  "lib/meta/icon_arrow-rounded-right-up.svg.ts"() {
    meta124 = {
      "description": "The arrow-rounded-right-up icon is a simple arrow pointing upwards and to the right, with rounded edges. It is commonly used to indicate upward and rightward direction.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "rounded",
        "up",
        "direction",
        "navigation",
        "movement",
        "pointing",
        "right",
        "upward",
        "symbol"
      ],
      "title": "Arrow Rounded Right Up"
    };
    icon_arrow_rounded_right_up_svg_default = meta124;
  }
});

// lib/meta/icon_arrow-share.svg.ts
var icon_arrow_share_svg_exports = {};
__export(icon_arrow_share_svg_exports, {
  default: () => icon_arrow_share_svg_default,
  meta: () => meta125
});
var meta125, icon_arrow_share_svg_default;
var init_icon_arrow_share_svg = __esm({
  "lib/meta/icon_arrow-share.svg.ts"() {
    meta125 = {
      "description": "The arrow-share icon represents the action of sharing or transferring information. It typically symbolizes the sharing of data or content from one source to another.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "share",
        "transfer",
        "communication",
        "connection",
        "technology",
        "social media",
        "networking",
        "collaboration",
        "interaction"
      ],
      "title": "Arrow Share"
    };
    icon_arrow_share_svg_default = meta125;
  }
});

// lib/meta/icon_arrow-spread-split.svg.ts
var icon_arrow_spread_split_svg_exports = {};
__export(icon_arrow_spread_split_svg_exports, {
  default: () => icon_arrow_spread_split_svg_default,
  meta: () => meta126
});
var meta126, icon_arrow_spread_split_svg_default;
var init_icon_arrow_spread_split_svg = __esm({
  "lib/meta/icon_arrow-spread-split.svg.ts"() {
    meta126 = {
      "description": "The arrow-spread-split icon features an arrow pointing in multiple directions, symbolizing splitting or divergence. It can represent branching out, expanding options, or various choices to be made.",
      "category": [
        "Arrows",
        "Interface",
        "Symbol"
      ],
      "tag": [
        "arrow",
        "spread",
        "split",
        "choice",
        "divergence",
        "options",
        "branching out",
        "directions",
        "expansion",
        "decision"
      ],
      "title": "Arrow Spread Split"
    };
    icon_arrow_spread_split_svg_default = meta126;
  }
});

// lib/meta/icon_arrow-spread.svg.ts
var icon_arrow_spread_svg_exports = {};
__export(icon_arrow_spread_svg_exports, {
  default: () => icon_arrow_spread_svg_default,
  meta: () => meta127
});
var meta127, icon_arrow_spread_svg_default;
var init_icon_arrow_spread_svg = __esm({
  "lib/meta/icon_arrow-spread.svg.ts"() {
    meta127 = {
      "description": "The arrow-spread icon features two arrows facing away from each other, symbolizing the act of spreading apart or diverging in different directions. This icon can be used to represent separation, expansion, or divergence.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "spread",
        "separate",
        "diverge",
        "expand",
        "direction",
        "move",
        "point",
        "navigation",
        "communication"
      ],
      "title": "Arrow Spread"
    };
    icon_arrow_spread_svg_default = meta127;
  }
});

// lib/meta/icon_arrow-thick-bottom-left.svg.ts
var icon_arrow_thick_bottom_left_svg_exports = {};
__export(icon_arrow_thick_bottom_left_svg_exports, {
  default: () => icon_arrow_thick_bottom_left_svg_default,
  meta: () => meta128
});
var meta128, icon_arrow_thick_bottom_left_svg_default;
var init_icon_arrow_thick_bottom_left_svg = __esm({
  "lib/meta/icon_arrow-thick-bottom-left.svg.ts"() {
    meta128 = {
      description: "The arrow-thick-bottom-left icon depicts a thick arrow pointing towards the bottom left direction. It is commonly used to indicate movement or direction towards the bottom left.",
      category: ["Arrows"],
      tag: ["arrow", "thick", "bottom", "left", "direction", "movement", "pointer", "navigation", "interface", "symbol"],
      title: "Arrow Thick Bottom Left"
    };
    icon_arrow_thick_bottom_left_svg_default = meta128;
  }
});

// lib/meta/icon_arrow-thick-down.svg.ts
var icon_arrow_thick_down_svg_exports = {};
__export(icon_arrow_thick_down_svg_exports, {
  default: () => icon_arrow_thick_down_svg_default,
  meta: () => meta129
});
var meta129, icon_arrow_thick_down_svg_default;
var init_icon_arrow_thick_down_svg = __esm({
  "lib/meta/icon_arrow-thick-down.svg.ts"() {
    meta129 = {
      description: "The arrow-thick-down icon is a bold, thick arrow pointing downwards. It is commonly used to indicate a downward direction or to prompt users to scroll down on a webpage.",
      category: ["Arrows"],
      tag: ["arrow", "thick", "down", "direction", "scroll", "navigation", "web design", "user interface", "pointer", "click"],
      title: "Arrow Thick Down"
    };
    icon_arrow_thick_down_svg_default = meta129;
  }
});

// lib/meta/icon_arrow-thick-left-top.svg.ts
var icon_arrow_thick_left_top_svg_exports = {};
__export(icon_arrow_thick_left_top_svg_exports, {
  default: () => icon_arrow_thick_left_top_svg_default,
  meta: () => meta130
});
var meta130, icon_arrow_thick_left_top_svg_default;
var init_icon_arrow_thick_left_top_svg = __esm({
  "lib/meta/icon_arrow-thick-left-top.svg.ts"() {
    meta130 = {
      description: "The arrow-thick-left-top icon points towards the top left direction with a bold and thick design. It signifies moving or navigating to the top left corner.",
      category: ["Arrows", "Interface"],
      tag: ["arrow", "direction", "top left", "navigation", "moving", "thick arrow", "bold arrow"],
      title: "Arrow Thick Left Top"
    };
    icon_arrow_thick_left_top_svg_default = meta130;
  }
});

// lib/meta/icon_arrow-thick-left.svg.ts
var icon_arrow_thick_left_svg_exports = {};
__export(icon_arrow_thick_left_svg_exports, {
  default: () => icon_arrow_thick_left_svg_default,
  meta: () => meta131
});
var meta131, icon_arrow_thick_left_svg_default;
var init_icon_arrow_thick_left_svg = __esm({
  "lib/meta/icon_arrow-thick-left.svg.ts"() {
    meta131 = {
      description: "The arrow-thick-left icon is a bold arrow pointing to the left, indicating a navigation or directional action. It is designed to stand out and catch the user's attention easily.",
      category: ["Arrows", "Interface"],
      tag: ["navigation", "directional", "pointer", "left arrow", "bold", "symbol", "icon design", "UI", "UX", "arrow icon"],
      title: "Arrow Thick Left"
    };
    icon_arrow_thick_left_svg_default = meta131;
  }
});

// lib/meta/icon_arrow-thick-right-bottom.svg.ts
var icon_arrow_thick_right_bottom_svg_exports = {};
__export(icon_arrow_thick_right_bottom_svg_exports, {
  default: () => icon_arrow_thick_right_bottom_svg_default,
  meta: () => meta132
});
var meta132, icon_arrow_thick_right_bottom_svg_default;
var init_icon_arrow_thick_right_bottom_svg = __esm({
  "lib/meta/icon_arrow-thick-right-bottom.svg.ts"() {
    meta132 = {
      description: "The arrow-thick-right-bottom icon indicates a thick arrow pointing towards the bottom-right direction. It is commonly used to represent navigation, progression, or movement to the lower right position.",
      category: ["Arrows"],
      tag: ["arrow", "direction", "navigation", "progression", "move", "bottom", "right", "point", "graphic", "symbol"],
      title: "Arrow Thick Right Bottom"
    };
    icon_arrow_thick_right_bottom_svg_default = meta132;
  }
});

// lib/meta/icon_arrow-thick-right.svg.ts
var icon_arrow_thick_right_svg_exports = {};
__export(icon_arrow_thick_right_svg_exports, {
  default: () => icon_arrow_thick_right_svg_default,
  meta: () => meta133
});
var meta133, icon_arrow_thick_right_svg_default;
var init_icon_arrow_thick_right_svg = __esm({
  "lib/meta/icon_arrow-thick-right.svg.ts"() {
    meta133 = {
      description: "The arrow-thick-right icon is a bold and large arrow pointing to the right, symbolizing movement, navigation, and progression. This icon is commonly used in user interfaces to indicate 'next,' 'forward,' 'continue,' or 'go to the next step' actions.",
      category: ["Arrows", "Interface"],
      tag: ["arrow", "thick", "right", "movement", "navigation", "progression", "forward", "next", "continue", "interface"],
      title: "Arrow Thick Right"
    };
    icon_arrow_thick_right_svg_default = meta133;
  }
});

// lib/meta/icon_arrow-thick-tall-bottom-left.svg.ts
var icon_arrow_thick_tall_bottom_left_svg_exports = {};
__export(icon_arrow_thick_tall_bottom_left_svg_exports, {
  default: () => icon_arrow_thick_tall_bottom_left_svg_default,
  meta: () => meta134
});
var meta134, icon_arrow_thick_tall_bottom_left_svg_default;
var init_icon_arrow_thick_tall_bottom_left_svg = __esm({
  "lib/meta/icon_arrow-thick-tall-bottom-left.svg.ts"() {
    meta134 = {
      description: "An icon representing a thick arrow pointing towards the bottom left direction, commonly used for navigation and indicating movement or direction.",
      category: ["Arrows"],
      tag: ["arrow", "direction", "navigation", "thick", "bottom left", "movement", "pointer", "symbol", "sign", "interface"],
      title: "Arrow Thick Tall Bottom Left"
    };
    icon_arrow_thick_tall_bottom_left_svg_default = meta134;
  }
});

// lib/meta/icon_arrow-thick-tall-down.svg.ts
var icon_arrow_thick_tall_down_svg_exports = {};
__export(icon_arrow_thick_tall_down_svg_exports, {
  default: () => icon_arrow_thick_tall_down_svg_default,
  meta: () => meta135
});
var meta135, icon_arrow_thick_tall_down_svg_default;
var init_icon_arrow_thick_tall_down_svg = __esm({
  "lib/meta/icon_arrow-thick-tall-down.svg.ts"() {
    meta135 = {
      description: "An arrow icon with a thick vertical line pointing downwards, indicating a downward direction or scrolling action.",
      category: ["Arrows"],
      tag: ["arrow", "thick", "tall", "down", "direction", "scroll", "navigation", "graphic", "symbol", "interface"],
      title: "Arrow Thick Tall Down"
    };
    icon_arrow_thick_tall_down_svg_default = meta135;
  }
});

// lib/meta/icon_arrow-thick-tall-left -top.svg.ts
var icon_arrow_thick_tall_left_top_svg_exports = {};
__export(icon_arrow_thick_tall_left_top_svg_exports, {
  default: () => icon_arrow_thick_tall_left_top_svg_default,
  meta: () => meta136
});
var meta136, icon_arrow_thick_tall_left_top_svg_default;
var init_icon_arrow_thick_tall_left_top_svg = __esm({
  "lib/meta/icon_arrow-thick-tall-left -top.svg.ts"() {
    meta136 = {
      description: "The arrow-thick-tall-left -top icon represents a large, bold left-facing arrow pointing upwards. This icon is commonly used to indicate scrolling up or navigating to the top of a page or document.",
      category: ["Arrows", "Interface"],
      tag: ["arrow", "thick", "tall", "left", "up", "scroll", "navigate", "page", "document", "top"],
      title: "Thick Tall Left Arrow - Top"
    };
    icon_arrow_thick_tall_left_top_svg_default = meta136;
  }
});

// lib/meta/icon_arrow-thick-tall-left.svg.ts
var icon_arrow_thick_tall_left_svg_exports = {};
__export(icon_arrow_thick_tall_left_svg_exports, {
  default: () => icon_arrow_thick_tall_left_svg_default,
  meta: () => meta137
});
var meta137, icon_arrow_thick_tall_left_svg_default;
var init_icon_arrow_thick_tall_left_svg = __esm({
  "lib/meta/icon_arrow-thick-tall-left.svg.ts"() {
    meta137 = {
      description: "The arrow-thick-tall-left icon is a bold and tall arrow pointing towards the left direction. This icon is commonly used to indicate navigation or to guide the user to go back to the previous step.",
      category: ["Arrows"],
      tag: ["arrow", "left", "direction", "navigation", "back", "tall", "thick", "bold", "pointer"],
      title: "Arrow Thick Tall Left"
    };
    icon_arrow_thick_tall_left_svg_default = meta137;
  }
});

// lib/meta/icon_arrow-thick-tall-right-bottom.svg.ts
var icon_arrow_thick_tall_right_bottom_svg_exports = {};
__export(icon_arrow_thick_tall_right_bottom_svg_exports, {
  default: () => icon_arrow_thick_tall_right_bottom_svg_default,
  meta: () => meta138
});
var meta138, icon_arrow_thick_tall_right_bottom_svg_default;
var init_icon_arrow_thick_tall_right_bottom_svg = __esm({
  "lib/meta/icon_arrow-thick-tall-right-bottom.svg.ts"() {
    meta138 = {
      description: "An icon of a thick arrow pointing towards the bottom right direction. This icon is tall and bold, making it stand out on the screen.",
      category: ["Arrows", "Interface"],
      tag: ["tall", "thick", "direction", "navigation", "pointer", "movement", "graphic", "symbol", "indicator"],
      title: "Arrow Thick Tall Right Bottom"
    };
    icon_arrow_thick_tall_right_bottom_svg_default = meta138;
  }
});

// lib/meta/icon_arrow-thick-tall-right.svg.ts
var icon_arrow_thick_tall_right_svg_exports = {};
__export(icon_arrow_thick_tall_right_svg_exports, {
  default: () => icon_arrow_thick_tall_right_svg_default,
  meta: () => meta139
});
var meta139, icon_arrow_thick_tall_right_svg_default;
var init_icon_arrow_thick_tall_right_svg = __esm({
  "lib/meta/icon_arrow-thick-tall-right.svg.ts"() {
    meta139 = {
      description: "The arrow-thick-tall-right icon is a bold and tall arrow pointing to the right. It is commonly used to indicate moving forward, navigating to the next step, or scrolling to the right.",
      category: ["Arrows"],
      tag: ["arrow", "tall", "thick", "right", "forward", "navigation", "next", "scroll", "direction", "symbol"],
      title: "Arrow Thick Tall Right"
    };
    icon_arrow_thick_tall_right_svg_default = meta139;
  }
});

// lib/meta/icon_arrow-thick-tall-top-right.svg.ts
var icon_arrow_thick_tall_top_right_svg_exports = {};
__export(icon_arrow_thick_tall_top_right_svg_exports, {
  default: () => icon_arrow_thick_tall_top_right_svg_default,
  meta: () => meta140
});
var meta140, icon_arrow_thick_tall_top_right_svg_default;
var init_icon_arrow_thick_tall_top_right_svg = __esm({
  "lib/meta/icon_arrow-thick-tall-top-right.svg.ts"() {
    meta140 = {
      description: "The arrow-thick-tall-top-right icon is a bold and tall arrow pointing towards the top-right direction. It is designed to stand out and draw attention to the top-right corner of a design or interface.",
      category: ["Arrows", "Interface"],
      tag: ["arrow", "thick", "tall", "top", "right", "direction", "bold", "pointing", "interface", "design"],
      title: "Arrow Thick Tall Top Right"
    };
    icon_arrow_thick_tall_top_right_svg_default = meta140;
  }
});

// lib/meta/icon_arrow-thick-tall-up.svg.ts
var icon_arrow_thick_tall_up_svg_exports = {};
__export(icon_arrow_thick_tall_up_svg_exports, {
  default: () => icon_arrow_thick_tall_up_svg_default,
  meta: () => meta141
});
var meta141, icon_arrow_thick_tall_up_svg_default;
var init_icon_arrow_thick_tall_up_svg = __esm({
  "lib/meta/icon_arrow-thick-tall-up.svg.ts"() {
    meta141 = {
      description: "The arrow-thick-tall-up icon features a bold and tall upward arrow symbol, indicating an action or direction moving upwards.",
      category: ["Arrows", "Shapes"],
      tag: ["arrow", "up arrow", "thick arrow", "tall arrow", "navigation", "direction", "move up", "increase", "scroll"],
      title: "Arrow Thick Tall Up"
    };
    icon_arrow_thick_tall_up_svg_default = meta141;
  }
});

// lib/meta/icon_arrow-thick-top-right.svg.ts
var icon_arrow_thick_top_right_svg_exports = {};
__export(icon_arrow_thick_top_right_svg_exports, {
  default: () => icon_arrow_thick_top_right_svg_default,
  meta: () => meta142
});
var meta142, icon_arrow_thick_top_right_svg_default;
var init_icon_arrow_thick_top_right_svg = __esm({
  "lib/meta/icon_arrow-thick-top-right.svg.ts"() {
    meta142 = {
      description: "The arrow-thick-top-right icon indicates a directional pointer pointing towards the top right direction. It can be used to show upward and rightward movement or navigation.",
      category: ["Arrows"],
      tag: ["Arrow", "Direction", "Top", "Right", "Movement", "Navigation", "Pointer", "Horizontal", "Vertical", "Thick"],
      title: "Arrow Thick Top Right"
    };
    icon_arrow_thick_top_right_svg_default = meta142;
  }
});

// lib/meta/icon_arrow-thick-up.svg.ts
var icon_arrow_thick_up_svg_exports = {};
__export(icon_arrow_thick_up_svg_exports, {
  default: () => icon_arrow_thick_up_svg_default,
  meta: () => meta143
});
var meta143, icon_arrow_thick_up_svg_default;
var init_icon_arrow_thick_up_svg = __esm({
  "lib/meta/icon_arrow-thick-up.svg.ts"() {
    meta143 = {
      description: "The arrow-thick-up icon is a bold and prominent arrow pointing upwards. It symbolizes moving up, progress, and growth. This icon is commonly used to indicate scrolling to the top of a page or returning to the beginning of a list.",
      category: ["Arrows", "Interface"],
      tag: ["arrow", "thick", "up", "direction", "scroll", "progress", "growth", "navigation", "move", "point"],
      title: "Arrow Thick Up"
    };
    icon_arrow_thick_up_svg_default = meta143;
  }
});

// lib/meta/icon_arrow-thick-wide-bottom-left.svg.ts
var icon_arrow_thick_wide_bottom_left_svg_exports = {};
__export(icon_arrow_thick_wide_bottom_left_svg_exports, {
  default: () => icon_arrow_thick_wide_bottom_left_svg_default,
  meta: () => meta144
});
var meta144, icon_arrow_thick_wide_bottom_left_svg_default;
var init_icon_arrow_thick_wide_bottom_left_svg = __esm({
  "lib/meta/icon_arrow-thick-wide-bottom-left.svg.ts"() {
    meta144 = {
      description: "The arrow-thick-wide-bottom-left icon is a bold and wide arrow pointing downwards and to the left. This icon is great for indicating directions, movements, or navigation in a prominent and clear way.",
      category: ["Arrows"],
      tag: ["direction", "movement", "navigation", "bold", "wide", "arrow", "left", "down", "pointer", "symbol"],
      title: "Arrow Thick Wide Bottom Left"
    };
    icon_arrow_thick_wide_bottom_left_svg_default = meta144;
  }
});

// lib/meta/icon_arrow-thick-wide-down.svg.ts
var icon_arrow_thick_wide_down_svg_exports = {};
__export(icon_arrow_thick_wide_down_svg_exports, {
  default: () => icon_arrow_thick_wide_down_svg_default,
  meta: () => meta145
});
var meta145, icon_arrow_thick_wide_down_svg_default;
var init_icon_arrow_thick_wide_down_svg = __esm({
  "lib/meta/icon_arrow-thick-wide-down.svg.ts"() {
    meta145 = {
      description: "The 'Arrow Thick Wide Down' icon depicts a bold and wide arrow pointing downward. It is commonly used to indicate a downward direction or to signify downloading.",
      category: ["Arrows"],
      tag: ["down", "direction", "indicator", "download", "navigation", "button", "pointer", "bold", "wide", "arrow"],
      title: "Arrow Thick Wide Down"
    };
    icon_arrow_thick_wide_down_svg_default = meta145;
  }
});

// lib/meta/icon_arrow-thick-wide-left-top.svg.ts
var icon_arrow_thick_wide_left_top_svg_exports = {};
__export(icon_arrow_thick_wide_left_top_svg_exports, {
  default: () => icon_arrow_thick_wide_left_top_svg_default,
  meta: () => meta146
});
var meta146, icon_arrow_thick_wide_left_top_svg_default;
var init_icon_arrow_thick_wide_left_top_svg = __esm({
  "lib/meta/icon_arrow-thick-wide-left-top.svg.ts"() {
    meta146 = {
      description: "The arrow-thick-wide-left-top icon is an arrow pointing to the top-left direction. This bold and wide arrow indicates motion or direction towards the upper left corner.",
      category: ["Arrows"],
      tag: ["arrow", "thick", "wide", "left", "top", "direction", "motion", "symbol", "navigation", "pointer"],
      title: "Arrow Thick Wide Left Top"
    };
    icon_arrow_thick_wide_left_top_svg_default = meta146;
  }
});

// lib/meta/icon_arrow-thick-wide-left.svg.ts
var icon_arrow_thick_wide_left_svg_exports = {};
__export(icon_arrow_thick_wide_left_svg_exports, {
  default: () => icon_arrow_thick_wide_left_svg_default,
  meta: () => meta147
});
var meta147, icon_arrow_thick_wide_left_svg_default;
var init_icon_arrow_thick_wide_left_svg = __esm({
  "lib/meta/icon_arrow-thick-wide-left.svg.ts"() {
    meta147 = {
      description: "An icon of a wide left arrow, indicating movement or navigation to the left.",
      category: ["Arrows"],
      tag: ["navigation", "direction", "movement", "left", "arrow", "wide", "symbol", "interface", "pointer", "chevron"],
      title: "Arrow Thick Wide Left"
    };
    icon_arrow_thick_wide_left_svg_default = meta147;
  }
});

// lib/meta/icon_arrow-thick-wide-right-bottom.svg.ts
var icon_arrow_thick_wide_right_bottom_svg_exports = {};
__export(icon_arrow_thick_wide_right_bottom_svg_exports, {
  default: () => icon_arrow_thick_wide_right_bottom_svg_default,
  meta: () => meta148
});
var meta148, icon_arrow_thick_wide_right_bottom_svg_default;
var init_icon_arrow_thick_wide_right_bottom_svg = __esm({
  "lib/meta/icon_arrow-thick-wide-right-bottom.svg.ts"() {
    meta148 = {
      description: "An icon depicting a thick wide arrow pointing towards the bottom right direction. This arrow can be used to indicate scrolling, progression, or navigation.",
      category: ["Arrows", "Interface"],
      tag: ["arrow", "thick", "wide", "right", "bottom", "direction", "scrolling", "navigation", "progression", "pointer"],
      title: "Arrow Thick Wide Right Bottom"
    };
    icon_arrow_thick_wide_right_bottom_svg_default = meta148;
  }
});

// lib/meta/icon_arrow-thick-wide-right.svg.ts
var icon_arrow_thick_wide_right_svg_exports = {};
__export(icon_arrow_thick_wide_right_svg_exports, {
  default: () => icon_arrow_thick_wide_right_svg_default,
  meta: () => meta149
});
var meta149, icon_arrow_thick_wide_right_svg_default;
var init_icon_arrow_thick_wide_right_svg = __esm({
  "lib/meta/icon_arrow-thick-wide-right.svg.ts"() {
    meta149 = {
      description: "The arrow-thick-wide-right icon is a bold and wide arrow pointing to the right, symbolizing movement in that direction. The thick design makes it easy to see and follow.",
      category: ["Arrows"],
      tag: ["arrow", "thick", "wide", "right", "direction", "movement", "navigation", "bold", "symbol", "simple"],
      title: "Arrow Thick Wide Right"
    };
    icon_arrow_thick_wide_right_svg_default = meta149;
  }
});

// lib/meta/icon_arrow-thick-wide-top-right.svg.ts
var icon_arrow_thick_wide_top_right_svg_exports = {};
__export(icon_arrow_thick_wide_top_right_svg_exports, {
  default: () => icon_arrow_thick_wide_top_right_svg_default,
  meta: () => meta150
});
var meta150, icon_arrow_thick_wide_top_right_svg_default;
var init_icon_arrow_thick_wide_top_right_svg = __esm({
  "lib/meta/icon_arrow-thick-wide-top-right.svg.ts"() {
    meta150 = {
      description: "This icon depicts a wide arrow pointing towards the top right direction. It is bold and easily recognizable, suitable for indicating movement or direction in various designs.",
      category: ["Arrows"],
      tag: ["arrow", "thick", "wide", "top", "right", "direction", "movement", "navigation", "indicator", "graphic"],
      title: "Arrow Thick Wide Top Right"
    };
    icon_arrow_thick_wide_top_right_svg_default = meta150;
  }
});

// lib/meta/icon_arrow-thick-wide-up.svg.ts
var icon_arrow_thick_wide_up_svg_exports = {};
__export(icon_arrow_thick_wide_up_svg_exports, {
  default: () => icon_arrow_thick_wide_up_svg_default,
  meta: () => meta151
});
var meta151, icon_arrow_thick_wide_up_svg_default;
var init_icon_arrow_thick_wide_up_svg = __esm({
  "lib/meta/icon_arrow-thick-wide-up.svg.ts"() {
    meta151 = {
      description: "The arrow-thick-wide-up icon is a bold and wide arrow pointing upwards. It signifies upward movement, growth, or increase. This icon is commonly used in various digital interfaces to indicate 'go to top' or 'scroll up' functionalities.",
      category: ["Arrows", "Interface"],
      tag: ["arrow", "thick", "wide", "up", "direction", "movement", "growth", "scroll", "interface", "navigation"],
      title: "Arrow Thick Wide Up"
    };
    icon_arrow_thick_wide_up_svg_default = meta151;
  }
});

// lib/meta/icon_arrow-transfer-bl-tr.svg.ts
var icon_arrow_transfer_bl_tr_svg_exports = {};
__export(icon_arrow_transfer_bl_tr_svg_exports, {
  default: () => icon_arrow_transfer_bl_tr_svg_default,
  meta: () => meta152
});
var meta152, icon_arrow_transfer_bl_tr_svg_default;
var init_icon_arrow_transfer_bl_tr_svg = __esm({
  "lib/meta/icon_arrow-transfer-bl-tr.svg.ts"() {
    meta152 = {
      "description": "The arrow-transfer-bl-tr icon represents a transfer of something from bottom left to top right direction. It can be used to indicate a movement or transition.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "transfer",
        "movement",
        "transition",
        "direction",
        "exchange",
        "shift",
        "flow",
        "progress",
        "navigation",
        "pointer"
      ],
      "title": "Arrow Transfer Bottom Left to Top Right"
    };
    icon_arrow_transfer_bl_tr_svg_default = meta152;
  }
});

// lib/meta/icon_arrow-transfer-left-right.svg.ts
var icon_arrow_transfer_left_right_svg_exports = {};
__export(icon_arrow_transfer_left_right_svg_exports, {
  default: () => icon_arrow_transfer_left_right_svg_default,
  meta: () => meta153
});
var meta153, icon_arrow_transfer_left_right_svg_default;
var init_icon_arrow_transfer_left_right_svg = __esm({
  "lib/meta/icon_arrow-transfer-left-right.svg.ts"() {
    meta153 = {
      "description": "An icon depicting an arrow pointing to the left, crossing over another arrow pointing to the right. This symbolizes the transfer or exchange of something from left to right or vice versa.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "exchange",
        "transfer",
        "switch",
        "invert",
        "direction",
        "opposite",
        "swap",
        "mirror",
        "opposite"
      ],
      "title": "Arrow Transfer Left Right"
    };
    icon_arrow_transfer_left_right_svg_default = meta153;
  }
});

// lib/meta/icon_arrow-transfer-lt-br.svg.ts
var icon_arrow_transfer_lt_br_svg_exports = {};
__export(icon_arrow_transfer_lt_br_svg_exports, {
  default: () => icon_arrow_transfer_lt_br_svg_default,
  meta: () => meta154
});
var meta154, icon_arrow_transfer_lt_br_svg_default;
var init_icon_arrow_transfer_lt_br_svg = __esm({
  "lib/meta/icon_arrow-transfer-lt-br.svg.ts"() {
    meta154 = {
      "description": "An icon depicting an arrow transferring from the top left to the bottom right direction. It symbolizes a transfer or movement from one place to another.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "transfer",
        "direction",
        "movement",
        "exchange",
        "shift",
        "relocation",
        "transport",
        "position"
      ],
      "title": "Arrow Transfer Left to Bottom Right"
    };
    icon_arrow_transfer_lt_br_svg_default = meta154;
  }
});

// lib/meta/icon_arrow-transfer-up-down.svg.ts
var icon_arrow_transfer_up_down_svg_exports = {};
__export(icon_arrow_transfer_up_down_svg_exports, {
  default: () => icon_arrow_transfer_up_down_svg_default,
  meta: () => meta155
});
var meta155, icon_arrow_transfer_up_down_svg_default;
var init_icon_arrow_transfer_up_down_svg = __esm({
  "lib/meta/icon_arrow-transfer-up-down.svg.ts"() {
    meta155 = {
      "description": "The arrow-transfer-up-down icon features an arrow pointing up and down, symbolizing transfer or movement in both directions. It can be used to represent various actions such as syncing data, transferring files, or indicating bi-directional movement.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "transfer",
        "move",
        "sync",
        "direction",
        "bi-directional",
        "upload",
        "download",
        "exchange",
        "data transfer",
        "arrow icon"
      ],
      "title": "Arrow Transfer Up Down"
    };
    icon_arrow_transfer_up_down_svg_default = meta155;
  }
});

// lib/meta/icon_arrow-twoway-diagonal-lr.svg.ts
var icon_arrow_twoway_diagonal_lr_svg_exports = {};
__export(icon_arrow_twoway_diagonal_lr_svg_exports, {
  default: () => icon_arrow_twoway_diagonal_lr_svg_default,
  meta: () => meta156
});
var meta156, icon_arrow_twoway_diagonal_lr_svg_default;
var init_icon_arrow_twoway_diagonal_lr_svg = __esm({
  "lib/meta/icon_arrow-twoway-diagonal-lr.svg.ts"() {
    meta156 = {
      "description": "An icon depicting a two-way arrow moving diagonally from left to right. This icon is typically used to represent bidirectional movement or communication.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "two-way",
        "diagonal",
        "leftright",
        "direction",
        "communication",
        "movement",
        "bidirectional",
        "icon"
      ],
      "title": "Arrow Two-Way Diagonal Left to Right"
    };
    icon_arrow_twoway_diagonal_lr_svg_default = meta156;
  }
});

// lib/meta/icon_arrow-twoway-diagonal-rl.svg.ts
var icon_arrow_twoway_diagonal_rl_svg_exports = {};
__export(icon_arrow_twoway_diagonal_rl_svg_exports, {
  default: () => icon_arrow_twoway_diagonal_rl_svg_default,
  meta: () => meta157
});
var meta157, icon_arrow_twoway_diagonal_rl_svg_default;
var init_icon_arrow_twoway_diagonal_rl_svg = __esm({
  "lib/meta/icon_arrow-twoway-diagonal-rl.svg.ts"() {
    meta157 = {
      "description": "The arrow twoway diagonal rl icon represents a two-way arrow pointing diagonally from right to left. It symbolizes bidirectional movement or transfer of data between two points.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "diagonal",
        "bidirectional",
        "movement",
        "transfer",
        "two-way",
        "right to left",
        "communication",
        "direction"
      ],
      "title": "Arrow Two-Way Diagonal Right to Left"
    };
    icon_arrow_twoway_diagonal_rl_svg_default = meta157;
  }
});

// lib/meta/icon_arrow-twoway-horizontal.svg.ts
var icon_arrow_twoway_horizontal_svg_exports = {};
__export(icon_arrow_twoway_horizontal_svg_exports, {
  default: () => icon_arrow_twoway_horizontal_svg_default,
  meta: () => meta158
});
var meta158, icon_arrow_twoway_horizontal_svg_default;
var init_icon_arrow_twoway_horizontal_svg = __esm({
  "lib/meta/icon_arrow-twoway-horizontal.svg.ts"() {
    meta158 = {
      "description": "An icon representing a two-way horizontal arrow, indicating bidirectional movement or exchange in both directions.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "horizontal arrow",
        "two-way",
        "exchange",
        "movement",
        "directions",
        "communication",
        "navigation",
        "transfer",
        "sync",
        "opposite"
      ],
      "title": "Two-Way Horizontal Arrow"
    };
    icon_arrow_twoway_horizontal_svg_default = meta158;
  }
});

// lib/meta/icon_arrow-twoway-vertical.svg.ts
var icon_arrow_twoway_vertical_svg_exports = {};
__export(icon_arrow_twoway_vertical_svg_exports, {
  default: () => icon_arrow_twoway_vertical_svg_default,
  meta: () => meta159
});
var meta159, icon_arrow_twoway_vertical_svg_default;
var init_icon_arrow_twoway_vertical_svg = __esm({
  "lib/meta/icon_arrow-twoway-vertical.svg.ts"() {
    meta159 = {
      "description": "The arrow-twoway-vertical icon represents a vertical direction change, indicating reversible movement up and down.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "two-way",
        "vertical",
        "direction",
        "movement",
        "up",
        "down",
        "symmetric",
        "reversible",
        "cycle"
      ],
      "title": "Arrow Two-Way Vertical"
    };
    icon_arrow_twoway_vertical_svg_default = meta159;
  }
});

// lib/meta/icon_arrow-up copy.svg.ts
var icon_arrow_up_copy_svg_exports = {};
__export(icon_arrow_up_copy_svg_exports, {
  default: () => icon_arrow_up_copy_svg_default,
  meta: () => meta160
});
var meta160, icon_arrow_up_copy_svg_default;
var init_icon_arrow_up_copy_svg = __esm({
  "lib/meta/icon_arrow-up copy.svg.ts"() {
    meta160 = {
      "description": "The 'arrow-up copy' icon is a simple arrow pointing upwards. It can be used to indicate an upward direction or to encourage users to scroll up on a webpage.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "up",
        "direction",
        "scroll",
        "point",
        "navigation",
        "website",
        "interface",
        "symbol",
        "icon"
      ],
      "title": "Arrow Up Copy"
    };
    icon_arrow_up_copy_svg_default = meta160;
  }
});

// lib/meta/icon_arrow-up-down-split.svg.ts
var icon_arrow_up_down_split_svg_exports = {};
__export(icon_arrow_up_down_split_svg_exports, {
  default: () => icon_arrow_up_down_split_svg_default,
  meta: () => meta161
});
var meta161, icon_arrow_up_down_split_svg_default;
var init_icon_arrow_up_down_split_svg = __esm({
  "lib/meta/icon_arrow-up-down-split.svg.ts"() {
    meta161 = {
      "description": "The arrow-up-down-split icon depicts a single arrow splitting into two arrows moving in opposite directions. This icon is commonly used to represent the actions of expanding or collapsing a section, as well as indicating upward and downward movements simultaneously.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "expand",
        "collapse",
        "direction",
        "move",
        "split",
        "opposite",
        "upward",
        "downward",
        "navigation"
      ],
      "title": "Arrow Up Down Split"
    };
    icon_arrow_up_down_split_svg_default = meta161;
  }
});

// lib/meta/icon_arrow-up-down-stop.svg.ts
var icon_arrow_up_down_stop_svg_exports = {};
__export(icon_arrow_up_down_stop_svg_exports, {
  default: () => icon_arrow_up_down_stop_svg_default,
  meta: () => meta162
});
var meta162, icon_arrow_up_down_stop_svg_default;
var init_icon_arrow_up_down_stop_svg = __esm({
  "lib/meta/icon_arrow-up-down-stop.svg.ts"() {
    meta162 = {
      "description": "The arrow-up-down-stop icon indicates the ability to move the selection both upwards and downwards while having the option to stop the process. It is commonly used for navigation or sorting purposes in user interfaces.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "move",
        "selection",
        "navigation",
        "sorting",
        "user interface",
        "up",
        "down",
        "stop",
        "direction"
      ],
      "title": "Arrow Up Down Stop"
    };
    icon_arrow_up_down_stop_svg_default = meta162;
  }
});

// lib/meta/icon_arrow-up-down.svg.ts
var icon_arrow_up_down_svg_exports = {};
__export(icon_arrow_up_down_svg_exports, {
  default: () => icon_arrow_up_down_svg_default,
  meta: () => meta163
});
var meta163, icon_arrow_up_down_svg_default;
var init_icon_arrow_up_down_svg = __esm({
  "lib/meta/icon_arrow-up-down.svg.ts"() {
    meta163 = {
      "description": "The arrow-up-down icon features a simple, vertical arrow pointing upwards and downwards. It represents the action of moving up or down, indicating navigation or sorting options.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "Direction",
        "Sort",
        "Navigation",
        "Scroll",
        "Move",
        "UpDown",
        "Vertical",
        "Arrow",
        "User Interface",
        "Symbol"
      ],
      "title": "Arrow Up Down"
    };
    icon_arrow_up_down_svg_default = meta163;
  }
});

// lib/meta/icon_arrow-up-left.svg.ts
var icon_arrow_up_left_svg_exports = {};
__export(icon_arrow_up_left_svg_exports, {
  default: () => icon_arrow_up_left_svg_default,
  meta: () => meta164
});
var meta164, icon_arrow_up_left_svg_default;
var init_icon_arrow_up_left_svg = __esm({
  "lib/meta/icon_arrow-up-left.svg.ts"() {
    meta164 = {
      "description": "The icon displays an arrow pointing diagonally upwards and left. It symbolizes a direction or movement towards the top left corner.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "arrow",
        "up",
        "left",
        "direction",
        "movement",
        "pointer",
        "navigation",
        "top-left",
        "corner"
      ],
      "title": "Arrow Up Left"
    };
    icon_arrow_up_left_svg_default = meta164;
  }
});

// lib/meta/icon_arrow-up-right.svg.ts
var icon_arrow_up_right_svg_exports = {};
__export(icon_arrow_up_right_svg_exports, {
  default: () => icon_arrow_up_right_svg_default,
  meta: () => meta165
});
var meta165, icon_arrow_up_right_svg_default;
var init_icon_arrow_up_right_svg = __esm({
  "lib/meta/icon_arrow-up-right.svg.ts"() {
    meta165 = {
      "description": "The arrow-up-right icon depicts an arrow pointing diagonally upwards and to the right. This icon is commonly used to indicate the direction to move upwards and to the right.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "arrow",
        "direction",
        "move",
        "diagonal",
        "up",
        "right",
        "navigation",
        "pointer",
        "pointer",
        "symbol"
      ],
      "title": "Arrow Up Right"
    };
    icon_arrow_up_right_svg_default = meta165;
  }
});

// lib/meta/icon_arrow-up.svg.ts
var icon_arrow_up_svg_exports = {};
__export(icon_arrow_up_svg_exports, {
  default: () => icon_arrow_up_svg_default,
  meta: () => meta166
});
var meta166, icon_arrow_up_svg_default;
var init_icon_arrow_up_svg = __esm({
  "lib/meta/icon_arrow-up.svg.ts"() {
    meta166 = {
      "description": "An icon depicting an upward pointing arrow, symbolizing moving up, increasing, or scrolling to the top.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "up",
        "direction",
        "increase",
        "scroll",
        "top",
        "navigation",
        "point",
        "move",
        "elevate",
        "ascend"
      ],
      "title": "Arrow Up"
    };
    icon_arrow_up_svg_default = meta166;
  }
});

// lib/meta/icon_arrow-upload.svg.ts
var icon_arrow_upload_svg_exports = {};
__export(icon_arrow_upload_svg_exports, {
  default: () => icon_arrow_upload_svg_default,
  meta: () => meta167
});
var meta167, icon_arrow_upload_svg_default;
var init_icon_arrow_upload_svg = __esm({
  "lib/meta/icon_arrow-upload.svg.ts"() {
    meta167 = {
      "description": "An icon depicting an arrow pointing upwards, indicating the action of uploading. This icon is commonly used in interfaces to symbolize file upload or data transfer.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "upload",
        "arrow",
        "direction",
        "transfer",
        "data",
        "file",
        "interface",
        "communication",
        "symbol",
        "up"
      ],
      "title": "Arrow Upload"
    };
    icon_arrow_upload_svg_default = meta167;
  }
});

// lib/meta/icon_chevron-connect 2.svg.ts
var icon_chevron_connect_2_svg_exports = {};
__export(icon_chevron_connect_2_svg_exports, {
  default: () => icon_chevron_connect_2_svg_default,
  meta: () => meta168
});
var meta168, icon_chevron_connect_2_svg_default;
var init_icon_chevron_connect_2_svg = __esm({
  "lib/meta/icon_chevron-connect 2.svg.ts"() {
    meta168 = {
      "description": "The chevron-connect 2 icon represents a connection or link between two points. It features two chevron arrows pointing towards each other, indicating a connection or continuation. This icon is commonly used in interface design to symbolize a flow or transition between different sections.",
      "category": [
        "Arrows",
        "Interface",
        "Symbol"
      ],
      "tag": [
        "chevron",
        "connect",
        "link",
        "arrows",
        "interface design",
        "transition",
        "flow",
        "pointing",
        "direction",
        "navigation"
      ],
      "title": "Chevron Connect 2"
    };
    icon_chevron_connect_2_svg_default = meta168;
  }
});

// lib/meta/icon_chevron-connect.svg.ts
var icon_chevron_connect_svg_exports = {};
__export(icon_chevron_connect_svg_exports, {
  default: () => icon_chevron_connect_svg_default,
  meta: () => meta169
});
var meta169, icon_chevron_connect_svg_default;
var init_icon_chevron_connect_svg = __esm({
  "lib/meta/icon_chevron-connect.svg.ts"() {
    meta169 = {
      "description": "The chevron-connect icon is a symbol representing a connection or linking between two elements. It consists of two chevron shapes pointing towards each other, indicating a pathway or direct association.",
      "category": [
        "Arrows",
        "Interface",
        "Symbol"
      ],
      "tag": [
        "link",
        "direction",
        "connection",
        "navigation",
        "transition",
        "arrowheads",
        "pointing",
        "communication",
        "interactive",
        "network"
      ],
      "title": "Chevron Connect"
    };
    icon_chevron_connect_svg_default = meta169;
  }
});

// lib/meta/icon_chevron-disconnect 2.svg.ts
var icon_chevron_disconnect_2_svg_exports = {};
__export(icon_chevron_disconnect_2_svg_exports, {
  default: () => icon_chevron_disconnect_2_svg_default,
  meta: () => meta170
});
var meta170, icon_chevron_disconnect_2_svg_default;
var init_icon_chevron_disconnect_2_svg = __esm({
  "lib/meta/icon_chevron-disconnect 2.svg.ts"() {
    meta170 = {
      "description": "A symbol depicting a chevron arrow pointing downwards, indicating a disconnection or removal. The icon is designed with a modern and sleek style.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "disconnect",
        "chevron",
        "arrow",
        "downwards",
        "remove",
        "symbol",
        "modern",
        "sleek",
        "button",
        "navigation"
      ],
      "title": "Chevron Disconnect 2"
    };
    icon_chevron_disconnect_2_svg_default = meta170;
  }
});

// lib/meta/icon_chevron-disconnect.svg.ts
var icon_chevron_disconnect_svg_exports = {};
__export(icon_chevron_disconnect_svg_exports, {
  default: () => icon_chevron_disconnect_svg_default,
  meta: () => meta171
});
var meta171, icon_chevron_disconnect_svg_default;
var init_icon_chevron_disconnect_svg = __esm({
  "lib/meta/icon_chevron-disconnect.svg.ts"() {
    meta171 = {
      "description": "A disconnect arrow icon, indicating separation or disconnecting action.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "chevron",
        "disconnect",
        "separate",
        "direction",
        "navigation",
        "arrowhead",
        "symbol",
        "interface",
        "communication",
        "pointer"
      ],
      "title": "Chevron Disconnect"
    };
    icon_chevron_disconnect_svg_default = meta171;
  }
});

// lib/meta/icon_chevron-double-down.svg.ts
var icon_chevron_double_down_svg_exports = {};
__export(icon_chevron_double_down_svg_exports, {
  default: () => icon_chevron_double_down_svg_default,
  meta: () => meta172
});
var meta172, icon_chevron_double_down_svg_default;
var init_icon_chevron_double_down_svg = __esm({
  "lib/meta/icon_chevron-double-down.svg.ts"() {
    meta172 = {
      "description": "The chevron double down icon is typically used to indicate to users to double tap or further expand a section on a website or application. It usually signifies additional content below or within a page.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "chevron double down",
        "expand",
        "scroll",
        "navigate",
        "reveal",
        "pointer",
        "direction",
        "interface",
        "web design",
        "user interface"
      ],
      "title": "Chevron Double Down"
    };
    icon_chevron_double_down_svg_default = meta172;
  }
});

// lib/meta/icon_chevron-double-left.svg.ts
var icon_chevron_double_left_svg_exports = {};
__export(icon_chevron_double_left_svg_exports, {
  default: () => icon_chevron_double_left_svg_default,
  meta: () => meta173
});
var meta173, icon_chevron_double_left_svg_default;
var init_icon_chevron_double_left_svg = __esm({
  "lib/meta/icon_chevron-double-left.svg.ts"() {
    meta173 = {
      "description": "The chevron-double-left icon is a double arrow pointing to the left, commonly used to indicate moving back to the previous page or section.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "back",
        "double arrow",
        "navigation",
        "previous",
        "direction",
        "left",
        "pointing",
        "interface",
        "arrow symbol"
      ],
      "title": "Chevron Double Left"
    };
    icon_chevron_double_left_svg_default = meta173;
  }
});

// lib/meta/icon_chevron-double-right.svg.ts
var icon_chevron_double_right_svg_exports = {};
__export(icon_chevron_double_right_svg_exports, {
  default: () => icon_chevron_double_right_svg_default,
  meta: () => meta174
});
var meta174, icon_chevron_double_right_svg_default;
var init_icon_chevron_double_right_svg = __esm({
  "lib/meta/icon_chevron-double-right.svg.ts"() {
    meta174 = {
      "description": "The chevron-double-right icon is a pair of arrows pointing to the right, representing forward movement or indicating the next step in a process.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "forward",
        "direction",
        "navigation",
        "double",
        "right",
        "arrows",
        "chevron",
        "next",
        "process",
        "move"
      ],
      "title": "Chevron Double Right"
    };
    icon_chevron_double_right_svg_default = meta174;
  }
});

// lib/meta/icon_chevron-double-up.svg.ts
var icon_chevron_double_up_svg_exports = {};
__export(icon_chevron_double_up_svg_exports, {
  default: () => icon_chevron_double_up_svg_default,
  meta: () => meta175
});
var meta175, icon_chevron_double_up_svg_default;
var init_icon_chevron_double_up_svg = __esm({
  "lib/meta/icon_chevron-double-up.svg.ts"() {
    meta175 = {
      "description": "The chevron-double-up icon features two upward-pointing arrows stacked on top of each other. It is commonly used to indicate scrolling or moving to the top of a page or list.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "up",
        "scroll",
        "direction",
        "double",
        "pointing",
        "navigation",
        "top",
        "stacked",
        "move",
        "page"
      ],
      "title": "Chevron Double Up"
    };
    icon_chevron_double_up_svg_default = meta175;
  }
});

// lib/meta/icon_chevron-down.svg.ts
var icon_chevron_down_svg_exports = {};
__export(icon_chevron_down_svg_exports, {
  default: () => icon_chevron_down_svg_default,
  meta: () => meta176
});
var meta176, icon_chevron_down_svg_default;
var init_icon_chevron_down_svg = __esm({
  "lib/meta/icon_chevron-down.svg.ts"() {
    meta176 = {
      "description": "The chevron-down icon is a simple arrow pointing downwards. It is commonly used to indicate 'expand' or 'show more' actions in various interfaces.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "down",
        "expand",
        "show more",
        "navigation",
        "pointer",
        "direction",
        "arrowhead",
        "dropdown",
        "menu",
        "select"
      ],
      "title": "Chevron Down"
    };
    icon_chevron_down_svg_default = meta176;
  }
});

// lib/meta/icon_chevron-left.svg.ts
var icon_chevron_left_svg_exports = {};
__export(icon_chevron_left_svg_exports, {
  default: () => icon_chevron_left_svg_default,
  meta: () => meta177
});
var meta177, icon_chevron_left_svg_default;
var init_icon_chevron_left_svg = __esm({
  "lib/meta/icon_chevron-left.svg.ts"() {
    meta177 = {
      "description": "A left-facing chevron icon commonly used to indicate a previous or back action.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "navigation",
        "arrow",
        "direction",
        "back",
        "previous",
        "left",
        "chevron",
        "icon",
        "symbol"
      ],
      "title": "Chevron Left"
    };
    icon_chevron_left_svg_default = meta177;
  }
});

// lib/meta/icon_chevron-right.svg.ts
var icon_chevron_right_svg_exports = {};
__export(icon_chevron_right_svg_exports, {
  default: () => icon_chevron_right_svg_default,
  meta: () => meta178
});
var meta178, icon_chevron_right_svg_default;
var init_icon_chevron_right_svg = __esm({
  "lib/meta/icon_chevron-right.svg.ts"() {
    meta178 = {
      "description": "The chevron-right icon is a symbol depicting a right-pointing arrow, typically used to indicate moving forward or navigating to the next item.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "chevron",
        "right",
        "forward",
        "navigation",
        "arrow",
        "direction",
        "symbol",
        "next",
        "pointer",
        "icon"
      ],
      "title": "Chevron Right"
    };
    icon_chevron_right_svg_default = meta178;
  }
});

// lib/meta/icon_chevron-up.svg.ts
var icon_chevron_up_svg_exports = {};
__export(icon_chevron_up_svg_exports, {
  default: () => icon_chevron_up_svg_default,
  meta: () => meta179
});
var meta179, icon_chevron_up_svg_default;
var init_icon_chevron_up_svg = __esm({
  "lib/meta/icon_chevron-up.svg.ts"() {
    meta179 = {
      "description": "An icon depicting an upwards-facing chevron arrow, commonly used to indicate scrolling to the top of a page or list.",
      "category": [
        "Arrows"
      ],
      "tag": [
        "upwards",
        "direction",
        "scrolling",
        "navigation",
        "arrow",
        "pointing",
        "top",
        "movement",
        "indicator",
        "graphic"
      ],
      "title": "Chevron Up"
    };
    icon_chevron_up_svg_default = meta179;
  }
});

// lib/meta/icon-01.svg.ts
var icon_01_svg_exports = {};
__export(icon_01_svg_exports, {
  default: () => icon_01_svg_default,
  meta: () => meta180
});
var meta180, icon_01_svg_default;
var init_icon_01_svg = __esm({
  "lib/meta/icon-01.svg.ts"() {
    meta180 = {
      "description": "An icon representing a food or drink item, perfect for menus or restaurant-related projects.",
      "category": [
        "Food & Drinks"
      ],
      "tag": [
        "restaurant",
        "menu",
        "beverage",
        "culinary",
        "refreshment",
        "eatery",
        "bar",
        "cooking",
        "dining",
        "snack"
      ],
      "title": "Icon 01"
    };
    icon_01_svg_default = meta180;
  }
});

// lib/meta/icon_bottle.svg.ts
var icon_bottle_svg_exports = {};
__export(icon_bottle_svg_exports, {
  default: () => icon_bottle_svg_default,
  meta: () => meta181
});
var meta181, icon_bottle_svg_default;
var init_icon_bottle_svg = __esm({
  "lib/meta/icon_bottle.svg.ts"() {
    meta181 = {
      "description": "An icon representing a bottle, typically used for holding liquids such as water, juices, or beverages.",
      "category": [
        "Food-Drinks"
      ],
      "tag": [
        "drink container",
        "beverage",
        "liquids",
        "container",
        "hydration",
        "glassware",
        "refreshment",
        "liquid storage",
        "drinking",
        "water bottle"
      ],
      "title": "Bottle"
    };
    icon_bottle_svg_default = meta181;
  }
});

// lib/meta/icon_bottles.svg.ts
var icon_bottles_svg_exports = {};
__export(icon_bottles_svg_exports, {
  default: () => icon_bottles_svg_default,
  meta: () => meta182
});
var meta182, icon_bottles_svg_default;
var init_icon_bottles_svg = __esm({
  "lib/meta/icon_bottles.svg.ts"() {
    meta182 = {
      "description": "An icon representing bottles typically used for storing liquid beverages such as water, juice, or alcohol. The bottles are often made of glass or plastic and come in various shapes and sizes.",
      "category": [
        "Food-Drinks"
      ],
      "tag": [
        "drink containers",
        "beverages",
        "liquids",
        "glassware",
        "plastic bottles",
        "storage",
        "refreshments",
        "containers",
        "drinks",
        "hydration"
      ],
      "title": "Bottles"
    };
    icon_bottles_svg_default = meta182;
  }
});

// lib/meta/icon_bread slice.svg.ts
var icon_bread_slice_svg_exports = {};
__export(icon_bread_slice_svg_exports, {
  default: () => icon_bread_slice_svg_default,
  meta: () => meta183
});
var meta183, icon_bread_slice_svg_default;
var init_icon_bread_slice_svg = __esm({
  "lib/meta/icon_bread slice.svg.ts"() {
    meta183 = {
      "description": "A simple icon depicting a slice of bread, often used to represent bakery products or sandwiches.",
      "category": [
        "Food-Drinks"
      ],
      "tag": [
        "bread slice",
        "bread",
        "slice",
        "food",
        "bakery",
        "sandwich",
        "breakfast",
        "carbohydrate",
        "toast",
        "snack"
      ],
      "title": "Bread Slice"
    };
    icon_bread_slice_svg_default = meta183;
  }
});

// lib/meta/icon_coffee cup.svg.ts
var icon_coffee_cup_svg_exports = {};
__export(icon_coffee_cup_svg_exports, {
  default: () => icon_coffee_cup_svg_default,
  meta: () => meta184
});
var meta184, icon_coffee_cup_svg_default;
var init_icon_coffee_cup_svg = __esm({
  "lib/meta/icon_coffee cup.svg.ts"() {
    meta184 = {
      "description": "A simple icon of a coffee cup, perfect for representing coffee, beverages, cafes, mornings, and relaxation.",
      "category": [
        "Food-Drinks",
        "Interface"
      ],
      "tag": [
        "coffee",
        "beverage",
        "cafe",
        "morning",
        "drink",
        "refreshment",
        "hot",
        "relaxation",
        "mug",
        "brew"
      ],
      "title": "Coffee Cup"
    };
    icon_coffee_cup_svg_default = meta184;
  }
});

// lib/meta/icon_coffee machine.svg.ts
var icon_coffee_machine_svg_exports = {};
__export(icon_coffee_machine_svg_exports, {
  default: () => icon_coffee_machine_svg_default,
  meta: () => meta185
});
var meta185, icon_coffee_machine_svg_default;
var init_icon_coffee_machine_svg = __esm({
  "lib/meta/icon_coffee machine.svg.ts"() {
    meta185 = {
      "description": "An icon representing a coffee machine, a device used to brew and dispense coffee. Typically found in homes, offices, and coffee shops.",
      "category": [
        "Food-Drinks",
        "Household"
      ],
      "tag": [
        "coffee",
        "machine",
        "brewing",
        "dispensing",
        "beverage",
        "hot drinks",
        "home appliance",
        "office equipment",
        "coffee shop",
        "refreshment"
      ],
      "title": "Coffee Machine"
    };
    icon_coffee_machine_svg_default = meta185;
  }
});

// lib/meta/icon_coffee-beans.svg.ts
var icon_coffee_beans_svg_exports = {};
__export(icon_coffee_beans_svg_exports, {
  default: () => icon_coffee_beans_svg_default,
  meta: () => meta186
});
var meta186, icon_coffee_beans_svg_default;
var init_icon_coffee_beans_svg = __esm({
  "lib/meta/icon_coffee-beans.svg.ts"() {
    meta186 = {
      "description": "Coffee beans icon representing a popular ingredient used to brew coffee, known for its rich flavor and aroma.",
      "category": [
        "Things"
      ],
      "tag": [
        "Coffee",
        "Beverage",
        "Caffeine",
        "Drink",
        "Ingredient",
        "Roasted",
        "Aroma",
        "Morning",
        "Espresso",
        "Bean"
      ],
      "title": "Coffee Beans"
    };
    icon_coffee_beans_svg_default = meta186;
  }
});

// lib/meta/icon_cognac glass.svg.ts
var icon_cognac_glass_svg_exports = {};
__export(icon_cognac_glass_svg_exports, {
  default: () => icon_cognac_glass_svg_default,
  meta: () => meta187
});
var meta187, icon_cognac_glass_svg_default;
var init_icon_cognac_glass_svg = __esm({
  "lib/meta/icon_cognac glass.svg.ts"() {
    meta187 = {
      "description": "A stylized icon representing a cognac glass, typically used to serve cognac or other spirits.",
      "category": [
        "Food-Drinks",
        "Symbol"
      ],
      "tag": [
        "alcohol",
        "beverage",
        "drinkware",
        "bar",
        "liquor",
        "glassware",
        "celebrate",
        "party",
        "luxury",
        "cocktail"
      ],
      "title": "Cognac Glass"
    };
    icon_cognac_glass_svg_default = meta187;
  }
});

// lib/meta/icon_espress machine 2.svg.ts
var icon_espress_machine_2_svg_exports = {};
__export(icon_espress_machine_2_svg_exports, {
  default: () => icon_espress_machine_2_svg_default,
  meta: () => meta188
});
var meta188, icon_espress_machine_2_svg_default;
var init_icon_espress_machine_2_svg = __esm({
  "lib/meta/icon_espress machine 2.svg.ts"() {
    meta188 = {
      "description": "Icon depicting a modern espresso machine, perfect for representing coffee culture, coffee shops, caffeine, beverages, and morning routines.",
      "category": [
        "Food-Drinks",
        "Interface"
      ],
      "tag": [
        "espresso",
        "machine",
        "coffee culture",
        "beverages",
        "morning routines",
        "coffee shop",
        "drink",
        "caffeine",
        "espresso maker",
        "brewing"
      ],
      "title": "Espresso Machine 2"
    };
    icon_espress_machine_2_svg_default = meta188;
  }
});

// lib/meta/icon_espresso machine e61.svg.ts
var icon_espresso_machine_e61_svg_exports = {};
__export(icon_espresso_machine_e61_svg_exports, {
  default: () => icon_espresso_machine_e61_svg_default,
  meta: () => meta189
});
var meta189, icon_espresso_machine_e61_svg_default;
var init_icon_espresso_machine_e61_svg = __esm({
  "lib/meta/icon_espresso machine e61.svg.ts"() {
    meta189 = {
      "description": "An icon of an espresso machine model E61, a classic and popular choice among coffee enthusiasts for its reliability and quality of espresso extraction.",
      "category": [
        "Food-Drinks",
        "Appliance"
      ],
      "tag": [
        "Espresso",
        "Machine",
        "E61",
        "Coffee",
        "Barista",
        "Brewing",
        "Cafe",
        "Hot Beverage",
        "Bar"
      ],
      "title": "Espresso Machine E61"
    };
    icon_espresso_machine_e61_svg_default = meta189;
  }
});

// lib/meta/icon_espresso machine.svg.ts
var icon_espresso_machine_svg_exports = {};
__export(icon_espresso_machine_svg_exports, {
  default: () => icon_espresso_machine_svg_default,
  meta: () => meta190
});
var meta190, icon_espresso_machine_svg_default;
var init_icon_espresso_machine_svg = __esm({
  "lib/meta/icon_espresso machine.svg.ts"() {
    meta190 = {
      "description": "An espresso machine is a device that brews coffee by forcing hot water through finely-ground coffee beans. It is commonly used to make espresso, a strong and concentrated coffee drink.",
      "category": [
        "Food-Drinks",
        "Appliance"
      ],
      "tag": [
        "coffee",
        "espresso",
        "brewing",
        "machine",
        "beverage",
        "caffeine",
        "barista",
        "hot drink",
        "brew",
        "kitchen appliance"
      ],
      "title": "Espresso Machine"
    };
    icon_espresso_machine_svg_default = meta190;
  }
});

// lib/meta/icon_espresso pistol.svg.ts
var icon_espresso_pistol_svg_exports = {};
__export(icon_espresso_pistol_svg_exports, {
  default: () => icon_espresso_pistol_svg_default,
  meta: () => meta191
});
var meta191, icon_espresso_pistol_svg_default;
var init_icon_espresso_pistol_svg = __esm({
  "lib/meta/icon_espresso pistol.svg.ts"() {
    meta191 = {
      "description": "The espresso pistol icon features a unique design of a coffee machine combined with a pistol, symbolizing the powerful and intense flavor of espresso. It is a creative representation of the popular coffee beverage.",
      "category": [
        "Food-Drinks"
      ],
      "tag": [
        "espresso",
        "coffee",
        "beverage",
        "machine",
        "pistol",
        "drink",
        "caffeine",
        "barista",
        "hot",
        "brew"
      ],
      "title": "Espresso Pistol"
    };
    icon_espresso_pistol_svg_default = meta191;
  }
});

// lib/meta/icon_hamburger.svg.ts
var icon_hamburger_svg_exports = {};
__export(icon_hamburger_svg_exports, {
  default: () => icon_hamburger_svg_default,
  meta: () => meta192
});
var meta192, icon_hamburger_svg_default;
var init_icon_hamburger_svg = __esm({
  "lib/meta/icon_hamburger.svg.ts"() {
    meta192 = {
      "description": "The hamburger icon represents a popular type of food, typically associated with fast-food restaurants and casual dining. It consists of a patty, lettuce, tomato, and other fillings placed between two bun halves. The hamburger icon is commonly used to symbolize a menu or navigation option in digital interfaces.",
      "category": [
        "Food-Drinks",
        "Interface"
      ],
      "tag": [
        "burger",
        "fast food",
        "dining",
        "menu",
        "restaurant",
        "navigation",
        "digital",
        "interface",
        "symbol",
        "popular"
      ],
      "title": "Hamburger"
    };
    icon_hamburger_svg_default = meta192;
  }
});

// lib/meta/icon_perculator.svg.ts
var icon_perculator_svg_exports = {};
__export(icon_perculator_svg_exports, {
  default: () => icon_perculator_svg_default,
  meta: () => meta193
});
var meta193, icon_perculator_svg_default;
var init_icon_perculator_svg = __esm({
  "lib/meta/icon_perculator.svg.ts"() {
    meta193 = {
      "description": "A percolator icon typically represents a coffee brewing device that brews coffee by continually cycling near-boiling water through the ground coffee beans until a desired coffee strength is reached. This icon can be used to symbolize coffee-making, coffee culture, and hot beverages.",
      "category": [
        "Food-Drinks",
        "Symbol"
      ],
      "tag": [
        "coffee",
        "brewing",
        "device",
        "hot beverage",
        "coffee maker",
        "beverage",
        "coffee culture",
        "drink",
        "caffeine",
        "morning"
      ],
      "title": "Perculator"
    };
    icon_perculator_svg_default = meta193;
  }
});

// lib/meta/icon_wine glass.svg.ts
var icon_wine_glass_svg_exports = {};
__export(icon_wine_glass_svg_exports, {
  default: () => icon_wine_glass_svg_default,
  meta: () => meta194
});
var meta194, icon_wine_glass_svg_default;
var init_icon_wine_glass_svg = __esm({
  "lib/meta/icon_wine glass.svg.ts"() {
    meta194 = {
      "description": "An icon representing a wine glass, typically used to symbolize alcoholic beverages or wine-related content.",
      "category": [
        "Food-Drinks",
        "Symbol"
      ],
      "tag": [
        "drinkware",
        "alcohol",
        "beverage",
        "celebration",
        "restaurant",
        "bar",
        "glassware",
        "party",
        "nightlife",
        "winery"
      ],
      "title": "Wine Glass"
    };
    icon_wine_glass_svg_default = meta194;
  }
});

// lib/meta/icon_alarm-bell-2.svg.ts
var icon_alarm_bell_2_svg_exports = {};
__export(icon_alarm_bell_2_svg_exports, {
  default: () => icon_alarm_bell_2_svg_default,
  meta: () => meta195
});
var meta195, icon_alarm_bell_2_svg_default;
var init_icon_alarm_bell_2_svg = __esm({
  "lib/meta/icon_alarm-bell-2.svg.ts"() {
    meta195 = {
      "description": "An icon of an alarm bell with two bells. It is commonly used to represent an alarm or notification in media applications.",
      "category": [
        "Media"
      ],
      "tag": [
        "alarm",
        "bell",
        "notification",
        "alert",
        "reminder",
        "warning",
        "sound",
        "ringing",
        "emergency",
        "clock"
      ],
      "title": "Alarm Bell 2"
    };
    icon_alarm_bell_2_svg_default = meta195;
  }
});

// lib/meta/icon_alarm-bell-3.svg.ts
var icon_alarm_bell_3_svg_exports = {};
__export(icon_alarm_bell_3_svg_exports, {
  default: () => icon_alarm_bell_3_svg_default,
  meta: () => meta196
});
var meta196, icon_alarm_bell_3_svg_default;
var init_icon_alarm_bell_3_svg = __esm({
  "lib/meta/icon_alarm-bell-3.svg.ts"() {
    meta196 = {
      "description": "The alarm bell icon is a symbol representing an alert or notification. It features a bell with three sound waves emanating from it, indicating a loud and urgent alarm.",
      "category": [
        "Media"
      ],
      "tag": [
        "alarm",
        "bell",
        "notification",
        "alert",
        "sound",
        "loud",
        "urgent",
        "warning",
        "emergency",
        "attention"
      ],
      "title": "Alarm Bell 3"
    };
    icon_alarm_bell_3_svg_default = meta196;
  }
});

// lib/meta/icon_alarm-bell.svg.ts
var icon_alarm_bell_svg_exports = {};
__export(icon_alarm_bell_svg_exports, {
  default: () => icon_alarm_bell_svg_default,
  meta: () => meta197
});
var meta197, icon_alarm_bell_svg_default;
var init_icon_alarm_bell_svg = __esm({
  "lib/meta/icon_alarm-bell.svg.ts"() {
    meta197 = {
      "description": "The alarm bell icon represents an alarm or notification alert. It is typically used to indicate an urgent message or reminder in media applications.",
      "category": [
        "Media"
      ],
      "tag": [
        "alarm",
        "bell",
        "alert",
        "notification",
        "reminder",
        "emergency",
        "urgent",
        "media",
        "sound",
        "warning"
      ],
      "title": "Alarm Bell"
    };
    icon_alarm_bell_svg_default = meta197;
  }
});

// lib/meta/icon_art-supplies.svg.ts
var icon_art_supplies_svg_exports = {};
__export(icon_art_supplies_svg_exports, {
  default: () => icon_art_supplies_svg_default,
  meta: () => meta198
});
var meta198, icon_art_supplies_svg_default;
var init_icon_art_supplies_svg = __esm({
  "lib/meta/icon_art-supplies.svg.ts"() {
    meta198 = {
      "description": "The art supplies icon represents a collection of tools and materials used for creating visual art, such as paints, brushes, pencils, and paper. Whether you're a professional artist or a hobbyist, having a well-stocked art supplies can inspire creativity and help bring your artistic visions to life.",
      "category": [
        "Media"
      ],
      "tag": [
        "art supplies",
        "painting",
        "drawing",
        "creative",
        "artists",
        "crafting",
        "materials",
        "tools",
        "inspiration",
        "hobby"
      ],
      "title": "Art Supplies"
    };
    icon_art_supplies_svg_default = meta198;
  }
});

// lib/meta/icon_audio-waves.svg.ts
var icon_audio_waves_svg_exports = {};
__export(icon_audio_waves_svg_exports, {
  default: () => icon_audio_waves_svg_default,
  meta: () => meta199
});
var meta199, icon_audio_waves_svg_default;
var init_icon_audio_waves_svg = __esm({
  "lib/meta/icon_audio-waves.svg.ts"() {
    meta199 = {
      "description": "The audio waves icon visually represents sound and music. It typically consists of curved lines or bars that mimic the patterns created by sound waves.",
      "category": [
        "Media"
      ],
      "tag": [
        "audio waves",
        "sound waves",
        "music",
        "audio visualizer",
        "waveform",
        "song",
        "audio",
        "music player",
        "sound",
        "acoustic"
      ],
      "title": "Audio Waves"
    };
    icon_audio_waves_svg_default = meta199;
  }
});

// lib/meta/icon_bluetooth.svg.ts
var icon_bluetooth_svg_exports = {};
__export(icon_bluetooth_svg_exports, {
  default: () => icon_bluetooth_svg_default,
  meta: () => meta200
});
var meta200, icon_bluetooth_svg_default;
var init_icon_bluetooth_svg = __esm({
  "lib/meta/icon_bluetooth.svg.ts"() {
    meta200 = {
      "description": "The Bluetooth icon represents wireless technology used for exchanging data over short distances. This icon is commonly found in media devices such as smartphones, tablets, and headphones.",
      "category": [
        "Media",
        "Interface"
      ],
      "tag": [
        "communication",
        "technology",
        "connectivity",
        "wireless",
        "networking",
        "data transfer",
        "smart devices",
        "short range",
        "electronics",
        "digital"
      ],
      "title": "Bluetooth"
    };
    icon_bluetooth_svg_default = meta200;
  }
});

// lib/meta/icon_camera.svg.ts
var icon_camera_svg_exports = {};
__export(icon_camera_svg_exports, {
  default: () => icon_camera_svg_default,
  meta: () => meta201
});
var meta201, icon_camera_svg_default;
var init_icon_camera_svg = __esm({
  "lib/meta/icon_camera.svg.ts"() {
    meta201 = {
      "description": "The camera icon represents a device used to capture photographs and record videos. It is commonly used in various media-related applications and interfaces.",
      "category": [
        "Media"
      ],
      "tag": [
        "photography",
        "video recording",
        "technology",
        "multimedia",
        "picture",
        "film",
        "capture",
        "snapshot",
        "digital",
        "device"
      ],
      "title": "Camera"
    };
    icon_camera_svg_default = meta201;
  }
});

// lib/meta/icon_clipboard.svg.ts
var icon_clipboard_svg_exports = {};
__export(icon_clipboard_svg_exports, {
  default: () => icon_clipboard_svg_default,
  meta: () => meta202
});
var meta202, icon_clipboard_svg_default;
var init_icon_clipboard_svg = __esm({
  "lib/meta/icon_clipboard.svg.ts"() {
    meta202 = {
      "description": "A clipboard icon typically represents the concept of copying and pasting text, data or images. It is commonly used in applications and websites to indicate the ability to save or transfer information.",
      "category": [
        "Interface",
        "Media"
      ],
      "tag": [
        "copy",
        "paste",
        "notes",
        "document",
        "information",
        "transfer",
        "record",
        "save",
        "text"
      ],
      "title": "Clipboard"
    };
    icon_clipboard_svg_default = meta202;
  }
});

// lib/meta/icon_color-pallette.svg.ts
var icon_color_pallette_svg_exports = {};
__export(icon_color_pallette_svg_exports, {
  default: () => icon_color_pallette_svg_default,
  meta: () => meta203
});
var meta203, icon_color_pallette_svg_default;
var init_icon_color_pallette_svg = __esm({
  "lib/meta/icon_color-pallette.svg.ts"() {
    meta203 = {
      "description": "The color palette icon is typically used to represent a tool or feature that allows users to select colors from a range of options for customization or design purposes.",
      "category": [
        "Media",
        "Interface"
      ],
      "tag": [
        "art",
        "design",
        "painting",
        "graphic design",
        "color selection",
        "creativity",
        "digital art",
        "web design",
        "palette",
        "color picker"
      ],
      "title": "Color Palette"
    };
    icon_color_pallette_svg_default = meta203;
  }
});

// lib/meta/icon_color-rgb.svg.ts
var icon_color_rgb_svg_exports = {};
__export(icon_color_rgb_svg_exports, {
  default: () => icon_color_rgb_svg_default,
  meta: () => meta204
});
var meta204, icon_color_rgb_svg_default;
var init_icon_color_rgb_svg = __esm({
  "lib/meta/icon_color-rgb.svg.ts"() {
    meta204 = {
      "description": "The color RGB icon represents the red, green, and blue color channels used in digital media to create a wide spectrum of colors.",
      "category": [
        "Media"
      ],
      "tag": [
        "RGB",
        "digital",
        "color channels",
        "spectrum",
        "design",
        "editing",
        "graphics",
        "technology",
        "visual",
        "art"
      ],
      "title": "Color RGB"
    };
    icon_color_rgb_svg_default = meta204;
  }
});

// lib/meta/icon_color-swatches.svg.ts
var icon_color_swatches_svg_exports = {};
__export(icon_color_swatches_svg_exports, {
  default: () => icon_color_swatches_svg_default,
  meta: () => meta205
});
var meta205, icon_color_swatches_svg_default;
var init_icon_color_swatches_svg = __esm({
  "lib/meta/icon_color-swatches.svg.ts"() {
    meta205 = {
      "description": "Color swatches icon for selecting and displaying various color options.",
      "category": [
        "Media"
      ],
      "tag": [
        "color",
        "swatches",
        "palette",
        "design",
        "selection",
        "options",
        "interface",
        "tool",
        "artist",
        "creative"
      ],
      "title": "Color Swatches"
    };
    icon_color_swatches_svg_default = meta205;
  }
});

// lib/meta/icon_desktop.svg.ts
var icon_desktop_svg_exports = {};
__export(icon_desktop_svg_exports, {
  default: () => icon_desktop_svg_default,
  meta: () => meta206
});
var meta206, icon_desktop_svg_default;
var init_icon_desktop_svg = __esm({
  "lib/meta/icon_desktop.svg.ts"() {
    meta206 = {
      "description": "The desktop icon represents a computer desktop, typically showcasing icons, shortcuts, and files arranged on the screen. This icon is commonly used to symbolize digital organization or computer-related tasks.",
      "category": [
        "Interface",
        "Media"
      ],
      "tag": [
        "computer",
        "desktop",
        "icons",
        "shortcuts",
        "files",
        "organization",
        "screen",
        "digital",
        "technology",
        "computing"
      ],
      "title": "Desktop"
    };
    icon_desktop_svg_default = meta206;
  }
});

// lib/meta/icon_filmroll.svg.ts
var icon_filmroll_svg_exports = {};
__export(icon_filmroll_svg_exports, {
  default: () => icon_filmroll_svg_default,
  meta: () => meta207
});
var meta207, icon_filmroll_svg_default;
var init_icon_filmroll_svg = __esm({
  "lib/meta/icon_filmroll.svg.ts"() {
    meta207 = {
      "description": "The filmroll icon represents traditional photographic film used in analog cameras. It symbolizes nostalgia and vintage photography.",
      "category": [
        "Media"
      ],
      "tag": [
        "film",
        "camera",
        "photography",
        "analog",
        "vintage",
        "photo",
        "photograph",
        "retro",
        "cinema",
        "roll"
      ],
      "title": "Filmroll"
    };
    icon_filmroll_svg_default = meta207;
  }
});

// lib/meta/icon_gamepad-classic.svg.ts
var icon_gamepad_classic_svg_exports = {};
__export(icon_gamepad_classic_svg_exports, {
  default: () => icon_gamepad_classic_svg_default,
  meta: () => meta208
});
var meta208, icon_gamepad_classic_svg_default;
var init_icon_gamepad_classic_svg = __esm({
  "lib/meta/icon_gamepad-classic.svg.ts"() {
    meta208 = {
      "description": "A classic gamepad icon commonly used to represent video games and gaming consoles.",
      "category": [
        "Media",
        "Interface"
      ],
      "tag": [
        "video games",
        "gaming",
        "console",
        "controller",
        "retro",
        "joystick",
        "entertainment",
        "technology",
        "classic",
        "arcade"
      ],
      "title": "Gamepad Classic"
    };
    icon_gamepad_classic_svg_default = meta208;
  }
});

// lib/meta/icon_gamepad.svg.ts
var icon_gamepad_svg_exports = {};
__export(icon_gamepad_svg_exports, {
  default: () => icon_gamepad_svg_default,
  meta: () => meta209
});
var meta209, icon_gamepad_svg_default;
var init_icon_gamepad_svg = __esm({
  "lib/meta/icon_gamepad.svg.ts"() {
    meta209 = {
      "description": "The gamepad icon represents a controller used for playing video games. It typically has buttons and joysticks for controlling characters and actions on a screen.",
      "category": [
        "Media"
      ],
      "tag": [
        "gaming",
        "controller",
        "entertainment",
        "video games",
        "console",
        "technology",
        "leisure",
        "electronics",
        "joystick",
        "fun"
      ],
      "title": "Gamepad"
    };
    icon_gamepad_svg_default = meta209;
  }
});

// lib/meta/icon_headphones.svg.ts
var icon_headphones_svg_exports = {};
__export(icon_headphones_svg_exports, {
  default: () => icon_headphones_svg_default,
  meta: () => meta210
});
var meta210, icon_headphones_svg_default;
var init_icon_headphones_svg = __esm({
  "lib/meta/icon_headphones.svg.ts"() {
    meta210 = {
      "description": "The headphones icon represents audio devices used to listen to music or other audio content. It is commonly associated with media consumption and entertainment.",
      "category": [
        "Media",
        "Symbol"
      ],
      "tag": [
        "music",
        "audio",
        "sound",
        "listening",
        "entertainment",
        "technology",
        "headset",
        "earphones",
        "devices",
        "streaming"
      ],
      "title": "Headphones"
    };
    icon_headphones_svg_default = meta210;
  }
});

// lib/meta/icon_highlight.svg.ts
var icon_highlight_svg_exports = {};
__export(icon_highlight_svg_exports, {
  default: () => icon_highlight_svg_default,
  meta: () => meta211
});
var meta211, icon_highlight_svg_default;
var init_icon_highlight_svg = __esm({
  "lib/meta/icon_highlight.svg.ts"() {
    meta211 = {
      "description": "The highlight icon is typically used to mark or emphasize important information in media files such as text or images.",
      "category": [
        "Media"
      ],
      "tag": [
        "highlight",
        "mark",
        "emphasis",
        "important",
        "media",
        "files",
        "text",
        "images",
        "multimedia",
        "content"
      ],
      "title": "Highlight"
    };
    icon_highlight_svg_default = meta211;
  }
});

// lib/meta/icon_image.svg.ts
var icon_image_svg_exports = {};
__export(icon_image_svg_exports, {
  default: () => icon_image_svg_default,
  meta: () => meta212
});
var meta212, icon_image_svg_default;
var init_icon_image_svg = __esm({
  "lib/meta/icon_image.svg.ts"() {
    meta212 = {
      "description": "An icon representing an image, typically used to symbolize visual content such as photos or graphics.",
      "category": [
        "Media"
      ],
      "tag": [
        "picture",
        "photograph",
        "graphics",
        "visual",
        "photo",
        "design",
        "artwork",
        "digital",
        "content",
        "multimedia"
      ],
      "title": "Image"
    };
    icon_image_svg_default = meta212;
  }
});

// lib/meta/icon_joystick.svg.ts
var icon_joystick_svg_exports = {};
__export(icon_joystick_svg_exports, {
  default: () => icon_joystick_svg_default,
  meta: () => meta213
});
var meta213, icon_joystick_svg_default;
var init_icon_joystick_svg = __esm({
  "lib/meta/icon_joystick.svg.ts"() {
    meta213 = {
      "description": "A joystick icon typically represents gaming and interactive entertainment. It often symbolizes control and navigation in games or multimedia applications.",
      "category": [
        "Media"
      ],
      "tag": [
        "gaming",
        "control",
        "navigation",
        "entertainment",
        "interactive",
        "technology",
        "console",
        "video games",
        "arcade",
        "player"
      ],
      "title": "Joystick"
    };
    icon_joystick_svg_default = meta213;
  }
});

// lib/meta/icon_laptop.svg.ts
var icon_laptop_svg_exports = {};
__export(icon_laptop_svg_exports, {
  default: () => icon_laptop_svg_default,
  meta: () => meta214
});
var meta214, icon_laptop_svg_default;
var init_icon_laptop_svg = __esm({
  "lib/meta/icon_laptop.svg.ts"() {
    meta214 = {
      "description": "The laptop icon depicts a portable computer with a screen and keyboard, commonly used for work, entertainment, and communication purposes.",
      "category": [
        "Media",
        "Interface"
      ],
      "tag": [
        "technology",
        "device",
        "computer",
        "portable",
        "work",
        "communication",
        "laptop",
        "screen",
        "keyboard",
        "entertainment"
      ],
      "title": "Laptop"
    };
    icon_laptop_svg_default = meta214;
  }
});

// lib/meta/icon_mail-open.svg.ts
var icon_mail_open_svg_exports = {};
__export(icon_mail_open_svg_exports, {
  default: () => icon_mail_open_svg_default,
  meta: () => meta215
});
var meta215, icon_mail_open_svg_default;
var init_icon_mail_open_svg = __esm({
  "lib/meta/icon_mail-open.svg.ts"() {
    meta215 = {
      "description": "The mail-open icon represents an open envelope typically used to indicate received emails or messages. It is commonly used in email applications and communication interfaces.",
      "category": [
        "Media"
      ],
      "tag": [
        "email",
        "envelope",
        "communication",
        "message",
        "inbox",
        "notification",
        "inbox",
        "correspondence",
        "open",
        "letter"
      ],
      "title": "Mail Open"
    };
    icon_mail_open_svg_default = meta215;
  }
});

// lib/meta/icon_mail.svg.ts
var icon_mail_svg_exports = {};
__export(icon_mail_svg_exports, {
  default: () => icon_mail_svg_default,
  meta: () => meta216
});
var meta216, icon_mail_svg_default;
var init_icon_mail_svg = __esm({
  "lib/meta/icon_mail.svg.ts"() {
    meta216 = {
      "description": "The mail icon represents electronic mail, often used as a symbol for emails and communication. It typically depicts an envelope with a paper inside, indicating sending and receiving messages.",
      "category": [
        "Media"
      ],
      "tag": [
        "communication",
        "message",
        "envelope",
        "email",
        "inbox",
        "outbox",
        "correspondence",
        "contact",
        "letter",
        "inbox"
      ],
      "title": "Mail"
    };
    icon_mail_svg_default = meta216;
  }
});

// lib/meta/icon_media.svg.ts
var icon_media_svg_exports = {};
__export(icon_media_svg_exports, {
  default: () => icon_media_svg_default,
  meta: () => meta217
});
var meta217, icon_media_svg_default;
var init_icon_media_svg = __esm({
  "lib/meta/icon_media.svg.ts"() {
    meta217 = {
      "description": "The media icon represents anything related to media, such as music, video, or images. It is commonly used to indicate multimedia content or players.",
      "category": [
        "Media"
      ],
      "tag": [
        "music",
        "video",
        "images",
        "multimedia",
        "content",
        "player",
        "entertainment",
        "communication",
        "audio",
        "visual"
      ],
      "title": "Media"
    };
    icon_media_svg_default = meta217;
  }
});

// lib/meta/icon_microphone.svg.ts
var icon_microphone_svg_exports = {};
__export(icon_microphone_svg_exports, {
  default: () => icon_microphone_svg_default,
  meta: () => meta218
});
var meta218, icon_microphone_svg_default;
var init_icon_microphone_svg = __esm({
  "lib/meta/icon_microphone.svg.ts"() {
    meta218 = {
      "description": "A microphone icon typically represents recording, voice commands, sound input or audio messages in various media applications or devices.",
      "category": [
        "Media"
      ],
      "tag": [
        "microphone",
        "record",
        "voice command",
        "audio",
        "sound input",
        "messaging",
        "recording device",
        "communication",
        "technology"
      ],
      "title": "Microphone"
    };
    icon_microphone_svg_default = meta218;
  }
});

// lib/meta/icon_music-note-single.svg.ts
var icon_music_note_single_svg_exports = {};
__export(icon_music_note_single_svg_exports, {
  default: () => icon_music_note_single_svg_default,
  meta: () => meta219
});
var meta219, icon_music_note_single_svg_default;
var init_icon_music_note_single_svg = __esm({
  "lib/meta/icon_music-note-single.svg.ts"() {
    meta219 = {
      "description": "The music note single icon represents a single musical note. It is commonly used to symbolize music, sound, melody, or audio in various media-related contexts.",
      "category": [
        "Media"
      ],
      "tag": [
        "music",
        "note",
        "single",
        "sound",
        "melody",
        "audio",
        "media",
        "musical",
        "song",
        "tune"
      ],
      "title": "Music Note Single"
    };
    icon_music_note_single_svg_default = meta219;
  }
});

// lib/meta/icon_music-note.svg.ts
var icon_music_note_svg_exports = {};
__export(icon_music_note_svg_exports, {
  default: () => icon_music_note_svg_default,
  meta: () => meta220
});
var meta220, icon_music_note_svg_default;
var init_icon_music_note_svg = __esm({
  "lib/meta/icon_music-note.svg.ts"() {
    meta220 = {
      "description": "The music note icon represents audio, music, sound, melody, or songs. It is commonly used to symbolize anything related to music or audio content.",
      "category": [
        "Media"
      ],
      "tag": [
        "music",
        "note",
        "sound",
        "melody",
        "audio",
        "media",
        "song",
        "musical",
        "tune",
        "listen"
      ],
      "title": "Music Note"
    };
    icon_music_note_svg_default = meta220;
  }
});

// lib/meta/icon_nes-controller.svg.ts
var icon_nes_controller_svg_exports = {};
__export(icon_nes_controller_svg_exports, {
  default: () => icon_nes_controller_svg_default,
  meta: () => meta221
});
var meta221, icon_nes_controller_svg_default;
var init_icon_nes_controller_svg = __esm({
  "lib/meta/icon_nes-controller.svg.ts"() {
    meta221 = {
      "description": "A retro video game controller icon inspired by the NES controller. It features a classic design with a D-pad, A and B buttons, and Start and Select buttons.",
      "category": [
        "Media",
        "Interface"
      ],
      "tag": [
        "nes",
        "controller",
        "retro",
        "video game",
        "gaming",
        "console",
        "classic",
        "buttons",
        "electronics",
        "technology"
      ],
      "title": "NES Controller"
    };
    icon_nes_controller_svg_default = meta221;
  }
});

// lib/meta/icon_pacman.svg.ts
var icon_pacman_svg_exports = {};
__export(icon_pacman_svg_exports, {
  default: () => icon_pacman_svg_default,
  meta: () => meta222
});
var meta222, icon_pacman_svg_default;
var init_icon_pacman_svg = __esm({
  "lib/meta/icon_pacman.svg.ts"() {
    meta222 = {
      "description": "Pacman is a classic video game icon featuring a yellow circle with a missing slice representing the character Pac-Man.",
      "category": [
        "Media"
      ],
      "tag": [
        "video game",
        "arcade",
        "character",
        "retro",
        "classic",
        "yellow",
        "slice",
        "eating",
        "maze",
        "ghosts"
      ],
      "title": "Pacman"
    };
    icon_pacman_svg_default = meta222;
  }
});

// lib/meta/icon_paint-roller.svg.ts
var icon_paint_roller_svg_exports = {};
__export(icon_paint_roller_svg_exports, {
  default: () => icon_paint_roller_svg_default,
  meta: () => meta223
});
var meta223, icon_paint_roller_svg_default;
var init_icon_paint_roller_svg = __esm({
  "lib/meta/icon_paint-roller.svg.ts"() {
    meta223 = {
      "description": "A paint roller icon typically used to represent painting, decoration, renovation, or design concepts in various media projects.",
      "category": [
        "Media"
      ],
      "tag": [
        "paint",
        "roller",
        "painting",
        "decoration",
        "renovation",
        "design",
        "tool",
        "craft",
        "project"
      ],
      "title": "Paint Roller"
    };
    icon_paint_roller_svg_default = meta223;
  }
});

// lib/meta/icon_paperplane.svg.ts
var icon_paperplane_svg_exports = {};
__export(icon_paperplane_svg_exports, {
  default: () => icon_paperplane_svg_default,
  meta: () => meta224
});
var meta224, icon_paperplane_svg_default;
var init_icon_paperplane_svg = __esm({
  "lib/meta/icon_paperplane.svg.ts"() {
    meta224 = {
      "description": "An icon of a paper plane symbolizing sending messages or information, often associated with digital communication and social media platforms.",
      "category": [
        "Media"
      ],
      "tag": [
        "message",
        "communication",
        "information",
        "social media",
        "digital",
        "email",
        "send",
        "flight",
        "icon",
        "symbol"
      ],
      "title": "Paper Plane"
    };
    icon_paperplane_svg_default = meta224;
  }
});

// lib/meta/icon_playback-backward.svg.ts
var icon_playback_backward_svg_exports = {};
__export(icon_playback_backward_svg_exports, {
  default: () => icon_playback_backward_svg_default,
  meta: () => meta225
});
var meta225, icon_playback_backward_svg_default;
var init_icon_playback_backward_svg = __esm({
  "lib/meta/icon_playback-backward.svg.ts"() {
    meta225 = {
      "description": "The playback-backward icon is designed to represent the action of skipping or rewinding media playback to the previous track or section. This icon is commonly used in media player interfaces to allow users to go back in the timeline of a video or song.",
      "category": [
        "Media"
      ],
      "tag": [
        "backward",
        "skip",
        "media player",
        "rewind",
        "previous",
        "control",
        "music",
        "video",
        "multimedia",
        "navigation"
      ],
      "title": "Playback Backward"
    };
    icon_playback_backward_svg_default = meta225;
  }
});

// lib/meta/icon_playback-end.svg.ts
var icon_playback_end_svg_exports = {};
__export(icon_playback_end_svg_exports, {
  default: () => icon_playback_end_svg_default,
  meta: () => meta226
});
var meta226, icon_playback_end_svg_default;
var init_icon_playback_end_svg = __esm({
  "lib/meta/icon_playback-end.svg.ts"() {
    meta226 = {
      "description": "A playback-end icon typically represents the end point of a media playback. It can be used in media player applications or interfaces to indicate that the playback has reached the end.",
      "category": [
        "Media"
      ],
      "tag": [
        "media",
        "play",
        "video",
        "audio",
        "player",
        "control",
        "end",
        "stop",
        "multimedia",
        "interface"
      ],
      "title": "Playback End"
    };
    icon_playback_end_svg_default = meta226;
  }
});

// lib/meta/icon_playback-forward.svg.ts
var icon_playback_forward_svg_exports = {};
__export(icon_playback_forward_svg_exports, {
  default: () => icon_playback_forward_svg_default,
  meta: () => meta227
});
var meta227, icon_playback_forward_svg_default;
var init_icon_playback_forward_svg = __esm({
  "lib/meta/icon_playback-forward.svg.ts"() {
    meta227 = {
      "description": "The playback-forward icon is used in media players to skip forward to the next track or scene in a video or audio playlist. It symbolizes fast forward and advancing in a playback sequence.",
      "category": [
        "Media"
      ],
      "tag": [
        "media player",
        "skip forward",
        "fast forward",
        "advance",
        "track",
        "video",
        "audio",
        "playlist",
        "control",
        "multimedia"
      ],
      "title": "Playback Forward"
    };
    icon_playback_forward_svg_default = meta227;
  }
});

// lib/meta/icon_playback-next.svg.ts
var icon_playback_next_svg_exports = {};
__export(icon_playback_next_svg_exports, {
  default: () => icon_playback_next_svg_default,
  meta: () => meta228
});
var meta228, icon_playback_next_svg_default;
var init_icon_playback_next_svg = __esm({
  "lib/meta/icon_playback-next.svg.ts"() {
    meta228 = {
      "description": "The playback-next icon is used to indicate moving to the next media content, such as the next song or video in a playlist.",
      "category": [
        "Media"
      ],
      "tag": [
        "music",
        "video",
        "playlist",
        "skip",
        "forward",
        "control",
        "multimedia",
        "entertainment",
        "arrow"
      ],
      "title": "Playback Next"
    };
    icon_playback_next_svg_default = meta228;
  }
});

// lib/meta/icon_playback-pause.svg.ts
var icon_playback_pause_svg_exports = {};
__export(icon_playback_pause_svg_exports, {
  default: () => icon_playback_pause_svg_default,
  meta: () => meta229
});
var meta229, icon_playback_pause_svg_default;
var init_icon_playback_pause_svg = __esm({
  "lib/meta/icon_playback-pause.svg.ts"() {
    meta229 = {
      "description": "The playback-pause icon is used to represent the pause function in media players or devices. It typically indicates that the current media is paused and can be resumed.",
      "category": [
        "Media"
      ],
      "tag": [
        "pause",
        "playback",
        "media player",
        "music",
        "video",
        "control",
        "multimedia",
        "pause button",
        "entertainment",
        "audio"
      ],
      "title": "Playback Pause"
    };
    icon_playback_pause_svg_default = meta229;
  }
});

// lib/meta/icon_playback-play.svg.ts
var icon_playback_play_svg_exports = {};
__export(icon_playback_play_svg_exports, {
  default: () => icon_playback_play_svg_default,
  meta: () => meta230
});
var meta230, icon_playback_play_svg_default;
var init_icon_playback_play_svg = __esm({
  "lib/meta/icon_playback-play.svg.ts"() {
    meta230 = {
      "description": "The 'playback-play' icon represents a play button commonly used in media players to start playing a video or audio file.",
      "category": [
        "Media"
      ],
      "tag": [
        "play",
        "start",
        "video",
        "audio",
        "music",
        "multimedia",
        "button",
        "control",
        "player",
        "playback"
      ],
      "title": "Playback Play"
    };
    icon_playback_play_svg_default = meta230;
  }
});

// lib/meta/icon_playback-previous.svg.ts
var icon_playback_previous_svg_exports = {};
__export(icon_playback_previous_svg_exports, {
  default: () => icon_playback_previous_svg_default,
  meta: () => meta231
});
var meta231, icon_playback_previous_svg_default;
var init_icon_playback_previous_svg = __esm({
  "lib/meta/icon_playback-previous.svg.ts"() {
    meta231 = {
      "description": "The 'playback-previous' icon is used to go back to the previous media file during playback. It is commonly found in media player applications.",
      "category": [
        "Media"
      ],
      "tag": [
        "playback",
        "previous",
        "media player",
        "skip",
        "back",
        "multimedia",
        "control",
        "audio",
        "video",
        "navigation"
      ],
      "title": "Playback Previous"
    };
    icon_playback_previous_svg_default = meta231;
  }
});

// lib/meta/icon_playback-start.svg.ts
var icon_playback_start_svg_exports = {};
__export(icon_playback_start_svg_exports, {
  default: () => icon_playback_start_svg_default,
  meta: () => meta232
});
var meta232, icon_playback_start_svg_default;
var init_icon_playback_start_svg = __esm({
  "lib/meta/icon_playback-start.svg.ts"() {
    meta232 = {
      "description": "The playback-start icon represents the beginning of a media playback, typically used in multimedia applications or video players.",
      "category": [
        "Media"
      ],
      "tag": [
        "playback",
        "start",
        "media control",
        "audio",
        "video",
        "beginning",
        "multimedia",
        "player",
        "control"
      ],
      "title": "Playback Start"
    };
    icon_playback_start_svg_default = meta232;
  }
});

// lib/meta/icon_playback-stop.svg.ts
var icon_playback_stop_svg_exports = {};
__export(icon_playback_stop_svg_exports, {
  default: () => icon_playback_stop_svg_default,
  meta: () => meta233
});
var meta233, icon_playback_stop_svg_default;
var init_icon_playback_stop_svg = __esm({
  "lib/meta/icon_playback-stop.svg.ts"() {
    meta233 = {
      "description": "The playback-stop icon is used to represent the action of stopping playback in media players and similar applications.",
      "category": [
        "Media"
      ],
      "tag": [
        "stop",
        "control",
        "multimedia",
        "video",
        "audio",
        "music",
        "player",
        "button",
        "interface",
        "symbol"
      ],
      "title": "Playback Stop"
    };
    icon_playback_stop_svg_default = meta233;
  }
});

// lib/meta/icon_printer.svg.ts
var icon_printer_svg_exports = {};
__export(icon_printer_svg_exports, {
  default: () => icon_printer_svg_default,
  meta: () => meta234
});
var meta234, icon_printer_svg_default;
var init_icon_printer_svg = __esm({
  "lib/meta/icon_printer.svg.ts"() {
    meta234 = {
      "description": "An icon representing a printer, often used to indicate the action of printing a physical copy of a digital document or image.",
      "category": [
        "Media"
      ],
      "tag": [
        "office",
        "equipment",
        "printing",
        "copy",
        "paper",
        "technology",
        "paperwork",
        "output",
        "device",
        "print job"
      ],
      "title": "Printer"
    };
    icon_printer_svg_default = meta234;
  }
});

// lib/meta/icon_record.svg.ts
var icon_record_svg_exports = {};
__export(icon_record_svg_exports, {
  default: () => icon_record_svg_default,
  meta: () => meta235
});
var meta235, icon_record_svg_default;
var init_icon_record_svg = __esm({
  "lib/meta/icon_record.svg.ts"() {
    meta235 = {
      "description": "An icon representing a record, often used to symbolize starting or stopping audio or video recording.",
      "category": [
        "Media"
      ],
      "tag": [
        "audio",
        "video",
        "start",
        "stop",
        "media player",
        "record button",
        "technology",
        "multimedia",
        "streaming"
      ],
      "title": "Record"
    };
    icon_record_svg_default = meta235;
  }
});

// lib/meta/icon_reels.svg.ts
var icon_reels_svg_exports = {};
__export(icon_reels_svg_exports, {
  default: () => icon_reels_svg_default,
  meta: () => meta236
});
var meta236, icon_reels_svg_default;
var init_icon_reels_svg = __esm({
  "lib/meta/icon_reels.svg.ts"() {
    meta236 = {
      "description": "The reels icon represents a traditional way of watching media content usually in the form of films or videos. It symbolizes the classic method of entertainment through physical reels of film.",
      "category": [
        "Media"
      ],
      "tag": [
        "entertainment",
        "movies",
        "videos",
        "cinema",
        "classic",
        "film reel",
        "old-fashioned",
        "nostalgia",
        "projection",
        "traditional"
      ],
      "title": "Reels"
    };
    icon_reels_svg_default = meta236;
  }
});

// lib/meta/icon_tablet-landscape.svg.ts
var icon_tablet_landscape_svg_exports = {};
__export(icon_tablet_landscape_svg_exports, {
  default: () => icon_tablet_landscape_svg_default,
  meta: () => meta237
});
var meta237, icon_tablet_landscape_svg_default;
var init_icon_tablet_landscape_svg = __esm({
  "lib/meta/icon_tablet-landscape.svg.ts"() {
    meta237 = {
      "description": "The tablet-landscape icon represents a digital tablet or device in landscape orientation, commonly used for media consumption or playing games.",
      "category": [
        "Media"
      ],
      "tag": [
        "tablet",
        "landscape",
        "device",
        "digital",
        "screen",
        "technology",
        "entertainment",
        "multimedia",
        "display",
        "horizontal"
      ],
      "title": "Tablet Landscape"
    };
    icon_tablet_landscape_svg_default = meta237;
  }
});

// lib/meta/icon_tablet.svg.ts
var icon_tablet_svg_exports = {};
__export(icon_tablet_svg_exports, {
  default: () => icon_tablet_svg_default,
  meta: () => meta238
});
var meta238, icon_tablet_svg_default;
var init_icon_tablet_svg = __esm({
  "lib/meta/icon_tablet.svg.ts"() {
    meta238 = {
      "description": "The tablet icon represents a portable device with a touchscreen interface, typically larger than a smartphone but smaller than a laptop, used for various media and communication purposes.",
      "category": [
        "Media",
        "Interface"
      ],
      "tag": [
        "tablet",
        "device",
        "touchscreen",
        "portable",
        "communication",
        "media",
        "technology",
        "screen",
        "digital",
        "gadget"
      ],
      "title": "Tablet"
    };
    icon_tablet_svg_default = meta238;
  }
});

// lib/meta/icon_television.svg.ts
var icon_television_svg_exports = {};
__export(icon_television_svg_exports, {
  default: () => icon_television_svg_default,
  meta: () => meta239
});
var meta239, icon_television_svg_default;
var init_icon_television_svg = __esm({
  "lib/meta/icon_television.svg.ts"() {
    meta239 = {
      "description": "An icon representing a television, typically used to indicate the presence of a TV or for media-related purposes.",
      "category": [
        "Media"
      ],
      "tag": [
        "television",
        "screen",
        "entertainment",
        "broadcast",
        "watching",
        "shows",
        "movies",
        "channel",
        "program",
        "media"
      ],
      "title": "Television"
    };
    icon_television_svg_default = meta239;
  }
});

// lib/meta/icon_terminal.svg.ts
var icon_terminal_svg_exports = {};
__export(icon_terminal_svg_exports, {
  default: () => icon_terminal_svg_default,
  meta: () => meta240
});
var meta240, icon_terminal_svg_default;
var init_icon_terminal_svg = __esm({
  "lib/meta/icon_terminal.svg.ts"() {
    meta240 = {
      "description": "The terminal icon represents a command-line interface used for entering text commands to communicate with the computer system. This icon is commonly used by developers and system administrators for executing various tasks.",
      "category": [
        "Interface",
        "Media"
      ],
      "tag": [
        "code",
        "programming",
        "console",
        "command",
        "computing",
        "shell",
        "developer",
        "system",
        "administrator",
        "IT"
      ],
      "title": "Terminal"
    };
    icon_terminal_svg_default = meta240;
  }
});

// lib/meta/icon_video-camera.svg.ts
var icon_video_camera_svg_exports = {};
__export(icon_video_camera_svg_exports, {
  default: () => icon_video_camera_svg_default,
  meta: () => meta241
});
var meta241, icon_video_camera_svg_default;
var init_icon_video_camera_svg = __esm({
  "lib/meta/icon_video-camera.svg.ts"() {
    meta241 = {
      "description": "The video-camera icon represents a digital device used to capture and record videos. It is commonly used in multimedia applications, video players, and recording features.",
      "category": [
        "Media"
      ],
      "tag": [
        "video",
        "camera",
        "recording",
        "multimedia",
        "film",
        "cinema",
        "technology",
        "digital",
        "device",
        "record"
      ],
      "title": "Video Camera"
    };
    icon_video_camera_svg_default = meta241;
  }
});

// lib/meta/icon_videos.svg.ts
var icon_videos_svg_exports = {};
__export(icon_videos_svg_exports, {
  default: () => icon_videos_svg_default,
  meta: () => meta242
});
var meta242, icon_videos_svg_default;
var init_icon_videos_svg = __esm({
  "lib/meta/icon_videos.svg.ts"() {
    meta242 = {
      "description": "The videos icon represents a collection of multimedia recordings, typically displayed in a sequential fashion.",
      "category": [
        "Media"
      ],
      "tag": [
        "video",
        "multimedia",
        "recordings",
        "movies",
        "clips",
        "streaming",
        "entertainment",
        "digital",
        "footage",
        "playback"
      ],
      "title": "Videos"
    };
    icon_videos_svg_default = meta242;
  }
});

// lib/meta/icon_volume-i.svg.ts
var icon_volume_i_svg_exports = {};
__export(icon_volume_i_svg_exports, {
  default: () => icon_volume_i_svg_default,
  meta: () => meta243
});
var meta243, icon_volume_i_svg_default;
var init_icon_volume_i_svg = __esm({
  "lib/meta/icon_volume-i.svg.ts"() {
    meta243 = {
      "description": "The 'volume-I' icon represents an audio volume control symbol, typically indicating the mute or silent mode. It is commonly used in media player interfaces.",
      "category": [
        "Media"
      ],
      "tag": [
        "audio",
        "sound",
        "mute",
        "control",
        "interface",
        "music",
        "player",
        "multimedia",
        "speaker",
        "volume"
      ],
      "title": "Volume I"
    };
    icon_volume_i_svg_default = meta243;
  }
});

// lib/meta/icon_volume-ii.svg.ts
var icon_volume_ii_svg_exports = {};
__export(icon_volume_ii_svg_exports, {
  default: () => icon_volume_ii_svg_default,
  meta: () => meta244
});
var meta244, icon_volume_ii_svg_default;
var init_icon_volume_ii_svg = __esm({
  "lib/meta/icon_volume-ii.svg.ts"() {
    meta244 = {
      "description": "Volume II icon is a graphic representation of sound volume control. It typically features a speaker or sound waves to indicate the current volume level in media player applications or devices.",
      "category": [
        "Media"
      ],
      "tag": [
        "sound",
        "audio",
        "control",
        "media player",
        "music",
        "adjust",
        "level",
        "volume",
        "speaker",
        "icon"
      ],
      "title": "Volume II"
    };
    icon_volume_ii_svg_default = meta244;
  }
});

// lib/meta/icon_volume-iii.svg.ts
var icon_volume_iii_svg_exports = {};
__export(icon_volume_iii_svg_exports, {
  default: () => icon_volume_iii_svg_default,
  meta: () => meta245
});
var meta245, icon_volume_iii_svg_default;
var init_icon_volume_iii_svg = __esm({
  "lib/meta/icon_volume-iii.svg.ts"() {
    meta245 = {
      "description": "Volume III icon is a symbol representing the third level of sound volume control. It typically consists of three lines or bars indicating a higher volume level.",
      "category": [
        "Media"
      ],
      "tag": [
        "audio",
        "sound control",
        "music player",
        "adjust",
        "level",
        "volume up",
        "volume down",
        "multimedia",
        "audible",
        "third level"
      ],
      "title": "Volume III"
    };
    icon_volume_iii_svg_default = meta245;
  }
});

// lib/meta/icon_volume-mute.svg.ts
var icon_volume_mute_svg_exports = {};
__export(icon_volume_mute_svg_exports, {
  default: () => icon_volume_mute_svg_default,
  meta: () => meta246
});
var meta246, icon_volume_mute_svg_default;
var init_icon_volume_mute_svg = __esm({
  "lib/meta/icon_volume-mute.svg.ts"() {
    meta246 = {
      "description": "The volume-mute icon represents the action of muting the sound or audio. It is commonly used in media player controls to toggle the sound off.",
      "category": [
        "Media"
      ],
      "tag": [
        "mute",
        "audio",
        "sound",
        "music",
        "silence",
        "control",
        "button",
        "player",
        "no sound",
        "volume"
      ],
      "title": "Volume Mute"
    };
    icon_volume_mute_svg_default = meta246;
  }
});

// lib/meta/icon_volume-off.svg.ts
var icon_volume_off_svg_exports = {};
__export(icon_volume_off_svg_exports, {
  default: () => icon_volume_off_svg_default,
  meta: () => meta247
});
var meta247, icon_volume_off_svg_default;
var init_icon_volume_off_svg = __esm({
  "lib/meta/icon_volume-off.svg.ts"() {
    meta247 = {
      "description": "The volume-off icon typically represents a state where the sound or audio is muted or turned off. It is commonly used in media players, audio settings, and devices to indicate that there is no sound output.",
      "category": [
        "Media"
      ],
      "tag": [
        "mute",
        "sound",
        "audio",
        "quiet",
        "no volume",
        "silence",
        "music",
        "media player",
        "volume control",
        "mute icon"
      ],
      "title": "Volume Off"
    };
    icon_volume_off_svg_default = meta247;
  }
});

// lib/meta/icon_website.svg.ts
var icon_website_svg_exports = {};
__export(icon_website_svg_exports, {
  default: () => icon_website_svg_default,
  meta: () => meta248
});
var meta248, icon_website_svg_default;
var init_icon_website_svg = __esm({
  "lib/meta/icon_website.svg.ts"() {
    meta248 = {
      "description": "The website icon represents a digital platform that contains a collection of related web pages including multimedia content such as images, videos, and text. It is commonly used to access information, products, and services on the internet.",
      "category": [
        "Media",
        "Interface"
      ],
      "tag": [
        "Internet",
        "Online",
        "Web design",
        "Digital",
        "Technology",
        "Browser",
        "Homepage",
        "URL",
        "Hyperlink",
        "Search"
      ],
      "title": "Website"
    };
    icon_website_svg_default = meta248;
  }
});

// lib/meta/icon_wifi 2.svg.ts
var icon_wifi_2_svg_exports = {};
__export(icon_wifi_2_svg_exports, {
  default: () => icon_wifi_2_svg_default,
  meta: () => meta249
});
var meta249, icon_wifi_2_svg_default;
var init_icon_wifi_2_svg = __esm({
  "lib/meta/icon_wifi 2.svg.ts"() {
    meta249 = {
      "description": "The 'wifi 2' icon represents a symbol of a wireless connection with two bars. It is commonly used to indicate the strength of a Wi-Fi signal.",
      "category": [
        "Media"
      ],
      "tag": [
        "wifi",
        "signal",
        "internet",
        "connection",
        "network",
        "technology",
        "communication",
        "wireless",
        "bars"
      ],
      "title": "Wifi 2"
    };
    icon_wifi_2_svg_default = meta249;
  }
});

// lib/meta/icon_wifi 3.svg.ts
var icon_wifi_3_svg_exports = {};
__export(icon_wifi_3_svg_exports, {
  default: () => icon_wifi_3_svg_default,
  meta: () => meta250
});
var meta250, icon_wifi_3_svg_default;
var init_icon_wifi_3_svg = __esm({
  "lib/meta/icon_wifi 3.svg.ts"() {
    meta250 = {
      "description": "An icon depicting three ascending bars symbolizing a strong wifi signal strength.",
      "category": [
        "Media"
      ],
      "tag": [
        "wifi",
        "wireless",
        "internet",
        "connection",
        "signal strength",
        "bars",
        "communication",
        "technology",
        "network",
        "icon"
      ],
      "title": "Wifi 3"
    };
    icon_wifi_3_svg_default = meta250;
  }
});

// lib/meta/icon_wifi-rounded.svg.ts
var icon_wifi_rounded_svg_exports = {};
__export(icon_wifi_rounded_svg_exports, {
  default: () => icon_wifi_rounded_svg_default,
  meta: () => meta251
});
var meta251, icon_wifi_rounded_svg_default;
var init_icon_wifi_rounded_svg = __esm({
  "lib/meta/icon_wifi-rounded.svg.ts"() {
    meta251 = {
      "description": "The wifi-rounded icon represents a rounded design of the wifi symbol, commonly used to indicate a wireless internet connection. It provides a modern and sleek look to signal the availability of internet connectivity.",
      "category": [
        "Media"
      ],
      "tag": [
        "wifi",
        "internet",
        "connection",
        "technology",
        "network",
        "wireless",
        "signal",
        "icon",
        "communication",
        "round"
      ],
      "title": "Wifi Rounded"
    };
    icon_wifi_rounded_svg_default = meta251;
  }
});

// lib/meta/icon_wifi.svg.ts
var icon_wifi_svg_exports = {};
__export(icon_wifi_svg_exports, {
  default: () => icon_wifi_svg_default,
  meta: () => meta252
});
var meta252, icon_wifi_svg_default;
var init_icon_wifi_svg = __esm({
  "lib/meta/icon_wifi.svg.ts"() {
    meta252 = {
      "description": "The wifi icon represents a wireless signal strength indicator, showing the level of connection to a wifi network.",
      "category": [
        "Media",
        "Interface"
      ],
      "tag": [
        "connection",
        "internet",
        "network",
        "signal",
        "technology",
        "communication",
        "wireless",
        "strength",
        "icon",
        "wifi"
      ],
      "title": "Wifi"
    };
    icon_wifi_svg_default = meta252;
  }
});

// lib/meta/icon_ai-face.svg.ts
var icon_ai_face_svg_exports = {};
__export(icon_ai_face_svg_exports, {
  default: () => icon_ai_face_svg_default,
  meta: () => meta253
});
var meta253, icon_ai_face_svg_default;
var init_icon_ai_face_svg = __esm({
  "lib/meta/icon_ai-face.svg.ts"() {
    meta253 = {
      "description": "An icon representing a face with artificial intelligence features, showcasing technology and futuristic concepts.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "AI",
        "artificial intelligence",
        "technology",
        "futuristic",
        "robot",
        "smart",
        "innovation",
        "information",
        "mind",
        "programming"
      ],
      "title": "AI Face"
    };
    icon_ai_face_svg_default = meta253;
  }
});

// lib/meta/icon_ai-letters-blocked.svg.ts
var icon_ai_letters_blocked_svg_exports = {};
__export(icon_ai_letters_blocked_svg_exports, {
  default: () => icon_ai_letters_blocked_svg_default,
  meta: () => meta254
});
var meta254, icon_ai_letters_blocked_svg_default;
var init_icon_ai_letters_blocked_svg = __esm({
  "lib/meta/icon_ai-letters-blocked.svg.ts"() {
    meta254 = {
      "description": "The icon shows the letters 'AI' partially blocked by a solid rectangular shape. It can symbolize obstacles related to artificial intelligence, restrictions, limitations, or issues with accessing AI technology.",
      "category": [
        "Interface"
      ],
      "tag": [
        "blocked",
        "letters",
        "artificial intelligence",
        "obstacles",
        "technology",
        "limitations",
        "access",
        "difficulty",
        "restrictions",
        "challenges"
      ],
      "title": "AI Letters Blocked"
    };
    icon_ai_letters_blocked_svg_default = meta254;
  }
});

// lib/meta/icon_ai-letters-circled.svg.ts
var icon_ai_letters_circled_svg_exports = {};
__export(icon_ai_letters_circled_svg_exports, {
  default: () => icon_ai_letters_circled_svg_default,
  meta: () => meta255
});
var meta255, icon_ai_letters_circled_svg_default;
var init_icon_ai_letters_circled_svg = __esm({
  "lib/meta/icon_ai-letters-circled.svg.ts"() {
    meta255 = {
      "description": "The icon features the letters 'AI' enclosed in circles. It represents artificial intelligence concepts and technologies.",
      "category": [
        "Symbol",
        "Interface"
      ],
      "tag": [
        "AI",
        "Letters",
        "Circles",
        "Technology",
        "Artificial intelligence",
        "Alphabet",
        "Communication",
        "Digital",
        "Symbolic",
        "Science"
      ],
      "title": "AI Letters Circled"
    };
    icon_ai_letters_circled_svg_default = meta255;
  }
});

// lib/meta/icon_ai-letters.svg.ts
var icon_ai_letters_svg_exports = {};
__export(icon_ai_letters_svg_exports, {
  default: () => icon_ai_letters_svg_default,
  meta: () => meta256
});
var meta256, icon_ai_letters_svg_default;
var init_icon_ai_letters_svg = __esm({
  "lib/meta/icon_ai-letters.svg.ts"() {
    meta256 = {
      "description": "The AI-letters icon features the letters A and I merged together to form a unique design. It symbolizes artificial intelligence and can be used to represent related technology or concepts.",
      "category": [
        "Symbol",
        "Interface"
      ],
      "tag": [
        "AI",
        "artificial intelligence",
        "technology",
        "letters",
        "design",
        "merge",
        "innovation",
        "digital",
        "logo",
        "typing"
      ],
      "title": "AI Letters"
    };
    icon_ai_letters_svg_default = meta256;
  }
});

// lib/meta/icon_aframe.svg.ts
var icon_aframe_svg_exports = {};
__export(icon_aframe_svg_exports, {
  default: () => icon_aframe_svg_default,
  meta: () => meta257
});
var meta257, icon_aframe_svg_default;
var init_icon_aframe_svg = __esm({
  "lib/meta/icon_aframe.svg.ts"() {
    meta257 = {
      "description": "Aframe is a versatile and powerful web framework for building virtual reality experiences on the web. It is based on HTML and allows developers to create VR content easily with simple entities and components.",
      "category": [
        "Interface",
        "Media"
      ],
      "tag": [
        "web development",
        "virtual reality",
        "HTML",
        "framework",
        "VR experience",
        "A-Frame",
        "3D modeling",
        "web components",
        "interactive",
        "immersive"
      ],
      "title": "Aframe"
    };
    icon_aframe_svg_default = meta257;
  }
});

// lib/meta/icon_artwork-frame.svg.ts
var icon_artwork_frame_svg_exports = {};
__export(icon_artwork_frame_svg_exports, {
  default: () => icon_artwork_frame_svg_default,
  meta: () => meta258
});
var meta258, icon_artwork_frame_svg_default;
var init_icon_artwork_frame_svg = __esm({
  "lib/meta/icon_artwork-frame.svg.ts"() {
    meta258 = {
      "description": "An icon representing a decorative frame often used for displaying artwork or pictures.",
      "category": [
        "Things"
      ],
      "tag": [
        "Artwork",
        "Frame",
        "Decoration",
        "Picture",
        "Gallery",
        "Display",
        "Interior design",
        "Home decor",
        "Wall art",
        "Design element"
      ],
      "title": "Artwork Frame"
    };
    icon_artwork_frame_svg_default = meta258;
  }
});

// lib/meta/icon_barbecue.svg.ts
var icon_barbecue_svg_exports = {};
__export(icon_barbecue_svg_exports, {
  default: () => icon_barbecue_svg_default,
  meta: () => meta259
});
var meta259, icon_barbecue_svg_default;
var init_icon_barbecue_svg = __esm({
  "lib/meta/icon_barbecue.svg.ts"() {
    meta259 = {
      "description": "An icon representing a barbecue grill used for outdoor cooking and grilling food such as burgers, sausages, and vegetables.",
      "category": [
        "Things",
        "Food"
      ],
      "tag": [
        "cookout",
        "grill",
        "outdoor cooking",
        "party",
        "picnic",
        "barbecue tools",
        "summer",
        "searing",
        "flame",
        "food"
      ],
      "title": "Barbecue"
    };
    icon_barbecue_svg_default = meta259;
  }
});

// lib/meta/icon_bathroom-essentials.svg.ts
var icon_bathroom_essentials_svg_exports = {};
__export(icon_bathroom_essentials_svg_exports, {
  default: () => icon_bathroom_essentials_svg_default,
  meta: () => meta260
});
var meta260, icon_bathroom_essentials_svg_default;
var init_icon_bathroom_essentials_svg = __esm({
  "lib/meta/icon_bathroom-essentials.svg.ts"() {
    meta260 = {
      "description": "The icon 'bathroom essentials' depicts various essential items commonly found in bathrooms. It includes items like soap, shampoo, toothbrush, and towels.",
      "category": [
        "Things",
        "Household"
      ],
      "tag": [
        "bathroom essentials",
        "toiletries",
        "personal care",
        "hygiene",
        "products",
        "shower",
        "bath",
        "cleanliness",
        "amenities",
        "restroom"
      ],
      "title": "Bathroom Essentials"
    };
    icon_bathroom_essentials_svg_default = meta260;
  }
});

// lib/meta/icon_binoculars.svg.ts
var icon_binoculars_svg_exports = {};
__export(icon_binoculars_svg_exports, {
  default: () => icon_binoculars_svg_default,
  meta: () => meta261
});
var meta261, icon_binoculars_svg_default;
var init_icon_binoculars_svg = __esm({
  "lib/meta/icon_binoculars.svg.ts"() {
    meta261 = {
      "description": "Binoculars icon typically represents the tool used for magnifying distant objects. It is often associated with exploration, adventure, and observation.",
      "category": [
        "Things",
        "Tools"
      ],
      "tag": [
        "exploration",
        "adventure",
        "observation",
        "view",
        "search",
        "find",
        "zoom",
        "distance",
        "magnify",
        "optics"
      ],
      "title": "Binoculars"
    };
    icon_binoculars_svg_default = meta261;
  }
});

// lib/meta/icon_blender.svg.ts
var icon_blender_svg_exports = {};
__export(icon_blender_svg_exports, {
  default: () => icon_blender_svg_default,
  meta: () => meta262
});
var meta262, icon_blender_svg_default;
var init_icon_blender_svg = __esm({
  "lib/meta/icon_blender.svg.ts"() {
    meta262 = {
      "description": "A blender is a kitchen appliance used to mix, pur\xE9e, or emulsify food and other substances. It usually consists of a blender jar with a rotating metal blade at the bottom, powered by an electric motor in the base.",
      "category": [
        "Things",
        "Kitchen"
      ],
      "tag": [
        "appliance",
        "kitchen",
        "mixing",
        "blending",
        "food preparation",
        "electric",
        "motor",
        "home appliance",
        "cooking",
        "kitchenware"
      ],
      "title": "Blender"
    };
    icon_blender_svg_default = meta262;
  }
});

// lib/meta/icon_bookcase.svg.ts
var icon_bookcase_svg_exports = {};
__export(icon_bookcase_svg_exports, {
  default: () => icon_bookcase_svg_default,
  meta: () => meta263
});
var meta263, icon_bookcase_svg_default;
var init_icon_bookcase_svg = __esm({
  "lib/meta/icon_bookcase.svg.ts"() {
    meta263 = {
      "description": "A bookcase is a piece of furniture with horizontal shelves, used to store books and other items. It is often found in libraries, homes, and offices.",
      "category": [
        "Things",
        "Furniture"
      ],
      "tag": [
        "books",
        "shelves",
        "storage",
        "library",
        "office",
        "home",
        "organization",
        "decor",
        "literature",
        "reading"
      ],
      "title": "Bookcase"
    };
    icon_bookcase_svg_default = meta263;
  }
});

// lib/meta/icon_brain.svg.ts
var icon_brain_svg_exports = {};
__export(icon_brain_svg_exports, {
  default: () => icon_brain_svg_default,
  meta: () => meta264
});
var meta264, icon_brain_svg_default;
var init_icon_brain_svg = __esm({
  "lib/meta/icon_brain.svg.ts"() {
    meta264 = {
      "description": "The brain icon is a symbol commonly used to represent intelligence, creativity, and knowledge. It can be used in various contexts such as education, science, psychology, and medicine.",
      "category": [
        "Symbol",
        "Interface"
      ],
      "tag": [
        "intelligence",
        "creativity",
        "knowledge",
        "education",
        "science",
        "psychology",
        "medicine",
        "mind",
        "cognition",
        "memory"
      ],
      "title": "Brain"
    };
    icon_brain_svg_default = meta264;
  }
});

// lib/meta/icon_branch-2.svg.ts
var icon_branch_2_svg_exports = {};
__export(icon_branch_2_svg_exports, {
  default: () => icon_branch_2_svg_default,
  meta: () => meta265
});
var meta265, icon_branch_2_svg_default;
var init_icon_branch_2_svg = __esm({
  "lib/meta/icon_branch-2.svg.ts"() {
    meta265 = {
      description: "Branch-2 icon is a simple design of a branch with two leaves, representing nature, growth, and connection. It can be used in various designs related to environment, ecology, or organic products.",
      category: ["Nature"],
      tag: ["branch", "leaves", "nature", "growth", "connection", "environment", "ecology", "organic", "tree", "plant"],
      title: "Branch 2"
    };
    icon_branch_2_svg_default = meta265;
  }
});

// lib/meta/icon_branch-3.svg.ts
var icon_branch_3_svg_exports = {};
__export(icon_branch_3_svg_exports, {
  default: () => icon_branch_3_svg_default,
  meta: () => meta266
});
var meta266, icon_branch_3_svg_default;
var init_icon_branch_3_svg = __esm({
  "lib/meta/icon_branch-3.svg.ts"() {
    meta266 = {
      description: "Branch-3 icon represents a stylized tree branch with three extensions. It can be used to symbolize growth, nature, and connection.",
      category: ["Nature"],
      tag: ["tree", "branch", "extension", "growth", "nature", "connection", "symbol", "plant", "floral", "botanical"],
      title: "Branch 3"
    };
    icon_branch_3_svg_default = meta266;
  }
});

// lib/meta/icon_branch.svg.ts
var icon_branch_svg_exports = {};
__export(icon_branch_svg_exports, {
  default: () => icon_branch_svg_default,
  meta: () => meta267
});
var meta267, icon_branch_svg_default;
var init_icon_branch_svg = __esm({
  "lib/meta/icon_branch.svg.ts"() {
    meta267 = {
      description: "This icon represents a branch, typically a part of a tree or bush. It can be used to symbolize growth, nature, or ecology.",
      category: ["Nature"],
      tag: ["tree", "plant", "nature", "branch", "ecology", "growth", "organic", "leaf", "flora", "foliage"],
      title: "Branch"
    };
    icon_branch_svg_default = meta267;
  }
});

// lib/meta/icon_bulb.svg.ts
var icon_bulb_svg_exports = {};
__export(icon_bulb_svg_exports, {
  default: () => icon_bulb_svg_default,
  meta: () => meta268
});
var meta268, icon_bulb_svg_default;
var init_icon_bulb_svg = __esm({
  "lib/meta/icon_bulb.svg.ts"() {
    meta268 = {
      "description": "An icon of a light bulb, representing ideas, creativity, and innovation.",
      "category": [
        "Things",
        "Interface"
      ],
      "tag": [
        "light bulb",
        "ideas",
        "creativity",
        "innovation",
        "electricity",
        "illumination",
        "energy",
        "solution",
        "science",
        "invention"
      ],
      "title": "Bulb"
    };
    icon_bulb_svg_default = meta268;
  }
});

// lib/meta/icon_cactus.svg.ts
var icon_cactus_svg_exports = {};
__export(icon_cactus_svg_exports, {
  default: () => icon_cactus_svg_default,
  meta: () => meta269
});
var meta269, icon_cactus_svg_default;
var init_icon_cactus_svg = __esm({
  "lib/meta/icon_cactus.svg.ts"() {
    meta269 = {
      "description": "An icon of a cactus plant commonly found in desert environments. The cactus icon can symbolize resilience, strength, and adaptability.",
      "category": [
        "Nature",
        "Plants",
        "Misc"
      ],
      "tag": [
        "desert",
        "succulent",
        "plant",
        "spiky",
        "thorny",
        "wildlife",
        "arid climate",
        "growth",
        "botany"
      ],
      "title": "Cactus"
    };
    icon_cactus_svg_default = meta269;
  }
});

// lib/meta/icon_camper.svg.ts
var icon_camper_svg_exports = {};
__export(icon_camper_svg_exports, {
  default: () => icon_camper_svg_default,
  meta: () => meta270
});
var meta270, icon_camper_svg_default;
var init_icon_camper_svg = __esm({
  "lib/meta/icon_camper.svg.ts"() {
    meta270 = {
      description: "An icon of a camper van, perfect for representing travel, camping, adventure, and outdoor activities.",
      category: ["Transport", "Misc"],
      tag: ["camping", "vehicle", "recreation", "nature", "exploration", "vacation", "holiday", "road trip", "nature", "outdoors"],
      title: "Camper"
    };
    icon_camper_svg_default = meta270;
  }
});

// lib/meta/icon_caravan.svg.ts
var icon_caravan_svg_exports = {};
__export(icon_caravan_svg_exports, {
  default: () => icon_caravan_svg_default,
  meta: () => meta271
});
var meta271, icon_caravan_svg_default;
var init_icon_caravan_svg = __esm({
  "lib/meta/icon_caravan.svg.ts"() {
    meta271 = {
      description: "A caravan is a group of travelers journeying together, typically with a group of people traveling through the desert or remote areas. The icon represents a mode of transportation and adventure.",
      category: ["Transport"],
      tag: ["caravan", "travel", "group", "journey", "desert", "adventure", "expedition", "exploration", "pack", "camping"],
      title: "Caravan"
    };
    icon_caravan_svg_default = meta271;
  }
});

// lib/meta/icon_chip.svg.ts
var icon_chip_svg_exports = {};
__export(icon_chip_svg_exports, {
  default: () => icon_chip_svg_default,
  meta: () => meta272
});
var meta272, icon_chip_svg_default;
var init_icon_chip_svg = __esm({
  "lib/meta/icon_chip.svg.ts"() {
    meta272 = {
      "description": "A small, flat, thin piece of material, typically a semiconductor or other substance, that is used as a component in electronic devices.",
      "category": [
        "Things"
      ],
      "tag": [
        "technology",
        "electronics",
        "semiconductor",
        "microchip",
        "silicon chip",
        "processor",
        "computer",
        "component",
        "circuit",
        "interface"
      ],
      "title": "Chip"
    };
    icon_chip_svg_default = meta272;
  }
});

// lib/meta/icon_cleaning-bucket.svg.ts
var icon_cleaning_bucket_svg_exports = {};
__export(icon_cleaning_bucket_svg_exports, {
  default: () => icon_cleaning_bucket_svg_default,
  meta: () => meta273
});
var meta273, icon_cleaning_bucket_svg_default;
var init_icon_cleaning_bucket_svg = __esm({
  "lib/meta/icon_cleaning-bucket.svg.ts"() {
    meta273 = {
      "description": "A depiction of a bucket used for cleaning purposes, typically filled with soap and water. The icon represents household chores and cleanliness.",
      "category": [
        "Things"
      ],
      "tag": [
        "cleaning",
        "household",
        "chores",
        "bucket",
        "cleanliness",
        "soap",
        "water",
        "cleanup",
        "sanitation",
        "maintenance"
      ],
      "title": "Cleaning Bucket"
    };
    icon_cleaning_bucket_svg_default = meta273;
  }
});

// lib/meta/icon_cleaning-spray.svg.ts
var icon_cleaning_spray_svg_exports = {};
__export(icon_cleaning_spray_svg_exports, {
  default: () => icon_cleaning_spray_svg_default,
  meta: () => meta274
});
var meta274, icon_cleaning_spray_svg_default;
var init_icon_cleaning_spray_svg = __esm({
  "lib/meta/icon_cleaning-spray.svg.ts"() {
    meta274 = {
      "description": "Icon of a cleaning spray bottle, commonly used for household cleaning purposes.",
      "category": [
        "Things",
        "Interface"
      ],
      "tag": [
        "cleaning",
        "spray",
        "household",
        "cleaning product",
        "home",
        "hygiene",
        "sanitize",
        "disinfect",
        "cleanliness",
        "maintenance"
      ],
      "title": "Cleaning Spray"
    };
    icon_cleaning_spray_svg_default = meta274;
  }
});

// lib/meta/icon_closet.svg.ts
var icon_closet_svg_exports = {};
__export(icon_closet_svg_exports, {
  default: () => icon_closet_svg_default,
  meta: () => meta275
});
var meta275, icon_closet_svg_default;
var init_icon_closet_svg = __esm({
  "lib/meta/icon_closet.svg.ts"() {
    meta275 = {
      "description": "An icon representing a closet used for storing clothes, shoes, or other personal items.",
      "category": [
        "Things",
        "Furniture"
      ],
      "tag": [
        "Storage",
        "Wardrobe",
        "Home",
        "Organization",
        "Interior design",
        "Room",
        "Household",
        "Clothes",
        "Shoes",
        "Personal items"
      ],
      "title": "Closet"
    };
    icon_closet_svg_default = meta275;
  }
});

// lib/meta/icon_coins.svg.ts
var icon_coins_svg_exports = {};
__export(icon_coins_svg_exports, {
  default: () => icon_coins_svg_default,
  meta: () => meta276
});
var meta276, icon_coins_svg_default;
var init_icon_coins_svg = __esm({
  "lib/meta/icon_coins.svg.ts"() {
    meta276 = {
      "description": "The icon of coins typically represents money or wealth. It can be used in various financial and business-related contexts to symbolize currency, savings, earnings, or transactions.",
      "category": [
        "Things"
      ],
      "tag": [
        "money",
        "wealth",
        "currency",
        "business",
        "financial",
        "savings",
        "earnings",
        "transactions",
        "finance",
        "economy"
      ],
      "title": "Coins"
    };
    icon_coins_svg_default = meta276;
  }
});

// lib/meta/icon_compass 2.svg.ts
var icon_compass_2_svg_exports = {};
__export(icon_compass_2_svg_exports, {
  default: () => icon_compass_2_svg_default,
  meta: () => meta277
});
var meta277, icon_compass_2_svg_default;
var init_icon_compass_2_svg = __esm({
  "lib/meta/icon_compass 2.svg.ts"() {
    meta277 = {
      "description": "Compass icon with a design featuring directional arrows pointing North, South, East, and West, symbolizing navigation and exploration.",
      "category": [
        "Arrows",
        "Symbol"
      ],
      "tag": [
        "direction",
        "navigation",
        "exploration",
        "orientation",
        "travel",
        "adventure",
        "mapping",
        "geography",
        "tool"
      ],
      "title": "Compass 2"
    };
    icon_compass_2_svg_default = meta277;
  }
});

// lib/meta/icon_compass.svg.ts
var icon_compass_svg_exports = {};
__export(icon_compass_svg_exports, {
  default: () => icon_compass_svg_default,
  meta: () => meta278
});
var meta278, icon_compass_svg_default;
var init_icon_compass_svg = __esm({
  "lib/meta/icon_compass.svg.ts"() {
    meta278 = {
      "description": "A compass icon typically used to represent directions and navigation. It features a circular design with cardinal points (north, south, east, west) marked on it.",
      "category": [
        "Arrows",
        "Symbol",
        "Weather"
      ],
      "tag": [
        "direction",
        "navigation",
        "travel",
        "orientation",
        "exploration",
        "mapping",
        "north",
        "south",
        "east",
        "west"
      ],
      "title": "Compass"
    };
    icon_compass_svg_default = meta278;
  }
});

// lib/meta/icon_cube-3d.svg.ts
var icon_cube_3d_svg_exports = {};
__export(icon_cube_3d_svg_exports, {
  default: () => icon_cube_3d_svg_default,
  meta: () => meta279
});
var meta279, icon_cube_3d_svg_default;
var init_icon_cube_3d_svg = __esm({
  "lib/meta/icon_cube-3d.svg.ts"() {
    meta279 = {
      "description": "The cube-3d icon represents a three-dimensional cube shape. It is often used in design and graphics to symbolize volume, depth, or the concept of a 3D space.",
      "category": [
        "Shapes"
      ],
      "tag": [
        "geometry",
        "dimensional",
        "volumetric",
        "graphics",
        "design",
        "shape",
        "space",
        "perspective",
        "solid",
        "structure"
      ],
      "title": "Cube 3D"
    };
    icon_cube_3d_svg_default = meta279;
  }
});

// lib/meta/icon_education.svg.ts
var icon_education_svg_exports = {};
__export(icon_education_svg_exports, {
  default: () => icon_education_svg_default,
  meta: () => meta280
});
var meta280, icon_education_svg_default;
var init_icon_education_svg = __esm({
  "lib/meta/icon_education.svg.ts"() {
    meta280 = {
      "description": "An icon representing education, typically associated with learning, school, and knowledge. It could include elements such as books, graduation caps, or pencils.",
      "category": [
        "Things"
      ],
      "tag": [
        "education",
        "learning",
        "school",
        "knowledge",
        "books",
        "graduation",
        "pencils",
        "study",
        "teaching",
        "lesson"
      ],
      "title": "Education"
    };
    icon_education_svg_default = meta280;
  }
});

// lib/meta/icon_factory-arm.svg.ts
var icon_factory_arm_svg_exports = {};
__export(icon_factory_arm_svg_exports, {
  default: () => icon_factory_arm_svg_default,
  meta: () => meta281
});
var meta281, icon_factory_arm_svg_default;
var init_icon_factory_arm_svg = __esm({
  "lib/meta/icon_factory-arm.svg.ts"() {
    meta281 = {
      "description": "This icon features an arm of a factory, symbolizing manufacturing or production. It can represent industries, automation, machinery, or assembly lines.",
      "category": [
        "Things",
        "Industry"
      ],
      "tag": [
        "Factory",
        "Arm",
        "Manufacturing",
        "Production",
        "Industries",
        "Automation",
        "Machinery",
        "Assembly lines",
        "Industrial revolution"
      ],
      "title": "Factory Arm"
    };
    icon_factory_arm_svg_default = meta281;
  }
});

// lib/meta/icon_factory-belt.svg.ts
var icon_factory_belt_svg_exports = {};
__export(icon_factory_belt_svg_exports, {
  default: () => icon_factory_belt_svg_default,
  meta: () => meta282
});
var meta282, icon_factory_belt_svg_default;
var init_icon_factory_belt_svg = __esm({
  "lib/meta/icon_factory-belt.svg.ts"() {
    meta282 = {
      "description": "A factory belt is a mechanical system that is used to transport items within a factory or industrial setting. It consists of a continuous belt that moves objects from one location to another.",
      "category": [
        "Transport"
      ],
      "tag": [
        "factory",
        "industrial",
        "manufacturing",
        "machinery",
        "automation",
        "production",
        "assembly line",
        "conveyor belt",
        "mechanical",
        "equipment"
      ],
      "title": "Factory Belt"
    };
    icon_factory_belt_svg_default = meta282;
  }
});

// lib/meta/icon_factory.svg.ts
var icon_factory_svg_exports = {};
__export(icon_factory_svg_exports, {
  default: () => icon_factory_svg_default,
  meta: () => meta283
});
var meta283, icon_factory_svg_default;
var init_icon_factory_svg = __esm({
  "lib/meta/icon_factory.svg.ts"() {
    meta283 = {
      "description": "An icon representing a factory or industrial building, typically used to symbolize manufacturing, production, or industry in general.",
      "category": [
        "Things",
        "Industry"
      ],
      "tag": [
        "manufacturing",
        "production",
        "industrial",
        "building",
        "facility",
        "plant",
        "workplace",
        "business",
        "economy"
      ],
      "title": "Factory"
    };
    icon_factory_svg_default = meta283;
  }
});

// lib/meta/icon_fingerprint.svg.ts
var icon_fingerprint_svg_exports = {};
__export(icon_fingerprint_svg_exports, {
  default: () => icon_fingerprint_svg_default,
  meta: () => meta284
});
var meta284, icon_fingerprint_svg_default;
var init_icon_fingerprint_svg = __esm({
  "lib/meta/icon_fingerprint.svg.ts"() {
    meta284 = {
      "description": "A fingerprint icon typically represents personal identification, security, or authentication",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "biometric",
        "security",
        "authentication",
        "identification",
        "privacy",
        "technology",
        "scan",
        "digit",
        "unique",
        "identification"
      ],
      "title": "Fingerprint"
    };
    icon_fingerprint_svg_default = meta284;
  }
});

// lib/meta/icon_fire.svg.ts
var icon_fire_svg_exports = {};
__export(icon_fire_svg_exports, {
  default: () => icon_fire_svg_default,
  meta: () => meta285
});
var meta285, icon_fire_svg_default;
var init_icon_fire_svg = __esm({
  "lib/meta/icon_fire.svg.ts"() {
    meta285 = {
      "description": "An icon depicting fire, commonly used in wayfinding signage to indicate the location of emergency exits or fire alarms.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "flame",
        "emergency",
        "warning",
        "hot",
        "danger",
        "exit",
        "alarm",
        "heat",
        "emergency evacuation",
        "safety"
      ],
      "title": "Fire"
    };
    icon_fire_svg_default = meta285;
  }
});

// lib/meta/icon_fridge.svg.ts
var icon_fridge_svg_exports = {};
__export(icon_fridge_svg_exports, {
  default: () => icon_fridge_svg_default,
  meta: () => meta286
});
var meta286, icon_fridge_svg_default;
var init_icon_fridge_svg = __esm({
  "lib/meta/icon_fridge.svg.ts"() {
    meta286 = {
      "description": "An icon representing a refrigerator, typically used in kitchens to store food and beverages at a cool temperature.",
      "category": [
        "Things",
        "Household"
      ],
      "tag": [
        "kitchen",
        "appliance",
        "cooling",
        "food storage",
        "home",
        "domestic",
        "chill",
        "refrigeration",
        "fridge"
      ],
      "title": "Fridge"
    };
    icon_fridge_svg_default = meta286;
  }
});

// lib/meta/icon_furniture-bed-2.svg.ts
var icon_furniture_bed_2_svg_exports = {};
__export(icon_furniture_bed_2_svg_exports, {
  default: () => icon_furniture_bed_2_svg_default,
  meta: () => meta287
});
var meta287, icon_furniture_bed_2_svg_default;
var init_icon_furniture_bed_2_svg = __esm({
  "lib/meta/icon_furniture-bed-2.svg.ts"() {
    meta287 = {
      "description": "An icon of a cozy double bed with pillows and bedsheets, perfect for bedroom furniture design elements.",
      "category": [
        "Misc",
        "Furniture"
      ],
      "tag": [
        "bed",
        "double bed",
        "bedroom",
        "furniture",
        "interior",
        "sleep",
        "cozy",
        "home",
        "rest",
        "comfort"
      ],
      "title": "Furniture Bed 2"
    };
    icon_furniture_bed_2_svg_default = meta287;
  }
});

// lib/meta/icon_furniture-bed-king-2.svg.ts
var icon_furniture_bed_king_2_svg_exports = {};
__export(icon_furniture_bed_king_2_svg_exports, {
  default: () => icon_furniture_bed_king_2_svg_default,
  meta: () => meta288
});
var meta288, icon_furniture_bed_king_2_svg_default;
var init_icon_furniture_bed_king_2_svg = __esm({
  "lib/meta/icon_furniture-bed-king-2.svg.ts"() {
    meta288 = {
      "description": "Icon of a king-size bed, suitable for furniture and interior design related projects.",
      "category": [
        "Misc"
      ],
      "tag": [
        "bed",
        "king",
        "furniture",
        "interior design",
        "home decor",
        "comfort",
        "luxury",
        "sleep",
        "relaxation",
        "accommodation"
      ],
      "title": "King Size Bed Icon"
    };
    icon_furniture_bed_king_2_svg_default = meta288;
  }
});

// lib/meta/icon_furniture-bed-king.svg.ts
var icon_furniture_bed_king_svg_exports = {};
__export(icon_furniture_bed_king_svg_exports, {
  default: () => icon_furniture_bed_king_svg_default,
  meta: () => meta289
});
var meta289, icon_furniture_bed_king_svg_default;
var init_icon_furniture_bed_king_svg = __esm({
  "lib/meta/icon_furniture-bed-king.svg.ts"() {
    meta289 = {
      "description": "An icon of a king-sized bed, symbolizing comfort and luxury. Perfect for furniture-related designs.",
      "category": [
        "Misc"
      ],
      "tag": [
        "furniture",
        "bed",
        "king",
        "comfort",
        "luxury",
        "home",
        "decor",
        "sleep",
        "rest",
        "interior"
      ],
      "title": "King Sized Bed Icon"
    };
    icon_furniture_bed_king_svg_default = meta289;
  }
});

// lib/meta/icon_furniture-bed-single-2.svg.ts
var icon_furniture_bed_single_2_svg_exports = {};
__export(icon_furniture_bed_single_2_svg_exports, {
  default: () => icon_furniture_bed_single_2_svg_default,
  meta: () => meta290
});
var meta290, icon_furniture_bed_single_2_svg_default;
var init_icon_furniture_bed_single_2_svg = __esm({
  "lib/meta/icon_furniture-bed-single-2.svg.ts"() {
    meta290 = {
      "description": "A single bed for one person, perfect for bedrooms or hotel rooms. The design is simple and modern, suitable for various interior styles.",
      "category": [
        "Misc"
      ],
      "tag": [
        "furniture",
        "bed",
        "single",
        "bedroom",
        "hotel",
        "modern",
        "interior",
        "home decor",
        "sleep",
        "rest"
      ],
      "title": "Single Bed"
    };
    icon_furniture_bed_single_2_svg_default = meta290;
  }
});

// lib/meta/icon_furniture-bed-single.svg.ts
var icon_furniture_bed_single_svg_exports = {};
__export(icon_furniture_bed_single_svg_exports, {
  default: () => icon_furniture_bed_single_svg_default,
  meta: () => meta291
});
var meta291, icon_furniture_bed_single_svg_default;
var init_icon_furniture_bed_single_svg = __esm({
  "lib/meta/icon_furniture-bed-single.svg.ts"() {
    meta291 = {
      "description": "A single bed for one person, perfect for bedrooms or hotel rooms. The design is simple and modern, suitable for various interior styles.",
      "category": [
        "Misc"
      ],
      "tag": [
        "furniture",
        "bed",
        "single",
        "bedroom",
        "hotel",
        "modern",
        "interior",
        "home decor",
        "sleep",
        "rest"
      ],
      "title": "Single Bed"
    };
    icon_furniture_bed_single_svg_default = meta291;
  }
});

// lib/meta/icon_furniture-bed.svg.ts
var icon_furniture_bed_svg_exports = {};
__export(icon_furniture_bed_svg_exports, {
  default: () => icon_furniture_bed_svg_default,
  meta: () => meta292
});
var meta292, icon_furniture_bed_svg_default;
var init_icon_furniture_bed_svg = __esm({
  "lib/meta/icon_furniture-bed.svg.ts"() {
    meta292 = {
      "description": "An icon of a bed, typically used as a piece of furniture for sleeping and resting. It represents comfort, relaxation, and bedroom decor.",
      "category": [
        "Things",
        "Furniture"
      ],
      "tag": [
        "Bed",
        "Sleep",
        "Rest",
        "Comfort",
        "Furniture",
        "Home",
        "Interior",
        "Decor",
        "Relaxation"
      ],
      "title": "Furniture Bed"
    };
    icon_furniture_bed_svg_default = meta292;
  }
});

// lib/meta/icon_furniture-bedside-table.svg.ts
var icon_furniture_bedside_table_svg_exports = {};
__export(icon_furniture_bedside_table_svg_exports, {
  default: () => icon_furniture_bedside_table_svg_default,
  meta: () => meta293
});
var meta293, icon_furniture_bedside_table_svg_default;
var init_icon_furniture_bedside_table_svg = __esm({
  "lib/meta/icon_furniture-bedside-table.svg.ts"() {
    meta293 = {
      "description": "An icon representing a bedside table, typically used for placing items next to a bed such as lamps, alarm clocks, or books.",
      "category": [
        "Furniture"
      ],
      "tag": [
        "furniture",
        "bedside",
        "table",
        "nightstand",
        "room",
        "decor",
        "interior",
        "home",
        "storage",
        "bedroom"
      ],
      "title": "Furniture Bedside Table"
    };
    icon_furniture_bedside_table_svg_default = meta293;
  }
});

// lib/meta/icon_furniture-chair 2.svg.ts
var icon_furniture_chair_2_svg_exports = {};
__export(icon_furniture_chair_2_svg_exports, {
  default: () => icon_furniture_chair_2_svg_default,
  meta: () => meta294
});
var meta294, icon_furniture_chair_2_svg_default;
var init_icon_furniture_chair_2_svg = __esm({
  "lib/meta/icon_furniture-chair 2.svg.ts"() {
    meta294 = {
      description: "A simple icon of a modern chair design, commonly used in furniture store websites or interior design blogs.",
      category: ["Misc"],
      tag: ["furniture", "chair", "modern", "interior design", "home decor", "seating", "furnishings", "comfort", "household", "living room"],
      title: "Furniture Chair 2"
    };
    icon_furniture_chair_2_svg_default = meta294;
  }
});

// lib/meta/icon_furniture-chair 3.svg.ts
var icon_furniture_chair_3_svg_exports = {};
__export(icon_furniture_chair_3_svg_exports, {
  default: () => icon_furniture_chair_3_svg_default,
  meta: () => meta295
});
var meta295, icon_furniture_chair_3_svg_default;
var init_icon_furniture_chair_3_svg = __esm({
  "lib/meta/icon_furniture-chair 3.svg.ts"() {
    meta295 = {
      description: "Icon of a modern chair design, suitable for use in furniture-related designs and projects.",
      category: ["Misc"],
      tag: ["furniture", "chair", "modern", "design", "interior", "seat", "home decor", "furnishing", "comfortable", "style"],
      title: "Furniture Chair 3"
    };
    icon_furniture_chair_3_svg_default = meta295;
  }
});

// lib/meta/icon_furniture-chair 4.svg.ts
var icon_furniture_chair_4_svg_exports = {};
__export(icon_furniture_chair_4_svg_exports, {
  default: () => icon_furniture_chair_4_svg_default,
  meta: () => meta296
});
var meta296, icon_furniture_chair_4_svg_default;
var init_icon_furniture_chair_4_svg = __esm({
  "lib/meta/icon_furniture-chair 4.svg.ts"() {
    meta296 = {
      description: "Icon of a modern armchair, perfect for interior design or furniture related projects.",
      category: ["Misc"],
      tag: ["furniture", "chair", "interior design", "home decor", "seating", "modern", "comfort", "style", "living room", "contemporary"],
      title: "Furniture Chair 4"
    };
    icon_furniture_chair_4_svg_default = meta296;
  }
});

// lib/meta/icon_furniture-chair.svg.ts
var icon_furniture_chair_svg_exports = {};
__export(icon_furniture_chair_svg_exports, {
  default: () => icon_furniture_chair_svg_default,
  meta: () => meta297
});
var meta297, icon_furniture_chair_svg_default;
var init_icon_furniture_chair_svg = __esm({
  "lib/meta/icon_furniture-chair.svg.ts"() {
    meta297 = {
      "description": "This icon represents a chair, commonly used as a piece of furniture for sitting. It is typically made of wood, metal, or other materials and can have various designs such as armchairs, rocking chairs, or dining chairs.",
      "category": [
        "Things",
        "Furniture"
      ],
      "tag": [
        "Chair",
        "Seat",
        "Furniture",
        "Sitting",
        "Comfort",
        "Home decor",
        "Interior design",
        "Living room",
        "Household",
        "Relaxation"
      ],
      "title": "Furniture Chair"
    };
    icon_furniture_chair_svg_default = meta297;
  }
});

// lib/meta/icon_furniture-couch 2.svg.ts
var icon_furniture_couch_2_svg_exports = {};
__export(icon_furniture_couch_2_svg_exports, {
  default: () => icon_furniture_couch_2_svg_default,
  meta: () => meta298
});
var meta298, icon_furniture_couch_2_svg_default;
var init_icon_furniture_couch_2_svg = __esm({
  "lib/meta/icon_furniture-couch 2.svg.ts"() {
    meta298 = {
      description: "This icon depicts a modern couch with a sleek design, suitable for various interior design projects and furniture-related themes.",
      category: ["Misc"],
      tag: ["furniture", "couch", "living room", "modern", "interior design", "home decor", "seat", "relaxation", "lounge", "comfort"],
      title: "Furniture Couch 2"
    };
    icon_furniture_couch_2_svg_default = meta298;
  }
});

// lib/meta/icon_furniture-couch 3.svg.ts
var icon_furniture_couch_3_svg_exports = {};
__export(icon_furniture_couch_3_svg_exports, {
  default: () => icon_furniture_couch_3_svg_default,
  meta: () => meta299
});
var meta299, icon_furniture_couch_3_svg_default;
var init_icon_furniture_couch_3_svg = __esm({
  "lib/meta/icon_furniture-couch 3.svg.ts"() {
    meta299 = {
      description: "Icon of a modern couch with unique design, perfect for interior design or furniture related projects.",
      category: ["Misc"],
      tag: ["furniture", "couch", "interior design", "home decor", "living room", "comfort", "stylish", "modern", "seating", "home furnishings"],
      title: "Furniture Couch 3"
    };
    icon_furniture_couch_3_svg_default = meta299;
  }
});

// lib/meta/icon_furniture-couch 4.svg.ts
var icon_furniture_couch_4_svg_exports = {};
__export(icon_furniture_couch_4_svg_exports, {
  default: () => icon_furniture_couch_4_svg_default,
  meta: () => meta300
});
var meta300, icon_furniture_couch_4_svg_default;
var init_icon_furniture_couch_4_svg = __esm({
  "lib/meta/icon_furniture-couch 4.svg.ts"() {
    meta300 = {
      description: "Icon of a modern 4-seater couch, suitable for furniture or interior design related projects.",
      category: ["Misc"],
      tag: ["furniture", "couch", "4-seater", "sofa", "interior design", "home decor", "living room", "comfortable", "modern", "seating"],
      title: "Furniture Couch 4"
    };
    icon_furniture_couch_4_svg_default = meta300;
  }
});

// lib/meta/icon_furniture-couch.svg.ts
var icon_furniture_couch_svg_exports = {};
__export(icon_furniture_couch_svg_exports, {
  default: () => icon_furniture_couch_svg_default,
  meta: () => meta301
});
var meta301, icon_furniture_couch_svg_default;
var init_icon_furniture_couch_svg = __esm({
  "lib/meta/icon_furniture-couch.svg.ts"() {
    meta301 = {
      "description": "A cozy and comfortable couch, perfect for relaxing and lounging on. This icon depicts a piece of furniture often found in living rooms.",
      "category": [
        "Things",
        "Furniture"
      ],
      "tag": [
        "couch",
        "sofa",
        "furniture",
        "home",
        "living room",
        "comfort",
        "relaxation",
        "interior",
        "seat",
        "lounge"
      ],
      "title": "Furniture Couch"
    };
    icon_furniture_couch_svg_default = meta301;
  }
});

// lib/meta/icon_furniture-desk.svg.ts
var icon_furniture_desk_svg_exports = {};
__export(icon_furniture_desk_svg_exports, {
  default: () => icon_furniture_desk_svg_default,
  meta: () => meta302
});
var meta302, icon_furniture_desk_svg_default;
var init_icon_furniture_desk_svg = __esm({
  "lib/meta/icon_furniture-desk.svg.ts"() {
    meta302 = {
      "description": "An icon of a desk typically used for studying or working. It includes a flat surface for placing objects and drawers for storage.",
      "category": [
        "Things",
        "Furniture"
      ],
      "tag": [
        "Desk",
        "Table",
        "Wooden",
        "Office",
        "Workspace",
        "Storage",
        "Workstation",
        "Home office",
        "Furniture "
      ],
      "title": "Furniture Desk"
    };
    icon_furniture_desk_svg_default = meta302;
  }
});

// lib/meta/icon_furniture-dressoir.svg.ts
var icon_furniture_dressoir_svg_exports = {};
__export(icon_furniture_dressoir_svg_exports, {
  default: () => icon_furniture_dressoir_svg_default,
  meta: () => meta303
});
var meta303, icon_furniture_dressoir_svg_default;
var init_icon_furniture_dressoir_svg = __esm({
  "lib/meta/icon_furniture-dressoir.svg.ts"() {
    meta303 = {
      "description": "An icon of a furniture dressoir, typically used as a decorative piece for storing items in a room.",
      "category": [
        "Things",
        "Furniture"
      ],
      "tag": [
        "storage",
        "decor",
        "home",
        "interior",
        "cabinet",
        "drawers",
        "wood",
        "furnishings",
        "organize"
      ],
      "title": "Furniture Dressoir"
    };
    icon_furniture_dressoir_svg_default = meta303;
  }
});

// lib/meta/icon_graph-up-round.svg.ts
var icon_graph_up_round_svg_exports = {};
__export(icon_graph_up_round_svg_exports, {
  default: () => icon_graph_up_round_svg_default,
  meta: () => meta304
});
var meta304, icon_graph_up_round_svg_default;
var init_icon_graph_up_round_svg = __esm({
  "lib/meta/icon_graph-up-round.svg.ts"() {
    meta304 = {
      "description": "An icon depicting an upward graph with a round shape, symbolizing growth and progress.",
      "category": [
        "Interface"
      ],
      "tag": [
        "data",
        "analysis",
        "chart",
        "statistics",
        "increase",
        "progress",
        "growth",
        "upward",
        "round",
        "graph"
      ],
      "title": "Graph Up Round"
    };
    icon_graph_up_round_svg_default = meta304;
  }
});

// lib/meta/icon_graph-up.svg.ts
var icon_graph_up_svg_exports = {};
__export(icon_graph_up_svg_exports, {
  default: () => icon_graph_up_svg_default,
  meta: () => meta305
});
var meta305, icon_graph_up_svg_default;
var init_icon_graph_up_svg = __esm({
  "lib/meta/icon_graph-up.svg.ts"() {
    meta305 = {
      "description": "The graph-up icon represents an upward trend or increase in data points. It is commonly used in presentations, reports, and data analysis to indicate growth or progress.",
      "category": [
        "Shapes",
        "Interface"
      ],
      "tag": [
        "graph",
        "upward trend",
        "data analysis",
        "growth",
        "progress",
        "chart",
        "statistics",
        "presentation",
        "report"
      ],
      "title": "Graph Up"
    };
    icon_graph_up_svg_default = meta305;
  }
});

// lib/meta/icon_hairdryer.svg.ts
var icon_hairdryer_svg_exports = {};
__export(icon_hairdryer_svg_exports, {
  default: () => icon_hairdryer_svg_default,
  meta: () => meta306
});
var meta306, icon_hairdryer_svg_default;
var init_icon_hairdryer_svg = __esm({
  "lib/meta/icon_hairdryer.svg.ts"() {
    meta306 = {
      "description": "A hairdryer is a handheld device used to blow hot or cool air over wet or damp hair to accelerate the evaporation of water particles and dry the hair.",
      "category": [
        "Things"
      ],
      "tag": [
        "hairdryer",
        "hair styling",
        "beauty",
        "hair care",
        "blow dryer",
        "grooming",
        "salon",
        "appliance",
        "hair tools",
        "hair accessories"
      ],
      "title": "Hairdryer"
    };
    icon_hairdryer_svg_default = meta306;
  }
});

// lib/meta/icon_hill-landscape.svg.ts
var icon_hill_landscape_svg_exports = {};
__export(icon_hill_landscape_svg_exports, {
  default: () => icon_hill_landscape_svg_default,
  meta: () => meta307
});
var meta307, icon_hill_landscape_svg_default;
var init_icon_hill_landscape_svg = __esm({
  "lib/meta/icon_hill-landscape.svg.ts"() {
    meta307 = {
      description: "An icon of a serene landscape with rolling hills and a clear blue sky, depicting a peaceful and scenic environment.",
      category: ["Misc"],
      tag: ["Hill", "Landscape", "Nature", "Scenery", "Outdoors", "Tranquility", "Mountains", "Beautiful", "View", "Background"],
      title: "Hill Landscape"
    };
    icon_hill_landscape_svg_default = meta307;
  }
});

// lib/meta/icon_idea-factory.svg.ts
var icon_idea_factory_svg_exports = {};
__export(icon_idea_factory_svg_exports, {
  default: () => icon_idea_factory_svg_default,
  meta: () => meta308
});
var meta308, icon_idea_factory_svg_default;
var init_icon_idea_factory_svg = __esm({
  "lib/meta/icon_idea-factory.svg.ts"() {
    meta308 = {
      "description": "The 'Idea Factory' icon represents a place where creative thoughts and innovative ideas are generated. It symbolizes a hub of inspiration and brainstorming.",
      "category": [
        "Interface"
      ],
      "tag": [
        "creativity",
        "innovation",
        "ideas",
        "brainstorming",
        "inspiration",
        "creative thinking",
        "imagination",
        "strategy",
        "design",
        "concept"
      ],
      "title": "Idea Factory"
    };
    icon_idea_factory_svg_default = meta308;
  }
});

// lib/meta/icon_industry-3.svg.ts
var icon_industry_3_svg_exports = {};
__export(icon_industry_3_svg_exports, {
  default: () => icon_industry_3_svg_default,
  meta: () => meta309
});
var meta309, icon_industry_3_svg_default;
var init_icon_industry_3_svg = __esm({
  "lib/meta/icon_industry-3.svg.ts"() {
    meta309 = {
      "description": "The icon 'industry-3' represents a factory with multiple chimneys emitting smoke, symbolizing industrialization and manufacturing processes.",
      "category": [
        "Things",
        "Symbol"
      ],
      "tag": [
        "factory",
        "chimney",
        "smoke",
        "industrialization",
        "manufacturing",
        "industry",
        "workplace",
        "production",
        "engineering",
        "progress"
      ],
      "title": "Industry 3"
    };
    icon_industry_3_svg_default = meta309;
  }
});

// lib/meta/icon_iron.svg.ts
var icon_iron_svg_exports = {};
__export(icon_iron_svg_exports, {
  default: () => icon_iron_svg_default,
  meta: () => meta310
});
var meta310, icon_iron_svg_default;
var init_icon_iron_svg = __esm({
  "lib/meta/icon_iron.svg.ts"() {
    meta310 = {
      "description": "The iron icon represents the metal material that is heavy, silvery-white and ductile. It is commonly used in manufacturing and construction.",
      "category": [
        "Things"
      ],
      "tag": [
        "metal",
        "material",
        "heavy",
        "silver",
        "construction",
        "manufacturing",
        "iron",
        "workmanship",
        "strong",
        "equipment"
      ],
      "title": "Iron"
    };
    icon_iron_svg_default = meta310;
  }
});

// lib/meta/icon_kitchen-cutlery.svg.ts
var icon_kitchen_cutlery_svg_exports = {};
__export(icon_kitchen_cutlery_svg_exports, {
  default: () => icon_kitchen_cutlery_svg_default,
  meta: () => meta311
});
var meta311, icon_kitchen_cutlery_svg_default;
var init_icon_kitchen_cutlery_svg = __esm({
  "lib/meta/icon_kitchen-cutlery.svg.ts"() {
    meta311 = {
      "description": "A simple icon representing kitchen cutlery, such as a knife, fork, and spoon. This icon is commonly used to symbolize kitchen utensils, cooking, dining, and food related items.",
      "category": [
        "Things"
      ],
      "tag": [
        "kitchen",
        "cutlery",
        "utensils",
        "cooking",
        "dining",
        "food",
        "restaurant",
        "culinary",
        "meal",
        "preparation"
      ],
      "title": "Kitchen Cutlery"
    };
    icon_kitchen_cutlery_svg_default = meta311;
  }
});

// lib/meta/icon_kitchen-utensils.svg.ts
var icon_kitchen_utensils_svg_exports = {};
__export(icon_kitchen_utensils_svg_exports, {
  default: () => icon_kitchen_utensils_svg_default,
  meta: () => meta312
});
var meta312, icon_kitchen_utensils_svg_default;
var init_icon_kitchen_utensils_svg = __esm({
  "lib/meta/icon_kitchen-utensils.svg.ts"() {
    meta312 = {
      "description": "An icon representing various kitchen utensils such as knives, forks, spoons, and spatulas. Commonly used in cooking and dining related designs.",
      "category": [
        "Things",
        "Food"
      ],
      "tag": [
        "kitchen",
        "utensils",
        "cooking",
        "dining",
        "cutlery",
        "culinary",
        "tools",
        "silverware",
        "kitchenware",
        "kitchen tools"
      ],
      "title": "Kitchen Utensils"
    };
    icon_kitchen_utensils_svg_default = meta312;
  }
});

// lib/meta/icon_lake-view.svg.ts
var icon_lake_view_svg_exports = {};
__export(icon_lake_view_svg_exports, {
  default: () => icon_lake_view_svg_default,
  meta: () => meta313
});
var meta313, icon_lake_view_svg_default;
var init_icon_lake_view_svg = __esm({
  "lib/meta/icon_lake-view.svg.ts"() {
    meta313 = {
      description: "A scenic view of a lake surrounded by mountains and trees, capturing the beauty of nature.",
      category: ["Nature", "Landscapes", "Travel"],
      tag: ["scenic", "water", "mountains", "trees", "reflection", "serene", "calm", "outdoors", "relaxing", "panoramic"],
      title: "Lake View"
    };
    icon_lake_view_svg_default = meta313;
  }
});

// lib/meta/icon_leaf 2.svg.ts
var icon_leaf_2_svg_exports = {};
__export(icon_leaf_2_svg_exports, {
  default: () => icon_leaf_2_svg_default,
  meta: () => meta314
});
var meta314, icon_leaf_2_svg_default;
var init_icon_leaf_2_svg = __esm({
  "lib/meta/icon_leaf 2.svg.ts"() {
    meta314 = {
      "description": "A simple icon of a leaf with a curved stem, representing nature and foliage.",
      "category": [
        "Nature"
      ],
      "tag": [
        "leaf",
        "green",
        "plant",
        "environment",
        "ecology",
        "symbol",
        "foliage",
        "botany",
        "flora",
        "organic"
      ],
      "title": "Leaf 2"
    };
    icon_leaf_2_svg_default = meta314;
  }
});

// lib/meta/icon_leaf 3.svg.ts
var icon_leaf_3_svg_exports = {};
__export(icon_leaf_3_svg_exports, {
  default: () => icon_leaf_3_svg_default,
  meta: () => meta315
});
var meta315, icon_leaf_3_svg_default;
var init_icon_leaf_3_svg = __esm({
  "lib/meta/icon_leaf 3.svg.ts"() {
    meta315 = {
      "description": "A simplistic icon depicting a single green leaf with pointed edges, commonly representing nature, growth, and environmentally friendly concepts.",
      "category": [
        "Nature"
      ],
      "tag": [
        "leaf",
        "green",
        "environment",
        "growth",
        "plant",
        "ecology",
        "flora",
        "botanical",
        "foliage",
        "symbol"
      ],
      "title": "Leaf 3"
    };
    icon_leaf_3_svg_default = meta315;
  }
});

// lib/meta/icon_leaf.svg.ts
var icon_leaf_svg_exports = {};
__export(icon_leaf_svg_exports, {
  default: () => icon_leaf_svg_default,
  meta: () => meta316
});
var meta316, icon_leaf_svg_default;
var init_icon_leaf_svg = __esm({
  "lib/meta/icon_leaf.svg.ts"() {
    meta316 = {
      "description": "The leaf icon represents a small and usually flat green part of a plant that grows from a stem or branch, providing energy through the process of photosynthesis.",
      "category": [
        "Things",
        "Nature"
      ],
      "tag": [
        "nature",
        "green",
        "plant",
        "environment",
        "ecology",
        "foliage",
        "botany",
        "flora",
        "symbol",
        "fresh"
      ],
      "title": "Leaf"
    };
    icon_leaf_svg_default = meta316;
  }
});

// lib/meta/icon_leafs.svg.ts
var icon_leafs_svg_exports = {};
__export(icon_leafs_svg_exports, {
  default: () => icon_leafs_svg_default,
  meta: () => meta317
});
var meta317, icon_leafs_svg_default;
var init_icon_leafs_svg = __esm({
  "lib/meta/icon_leafs.svg.ts"() {
    meta317 = {
      "description": "The icon 'leafs' represents green leaves, typically associated with nature, gardening, and ecology.",
      "category": [
        "Nature",
        "Gardening"
      ],
      "tag": [
        "leaves",
        "green",
        "ecology",
        "environment",
        "plants",
        "botanical",
        "foliage",
        "flora",
        "natural",
        "organic"
      ],
      "title": "Leafs"
    };
    icon_leafs_svg_default = meta317;
  }
});

// lib/meta/icon_liquid-soap 2.svg.ts
var icon_liquid_soap_2_svg_exports = {};
__export(icon_liquid_soap_2_svg_exports, {
  default: () => icon_liquid_soap_2_svg_default,
  meta: () => meta318
});
var meta318, icon_liquid_soap_2_svg_default;
var init_icon_liquid_soap_2_svg = __esm({
  "lib/meta/icon_liquid-soap 2.svg.ts"() {
    meta318 = {
      "description": "liquid-soap 2 icon is an illustration of a bottle or dispenser filled with liquid soap. It is commonly used to represent hygiene, cleanliness, and bathroom accessories.",
      "category": [
        "Things",
        "Hygiene",
        "Bathroom"
      ],
      "tag": [
        "soap dispenser",
        "liquid soap",
        "cleanliness",
        "hygiene",
        "bathroom accessory",
        "personal care",
        "household item",
        "body wash",
        "hand sanitizer",
        "disinfectant"
      ],
      "title": "Liquid Soap 2"
    };
    icon_liquid_soap_2_svg_default = meta318;
  }
});

// lib/meta/icon_liquid-soap.svg.ts
var icon_liquid_soap_svg_exports = {};
__export(icon_liquid_soap_svg_exports, {
  default: () => icon_liquid_soap_svg_default,
  meta: () => meta319
});
var meta319, icon_liquid_soap_svg_default;
var init_icon_liquid_soap_svg = __esm({
  "lib/meta/icon_liquid-soap.svg.ts"() {
    meta319 = {
      "description": "Liquid soap icon typically represents a bottle or container of liquid soap used for cleaning hands and maintaining hygiene. It is commonly found in bathrooms, kitchens, and public spaces for easy access to handwashing.",
      "category": [
        "Things",
        "Hygiene"
      ],
      "tag": [
        "cleaning",
        "hygiene",
        "handwashing",
        "personal care",
        "bathroom",
        "kitchen",
        "soap dispenser",
        "liquid soap",
        "healthcare",
        "sanitation"
      ],
      "title": "Liquid Soap"
    };
    icon_liquid_soap_svg_default = meta319;
  }
});

// lib/meta/icon_luxe-villa.svg.ts
var icon_luxe_villa_svg_exports = {};
__export(icon_luxe_villa_svg_exports, {
  default: () => icon_luxe_villa_svg_default,
  meta: () => meta320
});
var meta320, icon_luxe_villa_svg_default;
var init_icon_luxe_villa_svg = __esm({
  "lib/meta/icon_luxe-villa.svg.ts"() {
    meta320 = {
      description: "Luxe villa icon is a symbol representing a luxurious and extravagant vacation home or resort. It typically signifies wealth, comfort, and relaxation.",
      category: ["Miscellaneous", "Property"],
      tag: ["luxury", "villa", "resort", "vacation", "wealth", "comfort", "relaxation", "accommodation", "travel", "hotel"],
      title: "Luxe Villa"
    };
    icon_luxe_villa_svg_default = meta320;
  }
});

// lib/meta/icon_mansion.svg.ts
var icon_mansion_svg_exports = {};
__export(icon_mansion_svg_exports, {
  default: () => icon_mansion_svg_default,
  meta: () => meta321
});
var meta321, icon_mansion_svg_default;
var init_icon_mansion_svg = __esm({
  "lib/meta/icon_mansion.svg.ts"() {
    meta321 = {
      description: "An icon representing a luxurious mansion, typically a large and impressive residence often associated with wealth and grandeur.",
      category: ["Misc"],
      tag: ["house", "home", "building", "estate", "wealth", "luxury", "architecture", "property", "residence", "real estate"],
      title: "Mansion"
    };
    icon_mansion_svg_default = meta321;
  }
});

// lib/meta/icon_microwave.svg.ts
var icon_microwave_svg_exports = {};
__export(icon_microwave_svg_exports, {
  default: () => icon_microwave_svg_default,
  meta: () => meta322
});
var meta322, icon_microwave_svg_default;
var init_icon_microwave_svg = __esm({
  "lib/meta/icon_microwave.svg.ts"() {
    meta322 = {
      "description": "A microwave is a kitchen appliance that uses electromagnetic radiation to heat and cook food quickly. It is a common household appliance for reheating leftovers, defrosting frozen foods, and cooking convenient meals.",
      "category": [
        "Things",
        "Kitchen"
      ],
      "tag": [
        "appliance",
        "cooking",
        "food",
        "kitchen",
        "heating",
        "electromagnetic radiation",
        "meal prep",
        "quick",
        "convenient",
        "leftovers"
      ],
      "title": "Microwave"
    };
    icon_microwave_svg_default = meta322;
  }
});

// lib/meta/icon_money.svg.ts
var icon_money_svg_exports = {};
__export(icon_money_svg_exports, {
  default: () => icon_money_svg_default,
  meta: () => meta323
});
var meta323, icon_money_svg_default;
var init_icon_money_svg = __esm({
  "lib/meta/icon_money.svg.ts"() {
    meta323 = {
      "description": "The money icon typically represents wealth, currency, finance, and transactions. It can be used to indicate the concept of payment, savings, banking, economy, and prosperity.",
      "category": [
        "Symbols",
        "Finance"
      ],
      "tag": [
        "currency",
        "wealth",
        "finance",
        "cash",
        "banking",
        "economy",
        "payment",
        "transactions",
        "prosperity",
        "savings"
      ],
      "title": "Money"
    };
    icon_money_svg_default = meta323;
  }
});

// lib/meta/icon_moneybag.svg.ts
var icon_moneybag_svg_exports = {};
__export(icon_moneybag_svg_exports, {
  default: () => icon_moneybag_svg_default,
  meta: () => meta324
});
var meta324, icon_moneybag_svg_default;
var init_icon_moneybag_svg = __esm({
  "lib/meta/icon_moneybag.svg.ts"() {
    meta324 = {
      "description": "The moneybag icon represents wealth, financial success, and prosperity. It is often used to symbolize money, savings, investments, and business.",
      "category": [
        "Things"
      ],
      "tag": [
        "Wealth",
        "Finance",
        "Prosperity",
        "Savings",
        "Investments",
        "Business",
        "Riches",
        "Currency",
        "Earnings",
        "Cash"
      ],
      "title": "Money Bag"
    };
    icon_moneybag_svg_default = meta324;
  }
});

// lib/meta/icon_mountain-scape.svg.ts
var icon_mountain_scape_svg_exports = {};
__export(icon_mountain_scape_svg_exports, {
  default: () => icon_mountain_scape_svg_default,
  meta: () => meta325
});
var meta325, icon_mountain_scape_svg_default;
var init_icon_mountain_scape_svg = __esm({
  "lib/meta/icon_mountain-scape.svg.ts"() {
    meta325 = {
      description: "A scenic view of mountains and landscapes, showcasing natural beauty and tranquility. The icon is perfect for representing nature, travel, adventure, and exploration themes.",
      category: ["Misc", "Nature", "Travel"],
      tag: ["mountain", "landscape", "scenic", "view", "nature", "travel", "adventure", "exploration", "beauty", "tranquility"],
      title: "Mountain Scape"
    };
    icon_mountain_scape_svg_default = meta325;
  }
});

// lib/meta/icon_oven.svg.ts
var icon_oven_svg_exports = {};
__export(icon_oven_svg_exports, {
  default: () => icon_oven_svg_default,
  meta: () => meta326
});
var meta326, icon_oven_svg_default;
var init_icon_oven_svg = __esm({
  "lib/meta/icon_oven.svg.ts"() {
    meta326 = {
      "description": "An icon representing an oven, typically used for baking or cooking food. It usually consists of a box-shaped chamber with a hinged door and temperature controls.",
      "category": [
        "Things",
        "Kitchen"
      ],
      "tag": [
        "Kitchen",
        "Appliance",
        "Cooking",
        "Baking",
        "Food",
        "Household",
        "Heat",
        "Temperature",
        "Home"
      ],
      "title": "Oven"
    };
    icon_oven_svg_default = meta326;
  }
});

// lib/meta/icon_plant.svg.ts
var icon_plant_svg_exports = {};
__export(icon_plant_svg_exports, {
  default: () => icon_plant_svg_default,
  meta: () => meta327
});
var meta327, icon_plant_svg_default;
var init_icon_plant_svg = __esm({
  "lib/meta/icon_plant.svg.ts"() {
    meta327 = {
      "description": "The plant icon signifies nature, growth, and freshness. It is often used to represent environmental themes, gardening, and sustainability.",
      "category": [
        "Things",
        "Nature"
      ],
      "tag": [
        "green",
        "leaf",
        "organic",
        "eco-friendly",
        "botany",
        "floral",
        "environment",
        "growth",
        "freshness",
        "sustainability"
      ],
      "title": "Plant"
    };
    icon_plant_svg_default = meta327;
  }
});

// lib/meta/icon_politician 2.svg.ts
var icon_politician_2_svg_exports = {};
__export(icon_politician_2_svg_exports, {
  default: () => icon_politician_2_svg_default,
  meta: () => meta328
});
var meta328, icon_politician_2_svg_default;
var init_icon_politician_2_svg = __esm({
  "lib/meta/icon_politician 2.svg.ts"() {
    meta328 = {
      "description": "This icon represents a politician giving a speech or making a public appearance. It can be used to symbolize politics, government, leadership, elections, or public speaking.",
      "category": [
        "Symbols"
      ],
      "tag": [
        "politician",
        "government",
        "leadership",
        "elections",
        "public speaking",
        "speech",
        "public appearance",
        "politics",
        "politician icon",
        "political event"
      ],
      "title": "Politician 2"
    };
    icon_politician_2_svg_default = meta328;
  }
});

// lib/meta/icon_politician.svg.ts
var icon_politician_svg_exports = {};
__export(icon_politician_svg_exports, {
  default: () => icon_politician_svg_default,
  meta: () => meta329
});
var meta329, icon_politician_svg_default;
var init_icon_politician_svg = __esm({
  "lib/meta/icon_politician.svg.ts"() {
    meta329 = {
      "description": "An icon representing a person involved in politics, such as a government official or a candidate running for office. It typically symbolizes leadership, authority, and decision-making within a political context.",
      "category": [
        "Symbol"
      ],
      "tag": [
        "politics",
        "politician",
        "government",
        "leadership",
        "authority",
        "election",
        "official",
        "candidate",
        "decision-making"
      ],
      "title": "Politician"
    };
    icon_politician_svg_default = meta329;
  }
});

// lib/meta/icon_rocket.svg.ts
var icon_rocket_svg_exports = {};
__export(icon_rocket_svg_exports, {
  default: () => icon_rocket_svg_default,
  meta: () => meta330
});
var meta330, icon_rocket_svg_default;
var init_icon_rocket_svg = __esm({
  "lib/meta/icon_rocket.svg.ts"() {
    meta330 = {
      description: "A rocket icon typically represents speed, progress, and innovation. It is commonly used to symbolize launching a project or reaching new heights.",
      category: ["Transport", "Symbol", "Misc"],
      tag: ["space", "flight", "technology", "exploration", "launch", "spacecraft", "rocketship", "fast", "outer space", "travel"],
      title: "Rocket"
    };
    icon_rocket_svg_default = meta330;
  }
});

// lib/meta/icon_room-shade.svg.ts
var icon_room_shade_svg_exports = {};
__export(icon_room_shade_svg_exports, {
  default: () => icon_room_shade_svg_default,
  meta: () => meta331
});
var meta331, icon_room_shade_svg_default;
var init_icon_room_shade_svg = __esm({
  "lib/meta/icon_room-shade.svg.ts"() {
    meta331 = {
      "description": "The room shade icon typically represents a window covering used to block out sunlight and maintain privacy in a room. It is commonly seen in interior design and architecture contexts.",
      "category": [
        "Things",
        "Interface"
      ],
      "tag": [
        "window covering",
        "shades",
        "privacy",
        "protection",
        "interior design",
        "architecture",
        "light filtering",
        "room decor",
        "sunlight control"
      ],
      "title": "Room Shade"
    };
    icon_room_shade_svg_default = meta331;
  }
});

// lib/meta/icon_shield-2-line.svg.ts
var icon_shield_2_line_svg_exports = {};
__export(icon_shield_2_line_svg_exports, {
  default: () => icon_shield_2_line_svg_default,
  meta: () => meta332
});
var meta332, icon_shield_2_line_svg_default;
var init_icon_shield_2_line_svg = __esm({
  "lib/meta/icon_shield-2-line.svg.ts"() {
    meta332 = {
      description: "The shield-2-line icon is a simple representation of two shields placed one after the other in a horizontal line. It symbolizes protection, defense, and security.",
      category: ["Misc"],
      tag: ["shield", "protection", "defense", "security", "safety", "armor", "guard", "safeguard", "sentry", "shielding"],
      title: "Shield 2 Line"
    };
    icon_shield_2_line_svg_default = meta332;
  }
});

// lib/meta/icon_shield-2.svg.ts
var icon_shield_2_svg_exports = {};
__export(icon_shield_2_svg_exports, {
  default: () => icon_shield_2_svg_default,
  meta: () => meta333
});
var meta333, icon_shield_2_svg_default;
var init_icon_shield_2_svg = __esm({
  "lib/meta/icon_shield-2.svg.ts"() {
    meta333 = {
      description: "The shield-2 icon is a symbol of protection and defense. It commonly represents security, safety, and strength.",
      category: ["Symbol"],
      tag: ["shield", "protection", "defense", "safety", "security", "strength", "armor", "guard", "secure"],
      title: "Shield 2"
    };
    icon_shield_2_svg_default = meta333;
  }
});

// lib/meta/icon_shield-3-line.svg.ts
var icon_shield_3_line_svg_exports = {};
__export(icon_shield_3_line_svg_exports, {
  default: () => icon_shield_3_line_svg_default,
  meta: () => meta334
});
var meta334, icon_shield_3_line_svg_default;
var init_icon_shield_3_line_svg = __esm({
  "lib/meta/icon_shield-3-line.svg.ts"() {
    meta334 = {
      description: "The shield-3-line icon features three shield shapes in a line, symbolizing protection and security. It can be used to represent defense, safety, or a secure environment.",
      category: ["Symbol"],
      tag: ["shield", "protection", "security", "defense", "safe", "secure", "guard", "safety", "secure environment", "safeguard"],
      title: "Shield 3 Line"
    };
    icon_shield_3_line_svg_default = meta334;
  }
});

// lib/meta/icon_shield-3.svg.ts
var icon_shield_3_svg_exports = {};
__export(icon_shield_3_svg_exports, {
  default: () => icon_shield_3_svg_default,
  meta: () => meta335
});
var meta335, icon_shield_3_svg_default;
var init_icon_shield_3_svg = __esm({
  "lib/meta/icon_shield-3.svg.ts"() {
    meta335 = {
      description: "The shield-3 icon is a symbol of protection and defense. Featuring a sturdy shield with three layers, this icon represents security and safety.",
      category: ["Symbol"],
      tag: ["shield", "defense", "protection", "safety", "security", "armor", "guard", "safeguard", "fortress", "shield wall"],
      title: "Shield 3"
    };
    icon_shield_3_svg_default = meta335;
  }
});

// lib/meta/icon_shield-4-line.svg.ts
var icon_shield_4_line_svg_exports = {};
__export(icon_shield_4_line_svg_exports, {
  default: () => icon_shield_4_line_svg_default,
  meta: () => meta336
});
var meta336, icon_shield_4_line_svg_default;
var init_icon_shield_4_line_svg = __esm({
  "lib/meta/icon_shield-4-line.svg.ts"() {
    meta336 = {
      description: "A shield icon with four lines, symbolizing protection and security. It can be used to represent safety measures or security features.",
      category: ["Misc"],
      tag: ["shield", "protection", "security", "safety", "defense", "guard", "secure", "armour", "safeguard", "fortress"],
      title: "Shield 4 Line"
    };
    icon_shield_4_line_svg_default = meta336;
  }
});

// lib/meta/icon_shield-4.svg.ts
var icon_shield_4_svg_exports = {};
__export(icon_shield_4_svg_exports, {
  default: () => icon_shield_4_svg_default,
  meta: () => meta337
});
var meta337, icon_shield_4_svg_default;
var init_icon_shield_4_svg = __esm({
  "lib/meta/icon_shield-4.svg.ts"() {
    meta337 = {
      description: "The shield-4 icon is a flat design representing a shield with four sections. It can symbolize protection, security, or defense in various contexts.",
      category: ["Shapes", "Symbol"],
      tag: ["shield", "guard", "secure", "defense", "protection", "safety", "security", "shield logo", "armor", "secure icon"],
      title: "Shield 4"
    };
    icon_shield_4_svg_default = meta337;
  }
});

// lib/meta/icon_shield-line.svg.ts
var icon_shield_line_svg_exports = {};
__export(icon_shield_line_svg_exports, {
  default: () => icon_shield_line_svg_default,
  meta: () => meta338
});
var meta338, icon_shield_line_svg_default;
var init_icon_shield_line_svg = __esm({
  "lib/meta/icon_shield-line.svg.ts"() {
    meta338 = {
      description: "A simple icon of a shield with a line in the middle, representing protection or security.",
      category: ["Misc"],
      tag: ["shield", "line", "protection", "security", "defense", "safety", "guard", "secure", "safeguard", "symbol"],
      title: "Shield Line"
    };
    icon_shield_line_svg_default = meta338;
  }
});

// lib/meta/icon_shield.svg.ts
var icon_shield_svg_exports = {};
__export(icon_shield_svg_exports, {
  default: () => icon_shield_svg_default,
  meta: () => meta339
});
var meta339, icon_shield_svg_default;
var init_icon_shield_svg = __esm({
  "lib/meta/icon_shield.svg.ts"() {
    meta339 = {
      description: "The shield icon is commonly used to represent protection or security in various applications. It can symbolize defense, safety, and resilience.",
      category: ["Misc"],
      tag: ["protection", "security", "defense", "safety", "resilience", "guard", "shield", "armor", "safe", "secure"],
      title: "Shield"
    };
    icon_shield_svg_default = meta339;
  }
});

// lib/meta/icon_stove.svg.ts
var icon_stove_svg_exports = {};
__export(icon_stove_svg_exports, {
  default: () => icon_stove_svg_default,
  meta: () => meta340
});
var meta340, icon_stove_svg_default;
var init_icon_stove_svg = __esm({
  "lib/meta/icon_stove.svg.ts"() {
    meta340 = {
      "description": "A stove is a kitchen appliance used for cooking food. It typically consists of burners for heating pots and pans, and an oven for baking and roasting.",
      "category": [
        "Things",
        "Kitchen"
      ],
      "tag": [
        "Cooking",
        "Appliance",
        "Heat",
        "Food",
        "Kitchen",
        "Oven",
        "Burner",
        "Home",
        "Cuisine",
        "Chef"
      ],
      "title": "Stove"
    };
    icon_stove_svg_default = meta340;
  }
});

// lib/meta/icon_surfboard.svg.ts
var icon_surfboard_svg_exports = {};
__export(icon_surfboard_svg_exports, {
  default: () => icon_surfboard_svg_default,
  meta: () => meta341
});
var meta341, icon_surfboard_svg_default;
var init_icon_surfboard_svg = __esm({
  "lib/meta/icon_surfboard.svg.ts"() {
    meta341 = {
      description: "A surfboard icon typically used to represent surfing, beach activities, or tropical vacations. It features a long and narrow board with a colorful design.",
      category: ["Misc"],
      tag: ["surfing", "beach", "ocean", "vacation", "sports", "summer", "water", "waves", "leisure", "recreation"],
      title: "Surfboard"
    };
    icon_surfboard_svg_default = meta341;
  }
});

// lib/meta/icon_swimming-pool.svg.ts
var icon_swimming_pool_svg_exports = {};
__export(icon_swimming_pool_svg_exports, {
  default: () => icon_swimming_pool_svg_default,
  meta: () => meta342
});
var meta342, icon_swimming_pool_svg_default;
var init_icon_swimming_pool_svg = __esm({
  "lib/meta/icon_swimming-pool.svg.ts"() {
    meta342 = {
      description: "A simple icon depicting a swimming pool, typically used to symbolize areas designated for swimming and relaxation.",
      category: ["Misc"],
      tag: ["water", "pool", "relaxation", "swim", "recreation", "leisure", "vacation", "summer", "outdoors", "icon"],
      title: "Swimming Pool"
    };
    icon_swimming_pool_svg_default = meta342;
  }
});

// lib/meta/icon_temple 2.svg.ts
var icon_temple_2_svg_exports = {};
__export(icon_temple_2_svg_exports, {
  default: () => icon_temple_2_svg_default,
  meta: () => meta343
});
var meta343, icon_temple_2_svg_default;
var init_icon_temple_2_svg = __esm({
  "lib/meta/icon_temple 2.svg.ts"() {
    meta343 = {
      "description": "A simple icon depicting a temple with intricate architecture, featuring columns and a pointed roof. The design evokes a sense of spirituality and ancient history.",
      "category": [
        "Things",
        "Architecture"
      ],
      "tag": [
        "religion",
        "worship",
        "faith",
        "culture",
        "building",
        "historical",
        "traditional",
        "ancient",
        "sacred",
        "spirituality"
      ],
      "title": "Temple 2"
    };
    icon_temple_2_svg_default = meta343;
  }
});

// lib/meta/icon_temple.svg.ts
var icon_temple_svg_exports = {};
__export(icon_temple_svg_exports, {
  default: () => icon_temple_svg_default,
  meta: () => meta344
});
var meta344, icon_temple_svg_default;
var init_icon_temple_svg = __esm({
  "lib/meta/icon_temple.svg.ts"() {
    meta344 = {
      "description": "An icon of a temple, a building dedicated to religious or spiritual activities. It typically represents a place of worship and reflection.",
      "category": [
        "Things",
        "Religion"
      ],
      "tag": [
        "Religious",
        "Spiritual",
        "Building",
        "Worship",
        "Faith",
        "Culture",
        "Tradition",
        "Sacred",
        "Architecture",
        "Icon"
      ],
      "title": "Temple"
    };
    icon_temple_svg_default = meta344;
  }
});

// lib/meta/icon_tent-camping.svg.ts
var icon_tent_camping_svg_exports = {};
__export(icon_tent_camping_svg_exports, {
  default: () => icon_tent_camping_svg_default,
  meta: () => meta345
});
var meta345, icon_tent_camping_svg_default;
var init_icon_tent_camping_svg = __esm({
  "lib/meta/icon_tent-camping.svg.ts"() {
    meta345 = {
      description: "A simple illustration of a tent for camping, featuring a triangular fabric structure supported by poles. This icon is perfect for representing camping, outdoor activities, adventure, nature, and vacation concepts.",
      category: ["Miscellaneous", "Nature", "Travel"],
      tag: ["tent", "camping", "outdoors", "adventure", "nature", "vacation", "travel", "wilderness", "recreation"],
      title: "Tent Camping"
    };
    icon_tent_camping_svg_default = meta345;
  }
});

// lib/meta/icon_tent.svg.ts
var icon_tent_svg_exports = {};
__export(icon_tent_svg_exports, {
  default: () => icon_tent_svg_default,
  meta: () => meta346
});
var meta346, icon_tent_svg_default;
var init_icon_tent_svg = __esm({
  "lib/meta/icon_tent.svg.ts"() {
    meta346 = {
      description: "A simple icon representing a tent often used to symbolize camping or outdoor activities.",
      category: ["Misc"],
      tag: ["camping", "outdoor", "travel", "adventure", "shelter", "nature", "wilderness", "campsite", "explore", "vacation"],
      title: "Tent"
    };
    icon_tent_svg_default = meta346;
  }
});

// lib/meta/icon_toy-blocks-2.svg.ts
var icon_toy_blocks_2_svg_exports = {};
__export(icon_toy_blocks_2_svg_exports, {
  default: () => icon_toy_blocks_2_svg_default,
  meta: () => meta347
});
var meta347, icon_toy_blocks_2_svg_default;
var init_icon_toy_blocks_2_svg = __esm({
  "lib/meta/icon_toy-blocks-2.svg.ts"() {
    meta347 = {
      description: "An icon representing two toy blocks stacked on top of each other. Perfect for children's toys or educational concepts.",
      category: ["Misc"],
      tag: ["toy", "blocks", "stacked", "children", "toys", "educational", "play", "kids", "building", "creative"],
      title: "Toy Blocks 2"
    };
    icon_toy_blocks_2_svg_default = meta347;
  }
});

// lib/meta/icon_toy-blocks-3.svg.ts
var icon_toy_blocks_3_svg_exports = {};
__export(icon_toy_blocks_3_svg_exports, {
  default: () => icon_toy_blocks_3_svg_default,
  meta: () => meta348
});
var meta348, icon_toy_blocks_3_svg_default;
var init_icon_toy_blocks_3_svg = __esm({
  "lib/meta/icon_toy-blocks-3.svg.ts"() {
    meta348 = {
      description: "This icon features a set of 3 toy blocks stacked on top of each other. It represents the concept of play, learning, and childhood fun.",
      category: ["Misc"],
      tag: ["toy", "blocks", "building", "stacked", "playtime", "children", "education", "creativity", "childhood", "fun"],
      title: "Toy Blocks 3"
    };
    icon_toy_blocks_3_svg_default = meta348;
  }
});

// lib/meta/icon_toy-blocks.svg.ts
var icon_toy_blocks_svg_exports = {};
__export(icon_toy_blocks_svg_exports, {
  default: () => icon_toy_blocks_svg_default,
  meta: () => meta349
});
var meta349, icon_toy_blocks_svg_default;
var init_icon_toy_blocks_svg = __esm({
  "lib/meta/icon_toy-blocks.svg.ts"() {
    meta349 = {
      description: "A set of colorful toy blocks that can be stacked and arranged in various ways, great for children's games and learning activities.",
      category: ["Misc"],
      tag: ["toys", "blocks", "children", "games", "learning", "play", "building", "education", "colors", "stacking"],
      title: "Toy Blocks"
    };
    icon_toy_blocks_svg_default = meta349;
  }
});

// lib/meta/icon_toy-head.svg.ts
var icon_toy_head_svg_exports = {};
__export(icon_toy_head_svg_exports, {
  default: () => icon_toy_head_svg_default,
  meta: () => meta350
});
var meta350, icon_toy_head_svg_default;
var init_icon_toy_head_svg = __esm({
  "lib/meta/icon_toy-head.svg.ts"() {
    meta350 = {
      description: "A playful and cute icon of a toy head, ideal for use in children's apps, games, or any design related to toys.",
      category: ["Miscellaneous"],
      tag: ["toy", "head", "playful", "cute", "children", "app", "game", "fun", "toy head", "play"],
      title: "Toy Head"
    };
    icon_toy_head_svg_default = meta350;
  }
});

// lib/meta/icon_tree 2.svg.ts
var icon_tree_2_svg_exports = {};
__export(icon_tree_2_svg_exports, {
  default: () => icon_tree_2_svg_default,
  meta: () => meta351
});
var meta351, icon_tree_2_svg_default;
var init_icon_tree_2_svg = __esm({
  "lib/meta/icon_tree 2.svg.ts"() {
    meta351 = {
      "description": "Tree 2 icon depicting a stylized tree with branches and leaves. It can be used to represent nature, environment, forests, or eco-friendly concepts.",
      "category": [
        "Nature"
      ],
      "tag": [
        "tree",
        "nature",
        "environment",
        "forest",
        "ecology",
        "green",
        "leaves",
        "branches",
        "plants",
        "wood"
      ],
      "title": "Tree 2"
    };
    icon_tree_2_svg_default = meta351;
  }
});

// lib/meta/icon_tree 3.svg.ts
var icon_tree_3_svg_exports = {};
__export(icon_tree_3_svg_exports, {
  default: () => icon_tree_3_svg_default,
  meta: () => meta352
});
var meta352, icon_tree_3_svg_default;
var init_icon_tree_3_svg = __esm({
  "lib/meta/icon_tree 3.svg.ts"() {
    meta352 = {
      "description": "Tree 3 icon represents a stylized tree with three branches. It can be used to symbolize nature, environment, growth, or eco-friendliness.",
      "category": [
        "Nature"
      ],
      "tag": [
        "tree",
        "plant",
        "environment",
        "ecology",
        "forest",
        "green",
        "growth",
        "nature",
        "park",
        "outdoor"
      ],
      "title": "Tree 3"
    };
    icon_tree_3_svg_default = meta352;
  }
});

// lib/meta/icon_tree.svg.ts
var icon_tree_svg_exports = {};
__export(icon_tree_svg_exports, {
  default: () => icon_tree_svg_default,
  meta: () => meta353
});
var meta353, icon_tree_svg_default;
var init_icon_tree_svg = __esm({
  "lib/meta/icon_tree.svg.ts"() {
    meta353 = {
      "description": "The icon 'tree' symbolizes nature, growth, and strength. It is commonly used to represent environmental themes, forests, ecology, and sustainability.",
      "category": [
        "Nature"
      ],
      "tag": [
        "environment",
        "forest",
        "ecology",
        "sustainability",
        "plant",
        "green",
        "leaves",
        "wood",
        "natural",
        "landscape"
      ],
      "title": "Tree"
    };
    icon_tree_svg_default = meta353;
  }
});

// lib/meta/icon_treehouse.svg.ts
var icon_treehouse_svg_exports = {};
__export(icon_treehouse_svg_exports, {
  default: () => icon_treehouse_svg_default,
  meta: () => meta354
});
var meta354, icon_treehouse_svg_default;
var init_icon_treehouse_svg = __esm({
  "lib/meta/icon_treehouse.svg.ts"() {
    meta354 = {
      description: "An icon of a treehouse, typically found in nature or rustic themed designs. It symbolizes a cozy and unique living space built on or around a tree.",
      category: ["Misc"],
      tag: ["Nature", "Rustic", "Cozy", "Living space", "Unique", "Tree", "House", "Shelter", "Cabin", "Outdoor"],
      title: "Treehouse"
    };
    icon_treehouse_svg_default = meta354;
  }
});

// lib/meta/icon_trees 2.svg.ts
var icon_trees_2_svg_exports = {};
__export(icon_trees_2_svg_exports, {
  default: () => icon_trees_2_svg_default,
  meta: () => meta355
});
var meta355, icon_trees_2_svg_default;
var init_icon_trees_2_svg = __esm({
  "lib/meta/icon_trees 2.svg.ts"() {
    meta355 = {
      "description": "The icon 'trees 2' depicts a group of trees. It can be used to represent nature, forestry, environment, or parks.",
      "category": [
        "Nature"
      ],
      "tag": [
        "trees",
        "forest",
        "nature",
        "environment",
        "park",
        "greenery",
        "landscape",
        "foliage",
        "outdoors",
        "scenery"
      ],
      "title": "Trees 2"
    };
    icon_trees_2_svg_default = meta355;
  }
});

// lib/meta/icon_trees.svg.ts
var icon_trees_svg_exports = {};
__export(icon_trees_svg_exports, {
  default: () => icon_trees_svg_default,
  meta: () => meta356
});
var meta356, icon_trees_svg_default;
var init_icon_trees_svg = __esm({
  "lib/meta/icon_trees.svg.ts"() {
    meta356 = {
      "description": "The icon represents a group of trees, typically depicted with a trunk and green foliage. It symbolizes nature, growth, and the environment.",
      "category": [
        "Things",
        "Nature"
      ],
      "tag": [
        "forest",
        "woodland",
        "foliage",
        "environment",
        "landscape",
        "scenery",
        "greenery",
        "flora",
        "outdoors",
        "plant"
      ],
      "title": "Trees"
    };
    icon_trees_svg_default = meta356;
  }
});

// lib/meta/icon_trunk-1.svg.ts
var icon_trunk_1_svg_exports = {};
__export(icon_trunk_1_svg_exports, {
  default: () => icon_trunk_1_svg_default,
  meta: () => meta357
});
var meta357, icon_trunk_1_svg_default;
var init_icon_trunk_1_svg = __esm({
  "lib/meta/icon_trunk-1.svg.ts"() {
    meta357 = {
      description: "The 'trunk-1' icon features a simplistic and stylized tree trunk design, suitable for use in various nature-themed projects or environmental initiatives.",
      category: ["Nature"],
      tag: ["tree", "trunk", "wood", "forest", "nature", "environment", "organic", "simple", "stylized", "minimal"],
      title: "Trunk 1"
    };
    icon_trunk_1_svg_default = meta357;
  }
});

// lib/meta/icon_trunk-2.svg.ts
var icon_trunk_2_svg_exports = {};
__export(icon_trunk_2_svg_exports, {
  default: () => icon_trunk_2_svg_default,
  meta: () => meta358
});
var meta358, icon_trunk_2_svg_default;
var init_icon_trunk_2_svg = __esm({
  "lib/meta/icon_trunk-2.svg.ts"() {
    meta358 = {
      description: "This icon depicts a tree trunk with visible rings and texture. It can be used to represent nature, forestry, environment, or wood-related concepts.",
      category: ["Misc"],
      tag: ["tree trunk", "nature", "forestry", "environment", "wood", "texture", "rings", "natural", "outdoors", "timber"],
      title: "Trunk 2"
    };
    icon_trunk_2_svg_default = meta358;
  }
});

// lib/meta/icon_ufo.svg.ts
var icon_ufo_svg_exports = {};
__export(icon_ufo_svg_exports, {
  default: () => icon_ufo_svg_default,
  meta: () => meta359
});
var meta359, icon_ufo_svg_default;
var init_icon_ufo_svg = __esm({
  "lib/meta/icon_ufo.svg.ts"() {
    meta359 = {
      description: "A cute icon of a UFO spaceship, commonly associated with aliens and outer space.",
      category: ["Misc"],
      tag: ["space", "alien", "flying saucer", "science fiction", "extraterrestrial", "outer space", "technology", "futuristic", "vehicle", "flying object"],
      title: "UFO"
    };
    icon_ufo_svg_default = meta359;
  }
});

// lib/meta/icon_vote.svg.ts
var icon_vote_svg_exports = {};
__export(icon_vote_svg_exports, {
  default: () => icon_vote_svg_default,
  meta: () => meta360
});
var meta360, icon_vote_svg_default;
var init_icon_vote_svg = __esm({
  "lib/meta/icon_vote.svg.ts"() {
    meta360 = {
      "description": "The vote icon typically represents an action of choosing, selecting, or making a decision. It is commonly used to indicate a voting option or to encourage viewers to participate in a poll or survey.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "ballot",
        "election",
        "decision-making",
        "survey",
        "voting",
        "selection",
        "choose",
        "poll",
        "decision"
      ],
      "title": "Vote"
    };
    icon_vote_svg_default = meta360;
  }
});

// lib/meta/icon_wallet.svg.ts
var icon_wallet_svg_exports = {};
__export(icon_wallet_svg_exports, {
  default: () => icon_wallet_svg_default,
  meta: () => meta361
});
var meta361, icon_wallet_svg_default;
var init_icon_wallet_svg = __esm({
  "lib/meta/icon_wallet.svg.ts"() {
    meta361 = {
      "description": "A wallet icon typically represents a small, pocket-sized case used to hold cash, cards, and other essentials such as identification documents. It is commonly associated with finances, shopping, and personal belongings.",
      "category": [
        "Interface",
        "Things"
      ],
      "tag": [
        "money",
        "payment",
        "finance",
        "shopping",
        "pocket",
        "credit card",
        "cash",
        "identification",
        "personal belongings",
        "wallet"
      ],
      "title": "Wallet"
    };
    icon_wallet_svg_default = meta361;
  }
});

// lib/meta/icon_washing machine.svg.ts
var icon_washing_machine_svg_exports = {};
__export(icon_washing_machine_svg_exports, {
  default: () => icon_washing_machine_svg_default,
  meta: () => meta362
});
var meta362, icon_washing_machine_svg_default;
var init_icon_washing_machine_svg = __esm({
  "lib/meta/icon_washing machine.svg.ts"() {
    meta362 = {
      "description": "A washing machine is a household appliance used to wash laundry such as clothing and sheets. It contains a drum in which the garments are placed for cleaning with the help of water, detergent, and sometimes fabric softener. Modern washing machines may also have additional features like different wash cycles and temperature settings.",
      "category": [
        "Things",
        "Transport",
        "Home"
      ],
      "tag": [
        "laundry",
        "appliance",
        "cleaning",
        "household",
        "clothing",
        "fabric",
        "detergent",
        "home appliance",
        "washing",
        "machine"
      ],
      "title": "Washing Machine"
    };
    icon_washing_machine_svg_default = meta362;
  }
});

// lib/meta/icon_watercooker.svg.ts
var icon_watercooker_svg_exports = {};
__export(icon_watercooker_svg_exports, {
  default: () => icon_watercooker_svg_default,
  meta: () => meta363
});
var meta363, icon_watercooker_svg_default;
var init_icon_watercooker_svg = __esm({
  "lib/meta/icon_watercooker.svg.ts"() {
    meta363 = {
      "description": "A watercooker, also known as an electric kettle, is a kitchen appliance used for heating and boiling water quickly. It is typically used to make tea, coffee, or instant noodles.",
      "category": [
        "Things",
        "Kitchen"
      ],
      "tag": [
        "kitchen appliance",
        "electric kettle",
        "boiling water",
        "hot beverages",
        "tea",
        "coffee",
        "instant noodles"
      ],
      "title": "Water Cooker"
    };
    icon_watercooker_svg_default = meta363;
  }
});

// lib/meta/icon_yurt.svg.ts
var icon_yurt_svg_exports = {};
__export(icon_yurt_svg_exports, {
  default: () => icon_yurt_svg_default,
  meta: () => meta364
});
var meta364, icon_yurt_svg_default;
var init_icon_yurt_svg = __esm({
  "lib/meta/icon_yurt.svg.ts"() {
    meta364 = {
      description: "A yurt is a portable, round tent traditionally used by nomadic peoples in Central Asia. It is typically covered with skins or felt and used as a dwelling.",
      category: ["Misc"],
      tag: ["Yurt", "Nomadic", "Central Asia", "Portable", "Tent", "Traditional", "Dwelling", "Round", "Skins", "Felt"],
      title: "Yurt"
    };
    icon_yurt_svg_default = meta364;
  }
});

// lib/meta/icon_baby-stroller.svg.ts
var icon_baby_stroller_svg_exports = {};
__export(icon_baby_stroller_svg_exports, {
  default: () => icon_baby_stroller_svg_default,
  meta: () => meta365
});
var meta365, icon_baby_stroller_svg_default;
var init_icon_baby_stroller_svg = __esm({
  "lib/meta/icon_baby-stroller.svg.ts"() {
    meta365 = {
      description: "An icon of a baby stroller, typically used to represent baby products, parenting, family, and childcare.",
      category: ["Transport"],
      tag: ["baby stroller", "parenting", "family", "childcare", "infant", "baby products", "pram", "baby carriage", "stroller", "baby gear"],
      title: "Baby Stroller"
    };
    icon_baby_stroller_svg_default = meta365;
  }
});

// lib/meta/icon_clothing-tshirt.svg.ts
var icon_clothing_tshirt_svg_exports = {};
__export(icon_clothing_tshirt_svg_exports, {
  default: () => icon_clothing_tshirt_svg_default,
  meta: () => meta366
});
var meta366, icon_clothing_tshirt_svg_default;
var init_icon_clothing_tshirt_svg = __esm({
  "lib/meta/icon_clothing-tshirt.svg.ts"() {
    meta366 = {
      description: "An icon showing a basic t-shirt, commonly worn as clothing. Perfect for clothing stores, fashion websites, and design projects.",
      category: ["Product", "Apparel"],
      tag: ["T-shirt", "Clothing", "Fashion", "Style", "Apparel", "Top", "Casual", "Wearable", "Garment"],
      title: "Clothing T-shirt"
    };
    icon_clothing_tshirt_svg_default = meta366;
  }
});

// lib/meta/icon_cotton.svg.ts
var icon_cotton_svg_exports = {};
__export(icon_cotton_svg_exports, {
  default: () => icon_cotton_svg_default,
  meta: () => meta367
});
var meta367, icon_cotton_svg_default;
var init_icon_cotton_svg = __esm({
  "lib/meta/icon_cotton.svg.ts"() {
    meta367 = {
      description: "The cotton icon represents the soft and fluffy natural fibers that are commonly used to produce textiles. Cotton is known for its breathability and comfort, making it a popular choice for clothing and home textiles.",
      category: ["Product"],
      tag: ["fabric", "textile", "material", "fiber", "organic", "natural", "clothing", "home decor", "fashion", "soft"],
      title: "Cotton"
    };
    icon_cotton_svg_default = meta367;
  }
});

// lib/meta/icon_home-garden.svg.ts
var icon_home_garden_svg_exports = {};
__export(icon_home_garden_svg_exports, {
  default: () => icon_home_garden_svg_default,
  meta: () => meta368
});
var meta368, icon_home_garden_svg_default;
var init_icon_home_garden_svg = __esm({
  "lib/meta/icon_home-garden.svg.ts"() {
    meta368 = {
      description: "The home-garden icon represents products related to home and garden, such as gardening tools, decorations, plants, and outdoor furniture.",
      category: ["Product", "Nature"],
      tag: ["home decor", "gardening", "outdoor living", "plants", "tools", "furniture", "home improvement", "landscaping", "flowers", "patio"],
      title: "Home Garden"
    };
    icon_home_garden_svg_default = meta368;
  }
});

// lib/meta/icon_hypoallergenic.svg.ts
var icon_hypoallergenic_svg_exports = {};
__export(icon_hypoallergenic_svg_exports, {
  default: () => icon_hypoallergenic_svg_default,
  meta: () => meta369
});
var meta369, icon_hypoallergenic_svg_default;
var init_icon_hypoallergenic_svg = __esm({
  "lib/meta/icon_hypoallergenic.svg.ts"() {
    meta369 = {
      description: "The hypoallergenic icon indicates that the product is designed to minimize allergic reactions, making it suitable for those with sensitive skin or allergies.",
      category: ["Product"],
      tag: ["allergies", "sensitive skin", "irritation-free", "hypoallergenic", "skin care", "cosmetics", "healthcare", "wellness", "gentle", "safe"],
      title: "Hypoallergenic"
    };
    icon_hypoallergenic_svg_default = meta369;
  }
});

// lib/meta/icon_no-leaks.svg.ts
var icon_no_leaks_svg_exports = {};
__export(icon_no_leaks_svg_exports, {
  default: () => icon_no_leaks_svg_default,
  meta: () => meta370
});
var meta370, icon_no_leaks_svg_default;
var init_icon_no_leaks_svg = __esm({
  "lib/meta/icon_no-leaks.svg.ts"() {
    meta370 = {
      description: "The 'No Leaks' icon depicts a symbol indicating the absence of leaks or leaks prevention. It can be used to represent leak-proof products, leak-resistant materials, or leak-free guarantee.",
      category: ["Product"],
      tag: ["no leaks", "leak-proof", "leak-resistant", "prevention", "guarantee", "protection", "security", "maintenance", "quality", "repair"],
      title: "No Leaks"
    };
    icon_no_leaks_svg_default = meta370;
  }
});

// lib/meta/icon_suitcase-jobs.svg.ts
var icon_suitcase_jobs_svg_exports = {};
__export(icon_suitcase_jobs_svg_exports, {
  default: () => icon_suitcase_jobs_svg_default,
  meta: () => meta371
});
var meta371, icon_suitcase_jobs_svg_default;
var init_icon_suitcase_jobs_svg = __esm({
  "lib/meta/icon_suitcase-jobs.svg.ts"() {
    meta371 = {
      description: "A stylish icon of a suitcase with a variety of job-related elements, perfect for representing work, business, or travel themes.",
      category: ["Product", "Transport"],
      tag: ["job", "career", "briefcase", "work", "business", "luggage", "travel", "professional", "employment", "office"],
      title: "Suitcase Jobs"
    };
    icon_suitcase_jobs_svg_default = meta371;
  }
});

// lib/meta/icon_shopping-bag-2.svg.ts
var icon_shopping_bag_2_svg_exports = {};
__export(icon_shopping_bag_2_svg_exports, {
  default: () => icon_shopping_bag_2_svg_default,
  meta: () => meta372
});
var meta372, icon_shopping_bag_2_svg_default;
var init_icon_shopping_bag_2_svg = __esm({
  "lib/meta/icon_shopping-bag-2.svg.ts"() {
    meta372 = {
      description: "A shopping bag icon depicting a modern design with two handles. This icon is perfect for representing shopping carts, online shopping, e-commerce, and retail-related concepts.",
      category: ["Shopping"],
      tag: ["Bag", "Cart", "Handle", "Online shopping", "E-commerce", "Retail", "Purchase", "Consumerism", "Market", "Shop"],
      title: "Shopping Bag 2"
    };
    icon_shopping_bag_2_svg_default = meta372;
  }
});

// lib/meta/icon_shopping-bag-3.svg.ts
var icon_shopping_bag_3_svg_exports = {};
__export(icon_shopping_bag_3_svg_exports, {
  default: () => icon_shopping_bag_3_svg_default,
  meta: () => meta373
});
var meta373, icon_shopping_bag_3_svg_default;
var init_icon_shopping_bag_3_svg = __esm({
  "lib/meta/icon_shopping-bag-3.svg.ts"() {
    meta373 = {
      description: "The shopping bag icon is perfect for representing shopping, e-commerce, retail, and consumerism. The design features a simple bag with handles, making it easily recognizable.",
      category: ["Shopping"],
      tag: ["Retail", "E-commerce", "Consumerism", "Online shopping", "Store", "Purchase", "Shop", "Add to cart", "Buy", "Commerce"],
      title: "Shopping Bag 3"
    };
    icon_shopping_bag_3_svg_default = meta373;
  }
});

// lib/meta/icon_shopping-bag-discount.svg.ts
var icon_shopping_bag_discount_svg_exports = {};
__export(icon_shopping_bag_discount_svg_exports, {
  default: () => icon_shopping_bag_discount_svg_default,
  meta: () => meta374
});
var meta374, icon_shopping_bag_discount_svg_default;
var init_icon_shopping_bag_discount_svg = __esm({
  "lib/meta/icon_shopping-bag-discount.svg.ts"() {
    meta374 = {
      description: "An icon representing a shopping bag with a discount offer, making it ideal for indicating discounted items or promotions in shopping-related contexts.",
      category: ["Shopping"],
      tag: ["Discount", "Sale", "Offer", "Shopping Bag", "E-commerce", "Promotion", "Retail", "Shopping Cart", "Value"],
      title: "Shopping Bag Discount"
    };
    icon_shopping_bag_discount_svg_default = meta374;
  }
});

// lib/meta/icon_shopping-bag.svg.ts
var icon_shopping_bag_svg_exports = {};
__export(icon_shopping_bag_svg_exports, {
  default: () => icon_shopping_bag_svg_default,
  meta: () => meta375
});
var meta375, icon_shopping_bag_svg_default;
var init_icon_shopping_bag_svg = __esm({
  "lib/meta/icon_shopping-bag.svg.ts"() {
    meta375 = {
      description: "The shopping bag icon represents shopping and retail. It is commonly used to symbolize a place where items can be purchased, such as a store or online marketplace.",
      category: ["Shopping"],
      tag: ["Store", "Retail", "Marketplace", "Online shopping", "Purchase", "Bag", "Consumerism", "E-commerce", "Fashion", "Shopaholic"],
      title: "Shopping Bag"
    };
    icon_shopping_bag_svg_default = meta375;
  }
});

// lib/meta/icon_shopping-basket-rounded.svg.ts
var icon_shopping_basket_rounded_svg_exports = {};
__export(icon_shopping_basket_rounded_svg_exports, {
  default: () => icon_shopping_basket_rounded_svg_default,
  meta: () => meta376
});
var meta376, icon_shopping_basket_rounded_svg_default;
var init_icon_shopping_basket_rounded_svg = __esm({
  "lib/meta/icon_shopping-basket-rounded.svg.ts"() {
    meta376 = {
      description: "The shopping-basket-rounded icon is a rounded shopping basket symbol, commonly used to represent a shopping cart or basket in e-commerce websites and applications.",
      category: ["Shopping"],
      tag: ["Basket", "Cart", "E-commerce", "Online shopping", "Retail", "Add to cart", "Purchase", "Shop", "Store", "Items"],
      title: "Shopping Basket Rounded"
    };
    icon_shopping_basket_rounded_svg_default = meta376;
  }
});

// lib/meta/icon_shopping-basket.svg.ts
var icon_shopping_basket_svg_exports = {};
__export(icon_shopping_basket_svg_exports, {
  default: () => icon_shopping_basket_svg_default,
  meta: () => meta377
});
var meta377, icon_shopping_basket_svg_default;
var init_icon_shopping_basket_svg = __esm({
  "lib/meta/icon_shopping-basket.svg.ts"() {
    meta377 = {
      description: "The shopping basket icon represents a virtual basket where items can be added for purchase. It is commonly used in e-commerce websites and applications to indicate a shopping cart or the act of adding products to a cart.",
      category: ["Interface", "Symbol"],
      tag: ["shopping basket", "cart", "online shopping", "ecommerce", "add to cart", "purchase", "digital shopping", "shopping icon", "retail", "virtual basket"],
      title: "Shopping Basket"
    };
    icon_shopping_basket_svg_default = meta377;
  }
});

// lib/meta/icon_shopping-cart-fast.svg.ts
var icon_shopping_cart_fast_svg_exports = {};
__export(icon_shopping_cart_fast_svg_exports, {
  default: () => icon_shopping_cart_fast_svg_default,
  meta: () => meta378
});
var meta378, icon_shopping_cart_fast_svg_default;
var init_icon_shopping_cart_fast_svg = __esm({
  "lib/meta/icon_shopping-cart-fast.svg.ts"() {
    meta378 = {
      description: "A fast shopping cart icon designed for quick and efficient shopping experiences. With sleek lines and a dynamic look, this icon symbolizes speed and convenience in the shopping process.",
      category: ["Interface", "Symbol", "Transport"],
      tag: ["e-commerce", "online shopping", "add to cart", "retail", "speedy checkout", "purchase", "fast delivery", "shopping app", "digital commerce", "ecommerce website"],
      title: "Shopping Cart Fast"
    };
    icon_shopping_cart_fast_svg_default = meta378;
  }
});

// lib/meta/icon_shopping-cart.svg.ts
var icon_shopping_cart_svg_exports = {};
__export(icon_shopping_cart_svg_exports, {
  default: () => icon_shopping_cart_svg_default,
  meta: () => meta379
});
var meta379, icon_shopping_cart_svg_default;
var init_icon_shopping_cart_svg = __esm({
  "lib/meta/icon_shopping-cart.svg.ts"() {
    meta379 = {
      description: "The shopping cart icon typically represents an online store or e-commerce shopping experience. It is commonly used to indicate where users can view and manage items they intend to purchase.",
      category: ["Interface", "Symbol"],
      tag: ["shopping", "cart", "online", "store", "e-commerce", "add to cart", "purchase", "shop", "buy", "items"],
      title: "Shopping Cart"
    };
    icon_shopping_cart_svg_default = meta379;
  }
});

// lib/meta/icon_shopping-label.svg.ts
var icon_shopping_label_svg_exports = {};
__export(icon_shopping_label_svg_exports, {
  default: () => icon_shopping_label_svg_default,
  meta: () => meta380
});
var meta380, icon_shopping_label_svg_default;
var init_icon_shopping_label_svg = __esm({
  "lib/meta/icon_shopping-label.svg.ts"() {
    meta380 = {
      description: "The shopping label icon is a simple design of a label commonly used in retail to display pricing or information. It can be used in various shopping-related designs and websites.",
      category: ["Interface", "Symbol"],
      tag: ["retail", "price", "information", "shopping", "sale", "label", "ecommerce", "store", "product", "tag"],
      title: "Shopping Label"
    };
    icon_shopping_label_svg_default = meta380;
  }
});

// lib/meta/icon_shopping-labels.svg.ts
var icon_shopping_labels_svg_exports = {};
__export(icon_shopping_labels_svg_exports, {
  default: () => icon_shopping_labels_svg_default,
  meta: () => meta381
});
var meta381, icon_shopping_labels_svg_default;
var init_icon_shopping_labels_svg = __esm({
  "lib/meta/icon_shopping-labels.svg.ts"() {
    meta381 = {
      description: "The shopping labels icon is a set of labels commonly used in retail and online shopping to indicate prices, promotions, and product information. These labels are versatile and can be customized to suit different marketing strategies.",
      category: ["Interface", "Symbol"],
      tag: ["shopping", "labels", "retail", "prices", "promotions", "product", "information", "marketing", "strategy", "online shopping"],
      title: "Shopping Labels"
    };
    icon_shopping_labels_svg_default = meta381;
  }
});

// lib/meta/icon-43.svg.ts
var icon_43_svg_exports = {};
__export(icon_43_svg_exports, {
  default: () => icon_43_svg_default,
  meta: () => meta382
});
var meta382, icon_43_svg_default;
var init_icon_43_svg = __esm({
  "lib/meta/icon-43.svg.ts"() {
    meta382 = {
      "description": "Icon-43 is a special character depicting a unique symbol or design. It can be used to add a distinctive touch to various designs and projects.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "symbol",
        "design",
        "unique",
        "icon",
        "special",
        "character",
        "decorative",
        "graphic",
        "artistic",
        "distinctive"
      ],
      "title": "Icon 43"
    };
    icon_43_svg_default = meta382;
  }
});

// lib/meta/icon_baht-symbol.svg.ts
var icon_baht_symbol_svg_exports = {};
__export(icon_baht_symbol_svg_exports, {
  default: () => icon_baht_symbol_svg_default,
  meta: () => meta383
});
var meta383, icon_baht_symbol_svg_default;
var init_icon_baht_symbol_svg = __esm({
  "lib/meta/icon_baht-symbol.svg.ts"() {
    meta383 = {
      "description": "The symbol for the Thai baht, the currency of Thailand. It features a stylized letter '\u0E3F' representing the currency.",
      "category": [
        "Symbol"
      ],
      "tag": [
        "baht",
        "currency",
        "Thai",
        "money",
        "finance",
        "economy",
        "foreign exchange",
        "currency symbol",
        "Thailand"
      ],
      "title": "Baht Symbol"
    };
    icon_baht_symbol_svg_default = meta383;
  }
});

// lib/meta/icon_dice-1.svg.ts
var icon_dice_1_svg_exports = {};
__export(icon_dice_1_svg_exports, {
  default: () => icon_dice_1_svg_default,
  meta: () => meta384
});
var meta384, icon_dice_1_svg_default;
var init_icon_dice_1_svg = __esm({
  "lib/meta/icon_dice-1.svg.ts"() {
    meta384 = {
      "description": "An icon of a single dice showing the number 1, commonly used in games or for random selection processes.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "dice",
        "game",
        "random",
        "number",
        "one",
        "luck",
        "casino",
        "probability",
        "chance",
        "symbol"
      ],
      "title": "Dice 1"
    };
    icon_dice_1_svg_default = meta384;
  }
});

// lib/meta/icon_dice-2.svg.ts
var icon_dice_2_svg_exports = {};
__export(icon_dice_2_svg_exports, {
  default: () => icon_dice_2_svg_default,
  meta: () => meta385
});
var meta385, icon_dice_2_svg_default;
var init_icon_dice_2_svg = __esm({
  "lib/meta/icon_dice-2.svg.ts"() {
    meta385 = {
      "description": "The icon dice-2 represents a six-sided dice with the number 2 facing up. It can be used to indicate a random or probability-related concept.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "dice",
        "two",
        "random",
        "probability",
        "game",
        "luck",
        "chance",
        "gambling",
        "dice roll"
      ],
      "title": "Dice 2"
    };
    icon_dice_2_svg_default = meta385;
  }
});

// lib/meta/icon_dice-3.svg.ts
var icon_dice_3_svg_exports = {};
__export(icon_dice_3_svg_exports, {
  default: () => icon_dice_3_svg_default,
  meta: () => meta386
});
var meta386, icon_dice_3_svg_default;
var init_icon_dice_3_svg = __esm({
  "lib/meta/icon_dice-3.svg.ts"() {
    meta386 = {
      "description": "The 'dice-3' icon represents a standard six-sided dice showing the number 3. It is commonly used to symbolize randomness, luck, chance, and games.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "dice",
        "three",
        "randomness",
        "luck",
        "chance",
        "games",
        "gambling",
        "number",
        "probability",
        "dice roll"
      ],
      "title": "Dice Three"
    };
    icon_dice_3_svg_default = meta386;
  }
});

// lib/meta/icon_dice-4.svg.ts
var icon_dice_4_svg_exports = {};
__export(icon_dice_4_svg_exports, {
  default: () => icon_dice_4_svg_default,
  meta: () => meta387
});
var meta387, icon_dice_4_svg_default;
var init_icon_dice_4_svg = __esm({
  "lib/meta/icon_dice-4.svg.ts"() {
    meta387 = {
      "description": "The icon depicts a six-sided dice with the number '4' displayed on top. It is commonly used to represent the number '4' in dice games or as a general symbol for luck or chance.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "dice",
        "number",
        "luck",
        "game",
        "gambling",
        "random",
        "probability",
        "dice game",
        "casino",
        "board game"
      ],
      "title": "Dice Four"
    };
    icon_dice_4_svg_default = meta387;
  }
});

// lib/meta/icon_dice-5.svg.ts
var icon_dice_5_svg_exports = {};
__export(icon_dice_5_svg_exports, {
  default: () => icon_dice_5_svg_default,
  meta: () => meta388
});
var meta388, icon_dice_5_svg_default;
var init_icon_dice_5_svg = __esm({
  "lib/meta/icon_dice-5.svg.ts"() {
    meta388 = {
      "description": "The icon dice-5 represents a standard six-sided dice with the number 5 facing up. This icon is often used in gaming applications, educational tools, and recreational websites.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "dice",
        "game",
        "number",
        "random",
        "probability",
        "gambling",
        "cube",
        "luck",
        "rolling",
        "numeric"
      ],
      "title": "Dice 5"
    };
    icon_dice_5_svg_default = meta388;
  }
});

// lib/meta/icon_dice-6.svg.ts
var icon_dice_6_svg_exports = {};
__export(icon_dice_6_svg_exports, {
  default: () => icon_dice_6_svg_default,
  meta: () => meta389
});
var meta389, icon_dice_6_svg_default;
var init_icon_dice_6_svg = __esm({
  "lib/meta/icon_dice-6.svg.ts"() {
    meta389 = {
      "description": "An icon representing a six-sided dice commonly used in games to determine a random number between 1 and 6.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "games",
        "random",
        "numbers",
        "chance",
        "board games",
        "gambling",
        "casino",
        "luck",
        "dice roll",
        "dice game"
      ],
      "title": "Dice 6"
    };
    icon_dice_6_svg_default = meta389;
  }
});

// lib/meta/icon_dice-7.svg.ts
var icon_dice_7_svg_exports = {};
__export(icon_dice_7_svg_exports, {
  default: () => icon_dice_7_svg_default,
  meta: () => meta390
});
var meta390, icon_dice_7_svg_default;
var init_icon_dice_7_svg = __esm({
  "lib/meta/icon_dice-7.svg.ts"() {
    meta390 = {
      "description": "An icon representing a dice with seven dots on it, typically used to symbolize luck or randomness in games or activities.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "dice",
        "luck",
        "randomness",
        "game",
        "activity",
        "number",
        "symbol",
        "chance",
        "gambling",
        "seven"
      ],
      "title": "Dice 7"
    };
    icon_dice_7_svg_default = meta390;
  }
});

// lib/meta/icon_dice-8.svg.ts
var icon_dice_8_svg_exports = {};
__export(icon_dice_8_svg_exports, {
  default: () => icon_dice_8_svg_default,
  meta: () => meta391
});
var meta391, icon_dice_8_svg_default;
var init_icon_dice_8_svg = __esm({
  "lib/meta/icon_dice-8.svg.ts"() {
    meta391 = {
      "description": "The icon represents a dice with 8 sides, featuring numbers ranging from 1 to 8 on its faces. It is commonly used in tabletop games and gaming interfaces.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "dice",
        "dice roll",
        "board game",
        "random number",
        "game interface",
        "leisure",
        "probability",
        "gambling",
        "luck",
        "chance"
      ],
      "title": "Dice 8"
    };
    icon_dice_8_svg_default = meta391;
  }
});

// lib/meta/icon_dice-9.svg.ts
var icon_dice_9_svg_exports = {};
__export(icon_dice_9_svg_exports, {
  default: () => icon_dice_9_svg_default,
  meta: () => meta392
});
var meta392, icon_dice_9_svg_default;
var init_icon_dice_9_svg = __esm({
  "lib/meta/icon_dice-9.svg.ts"() {
    meta392 = {
      "description": "An icon of a dice with the number 9 facing up, representing the number nine in a gaming context.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "dice",
        "number",
        "nine",
        "gaming",
        "random",
        "game",
        "probability",
        "chance",
        "roll",
        "dice game"
      ],
      "title": "Dice 9"
    };
    icon_dice_9_svg_default = meta392;
  }
});

// lib/meta/icon_digit-digital-1.svg.ts
var icon_digit_digital_1_svg_exports = {};
__export(icon_digit_digital_1_svg_exports, {
  default: () => icon_digit_digital_1_svg_default,
  meta: () => meta393
});
var meta393, icon_digit_digital_1_svg_default;
var init_icon_digit_digital_1_svg = __esm({
  "lib/meta/icon_digit-digital-1.svg.ts"() {
    meta393 = {
      "description": "A digital representation of the number 1, designed in a modern and sleek style.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "number",
        "digital",
        "modern",
        "sleek",
        "one",
        "icon",
        "symbol",
        "digit",
        "technology",
        "design"
      ],
      "title": "Digit Digital 1"
    };
    icon_digit_digital_1_svg_default = meta393;
  }
});

// lib/meta/icon_digit-digital-2.svg.ts
var icon_digit_digital_2_svg_exports = {};
__export(icon_digit_digital_2_svg_exports, {
  default: () => icon_digit_digital_2_svg_default,
  meta: () => meta394
});
var meta394, icon_digit_digital_2_svg_default;
var init_icon_digit_digital_2_svg = __esm({
  "lib/meta/icon_digit-digital-2.svg.ts"() {
    meta394 = {
      "description": "The digit 2 represented in a digital style, suitable for use in digital themes, technology-related designs, or any project that requires a modern and sleek appearance.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "number",
        "digit",
        "2",
        "digital",
        "modern",
        "technology",
        "numeral",
        "tech",
        "stylish",
        "sleek"
      ],
      "title": "Digit Digital 2"
    };
    icon_digit_digital_2_svg_default = meta394;
  }
});

// lib/meta/icon_digit-digital-3.svg.ts
var icon_digit_digital_3_svg_exports = {};
__export(icon_digit_digital_3_svg_exports, {
  default: () => icon_digit_digital_3_svg_default,
  meta: () => meta395
});
var meta395, icon_digit_digital_3_svg_default;
var init_icon_digit_digital_3_svg = __esm({
  "lib/meta/icon_digit-digital-3.svg.ts"() {
    meta395 = {
      "description": "A digital style icon representing the number three, designed with a modern and sleek look.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "Three",
        "Number",
        "Digital",
        "Counting",
        "Digit",
        "Technology",
        "Modern",
        "Sleek",
        "Typography",
        "Numeric"
      ],
      "title": "Digit Digital 3"
    };
    icon_digit_digital_3_svg_default = meta395;
  }
});

// lib/meta/icon_digit-digital-4.svg.ts
var icon_digit_digital_4_svg_exports = {};
__export(icon_digit_digital_4_svg_exports, {
  default: () => icon_digit_digital_4_svg_default,
  meta: () => meta396
});
var meta396, icon_digit_digital_4_svg_default;
var init_icon_digit_digital_4_svg = __esm({
  "lib/meta/icon_digit-digital-4.svg.ts"() {
    meta396 = {
      "description": "The icon 'digit-digital-4' is a representation of the number 4 in a digital style, often used to indicate numerical values or quantities in a digital context.",
      "category": [
        "Text"
      ],
      "tag": [
        "digit",
        "number",
        "digital",
        "four",
        "quantity",
        "value",
        "counter",
        "digital style",
        "numeral",
        "textbox"
      ],
      "title": "Digit Digital 4"
    };
    icon_digit_digital_4_svg_default = meta396;
  }
});

// lib/meta/icon_digit-digital-5.svg.ts
var icon_digit_digital_5_svg_exports = {};
__export(icon_digit_digital_5_svg_exports, {
  default: () => icon_digit_digital_5_svg_default,
  meta: () => meta397
});
var meta397, icon_digit_digital_5_svg_default;
var init_icon_digit_digital_5_svg = __esm({
  "lib/meta/icon_digit-digital-5.svg.ts"() {
    meta397 = {
      "description": "The icon 'digit-digital-5' features the number 5 displayed in a digital style. This icon is great for representing numerical information or highlighting the number 5 in a digital context.",
      "category": [
        "Text"
      ],
      "tag": [
        "number",
        "digit",
        "digital",
        "five",
        "numeric",
        "information",
        "display",
        "technology",
        "counting",
        "data"
      ],
      "title": "Digit Digital 5"
    };
    icon_digit_digital_5_svg_default = meta397;
  }
});

// lib/meta/icon_digit-digital-6.svg.ts
var icon_digit_digital_6_svg_exports = {};
__export(icon_digit_digital_6_svg_exports, {
  default: () => icon_digit_digital_6_svg_default,
  meta: () => meta398
});
var meta398, icon_digit_digital_6_svg_default;
var init_icon_digit_digital_6_svg = __esm({
  "lib/meta/icon_digit-digital-6.svg.ts"() {
    meta398 = {
      "description": "The icon 'digit-digital-6' is a special character representing the numerical digit 6 in a digital style. It has a modern and futuristic look, commonly used in technology-related designs.",
      "category": [
        "Symbol"
      ],
      "tag": [
        "digit",
        "digital",
        "number",
        "six",
        "technology",
        "modern",
        "futuristic",
        "special character",
        "icon"
      ],
      "title": "Digit Digital 6"
    };
    icon_digit_digital_6_svg_default = meta398;
  }
});

// lib/meta/icon_digit-digital-7.svg.ts
var icon_digit_digital_7_svg_exports = {};
__export(icon_digit_digital_7_svg_exports, {
  default: () => icon_digit_digital_7_svg_default,
  meta: () => meta399
});
var meta399, icon_digit_digital_7_svg_default;
var init_icon_digit_digital_7_svg = __esm({
  "lib/meta/icon_digit-digital-7.svg.ts"() {
    meta399 = {
      "description": "The digit digital 7 icon is a special character that represents the number 7 in a digital style. It is commonly used in digital interfaces, calculators, and electronic displays.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "digit",
        "number",
        "seven",
        "digital",
        "interface",
        "calculator",
        "electronic",
        "display",
        "technology"
      ],
      "title": "Digit Digital 7"
    };
    icon_digit_digital_7_svg_default = meta399;
  }
});

// lib/meta/icon_digit-digital-8.svg.ts
var icon_digit_digital_8_svg_exports = {};
__export(icon_digit_digital_8_svg_exports, {
  default: () => icon_digit_digital_8_svg_default,
  meta: () => meta400
});
var meta400, icon_digit_digital_8_svg_default;
var init_icon_digit_digital_8_svg = __esm({
  "lib/meta/icon_digit-digital-8.svg.ts"() {
    meta400 = {
      "description": "An icon of the digit 8 in a digital style, perfect for representing numerical information or scores in a modern and sleek way.",
      "category": [
        "Symbol"
      ],
      "tag": [
        "digital",
        "number",
        "eight",
        "modern",
        "numeral",
        "data",
        "information",
        "score",
        "counter"
      ],
      "title": "Digit Digital 8"
    };
    icon_digit_digital_8_svg_default = meta400;
  }
});

// lib/meta/icon_digit-digital-9.svg.ts
var icon_digit_digital_9_svg_exports = {};
__export(icon_digit_digital_9_svg_exports, {
  default: () => icon_digit_digital_9_svg_default,
  meta: () => meta401
});
var meta401, icon_digit_digital_9_svg_default;
var init_icon_digit_digital_9_svg = __esm({
  "lib/meta/icon_digit-digital-9.svg.ts"() {
    meta401 = {
      "description": "A digital representation of the number 9, designed with straight lines to resemble a digital display style.",
      "category": [
        "Text"
      ],
      "tag": [
        "digital",
        "number",
        "nine",
        "display",
        "special character",
        "technology",
        "counting",
        "numeric",
        "typography"
      ],
      "title": "Digit Digital 9"
    };
    icon_digit_digital_9_svg_default = meta401;
  }
});

// lib/meta/icon_digit-digtal-0.svg.ts
var icon_digit_digtal_0_svg_exports = {};
__export(icon_digit_digtal_0_svg_exports, {
  default: () => icon_digit_digtal_0_svg_default,
  meta: () => meta402
});
var meta402, icon_digit_digtal_0_svg_default;
var init_icon_digit_digtal_0_svg = __esm({
  "lib/meta/icon_digit-digtal-0.svg.ts"() {
    meta402 = {
      "description": "An icon of the digit '0' in a digital style, commonly used for representing numbers in a technological or modern context.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "digital",
        "number",
        "zero",
        "numeric",
        "technology",
        "modern",
        "symbol",
        "numeral",
        "counting",
        "UI"
      ],
      "title": "Digit Digital 0"
    };
    icon_digit_digtal_0_svg_default = meta402;
  }
});

// lib/meta/icon_dollar.svg.ts
var icon_dollar_svg_exports = {};
__export(icon_dollar_svg_exports, {
  default: () => icon_dollar_svg_default,
  meta: () => meta403
});
var meta403, icon_dollar_svg_default;
var init_icon_dollar_svg = __esm({
  "lib/meta/icon_dollar.svg.ts"() {
    meta403 = {
      "description": "The dollar icon represents currency and is commonly used to symbolize money or financial transactions.",
      "category": [
        "Symbol"
      ],
      "tag": [
        "currency",
        "money",
        "financial",
        "dollar sign",
        "business",
        "economy",
        "wealth",
        "payment",
        "cost",
        "cash"
      ],
      "title": "Dollar"
    };
    icon_dollar_svg_default = meta403;
  }
});

// lib/meta/icon_euro.svg.ts
var icon_euro_svg_exports = {};
__export(icon_euro_svg_exports, {
  default: () => icon_euro_svg_default,
  meta: () => meta404
});
var meta404, icon_euro_svg_default;
var init_icon_euro_svg = __esm({
  "lib/meta/icon_euro.svg.ts"() {
    meta404 = {
      "description": "The euro icon represents the official currency of the Eurozone. It is commonly used to denote amounts of money in euros.",
      "category": [
        "Symbol"
      ],
      "tag": [
        "currency",
        "eurozone",
        "money",
        "finance",
        "Europe",
        "payment",
        "foreign exchange",
        "banking",
        "economy",
        "business"
      ],
      "title": "Euro"
    };
    icon_euro_svg_default = meta404;
  }
});

// lib/meta/icon_percentage.svg.ts
var icon_percentage_svg_exports = {};
__export(icon_percentage_svg_exports, {
  default: () => icon_percentage_svg_default,
  meta: () => meta405
});
var meta405, icon_percentage_svg_default;
var init_icon_percentage_svg = __esm({
  "lib/meta/icon_percentage.svg.ts"() {
    meta405 = {
      "description": "An icon representing a percentage symbol, commonly used to indicate a proportion or rate.",
      "category": [
        "Symbol"
      ],
      "tag": [
        "numeric",
        "math",
        "finance",
        "statistics",
        "percentage",
        "ratio",
        "data",
        "value",
        "proportion"
      ],
      "title": "Percentage"
    };
    icon_percentage_svg_default = meta405;
  }
});

// lib/meta/icon_pound-symbol.svg.ts
var icon_pound_symbol_svg_exports = {};
__export(icon_pound_symbol_svg_exports, {
  default: () => icon_pound_symbol_svg_default,
  meta: () => meta406
});
var meta406, icon_pound_symbol_svg_default;
var init_icon_pound_symbol_svg = __esm({
  "lib/meta/icon_pound-symbol.svg.ts"() {
    meta406 = {
      "description": "The pound symbol, also known as the hash or number sign, is a special character commonly used in social media, coding, and writing to indicate a numerical value or to represent a tag.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "pound",
        "hash",
        "number sign",
        "social media",
        "coding",
        "tag",
        "special character",
        "symbol",
        "punctuation",
        "keyboard"
      ],
      "title": "Pound Symbol"
    };
    icon_pound_symbol_svg_default = meta406;
  }
});

// lib/meta/icon_promille.svg.ts
var icon_promille_svg_exports = {};
__export(icon_promille_svg_exports, {
  default: () => icon_promille_svg_default,
  meta: () => meta407
});
var meta407, icon_promille_svg_default;
var init_icon_promille_svg = __esm({
  "lib/meta/icon_promille.svg.ts"() {
    meta407 = {
      "description": "The icon 'promille' represents the symbol for permillage, which is used to denote a concentration of one part per thousand. It is commonly used in contexts such as blood alcohol content.",
      "category": [
        "Symbol"
      ],
      "tag": [
        "permillage",
        "concentration",
        "blood alcohol content",
        "special character",
        "mathematics",
        "unit",
        "measurement",
        "symbol",
        "label",
        "fraction"
      ],
      "title": "Promille"
    };
    icon_promille_svg_default = meta407;
  }
});

// lib/meta/icon_rubles-symbol.svg.ts
var icon_rubles_symbol_svg_exports = {};
__export(icon_rubles_symbol_svg_exports, {
  default: () => icon_rubles_symbol_svg_default,
  meta: () => meta408
});
var meta408, icon_rubles_symbol_svg_default;
var init_icon_rubles_symbol_svg = __esm({
  "lib/meta/icon_rubles-symbol.svg.ts"() {
    meta408 = {
      "description": "The rubles symbol icon represents the currency symbol of Russian rubles. It is commonly used to indicate money, prices, and financial transactions related to Russia.",
      "category": [
        "Symbol"
      ],
      "tag": [
        "currency",
        "Russia",
        "finance",
        "money",
        "economy",
        "payment",
        "ruble",
        "Russian rubles"
      ],
      "title": "Rubles Symbol"
    };
    icon_rubles_symbol_svg_default = meta408;
  }
});

// lib/meta/icon_rupee-symbol copy.svg.ts
var icon_rupee_symbol_copy_svg_exports = {};
__export(icon_rupee_symbol_copy_svg_exports, {
  default: () => icon_rupee_symbol_copy_svg_default,
  meta: () => meta409
});
var meta409, icon_rupee_symbol_copy_svg_default;
var init_icon_rupee_symbol_copy_svg = __esm({
  "lib/meta/icon_rupee-symbol copy.svg.ts"() {
    meta409 = {
      "description": "The rupee symbol is a special character used to represent the Indian currency, often denoted as INR. It is widely recognized in financial contexts and is commonly used in India.",
      "category": [
        "Special Characters"
      ],
      "tag": [
        "currency symbol",
        "Indian rupee",
        "INR",
        "finance",
        "currency",
        "money",
        "monetary unit",
        "economy",
        "foreign exchange",
        "banking"
      ],
      "title": "Rupee Symbol Copy"
    };
    icon_rupee_symbol_copy_svg_default = meta409;
  }
});

// lib/meta/icon_rupee-symbol.svg.ts
var icon_rupee_symbol_svg_exports = {};
__export(icon_rupee_symbol_svg_exports, {
  default: () => icon_rupee_symbol_svg_default,
  meta: () => meta410
});
var meta410, icon_rupee_symbol_svg_default;
var init_icon_rupee_symbol_svg = __esm({
  "lib/meta/icon_rupee-symbol.svg.ts"() {
    meta410 = {
      "description": "The rupee symbol icon represents the currency symbol for the Indian Rupee. It is commonly used to denote the currency in financial contexts related to India.",
      "category": [
        "Special Characters",
        "Symbol"
      ],
      "tag": [
        "currency",
        "money",
        "India",
        "finance",
        "economy",
        "cash",
        "payment",
        "banking",
        "monetary",
        "value"
      ],
      "title": "Rupee Symbol"
    };
    icon_rupee_symbol_svg_default = meta410;
  }
});

// lib/meta/icon_symbol-female.svg.ts
var icon_symbol_female_svg_exports = {};
__export(icon_symbol_female_svg_exports, {
  default: () => icon_symbol_female_svg_default,
  meta: () => meta411
});
var meta411, icon_symbol_female_svg_default;
var init_icon_symbol_female_svg = __esm({
  "lib/meta/icon_symbol-female.svg.ts"() {
    meta411 = {
      "description": "A symbol representing the female gender, commonly used to indicate female restrooms or as a gender symbol.",
      "category": [
        "Symbol"
      ],
      "tag": [
        "female",
        "gender",
        "woman",
        "restroom",
        "feminine",
        "symbol",
        "ladies",
        "feminist",
        "equality",
        "women's rights"
      ],
      "title": "Symbol Female"
    };
    icon_symbol_female_svg_default = meta411;
  }
});

// lib/meta/icon_symbol-male.svg.ts
var icon_symbol_male_svg_exports = {};
__export(icon_symbol_male_svg_exports, {
  default: () => icon_symbol_male_svg_default,
  meta: () => meta412
});
var meta412, icon_symbol_male_svg_default;
var init_icon_symbol_male_svg = __esm({
  "lib/meta/icon_symbol-male.svg.ts"() {
    meta412 = {
      "description": "The symbol-male icon represents the male gender or masculinity. It is commonly used to indicate male-specific information or characteristics.",
      "category": [
        "Symbol"
      ],
      "tag": [
        "Male",
        "Gender",
        "Masculinity",
        "Men",
        "Man",
        "Icon",
        "Characteristic",
        "Information",
        "Identity",
        "Symbol"
      ],
      "title": "Symbol Male"
    };
    icon_symbol_male_svg_default = meta412;
  }
});

// lib/meta/icon_symbol-unisex.svg.ts
var icon_symbol_unisex_svg_exports = {};
__export(icon_symbol_unisex_svg_exports, {
  default: () => icon_symbol_unisex_svg_default,
  meta: () => meta413
});
var meta413, icon_symbol_unisex_svg_default;
var init_icon_symbol_unisex_svg = __esm({
  "lib/meta/icon_symbol-unisex.svg.ts"() {
    meta413 = {
      "description": "A gender-neutral symbol representing both male and female genders. Can be used to indicate unisex facilities or products that are suitable for all genders.",
      "category": [
        "Symbol"
      ],
      "tag": [
        "gender-neutral",
        "male",
        "female",
        "equality",
        "inclusive",
        "signage",
        "bathroom",
        "unisex",
        "healthcare"
      ],
      "title": "Symbol Unisex"
    };
    icon_symbol_unisex_svg_default = meta413;
  }
});

// lib/meta/icon_three-dots-diagonal-major.svg.ts
var icon_three_dots_diagonal_major_svg_exports = {};
__export(icon_three_dots_diagonal_major_svg_exports, {
  default: () => icon_three_dots_diagonal_major_svg_default,
  meta: () => meta414
});
var meta414, icon_three_dots_diagonal_major_svg_default;
var init_icon_three_dots_diagonal_major_svg = __esm({
  "lib/meta/icon_three-dots-diagonal-major.svg.ts"() {
    meta414 = {
      "description": "The three dots diagonal major icon consists of three dots positioned diagonally from bottom-left to top-right. This icon is commonly used in user interfaces to indicate additional options or actions that can be accessed.",
      "category": [
        "Interface"
      ],
      "tag": [
        "menu",
        "dots",
        "more",
        "options",
        "settings",
        "actions",
        "interface",
        "user interface",
        "navigation",
        "expand"
      ],
      "title": "Three Dots Diagonal Major"
    };
    icon_three_dots_diagonal_major_svg_default = meta414;
  }
});

// lib/meta/icon_three-dots-diagonal-minor.svg.ts
var icon_three_dots_diagonal_minor_svg_exports = {};
__export(icon_three_dots_diagonal_minor_svg_exports, {
  default: () => icon_three_dots_diagonal_minor_svg_default,
  meta: () => meta415
});
var meta415, icon_three_dots_diagonal_minor_svg_default;
var init_icon_three_dots_diagonal_minor_svg = __esm({
  "lib/meta/icon_three-dots-diagonal-minor.svg.ts"() {
    meta415 = {
      "description": "An icon of three diagonal dots placed in a minor position. This icon is commonly used in user interfaces to indicate the presence of additional options or actions.",
      "category": [
        "Interface"
      ],
      "tag": [
        "menu",
        "options",
        "actions",
        "dots",
        "user interface",
        "settings",
        "more",
        "ellipsis",
        "three dots",
        "diagonal"
      ],
      "title": "Three Dots Diagonal Minor"
    };
    icon_three_dots_diagonal_minor_svg_default = meta415;
  }
});

// lib/meta/icon_three-dots-horizontal.svg.ts
var icon_three_dots_horizontal_svg_exports = {};
__export(icon_three_dots_horizontal_svg_exports, {
  default: () => icon_three_dots_horizontal_svg_default,
  meta: () => meta416
});
var meta416, icon_three_dots_horizontal_svg_default;
var init_icon_three_dots_horizontal_svg = __esm({
  "lib/meta/icon_three-dots-horizontal.svg.ts"() {
    meta416 = {
      "description": "The icon depicts three dots arranged horizontally in a line. It is commonly used to represent a menu or more options available in a user interface.",
      "category": [
        "Interface"
      ],
      "tag": [
        "dots",
        "menu",
        "options",
        "user interface",
        "navigation"
      ],
      "title": "Three Dots Horizontal"
    };
    icon_three_dots_horizontal_svg_default = meta416;
  }
});

// lib/meta/icon_three-dots-lines.svg.ts
var icon_three_dots_lines_svg_exports = {};
__export(icon_three_dots_lines_svg_exports, {
  default: () => icon_three_dots_lines_svg_default,
  meta: () => meta417
});
var meta417, icon_three_dots_lines_svg_default;
var init_icon_three_dots_lines_svg = __esm({
  "lib/meta/icon_three-dots-lines.svg.ts"() {
    meta417 = {
      "description": "The icon consists of three horizontally aligned dots, representing a menu or options list. It is often used as a symbol for displaying additional actions or choices.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "menu",
        "options",
        "list",
        "dots",
        "actions",
        "more",
        "expand",
        "context menu",
        "navigation",
        "settings"
      ],
      "title": "Three Dots Lines"
    };
    icon_three_dots_lines_svg_default = meta417;
  }
});

// lib/meta/icon_three-dots-vertical.svg.ts
var icon_three_dots_vertical_svg_exports = {};
__export(icon_three_dots_vertical_svg_exports, {
  default: () => icon_three_dots_vertical_svg_default,
  meta: () => meta418
});
var meta418, icon_three_dots_vertical_svg_default;
var init_icon_three_dots_vertical_svg = __esm({
  "lib/meta/icon_three-dots-vertical.svg.ts"() {
    meta418 = {
      "description": "The three dots icon, also known as the vertical ellipsis or kebab menu, typically represents a menu or more options when clicked on. It is commonly used in user interfaces to indicate additional actions or items that are not immediately visible.",
      "category": [
        "Interface"
      ],
      "tag": [
        "menu",
        "option",
        "kebab",
        "more",
        "navigation",
        "settings",
        "user interface",
        "ellipsis",
        "vertical",
        "actions"
      ],
      "title": "Vertical Three Dots Icon"
    };
    icon_three_dots_vertical_svg_default = meta418;
  }
});

// lib/meta/icon_two-dots-diagonal-major.svg.ts
var icon_two_dots_diagonal_major_svg_exports = {};
__export(icon_two_dots_diagonal_major_svg_exports, {
  default: () => icon_two_dots_diagonal_major_svg_default,
  meta: () => meta419
});
var meta419, icon_two_dots_diagonal_major_svg_default;
var init_icon_two_dots_diagonal_major_svg = __esm({
  "lib/meta/icon_two-dots-diagonal-major.svg.ts"() {
    meta419 = {
      "description": "Two dots arranged diagonally from the top left to the bottom right. This icon can be used to indicate a major link or connection between two points.",
      "category": [
        "Shapes",
        "Interface"
      ],
      "tag": [
        "dots",
        "diagonal",
        "link",
        "connection",
        "major",
        "points",
        "symbol",
        "graphic",
        "design",
        "special characters"
      ],
      "title": "Two Dots Diagonal Major"
    };
    icon_two_dots_diagonal_major_svg_default = meta419;
  }
});

// lib/meta/icon_two-dots-diagonal-minor.svg.ts
var icon_two_dots_diagonal_minor_svg_exports = {};
__export(icon_two_dots_diagonal_minor_svg_exports, {
  default: () => icon_two_dots_diagonal_minor_svg_default,
  meta: () => meta420
});
var meta420, icon_two_dots_diagonal_minor_svg_default;
var init_icon_two_dots_diagonal_minor_svg = __esm({
  "lib/meta/icon_two-dots-diagonal-minor.svg.ts"() {
    meta420 = {
      "description": "The icon two-dots-diagonal-minor features two small dots positioned diagonally to each other in a minor orientation. This icon can be used to indicate a connection or intersection point between two elements.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "dots",
        "diagonal",
        "minor",
        "connection",
        "intersection",
        "point",
        "elements",
        "icon",
        "special characters"
      ],
      "title": "Two Dots Diagonal Minor"
    };
    icon_two_dots_diagonal_minor_svg_default = meta420;
  }
});

// lib/meta/icon_two-dots-horizontal.svg.ts
var icon_two_dots_horizontal_svg_exports = {};
__export(icon_two_dots_horizontal_svg_exports, {
  default: () => icon_two_dots_horizontal_svg_default,
  meta: () => meta421
});
var meta421, icon_two_dots_horizontal_svg_default;
var init_icon_two_dots_horizontal_svg = __esm({
  "lib/meta/icon_two-dots-horizontal.svg.ts"() {
    meta421 = {
      "description": "The icon 'two-dots-horizontal' represents two dots aligned horizontally. This icon is commonly used to indicate a pause, break, or separation in content.",
      "category": [
        "Symbol",
        "Interface"
      ],
      "tag": [
        "dots",
        "horizontal",
        "pause",
        "break",
        "separation",
        "two",
        "spacing",
        "divider",
        "point",
        "connection"
      ],
      "title": "Two Dots Horizontal"
    };
    icon_two_dots_horizontal_svg_default = meta421;
  }
});

// lib/meta/icon_two-dots-lines.svg.ts
var icon_two_dots_lines_svg_exports = {};
__export(icon_two_dots_lines_svg_exports, {
  default: () => icon_two_dots_lines_svg_default,
  meta: () => meta422
});
var meta422, icon_two_dots_lines_svg_default;
var init_icon_two_dots_lines_svg = __esm({
  "lib/meta/icon_two-dots-lines.svg.ts"() {
    meta422 = {
      "description": "The icon 'two-dots-lines' consists of two dots connected by lines, creating a unique design element. This icon can be used for various purposes in design projects to add a modern and stylish touch.",
      "category": [
        "Symbol"
      ],
      "tag": [
        "dots",
        "lines",
        "connection",
        "modern",
        "stylish",
        "design element",
        "unique",
        "eye-catching"
      ],
      "title": "Two Dots Lines"
    };
    icon_two_dots_lines_svg_default = meta422;
  }
});

// lib/meta/icon_two-dots-vertical.svg.ts
var icon_two_dots_vertical_svg_exports = {};
__export(icon_two_dots_vertical_svg_exports, {
  default: () => icon_two_dots_vertical_svg_default,
  meta: () => meta423
});
var meta423, icon_two_dots_vertical_svg_default;
var init_icon_two_dots_vertical_svg = __esm({
  "lib/meta/icon_two-dots-vertical.svg.ts"() {
    meta423 = {
      "description": "The icon depicts two vertical dots stacked on top of each other. This icon is commonly used to indicate a pause, break, or separation in content.",
      "category": [
        "Interface"
      ],
      "tag": [
        "dots",
        "vertical",
        "pause",
        "break",
        "separation",
        "two",
        "special characters"
      ],
      "title": "Two Dots Vertical"
    };
    icon_two_dots_vertical_svg_default = meta423;
  }
});

// lib/meta/icon_yen.svg.ts
var icon_yen_svg_exports = {};
__export(icon_yen_svg_exports, {
  default: () => icon_yen_svg_default,
  meta: () => meta424
});
var meta424, icon_yen_svg_default;
var init_icon_yen_svg = __esm({
  "lib/meta/icon_yen.svg.ts"() {
    meta424 = {
      "description": "The yen symbol is a currency sign used to represent the Japanese yen. It consists of a capital letter Y with two horizontal lines through it. This symbol is commonly used in financial contexts and when discussing the Japanese economy.",
      "category": [
        "Symbol"
      ],
      "tag": [
        "currency",
        "Japan",
        "finance",
        "money",
        "economy",
        "currency-symbol",
        "yen",
        "Japanese",
        "Asian",
        "business"
      ],
      "title": "Yen"
    };
    icon_yen_svg_default = meta424;
  }
});

// lib/meta/icon_ball-basketball.svg.ts
var icon_ball_basketball_svg_exports = {};
__export(icon_ball_basketball_svg_exports, {
  default: () => icon_ball_basketball_svg_default,
  meta: () => meta425
});
var meta425, icon_ball_basketball_svg_default;
var init_icon_ball_basketball_svg = __esm({
  "lib/meta/icon_ball-basketball.svg.ts"() {
    meta425 = {
      description: "An icon of a basketball going into a basket, representing the sport of basketball. This icon is perfect for sports-related designs and projects.",
      category: ["Sports"],
      tag: ["basketball", "ball", "sport", "game", "hoop", "dribble", "team", "competition", "athlete", "score"],
      title: "Ball Basketball"
    };
    icon_ball_basketball_svg_default = meta425;
  }
});

// lib/meta/icon_ball-football.svg.ts
var icon_ball_football_svg_exports = {};
__export(icon_ball_football_svg_exports, {
  default: () => icon_ball_football_svg_default,
  meta: () => meta426
});
var meta426, icon_ball_football_svg_default;
var init_icon_ball_football_svg = __esm({
  "lib/meta/icon_ball-football.svg.ts"() {
    meta426 = {
      description: "A symbol of a football used in the game of football (soccer). It represents the sports category and is commonly used to depict football-related content.",
      category: ["Sports"],
      tag: ["ball", "football", "soccer", "sports", "game", "sporting equipment", "competition", "team sport", "athletics", "goal"],
      title: "Football Ball"
    };
    icon_ball_football_svg_default = meta426;
  }
});

// lib/meta/icon_ball-rugby.svg.ts
var icon_ball_rugby_svg_exports = {};
__export(icon_ball_rugby_svg_exports, {
  default: () => icon_ball_rugby_svg_default,
  meta: () => meta427
});
var meta427, icon_ball_rugby_svg_default;
var init_icon_ball_rugby_svg = __esm({
  "lib/meta/icon_ball-rugby.svg.ts"() {
    meta427 = {
      description: "This icon depicts a rugby ball, which is used in the sport of rugby. The rugby ball is typically oval in shape and made of leather or synthetic materials.",
      category: ["Sports"],
      tag: ["rugby", "ball", "rugby ball", "sports equipment", "oval", "leather", "synthetic", "team sport", "field sport", "contact sport"],
      title: "Ball Rugby"
    };
    icon_ball_rugby_svg_default = meta427;
  }
});

// lib/meta/icon_ball-tennis.svg.ts
var icon_ball_tennis_svg_exports = {};
__export(icon_ball_tennis_svg_exports, {
  default: () => icon_ball_tennis_svg_default,
  meta: () => meta428
});
var meta428, icon_ball_tennis_svg_default;
var init_icon_ball_tennis_svg = __esm({
  "lib/meta/icon_ball-tennis.svg.ts"() {
    meta428 = {
      description: "An icon of a tennis ball, used in the context of tennis sports. It typically symbolizes sportsmanship, competition, and athleticism.",
      category: ["Sports"],
      tag: ["ball", "tennis", "sports", "competition", "athleticism", "equipment", "game", "sportsmanship", "racket"],
      title: "Tennis Ball Icon"
    };
    icon_ball_tennis_svg_default = meta428;
  }
});

// lib/meta/icon_accessibility-person-circled.svg.ts
var icon_accessibility_person_circled_svg_exports = {};
__export(icon_accessibility_person_circled_svg_exports, {
  default: () => icon_accessibility_person_circled_svg_default,
  meta: () => meta429
});
var meta429, icon_accessibility_person_circled_svg_default;
var init_icon_accessibility_person_circled_svg = __esm({
  "lib/meta/icon_accessibility-person-circled.svg.ts"() {
    meta429 = {
      "description": "This icon features a person symbol with a circle around it, representing accessibility for individuals. It is commonly used to indicate features or services that are easily accessible for all users.",
      "category": [
        "Interface",
        "Accessibility"
      ],
      "tag": [
        "person",
        "accessibility",
        "circle",
        "user-friendly",
        "inclusive",
        "disabled",
        "special needs",
        "easy access",
        "universal design",
        "symbol"
      ],
      "title": "Accessibility Person Circled"
    };
    icon_accessibility_person_circled_svg_default = meta429;
  }
});

// lib/meta/icon_accessibility-person.svg.ts
var icon_accessibility_person_svg_exports = {};
__export(icon_accessibility_person_svg_exports, {
  default: () => icon_accessibility_person_svg_default,
  meta: () => meta430
});
var meta430, icon_accessibility_person_svg_default;
var init_icon_accessibility_person_svg = __esm({
  "lib/meta/icon_accessibility-person.svg.ts"() {
    meta430 = {
      "description": "A simplistic icon representing a person, emphasizing inclusivity and accessibility. This icon is commonly used to indicate features or resources that are tailored for individuals with disabilities.",
      "category": [
        "Interface",
        "Accessibility"
      ],
      "tag": [
        "Person",
        "Inclusivity",
        "Disability",
        "Diversity",
        "Assistance",
        "Support",
        "User-friendly",
        "Equality",
        "Inclusive design",
        "Adaptive"
      ],
      "title": "Accessibility Person"
    };
    icon_accessibility_person_svg_default = meta430;
  }
});

// lib/meta/icon_add-fat.svg.ts
var icon_add_fat_svg_exports = {};
__export(icon_add_fat_svg_exports, {
  default: () => icon_add_fat_svg_default,
  meta: () => meta431
});
var meta431, icon_add_fat_svg_default;
var init_icon_add_fat_svg = __esm({
  "lib/meta/icon_add-fat.svg.ts"() {
    meta431 = {
      "description": "The add-fat icon is a bold and simple representation of an addition or inclusion action. It is designed to be easily recognizable and suitable for user interface designs.",
      "category": [
        "Interface"
      ],
      "tag": [
        "plus",
        "increase",
        "join",
        "expand",
        "insert",
        "create",
        "fat",
        "thick",
        "button",
        "navigation"
      ],
      "title": "Add Fat"
    };
    icon_add_fat_svg_default = meta431;
  }
});

// lib/meta/icon_add-l.svg.ts
var icon_add_l_svg_exports = {};
__export(icon_add_l_svg_exports, {
  default: () => icon_add_l_svg_default,
  meta: () => meta432
});
var meta432, icon_add_l_svg_default;
var init_icon_add_l_svg = __esm({
  "lib/meta/icon_add-l.svg.ts"() {
    meta432 = {
      "description": "The add-l icon is used to represent an 'add' action in user interfaces. It typically signifies the option to include or create something new. This icon is commonly utilized in applications and websites for tasks related to appending data or items.",
      "category": [
        "Interface"
      ],
      "tag": [
        "add",
        "plus",
        "create",
        "append",
        "new",
        "insert",
        "update",
        "user interface",
        "action",
        "button"
      ],
      "title": "Add - L"
    };
    icon_add_l_svg_default = meta432;
  }
});

// lib/meta/icon_add-lines.svg.ts
var icon_add_lines_svg_exports = {};
__export(icon_add_lines_svg_exports, {
  default: () => icon_add_lines_svg_default,
  meta: () => meta433
});
var meta433, icon_add_lines_svg_default;
var init_icon_add_lines_svg = __esm({
  "lib/meta/icon_add-lines.svg.ts"() {
    meta433 = {
      "description": "The add-lines icon in the UI category represents a simple design with multiple horizontal and vertical lines intersecting each other. This icon is commonly used to indicate the concept of adding or creating new content or elements.",
      "category": [
        "Interface"
      ],
      "tag": [
        "add",
        "lines",
        "create",
        "new",
        "content",
        "elements",
        "design",
        "symbol",
        "icon"
      ],
      "title": "Add Lines"
    };
    icon_add_lines_svg_default = meta433;
  }
});

// lib/meta/icon_add-m.svg.ts
var icon_add_m_svg_exports = {};
__export(icon_add_m_svg_exports, {
  default: () => icon_add_m_svg_default,
  meta: () => meta434
});
var meta434, icon_add_m_svg_default;
var init_icon_add_m_svg = __esm({
  "lib/meta/icon_add-m.svg.ts"() {
    meta434 = {
      "description": "The 'add-m' icon is a graphical representation of a plus sign inside a circle, indicating the action of adding or creating something. This icon is commonly used in user interfaces to signify an option for adding new elements.",
      "category": [
        "Interface"
      ],
      "tag": [
        "add",
        "create",
        "new",
        "action",
        "button",
        "user interface",
        "plus sign",
        "circle",
        "symbol",
        "icon"
      ],
      "title": "Add M"
    };
    icon_add_m_svg_default = meta434;
  }
});

// lib/meta/icon_add-s.svg.ts
var icon_add_s_svg_exports = {};
__export(icon_add_s_svg_exports, {
  default: () => icon_add_s_svg_default,
  meta: () => meta435
});
var meta435, icon_add_s_svg_default;
var init_icon_add_s_svg = __esm({
  "lib/meta/icon_add-s.svg.ts"() {
    meta435 = {
      "description": "The 'add-s' icon is a user interface (UI) design depicting a plus sign within a square, indicating an action to add or create something. It is commonly used in applications and websites.",
      "category": [
        "Interface"
      ],
      "tag": [
        "add",
        "create",
        "plus",
        "user interface",
        "UI",
        "design",
        "button",
        "action",
        "square"
      ],
      "title": "Add Square"
    };
    icon_add_s_svg_default = meta435;
  }
});

// lib/meta/icon_at-sign.svg.ts
var icon_at_sign_svg_exports = {};
__export(icon_at_sign_svg_exports, {
  default: () => icon_at_sign_svg_default,
  meta: () => meta436
});
var meta436, icon_at_sign_svg_default;
var init_icon_at_sign_svg = __esm({
  "lib/meta/icon_at-sign.svg.ts"() {
    meta436 = {
      "description": "An icon representing an at sign symbol often used to denote email addresses or social media handles.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "email",
        "contact",
        "social media",
        "address",
        "communication",
        "internet",
        "web",
        "username",
        "handle",
        "email address"
      ],
      "title": "At Sign"
    };
    icon_at_sign_svg_default = meta436;
  }
});

// lib/meta/icon_block-partials.svg.ts
var icon_block_partials_svg_exports = {};
__export(icon_block_partials_svg_exports, {
  default: () => icon_block_partials_svg_default,
  meta: () => meta437
});
var meta437, icon_block_partials_svg_default;
var init_icon_block_partials_svg = __esm({
  "lib/meta/icon_block-partials.svg.ts"() {
    meta437 = {
      "description": "An icon representing block partials, typically used in user interfaces to show partial sections or elements of a design that can be grouped together.",
      "category": [
        "Interface"
      ],
      "tag": [
        "block",
        "partials",
        "sections",
        "design",
        "user interface",
        "elements",
        "group",
        "arrange",
        "organize",
        "grouping"
      ],
      "title": "Block Partials"
    };
    icon_block_partials_svg_default = meta437;
  }
});

// lib/meta/icon_board-add-2.svg.ts
var icon_board_add_2_svg_exports = {};
__export(icon_board_add_2_svg_exports, {
  default: () => icon_board_add_2_svg_default,
  meta: () => meta438
});
var meta438, icon_board_add_2_svg_default;
var init_icon_board_add_2_svg = __esm({
  "lib/meta/icon_board-add-2.svg.ts"() {
    meta438 = {
      "description": "An icon representing adding a new board or section. It features a plus sign on a board or card.",
      "category": [
        "Interface"
      ],
      "tag": [
        "board",
        "add",
        "section",
        "new",
        "plus",
        "create",
        "interface",
        "design",
        "user interface"
      ],
      "title": "Board Add 2"
    };
    icon_board_add_2_svg_default = meta438;
  }
});

// lib/meta/icon_board-multi-2-horizontal.svg.ts
var icon_board_multi_2_horizontal_svg_exports = {};
__export(icon_board_multi_2_horizontal_svg_exports, {
  default: () => icon_board_multi_2_horizontal_svg_default,
  meta: () => meta439
});
var meta439, icon_board_multi_2_horizontal_svg_default;
var init_icon_board_multi_2_horizontal_svg = __esm({
  "lib/meta/icon_board-multi-2-horizontal.svg.ts"() {
    meta439 = {
      "description": "A horizontal arrangement of two multi-column boards, typically used in user interfaces for displaying information or organizing content.",
      "category": [
        "Interface"
      ],
      "tag": [
        "board",
        "multi-column",
        "horizontal",
        "user interface",
        "information",
        "content",
        "layout",
        "web design",
        "dashboard"
      ],
      "title": "Board Multi 2 Horizontal"
    };
    icon_board_multi_2_horizontal_svg_default = meta439;
  }
});

// lib/meta/icon_board-multi-2-vertical.svg.ts
var icon_board_multi_2_vertical_svg_exports = {};
__export(icon_board_multi_2_vertical_svg_exports, {
  default: () => icon_board_multi_2_vertical_svg_default,
  meta: () => meta440
});
var meta440, icon_board_multi_2_vertical_svg_default;
var init_icon_board_multi_2_vertical_svg = __esm({
  "lib/meta/icon_board-multi-2-vertical.svg.ts"() {
    meta440 = {
      "description": "The icon 'Board Multi 2 Vertical' represents a user interface element used to display multiple boards or sections vertically. It is commonly used in applications or websites to organize and present information in a structured manner.",
      "category": [
        "Interface"
      ],
      "tag": [
        "boards",
        "sections",
        "vertical layout",
        "user interface",
        "information",
        "organization",
        "structure",
        "application",
        "website"
      ],
      "title": "Board Multi 2 Vertical"
    };
    icon_board_multi_2_vertical_svg_default = meta440;
  }
});

// lib/meta/icon_board-multi-dashboard.svg.ts
var icon_board_multi_dashboard_svg_exports = {};
__export(icon_board_multi_dashboard_svg_exports, {
  default: () => icon_board_multi_dashboard_svg_default,
  meta: () => meta441
});
var meta441, icon_board_multi_dashboard_svg_default;
var init_icon_board_multi_dashboard_svg = __esm({
  "lib/meta/icon_board-multi-dashboard.svg.ts"() {
    meta441 = {
      "description": "A versatile icon representing a dashboard with multiple boards or sections, suitable for UI design projects.",
      "category": [
        "Interface"
      ],
      "tag": [
        "dashboard",
        "multiple",
        "boards",
        "sections",
        "data",
        "information",
        "analytics",
        "user interface",
        "design"
      ],
      "title": "Board Multi Dashboard"
    };
    icon_board_multi_dashboard_svg_default = meta441;
  }
});

// lib/meta/icon_board-multi-t-down.svg.ts
var icon_board_multi_t_down_svg_exports = {};
__export(icon_board_multi_t_down_svg_exports, {
  default: () => icon_board_multi_t_down_svg_default,
  meta: () => meta442
});
var meta442, icon_board_multi_t_down_svg_default;
var init_icon_board_multi_t_down_svg = __esm({
  "lib/meta/icon_board-multi-t-down.svg.ts"() {
    meta442 = {
      "description": "An icon depicting a multi-directional board with multiple arrows pointing downwards, indicating a dropdown or expandable menu feature.",
      "category": [
        "Interface"
      ],
      "tag": [
        "menu",
        "expandable",
        "user interface",
        "navigation",
        "list",
        "options",
        "select",
        "dropdown",
        "multi-directional"
      ],
      "title": "Board Multi T Down"
    };
    icon_board_multi_t_down_svg_default = meta442;
  }
});

// lib/meta/icon_board-multi-t-left.svg.ts
var icon_board_multi_t_left_svg_exports = {};
__export(icon_board_multi_t_left_svg_exports, {
  default: () => icon_board_multi_t_left_svg_default,
  meta: () => meta443
});
var meta443, icon_board_multi_t_left_svg_default;
var init_icon_board_multi_t_left_svg = __esm({
  "lib/meta/icon_board-multi-t-left.svg.ts"() {
    meta443 = {
      "description": "The board-multi-t-left icon features a series of connected rectangles, forming a horizontal bar. The rectangular shape is split into multiple smaller sections, with the majority located on the left side. This icon is commonly used to represent a multi-column layout or section within a user interface.",
      "category": [
        "Interface"
      ],
      "tag": [
        "board",
        "multi",
        "columns",
        "layout",
        "sections",
        "structure",
        "user interface",
        "web design",
        "grid"
      ],
      "title": "Board Multi T Left"
    };
    icon_board_multi_t_left_svg_default = meta443;
  }
});

// lib/meta/icon_board-multi-t-right.svg.ts
var icon_board_multi_t_right_svg_exports = {};
__export(icon_board_multi_t_right_svg_exports, {
  default: () => icon_board_multi_t_right_svg_default,
  meta: () => meta444
});
var meta444, icon_board_multi_t_right_svg_default;
var init_icon_board_multi_t_right_svg = __esm({
  "lib/meta/icon_board-multi-t-right.svg.ts"() {
    meta444 = {
      "description": "The board-multi-t-right icon is a user interface icon depicting a board with multiple tiles arranged in a rightward direction. It can be used to represent a dashboard with multiple sections or panels that are aligned horizontally to the right.",
      "category": [
        "Interface"
      ],
      "tag": [
        "dashboard",
        "sections",
        "panels",
        "tiles",
        "layout",
        "grid",
        "multi",
        "ui",
        "information",
        "navigation"
      ],
      "title": "Board Multi Tiles Right"
    };
    icon_board_multi_t_right_svg_default = meta444;
  }
});

// lib/meta/icon_board-multi-t-up.svg.ts
var icon_board_multi_t_up_svg_exports = {};
__export(icon_board_multi_t_up_svg_exports, {
  default: () => icon_board_multi_t_up_svg_default,
  meta: () => meta445
});
var meta445, icon_board_multi_t_up_svg_default;
var init_icon_board_multi_t_up_svg = __esm({
  "lib/meta/icon_board-multi-t-up.svg.ts"() {
    meta445 = {
      "description": "The board-multi-t-up icon represents multiple boards arranged in a T shape. It is commonly used in user interface design to indicate a multi-tab layout.",
      "category": [
        "Interface"
      ],
      "tag": [
        "tabs",
        "layout",
        "multiple",
        "boards",
        "multi-tab",
        "arrangement",
        "design",
        "UI",
        "user interface"
      ],
      "title": "Board Multi T Up"
    };
    icon_board_multi_t_up_svg_default = meta445;
  }
});

// lib/meta/icon_board-multi.svg.ts
var icon_board_multi_svg_exports = {};
__export(icon_board_multi_svg_exports, {
  default: () => icon_board_multi_svg_default,
  meta: () => meta446
});
var meta446, icon_board_multi_svg_default;
var init_icon_board_multi_svg = __esm({
  "lib/meta/icon_board-multi.svg.ts"() {
    meta446 = {
      "description": "The board-multi icon is a representation of multiple boards or panels positioned together. It can be used to symbolize organization, collaboration, or a collection of information.",
      "category": [
        "Interface"
      ],
      "tag": [
        "board",
        "multi",
        "panels",
        "organization",
        "collaboration",
        "information",
        "structure",
        "workspace",
        "division"
      ],
      "title": "Board Multi"
    };
    icon_board_multi_svg_default = meta446;
  }
});

// lib/meta/icon_board-multiply-2.svg.ts
var icon_board_multiply_2_svg_exports = {};
__export(icon_board_multiply_2_svg_exports, {
  default: () => icon_board_multiply_2_svg_default,
  meta: () => meta447
});
var meta447, icon_board_multiply_2_svg_default;
var init_icon_board_multiply_2_svg = __esm({
  "lib/meta/icon_board-multiply-2.svg.ts"() {
    meta447 = {
      "description": "An icon of a board with a multiplication symbol, indicating a mathematical operation. This icon can be used in UI designs for calculators, educational apps, or any platform where multiplication functionality is present.",
      "category": [
        "Interface"
      ],
      "tag": [
        "board",
        "multiply",
        "math",
        "operation",
        "calculation",
        "education",
        "app",
        "UI design",
        "calculators",
        "mathematical"
      ],
      "title": "Board Multiply 2"
    };
    icon_board_multiply_2_svg_default = meta447;
  }
});

// lib/meta/icon_board-split-1-3-horizontal.svg.ts
var icon_board_split_1_3_horizontal_svg_exports = {};
__export(icon_board_split_1_3_horizontal_svg_exports, {
  default: () => icon_board_split_1_3_horizontal_svg_default,
  meta: () => meta448
});
var meta448, icon_board_split_1_3_horizontal_svg_default;
var init_icon_board_split_1_3_horizontal_svg = __esm({
  "lib/meta/icon_board-split-1-3-horizontal.svg.ts"() {
    meta448 = {
      "description": "A horizontal split board divided into 3 equal sections. It is commonly used in user interface design to organize content.",
      "category": [
        "Interface"
      ],
      "tag": [
        "dashboard",
        "layout",
        "user interface",
        "divided",
        "sections",
        "web design",
        "horizontal",
        "split",
        "three columns",
        "content"
      ],
      "title": "Horizontal Split Board 1/3"
    };
    icon_board_split_1_3_horizontal_svg_default = meta448;
  }
});

// lib/meta/icon_board-split-1-3-vertical.svg.ts
var icon_board_split_1_3_vertical_svg_exports = {};
__export(icon_board_split_1_3_vertical_svg_exports, {
  default: () => icon_board_split_1_3_vertical_svg_default,
  meta: () => meta449
});
var meta449, icon_board_split_1_3_vertical_svg_default;
var init_icon_board_split_1_3_vertical_svg = __esm({
  "lib/meta/icon_board-split-1-3-vertical.svg.ts"() {
    meta449 = {
      "description": "An icon representing a vertical split layout with one larger section on the left and three smaller sections on the right.",
      "category": [
        "Interface"
      ],
      "tag": [
        "board",
        "split",
        "layout",
        "vertical",
        "sections",
        "divide",
        "arrange",
        "UI",
        "design",
        "grid"
      ],
      "title": "Vertical Split Layout 1:3"
    };
    icon_board_split_1_3_vertical_svg_default = meta449;
  }
});

// lib/meta/icon_board-split-2-horizontal.svg.ts
var icon_board_split_2_horizontal_svg_exports = {};
__export(icon_board_split_2_horizontal_svg_exports, {
  default: () => icon_board_split_2_horizontal_svg_default,
  meta: () => meta450
});
var meta450, icon_board_split_2_horizontal_svg_default;
var init_icon_board_split_2_horizontal_svg = __esm({
  "lib/meta/icon_board-split-2-horizontal.svg.ts"() {
    meta450 = {
      "description": "An icon featuring a board split into two horizontal sections. It represents a horizontal division or separation.",
      "category": [
        "Interface"
      ],
      "tag": [
        "board",
        "split",
        "horizontal",
        "partition",
        "sections",
        "division",
        "interface",
        "design",
        "layout",
        "user interface"
      ],
      "title": "Board Split Horizontal"
    };
    icon_board_split_2_horizontal_svg_default = meta450;
  }
});

// lib/meta/icon_board-split-2-vertical.svg.ts
var icon_board_split_2_vertical_svg_exports = {};
__export(icon_board_split_2_vertical_svg_exports, {
  default: () => icon_board_split_2_vertical_svg_default,
  meta: () => meta451
});
var meta451, icon_board_split_2_vertical_svg_default;
var init_icon_board_split_2_vertical_svg = __esm({
  "lib/meta/icon_board-split-2-vertical.svg.ts"() {
    meta451 = {
      "description": "An icon representing a user interface element showing a vertical split into two sections. Can be used to indicate a layout design with two side-by-side panels or sections.",
      "category": [
        "Interface"
      ],
      "tag": [
        "layout",
        "design",
        "split",
        "vertical",
        "sections",
        "panels",
        "user interface",
        "UI",
        "interface element"
      ],
      "title": "Board Split 2 Vertical"
    };
    icon_board_split_2_vertical_svg_default = meta451;
  }
});

// lib/meta/icon_board-split-3-1-horizontal.svg.ts
var icon_board_split_3_1_horizontal_svg_exports = {};
__export(icon_board_split_3_1_horizontal_svg_exports, {
  default: () => icon_board_split_3_1_horizontal_svg_default,
  meta: () => meta452
});
var meta452, icon_board_split_3_1_horizontal_svg_default;
var init_icon_board_split_3_1_horizontal_svg = __esm({
  "lib/meta/icon_board-split-3-1-horizontal.svg.ts"() {
    meta452 = {
      "description": "An icon featuring a board split into 3 parts horizontally, with one larger section and two smaller sections. This icon is commonly used in user interface design.",
      "category": [
        "Interface"
      ],
      "tag": [
        "board",
        "split",
        "horizontal",
        "layout",
        "design",
        "user interface",
        "web",
        "application",
        "section"
      ],
      "title": "Horizontal Board Split 3:1"
    };
    icon_board_split_3_1_horizontal_svg_default = meta452;
  }
});

// lib/meta/icon_board-split-3-1-vertical.svg.ts
var icon_board_split_3_1_vertical_svg_exports = {};
__export(icon_board_split_3_1_vertical_svg_exports, {
  default: () => icon_board_split_3_1_vertical_svg_default,
  meta: () => meta453
});
var meta453, icon_board_split_3_1_vertical_svg_default;
var init_icon_board_split_3_1_vertical_svg = __esm({
  "lib/meta/icon_board-split-3-1-vertical.svg.ts"() {
    meta453 = {
      "description": "An icon representing a user interface component with a layout split into three sections, where one section is larger than the other two. The layout is arranged vertically.",
      "category": [
        "Interface"
      ],
      "tag": [
        "UI",
        "layout",
        "split",
        "three",
        "vertical",
        "sections",
        "components",
        "interface design",
        "website",
        "app"
      ],
      "title": "Vertical Split Three Sections UI Layout"
    };
    icon_board_split_3_1_vertical_svg_default = meta453;
  }
});

// lib/meta/icon_board-split-3-horizontal.svg.ts
var icon_board_split_3_horizontal_svg_exports = {};
__export(icon_board_split_3_horizontal_svg_exports, {
  default: () => icon_board_split_3_horizontal_svg_default,
  meta: () => meta454
});
var meta454, icon_board_split_3_horizontal_svg_default;
var init_icon_board_split_3_horizontal_svg = __esm({
  "lib/meta/icon_board-split-3-horizontal.svg.ts"() {
    meta454 = {
      "description": "A horizontal board split into three equal sections. This icon is commonly used in user interface designs to represent a segmented layout or display.",
      "category": [
        "Interface"
      ],
      "tag": [
        "board",
        "split",
        "horizontal",
        "layout",
        "design",
        "web",
        "user interface",
        "segmented",
        "display"
      ],
      "title": "Board Split 3 Horizontal"
    };
    icon_board_split_3_horizontal_svg_default = meta454;
  }
});

// lib/meta/icon_board-split-3-vertical.svg.ts
var icon_board_split_3_vertical_svg_exports = {};
__export(icon_board_split_3_vertical_svg_exports, {
  default: () => icon_board_split_3_vertical_svg_default,
  meta: () => meta455
});
var meta455, icon_board_split_3_vertical_svg_default;
var init_icon_board_split_3_vertical_svg = __esm({
  "lib/meta/icon_board-split-3-vertical.svg.ts"() {
    meta455 = {
      "description": "An icon depicting a board split into 3 vertical sections. Each section has its own content area, making it suitable for displaying information or organizing data.",
      "category": [
        "Interface",
        "Tile"
      ],
      "tag": [
        "split",
        "vertical",
        "board",
        "sections",
        "information",
        "data",
        "organization",
        "content",
        "layout",
        "UI"
      ],
      "title": "Board Split 3 Vertical"
    };
    icon_board_split_3_vertical_svg_default = meta455;
  }
});

// lib/meta/icon_board-split-4-horizontal.svg.ts
var icon_board_split_4_horizontal_svg_exports = {};
__export(icon_board_split_4_horizontal_svg_exports, {
  default: () => icon_board_split_4_horizontal_svg_default,
  meta: () => meta456
});
var meta456, icon_board_split_4_horizontal_svg_default;
var init_icon_board_split_4_horizontal_svg = __esm({
  "lib/meta/icon_board-split-4-horizontal.svg.ts"() {
    meta456 = {
      "description": "A horizontal split board divided into 4 equal sections, perfect for organizing and displaying content in a structured layout",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "layout",
        "content",
        "structure",
        "organization",
        "grid",
        "user interface",
        "website",
        "app",
        "template",
        "design"
      ],
      "title": "Board Split 4 Horizontal"
    };
    icon_board_split_4_horizontal_svg_default = meta456;
  }
});

// lib/meta/icon_board-split-4-vertical.svg.ts
var icon_board_split_4_vertical_svg_exports = {};
__export(icon_board_split_4_vertical_svg_exports, {
  default: () => icon_board_split_4_vertical_svg_default,
  meta: () => meta457
});
var meta457, icon_board_split_4_vertical_svg_default;
var init_icon_board_split_4_vertical_svg = __esm({
  "lib/meta/icon_board-split-4-vertical.svg.ts"() {
    meta457 = {
      "description": "A UI icon representing a board split into four vertical sections. Each section can be used to display different content or components.",
      "category": [
        "Interface"
      ],
      "tag": [
        "layout",
        "split",
        "sections",
        "content",
        "components",
        "grid",
        "design",
        "partition",
        "dashboard"
      ],
      "title": "Board Split Four Vertical"
    };
    icon_board_split_4_vertical_svg_default = meta457;
  }
});

// lib/meta/icon_board-split-t-down.svg.ts
var icon_board_split_t_down_svg_exports = {};
__export(icon_board_split_t_down_svg_exports, {
  default: () => icon_board_split_t_down_svg_default,
  meta: () => meta458
});
var meta458, icon_board_split_t_down_svg_default;
var init_icon_board_split_t_down_svg = __esm({
  "lib/meta/icon_board-split-t-down.svg.ts"() {
    meta458 = {
      "description": "An icon of a board split diagonally into two parts, with the top part larger than the bottom part. It represents a board splitting effect moving downwards, often used in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "split",
        "board",
        "downwards",
        "effect",
        "interface",
        "design",
        "graphic",
        "user interface",
        "UI",
        "element"
      ],
      "title": "Board Split Downwards"
    };
    icon_board_split_t_down_svg_default = meta458;
  }
});

// lib/meta/icon_board-split-t-left.svg.ts
var icon_board_split_t_left_svg_exports = {};
__export(icon_board_split_t_left_svg_exports, {
  default: () => icon_board_split_t_left_svg_default,
  meta: () => meta459
});
var meta459, icon_board_split_t_left_svg_default;
var init_icon_board_split_t_left_svg = __esm({
  "lib/meta/icon_board-split-t-left.svg.ts"() {
    meta459 = {
      "description": "An icon depicting a left split board, commonly used in user interface design to symbolize a split view or layout.",
      "category": [
        "Interface"
      ],
      "tag": [
        "user interface",
        "design",
        "split view",
        "layout",
        "board",
        "interface element",
        "web design",
        "UI",
        "split screen",
        "navigation"
      ],
      "title": "Board Split T Left"
    };
    icon_board_split_t_left_svg_default = meta459;
  }
});

// lib/meta/icon_board-split-t-right.svg.ts
var icon_board_split_t_right_svg_exports = {};
__export(icon_board_split_t_right_svg_exports, {
  default: () => icon_board_split_t_right_svg_default,
  meta: () => meta460
});
var meta460, icon_board_split_t_right_svg_default;
var init_icon_board_split_t_right_svg = __esm({
  "lib/meta/icon_board-split-t-right.svg.ts"() {
    meta460 = {
      "description": "An icon of a board split diagonally to the right, indicating a division or separation on the right side. This icon is commonly used in user interface designs.",
      "category": [
        "Interface"
      ],
      "tag": [
        "board",
        "split",
        "diagonal",
        "right",
        "division",
        "separation",
        "graphic",
        "icon",
        "user interface",
        "design"
      ],
      "title": "Board Split to the Right"
    };
    icon_board_split_t_right_svg_default = meta460;
  }
});

// lib/meta/icon_board-split-t-up.svg.ts
var icon_board_split_t_up_svg_exports = {};
__export(icon_board_split_t_up_svg_exports, {
  default: () => icon_board_split_t_up_svg_default,
  meta: () => meta461
});
var meta461, icon_board_split_t_up_svg_default;
var init_icon_board_split_t_up_svg = __esm({
  "lib/meta/icon_board-split-t-up.svg.ts"() {
    meta461 = {
      "description": "An icon representing splitting of a board into multiple sections or segments, with each section moving apart from each other. This icon can be utilized in user interface designs to depict dividing content or information into separate parts.",
      "category": [
        "Interface"
      ],
      "tag": [
        "board",
        "split",
        "sections",
        "segments",
        "divide",
        "interface design",
        "user interface",
        "content",
        "information"
      ],
      "title": "Board Split T Up"
    };
    icon_board_split_t_up_svg_default = meta461;
  }
});

// lib/meta/icon_board-subtract-2.svg.ts
var icon_board_subtract_2_svg_exports = {};
__export(icon_board_subtract_2_svg_exports, {
  default: () => icon_board_subtract_2_svg_default,
  meta: () => meta462
});
var meta462, icon_board_subtract_2_svg_default;
var init_icon_board_subtract_2_svg = __esm({
  "lib/meta/icon_board-subtract-2.svg.ts"() {
    meta462 = {
      "description": "The board-subtract-2 icon represents a subtraction action on a digital board or interface. It can be used to indicate removing or deducting content, numbers, or items from a display. The icon features a design that signifies reduction or deletion.",
      "category": [
        "Interface"
      ],
      "tag": [
        "subtraction",
        "digital",
        "board",
        "interface",
        "delete",
        "remove",
        "minus",
        "deduct",
        "action",
        "symbol"
      ],
      "title": "Board Subtract 2"
    };
    icon_board_subtract_2_svg_default = meta462;
  }
});

// lib/meta/icon_board.svg.ts
var icon_board_svg_exports = {};
__export(icon_board_svg_exports, {
  default: () => icon_board_svg_default,
  meta: () => meta463
});
var meta463, icon_board_svg_default;
var init_icon_board_svg = __esm({
  "lib/meta/icon_board.svg.ts"() {
    meta463 = {
      "description": "An icon representing a board, often used in user interface design to simulate a digital or physical board for organizing information or content.",
      "category": [
        "Interface"
      ],
      "tag": [
        "dashboard",
        "interface",
        "information",
        "organization",
        "design",
        "user interface",
        "digital",
        "physical",
        "board"
      ],
      "title": "Board"
    };
    icon_board_svg_default = meta463;
  }
});

// lib/meta/icon_box-in.svg.ts
var icon_box_in_svg_exports = {};
__export(icon_box_in_svg_exports, {
  default: () => icon_box_in_svg_default,
  meta: () => meta464
});
var meta464, icon_box_in_svg_default;
var init_icon_box_in_svg = __esm({
  "lib/meta/icon_box-in.svg.ts"() {
    meta464 = {
      "description": "The box-in icon represents an enclosed area or a container. It can be used to symbolize packing, storage, containment, or organizing items within a confined space.",
      "category": [
        "Interface"
      ],
      "tag": [
        "box",
        "enclosed",
        "container",
        "packing",
        "storage",
        "organization",
        "square",
        "inside",
        "packaging",
        "restricted"
      ],
      "title": "Box In"
    };
    icon_box_in_svg_default = meta464;
  }
});

// lib/meta/icon_box-out.svg.ts
var icon_box_out_svg_exports = {};
__export(icon_box_out_svg_exports, {
  default: () => icon_box_out_svg_default,
  meta: () => meta465
});
var meta465, icon_box_out_svg_default;
var init_icon_box_out_svg = __esm({
  "lib/meta/icon_box-out.svg.ts"() {
    meta465 = {
      "description": "The box-out icon features a box with an outward arrow, typically used to represent expanding or zooming out. It is commonly used in user interface designs to indicate a larger view or context.",
      "category": [
        "Interface"
      ],
      "tag": [
        "expand",
        "zoom out",
        "interface design",
        "context",
        "navigation",
        "user interface",
        "box",
        "arrow",
        "symbol",
        "ui"
      ],
      "title": "Box Out"
    };
    icon_box_out_svg_default = meta465;
  }
});

// lib/meta/icon_box.svg.ts
var icon_box_svg_exports = {};
__export(icon_box_svg_exports, {
  default: () => icon_box_svg_default,
  meta: () => meta466
});
var meta466, icon_box_svg_default;
var init_icon_box_svg = __esm({
  "lib/meta/icon_box.svg.ts"() {
    meta466 = {
      "description": "The box icon represents a square or rectangular container, often used to store or organize items. It is commonly used in UI designs to symbolize a placeholder for content or as a metaphor for packaging or containment.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "container",
        "storage",
        "package",
        "organize",
        "placeholder",
        "square",
        "rectangle",
        "UI design",
        "packaging",
        "containment"
      ],
      "title": "Box"
    };
    icon_box_svg_default = meta466;
  }
});

// lib/meta/icon_boy.svg.ts
var icon_boy_svg_exports = {};
__export(icon_boy_svg_exports, {
  default: () => icon_boy_svg_default,
  meta: () => meta467
});
var meta467, icon_boy_svg_default;
var init_icon_boy_svg = __esm({
  "lib/meta/icon_boy.svg.ts"() {
    meta467 = {
      "description": "A simple icon representing a young male child, typically used to indicate a boy or youth in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "child",
        "male",
        "youth",
        "avatar",
        "kid",
        "profile",
        "person",
        "human",
        "character"
      ],
      "title": "Boy"
    };
    icon_boy_svg_default = meta467;
  }
});

// lib/meta/icon_broken-heart-f.svg.ts
var icon_broken_heart_f_svg_exports = {};
__export(icon_broken_heart_f_svg_exports, {
  default: () => icon_broken_heart_f_svg_default,
  meta: () => meta468
});
var meta468, icon_broken_heart_f_svg_default;
var init_icon_broken_heart_f_svg = __esm({
  "lib/meta/icon_broken-heart-f.svg.ts"() {
    meta468 = {
      "description": "The icon 'broken-heart-f' represents a broken heart symbol, often used to symbolize sadness or heartbreak in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "heartbreak",
        "sadness",
        "symbol",
        "emotions",
        "user interface",
        "vector",
        "icon",
        "love",
        "relationship"
      ],
      "title": "Broken Heart F"
    };
    icon_broken_heart_f_svg_default = meta468;
  }
});

// lib/meta/icon_broken-heart-l.svg.ts
var icon_broken_heart_l_svg_exports = {};
__export(icon_broken_heart_l_svg_exports, {
  default: () => icon_broken_heart_l_svg_default,
  meta: () => meta469
});
var meta469, icon_broken_heart_l_svg_default;
var init_icon_broken_heart_l_svg = __esm({
  "lib/meta/icon_broken-heart-l.svg.ts"() {
    meta469 = {
      "description": "An icon depicting a broken heart, symbolizing sadness or romantic disappointment. The 'l' variant may indicate a more dramatic or severe representation of a broken heart.",
      "category": [
        "Interface"
      ],
      "tag": [
        "sadness",
        "romantic",
        "disappointment",
        "love",
        "emotions",
        "heartbreak",
        "broken heart",
        "ui",
        "symbol",
        "graphic"
      ],
      "title": "Broken Heart L"
    };
    icon_broken_heart_l_svg_default = meta469;
  }
});

// lib/meta/icon_broken-heart-m.svg.ts
var icon_broken_heart_m_svg_exports = {};
__export(icon_broken_heart_m_svg_exports, {
  default: () => icon_broken_heart_m_svg_default,
  meta: () => meta470
});
var meta470, icon_broken_heart_m_svg_default;
var init_icon_broken_heart_m_svg = __esm({
  "lib/meta/icon_broken-heart-m.svg.ts"() {
    meta470 = {
      "description": "The broken-heart-m icon is a symbol depicting a heart shape that is broken in the middle. It is commonly used to represent heartbreak and sadness in various UI designs.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "heart",
        "broken",
        "emotions",
        "love",
        "sadness",
        "UI",
        "design",
        "symbol",
        "romance",
        "feelings"
      ],
      "title": "Broken Heart"
    };
    icon_broken_heart_m_svg_default = meta470;
  }
});

// lib/meta/icon_building-church.svg.ts
var icon_building_church_svg_exports = {};
__export(icon_building_church_svg_exports, {
  default: () => icon_building_church_svg_default,
  meta: () => meta471
});
var meta471, icon_building_church_svg_default;
var init_icon_building_church_svg = __esm({
  "lib/meta/icon_building-church.svg.ts"() {
    meta471 = {
      "description": "The building-church icon is a symbol representing a church structure, typically featuring a spire or steeple. It is commonly used in UI design to indicate religious or spiritual content.",
      "category": [
        "Interface"
      ],
      "tag": [
        "architecture",
        "religion",
        "worship",
        "spirituality",
        "faith",
        "building",
        "place of worship",
        "holy",
        "Christianity",
        "religious symbol"
      ],
      "title": "Building Church"
    };
    icon_building_church_svg_default = meta471;
  }
});

// lib/meta/icon_building-house-2.svg.ts
var icon_building_house_2_svg_exports = {};
__export(icon_building_house_2_svg_exports, {
  default: () => icon_building_house_2_svg_default,
  meta: () => meta472
});
var meta472, icon_building_house_2_svg_default;
var init_icon_building_house_2_svg = __esm({
  "lib/meta/icon_building-house-2.svg.ts"() {
    meta472 = {
      "description": "Building house icon depicting a residential home with a pitched roof and chimney. It is commonly used to represent real estate, housing, or home-related concepts in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "Building",
        "House",
        "Residential",
        "Home",
        "Real Estate",
        "Housing",
        "Property",
        "Construction",
        "Architecture",
        "Roof"
      ],
      "title": "Building House 2"
    };
    icon_building_house_2_svg_default = meta472;
  }
});

// lib/meta/icon_building-house.svg.ts
var icon_building_house_svg_exports = {};
__export(icon_building_house_svg_exports, {
  default: () => icon_building_house_svg_default,
  meta: () => meta473
});
var meta473, icon_building_house_svg_default;
var init_icon_building_house_svg = __esm({
  "lib/meta/icon_building-house.svg.ts"() {
    meta473 = {
      "description": "An icon depicting a simple house structure, commonly used to represent buildings or homes in user interface designs.",
      "category": [
        "Interface"
      ],
      "tag": [
        "building",
        "house",
        "home",
        "real estate",
        "property",
        "architecture",
        "construction",
        "residence",
        "dwelling",
        "shelter"
      ],
      "title": "Building House"
    };
    icon_building_house_svg_default = meta473;
  }
});

// lib/meta/icon_building-shop.svg.ts
var icon_building_shop_svg_exports = {};
__export(icon_building_shop_svg_exports, {
  default: () => icon_building_shop_svg_default,
  meta: () => meta474
});
var meta474, icon_building_shop_svg_default;
var init_icon_building_shop_svg = __esm({
  "lib/meta/icon_building-shop.svg.ts"() {
    meta474 = {
      "description": "The building-shop icon represents a structure that is used for commercial purposes, specifically for shopping. It can be used to symbolize a retail store, marketplace, or shopping center.",
      "category": [
        "Interface"
      ],
      "tag": [
        "building",
        "shop",
        "store",
        "commercial",
        "retail",
        "marketplace",
        "shopping",
        "center"
      ],
      "title": "Building Shop"
    };
    icon_building_shop_svg_default = meta474;
  }
});

// lib/meta/icon_button-add.svg.ts
var icon_button_add_svg_exports = {};
__export(icon_button_add_svg_exports, {
  default: () => icon_button_add_svg_default,
  meta: () => meta475
});
var meta475, icon_button_add_svg_default;
var init_icon_button_add_svg = __esm({
  "lib/meta/icon_button-add.svg.ts"() {
    meta475 = {
      "description": "The button-add icon is typically used to indicate an action related to adding or creating something. It can be commonly found in user interfaces as a clickable element to initiate a new task.",
      "category": [
        "Interface"
      ],
      "tag": [
        "button",
        "add",
        "create",
        "interface",
        "action",
        "clickable",
        "task",
        "user interface",
        "web design",
        "UI"
      ],
      "title": "Button Add"
    };
    icon_button_add_svg_default = meta475;
  }
});

// lib/meta/icon_button-broken-heart 2.svg.ts
var icon_button_broken_heart_2_svg_exports = {};
__export(icon_button_broken_heart_2_svg_exports, {
  default: () => icon_button_broken_heart_2_svg_default,
  meta: () => meta476
});
var meta476, icon_button_broken_heart_2_svg_default;
var init_icon_button_broken_heart_2_svg = __esm({
  "lib/meta/icon_button-broken-heart 2.svg.ts"() {
    meta476 = {
      "description": "A heart shape icon that is broken into two uneven parts, representing a broken heart. This icon can be used in user interface design to indicate a feature related to emotions, love, relationships, or sadness.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "heart",
        "broken heart",
        "emotions",
        "love",
        "relationships",
        "sadness",
        "icon",
        "user interface",
        "design"
      ],
      "title": "Button Broken Heart"
    };
    icon_button_broken_heart_2_svg_default = meta476;
  }
});

// lib/meta/icon_button-broken-heart.svg.ts
var icon_button_broken_heart_svg_exports = {};
__export(icon_button_broken_heart_svg_exports, {
  default: () => icon_button_broken_heart_svg_default,
  meta: () => meta477
});
var meta477, icon_button_broken_heart_svg_default;
var init_icon_button_broken_heart_svg = __esm({
  "lib/meta/icon_button-broken-heart.svg.ts"() {
    meta477 = {
      "description": "This icon features a heart symbol that is broken in half, conveying the concept of a broken heart. It is commonly used in user interfaces to represent a state of emotional distress or heartbreak.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "heart",
        "love",
        "emotions",
        "sadness",
        "heartbreak",
        "button",
        "user interface",
        "broken heart",
        "relationship",
        "symbol"
      ],
      "title": "Button Broken Heart"
    };
    icon_button_broken_heart_svg_default = meta477;
  }
});

// lib/meta/icon_button-check-2.svg.ts
var icon_button_check_2_svg_exports = {};
__export(icon_button_check_2_svg_exports, {
  default: () => icon_button_check_2_svg_default,
  meta: () => meta478
});
var meta478, icon_button_check_2_svg_default;
var init_icon_button_check_2_svg = __esm({
  "lib/meta/icon_button-check-2.svg.ts"() {
    meta478 = {
      "description": "The icon 'button-check-2' is a UI element depicting a checkmark inside a button. It can be used to indicate confirmation or completion in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "button",
        "check mark",
        "confirmation",
        "completion",
        "UI",
        "user interface",
        "approval",
        "selection",
        "form"
      ],
      "title": "Button Check 2"
    };
    icon_button_check_2_svg_default = meta478;
  }
});

// lib/meta/icon_button-check.svg.ts
var icon_button_check_svg_exports = {};
__export(icon_button_check_svg_exports, {
  default: () => icon_button_check_svg_default,
  meta: () => meta479
});
var meta479, icon_button_check_svg_default;
var init_icon_button_check_svg = __esm({
  "lib/meta/icon_button-check.svg.ts"() {
    meta479 = {
      "description": "A button with a check mark icon, usually used to confirm or submit something in a user interface design.",
      "category": [
        "Interface"
      ],
      "tag": [
        "button",
        "check",
        "confirm",
        "submit",
        "user interface",
        "interaction",
        "approve",
        "confirm",
        "validate"
      ],
      "title": "Button Check"
    };
    icon_button_check_svg_default = meta479;
  }
});

// lib/meta/icon_button-edit-2.svg.ts
var icon_button_edit_2_svg_exports = {};
__export(icon_button_edit_2_svg_exports, {
  default: () => icon_button_edit_2_svg_default,
  meta: () => meta480
});
var meta480, icon_button_edit_2_svg_default;
var init_icon_button_edit_2_svg = __esm({
  "lib/meta/icon_button-edit-2.svg.ts"() {
    meta480 = {
      "description": "The button-edit-2 icon is a graphical representation of an edit button, commonly used in user interface design to indicate the option to edit or modify content. It features a pencil icon inside a button shape.",
      "category": [
        "Interface"
      ],
      "tag": [
        "edit",
        "button",
        "pencil",
        "modify",
        "user interface",
        "interaction",
        "graphic design",
        "web design",
        "UI",
        "UX"
      ],
      "title": "Button Edit 2"
    };
    icon_button_edit_2_svg_default = meta480;
  }
});

// lib/meta/icon_button-edit.svg.ts
var icon_button_edit_svg_exports = {};
__export(icon_button_edit_svg_exports, {
  default: () => icon_button_edit_svg_default,
  meta: () => meta481
});
var meta481, icon_button_edit_svg_default;
var init_icon_button_edit_svg = __esm({
  "lib/meta/icon_button-edit.svg.ts"() {
    meta481 = {
      "description": "This icon represents an edit button, typically used for allowing users to edit content or data. It features a pencil or pen symbol, indicating the action of editing.",
      "category": [
        "Interface"
      ],
      "tag": [
        "button",
        "edit",
        "modify",
        "update",
        "change",
        "pencil",
        "edit button",
        "user interface",
        "interaction",
        "editable"
      ],
      "title": "Button Edit"
    };
    icon_button_edit_svg_default = meta481;
  }
});

// lib/meta/icon_button-exclamation-mark-2.svg.ts
var icon_button_exclamation_mark_2_svg_exports = {};
__export(icon_button_exclamation_mark_2_svg_exports, {
  default: () => icon_button_exclamation_mark_2_svg_default,
  meta: () => meta482
});
var meta482, icon_button_exclamation_mark_2_svg_default;
var init_icon_button_exclamation_mark_2_svg = __esm({
  "lib/meta/icon_button-exclamation-mark-2.svg.ts"() {
    meta482 = {
      "description": "A button icon with an exclamation mark symbol on it, indicating a warning or important information. This icon can be used in user interfaces to draw attention to certain elements.",
      "category": [
        "Interface"
      ],
      "tag": [
        "button",
        "exclamation mark",
        "warning",
        "important",
        "user interface",
        "attention",
        "symbol",
        "notification",
        "alert"
      ],
      "title": "Button Exclamation Mark 2"
    };
    icon_button_exclamation_mark_2_svg_default = meta482;
  }
});

// lib/meta/icon_button-exclamation-mark.svg.ts
var icon_button_exclamation_mark_svg_exports = {};
__export(icon_button_exclamation_mark_svg_exports, {
  default: () => icon_button_exclamation_mark_svg_default,
  meta: () => meta483
});
var meta483, icon_button_exclamation_mark_svg_default;
var init_icon_button_exclamation_mark_svg = __esm({
  "lib/meta/icon_button-exclamation-mark.svg.ts"() {
    meta483 = {
      "description": "The button exclamation mark icon is a graphic representation of a button with an exclamation mark on it. It is commonly used to draw attention to important information or alerts in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "button",
        "exclamation mark",
        "attention",
        "important",
        "alert",
        "notification",
        "UI",
        "icon",
        "symbol"
      ],
      "title": "Button Exclamation Mark"
    };
    icon_button_exclamation_mark_svg_default = meta483;
  }
});

// lib/meta/icon_button-heart 2.svg.ts
var icon_button_heart_2_svg_exports = {};
__export(icon_button_heart_2_svg_exports, {
  default: () => icon_button_heart_2_svg_default,
  meta: () => meta484
});
var meta484, icon_button_heart_2_svg_default;
var init_icon_button_heart_2_svg = __esm({
  "lib/meta/icon_button-heart 2.svg.ts"() {
    meta484 = {
      "description": "A heart-shaped button design commonly used for like or favorite actions in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "button",
        "heart",
        "like",
        "favorite",
        "UI",
        "user interface",
        "clickable",
        "symbol",
        "icon"
      ],
      "title": "Button Heart"
    };
    icon_button_heart_2_svg_default = meta484;
  }
});

// lib/meta/icon_button-heart.svg.ts
var icon_button_heart_svg_exports = {};
__export(icon_button_heart_svg_exports, {
  default: () => icon_button_heart_svg_default,
  meta: () => meta485
});
var meta485, icon_button_heart_svg_default;
var init_icon_button_heart_svg = __esm({
  "lib/meta/icon_button-heart.svg.ts"() {
    meta485 = {
      "description": "A heart-shaped button icon that can be used to signify liking or favoriting content on a user interface.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "heart",
        "button",
        "like",
        "favorite",
        "ui",
        "icon",
        "design",
        "web",
        "love",
        "emotion"
      ],
      "title": "Button Heart"
    };
    icon_button_heart_svg_default = meta485;
  }
});

// lib/meta/icon_button-info-2.svg.ts
var icon_button_info_2_svg_exports = {};
__export(icon_button_info_2_svg_exports, {
  default: () => icon_button_info_2_svg_default,
  meta: () => meta486
});
var meta486, icon_button_info_2_svg_default;
var init_icon_button_info_2_svg = __esm({
  "lib/meta/icon_button-info-2.svg.ts"() {
    meta486 = {
      "description": "A button icon with an information symbol on it, indicating additional details or instructions. It is often used to provide users with more information about a specific topic or feature.",
      "category": [
        "Interface"
      ],
      "tag": [
        "button",
        "info",
        "information",
        "details",
        "instruction",
        "help",
        "tooltip",
        "UI",
        "user interface",
        "web design"
      ],
      "title": "Button Info 2"
    };
    icon_button_info_2_svg_default = meta486;
  }
});

// lib/meta/icon_button-info.svg.ts
var icon_button_info_svg_exports = {};
__export(icon_button_info_svg_exports, {
  default: () => icon_button_info_svg_default,
  meta: () => meta487
});
var meta487, icon_button_info_svg_default;
var init_icon_button_info_svg = __esm({
  "lib/meta/icon_button-info.svg.ts"() {
    meta487 = {
      "description": "The button-info icon is used to indicate an information button or feature in a user interface.",
      "category": [
        "Interface"
      ],
      "tag": [
        "information",
        "button",
        "user interface",
        "details",
        "tooltip",
        "help",
        "informational",
        "click",
        "interface element",
        "web design"
      ],
      "title": "Button Information"
    };
    icon_button_info_svg_default = meta487;
  }
});

// lib/meta/icon_button-invisible 2.svg.ts
var icon_button_invisible_2_svg_exports = {};
__export(icon_button_invisible_2_svg_exports, {
  default: () => icon_button_invisible_2_svg_default,
  meta: () => meta488
});
var meta488, icon_button_invisible_2_svg_default;
var init_icon_button_invisible_2_svg = __esm({
  "lib/meta/icon_button-invisible 2.svg.ts"() {
    meta488 = {
      "description": "The icon 'Button Invisible 2' represents an invisible or hidden button in a user interface. It can be used to symbolize a non-clickable or disabled button.",
      "category": [
        "Interface"
      ],
      "tag": [
        "hidden",
        "inactive",
        "unclickable",
        "user interface",
        "design",
        "ui element",
        "web development",
        "button",
        "invisible"
      ],
      "title": "Button Invisible 2"
    };
    icon_button_invisible_2_svg_default = meta488;
  }
});

// lib/meta/icon_button-invisible.svg.ts
var icon_button_invisible_svg_exports = {};
__export(icon_button_invisible_svg_exports, {
  default: () => icon_button_invisible_svg_default,
  meta: () => meta489
});
var meta489, icon_button_invisible_svg_default;
var init_icon_button_invisible_svg = __esm({
  "lib/meta/icon_button-invisible.svg.ts"() {
    meta489 = {
      "description": "A hidden button icon that is not visible to users, typically used for toggling visibility or interaction.",
      "category": [
        "Interface"
      ],
      "tag": [
        "invisible",
        "toggle",
        "click",
        "interact",
        "hidden",
        "unseen",
        "concealed",
        "UI",
        "button",
        "accessibility"
      ],
      "title": "Button Invisible"
    };
    icon_button_invisible_svg_default = meta489;
  }
});

// lib/meta/icon_button-multiply.svg.ts
var icon_button_multiply_svg_exports = {};
__export(icon_button_multiply_svg_exports, {
  default: () => icon_button_multiply_svg_default,
  meta: () => meta490
});
var meta490, icon_button_multiply_svg_default;
var init_icon_button_multiply_svg = __esm({
  "lib/meta/icon_button-multiply.svg.ts"() {
    meta490 = {
      "description": "The button-multiply icon is a symbol representing an multiplication operation. It commonly used in calculators or math-related applications.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "button",
        "multiply",
        "math",
        "calculator",
        "operation",
        "arithmetic",
        "symbol",
        "icon",
        "ui",
        "interface"
      ],
      "title": "Button Multiply"
    };
    icon_button_multiply_svg_default = meta490;
  }
});

// lib/meta/icon_button-question-mark-2.svg.ts
var icon_button_question_mark_2_svg_exports = {};
__export(icon_button_question_mark_2_svg_exports, {
  default: () => icon_button_question_mark_2_svg_default,
  meta: () => meta491
});
var meta491, icon_button_question_mark_2_svg_default;
var init_icon_button_question_mark_2_svg = __esm({
  "lib/meta/icon_button-question-mark-2.svg.ts"() {
    meta491 = {
      "description": "A button icon featuring a question mark symbol. This icon is commonly used for indicating a help or information button in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "button",
        "question mark",
        "help",
        "information",
        "user interface",
        "tooltip",
        "support",
        "faq",
        "query"
      ],
      "title": "Button Question Mark 2"
    };
    icon_button_question_mark_2_svg_default = meta491;
  }
});

// lib/meta/icon_button-question-mark.svg.ts
var icon_button_question_mark_svg_exports = {};
__export(icon_button_question_mark_svg_exports, {
  default: () => icon_button_question_mark_svg_default,
  meta: () => meta492
});
var meta492, icon_button_question_mark_svg_default;
var init_icon_button_question_mark_svg = __esm({
  "lib/meta/icon_button-question-mark.svg.ts"() {
    meta492 = {
      "description": "An icon of a question mark inside a button, typically used to indicate help or additional information",
      "category": [
        "Interface"
      ],
      "tag": [
        "button",
        "question mark",
        "help",
        "information",
        "query",
        "support",
        "tooltip",
        "FAQ",
        "assistance",
        "interface"
      ],
      "title": "Button Question Mark"
    };
    icon_button_question_mark_svg_default = meta492;
  }
});

// lib/meta/icon_button-search 2.svg.ts
var icon_button_search_2_svg_exports = {};
__export(icon_button_search_2_svg_exports, {
  default: () => icon_button_search_2_svg_default,
  meta: () => meta493
});
var meta493, icon_button_search_2_svg_default;
var init_icon_button_search_2_svg = __esm({
  "lib/meta/icon_button-search 2.svg.ts"() {
    meta493 = {
      "description": "The button-search 2 icon is designed for UI purposes. It features a magnifying glass symbolizing a search functionality.",
      "category": [
        "Interface"
      ],
      "tag": [
        "button",
        "search",
        "ui",
        "web",
        "search engine",
        "magnifying glass",
        "find",
        "internet",
        "query"
      ],
      "title": "Button Search 2"
    };
    icon_button_search_2_svg_default = meta493;
  }
});

// lib/meta/icon_button-search.svg.ts
var icon_button_search_svg_exports = {};
__export(icon_button_search_svg_exports, {
  default: () => icon_button_search_svg_default,
  meta: () => meta494
});
var meta494, icon_button_search_svg_default;
var init_icon_button_search_svg = __esm({
  "lib/meta/icon_button-search.svg.ts"() {
    meta494 = {
      "description": "A stylized icon representing a search button, typically used in user interfaces for initiating search functionality.",
      "category": [
        "Interface"
      ],
      "tag": [
        "search button",
        "user interface",
        "search function",
        "web design",
        "input field",
        "search bar",
        "navigation",
        "UI icon",
        "find",
        "lookup"
      ],
      "title": "Button Search"
    };
    icon_button_search_svg_default = meta494;
  }
});

// lib/meta/icon_button-star 2.svg.ts
var icon_button_star_2_svg_exports = {};
__export(icon_button_star_2_svg_exports, {
  default: () => icon_button_star_2_svg_default,
  meta: () => meta495
});
var meta495, icon_button_star_2_svg_default;
var init_icon_button_star_2_svg = __esm({
  "lib/meta/icon_button-star 2.svg.ts"() {
    meta495 = {
      "description": "The button-star 2 icon is a stylish and modern design of a star symbol commonly used for favoriting or rating content. It features a clear outline and sleek appearance, making it ideal for enhancing user interface designs.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "star",
        "button",
        "favorite",
        "rating",
        "UI design",
        "modern",
        "stylish",
        "outline",
        "sleek"
      ],
      "title": "Button Star 2"
    };
    icon_button_star_2_svg_default = meta495;
  }
});

// lib/meta/icon_button-star.svg.ts
var icon_button_star_svg_exports = {};
__export(icon_button_star_svg_exports, {
  default: () => icon_button_star_svg_default,
  meta: () => meta496
});
var meta496, icon_button_star_svg_default;
var init_icon_button_star_svg = __esm({
  "lib/meta/icon_button-star.svg.ts"() {
    meta496 = {
      "description": "The button-star icon is a symbol representing a star enclosed in a button shape. It is commonly used to indicate favoriting or rating items.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "favorite",
        "rate",
        "button",
        "star",
        "user interface",
        "interactive",
        "rating",
        "icon",
        "symbol"
      ],
      "title": "Button Star"
    };
    icon_button_star_svg_default = meta496;
  }
});

// lib/meta/icon_button-subtract.svg.ts
var icon_button_subtract_svg_exports = {};
__export(icon_button_subtract_svg_exports, {
  default: () => icon_button_subtract_svg_default,
  meta: () => meta497
});
var meta497, icon_button_subtract_svg_default;
var init_icon_button_subtract_svg = __esm({
  "lib/meta/icon_button-subtract.svg.ts"() {
    meta497 = {
      "description": "This icon depicts a subtraction symbol commonly used in mathematical equations. It typically represents the action of removing or deducting one quantity from another.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "subtract",
        "math",
        "operation",
        "calculate",
        "symbol",
        "user interface",
        "button",
        "mathematics",
        "minus",
        "arithmetic"
      ],
      "title": "Button Subtract"
    };
    icon_button_subtract_svg_default = meta497;
  }
});

// lib/meta/icon_button-visible 2.svg.ts
var icon_button_visible_2_svg_exports = {};
__export(icon_button_visible_2_svg_exports, {
  default: () => icon_button_visible_2_svg_default,
  meta: () => meta498
});
var meta498, icon_button_visible_2_svg_default;
var init_icon_button_visible_2_svg = __esm({
  "lib/meta/icon_button-visible 2.svg.ts"() {
    meta498 = {
      "description": "The button-visible 2 icon is an icon indicating a visible button or clickable element in a user interface design. It is typically used to highlight interactive elements on a website or application.",
      "category": [
        "Interface"
      ],
      "tag": [
        "button",
        "clickable",
        "interactive",
        "web design",
        "UI",
        "visible element",
        "user interface",
        "digital",
        "website",
        "application"
      ],
      "title": "Button Visible 2"
    };
    icon_button_visible_2_svg_default = meta498;
  }
});

// lib/meta/icon_button-visible.svg.ts
var icon_button_visible_svg_exports = {};
__export(icon_button_visible_svg_exports, {
  default: () => icon_button_visible_svg_default,
  meta: () => meta499
});
var meta499, icon_button_visible_svg_default;
var init_icon_button_visible_svg = __esm({
  "lib/meta/icon_button-visible.svg.ts"() {
    meta499 = {
      "description": "The 'button-visible' icon represents a visible button that is commonly used in user interfaces. It is typically used to indicate a clickable element that is currently visible on the screen.",
      "category": [
        "Interface"
      ],
      "tag": [
        "button",
        "visible",
        "click",
        "element",
        "user interface",
        "web design",
        "interaction",
        "graphical user interface",
        "digital",
        "symbol"
      ],
      "title": "Button Visible"
    };
    icon_button_visible_svg_default = meta499;
  }
});

// lib/meta/icon_button.svg.ts
var icon_button_svg_exports = {};
__export(icon_button_svg_exports, {
  default: () => icon_button_svg_default,
  meta: () => meta500
});
var meta500, icon_button_svg_default;
var init_icon_button_svg = __esm({
  "lib/meta/icon_button.svg.ts"() {
    meta500 = {
      "description": "A button icon commonly used in user interfaces to trigger an action or navigate to a different location.",
      "category": [
        "Interface"
      ],
      "tag": [
        "clickable",
        "action",
        "navigation",
        "web design",
        "interactive",
        "UI element",
        "user interface",
        "website",
        "app",
        "digital"
      ],
      "title": "Button"
    };
    icon_button_svg_default = meta500;
  }
});

// lib/meta/icon_calendar-2.svg.ts
var icon_calendar_2_svg_exports = {};
__export(icon_calendar_2_svg_exports, {
  default: () => icon_calendar_2_svg_default,
  meta: () => meta501
});
var meta501, icon_calendar_2_svg_default;
var init_icon_calendar_2_svg = __esm({
  "lib/meta/icon_calendar-2.svg.ts"() {
    meta501 = {
      "description": "A calendar icon showing two solid squares representing a date. This icon is commonly used to represent events, schedules, and appointments in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "calendar",
        "date",
        "schedule",
        "appointment",
        "event",
        "planner",
        "time management",
        "organize",
        "reminder",
        "deadline"
      ],
      "title": "Calendar 2"
    };
    icon_calendar_2_svg_default = meta501;
  }
});

// lib/meta/icon_calendar.svg.ts
var icon_calendar_svg_exports = {};
__export(icon_calendar_svg_exports, {
  default: () => icon_calendar_svg_default,
  meta: () => meta502
});
var meta502, icon_calendar_svg_default;
var init_icon_calendar_svg = __esm({
  "lib/meta/icon_calendar.svg.ts"() {
    meta502 = {
      "description": "Calendar icon suitable for UI design, representing schedules and events.",
      "category": [
        "Interface"
      ],
      "tag": [
        "date",
        "time",
        "event",
        "planner",
        "schedule",
        "appointment",
        "reminder",
        "organization",
        "time management",
        "tracking"
      ],
      "title": "Calendar"
    };
    icon_calendar_svg_default = meta502;
  }
});

// lib/meta/icon_chart-bars-squared.svg.ts
var icon_chart_bars_squared_svg_exports = {};
__export(icon_chart_bars_squared_svg_exports, {
  default: () => icon_chart_bars_squared_svg_default,
  meta: () => meta503
});
var meta503, icon_chart_bars_squared_svg_default;
var init_icon_chart_bars_squared_svg = __esm({
  "lib/meta/icon_chart-bars-squared.svg.ts"() {
    meta503 = {
      "description": "A squared chart bars icon representing data visualization and statistical analysis",
      "category": [
        "Interface"
      ],
      "tag": [
        "chart",
        "bars",
        "graph",
        "statistics",
        "data",
        "visualization",
        "analysis",
        "report",
        "dashboard"
      ],
      "title": "Chart Bars Squared"
    };
    icon_chart_bars_squared_svg_default = meta503;
  }
});

// lib/meta/icon_chart-bubbles.svg.ts
var icon_chart_bubbles_svg_exports = {};
__export(icon_chart_bubbles_svg_exports, {
  default: () => icon_chart_bubbles_svg_default,
  meta: () => meta504
});
var meta504, icon_chart_bubbles_svg_default;
var init_icon_chart_bubbles_svg = __esm({
  "lib/meta/icon_chart-bubbles.svg.ts"() {
    meta504 = {
      "description": "Icon of bubbles arranged in a chart format, representing data visualization or statistics in a graphical way.",
      "category": [
        "Interface"
      ],
      "tag": [
        "chart",
        "bubbles",
        "data visualization",
        "statistics",
        "graph",
        "information",
        "analytics",
        "infographic",
        "visualization"
      ],
      "title": "Chart Bubbles"
    };
    icon_chart_bubbles_svg_default = meta504;
  }
});

// lib/meta/icon_chart-candles.svg.ts
var icon_chart_candles_svg_exports = {};
__export(icon_chart_candles_svg_exports, {
  default: () => icon_chart_candles_svg_default,
  meta: () => meta505
});
var meta505, icon_chart_candles_svg_default;
var init_icon_chart_candles_svg = __esm({
  "lib/meta/icon_chart-candles.svg.ts"() {
    meta505 = {
      "description": "The chart-candles icon represents a visual representation of financial data through candlestick charts. The icon is commonly used in interfaces related to finance, stock market analysis, and investment tracking.",
      "category": [
        "Interface"
      ],
      "tag": [
        "finance",
        "stock market",
        "investment",
        "analysis",
        "data visualization",
        "candlestick chart",
        "statistics",
        "charting",
        "information"
      ],
      "title": "Chart Candles"
    };
    icon_chart_candles_svg_default = meta505;
  }
});

// lib/meta/icon_chart-half-circle.svg.ts
var icon_chart_half_circle_svg_exports = {};
__export(icon_chart_half_circle_svg_exports, {
  default: () => icon_chart_half_circle_svg_default,
  meta: () => meta506
});
var meta506, icon_chart_half_circle_svg_default;
var init_icon_chart_half_circle_svg = __esm({
  "lib/meta/icon_chart-half-circle.svg.ts"() {
    meta506 = {
      "description": "The chart-half-circle icon is a graphical representation of a half circle, typically used to display data in a semi-circle format. This icon is commonly found in various UI designs for visualizing statistics, analytics, and reports.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "Graph",
        "Data visualization",
        "Analytics",
        "Statistics",
        "Report",
        "Information",
        "Presentation",
        "Dashboard",
        "Diagram",
        "UI design"
      ],
      "title": "Chart Half Circle"
    };
    icon_chart_half_circle_svg_default = meta506;
  }
});

// lib/meta/icon_chart-line-squared.svg.ts
var icon_chart_line_squared_svg_exports = {};
__export(icon_chart_line_squared_svg_exports, {
  default: () => icon_chart_line_squared_svg_default,
  meta: () => meta507
});
var meta507, icon_chart_line_squared_svg_default;
var init_icon_chart_line_squared_svg = __esm({
  "lib/meta/icon_chart-line-squared.svg.ts"() {
    meta507 = {
      "description": "A squared chart line icon depicting a graph or data visualization. It is typically used to represent analytics, statistics, and trends in a square format.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "chart",
        "line",
        "graph",
        "data",
        "analytics",
        "statistics",
        "trends",
        "visualization",
        "square"
      ],
      "title": "Chart Line Squared"
    };
    icon_chart_line_squared_svg_default = meta507;
  }
});

// lib/meta/icon_chart-line.svg.ts
var icon_chart_line_svg_exports = {};
__export(icon_chart_line_svg_exports, {
  default: () => icon_chart_line_svg_default,
  meta: () => meta508
});
var meta508, icon_chart_line_svg_default;
var init_icon_chart_line_svg = __esm({
  "lib/meta/icon_chart-line.svg.ts"() {
    meta508 = {
      "description": "The chart-line icon represents a line chart or graph, commonly used to visualize data trends over time. It typically consists of a line that connects data points to show the relationship between them.",
      "category": [
        "Interface"
      ],
      "tag": [
        "statistics",
        "trends",
        "data visualization",
        "analytics",
        "metrics",
        "reporting",
        "business",
        "graph",
        "line chart",
        "plot"
      ],
      "title": "Line Chart"
    };
    icon_chart_line_svg_default = meta508;
  }
});

// lib/meta/icon_chart-pie.svg.ts
var icon_chart_pie_svg_exports = {};
__export(icon_chart_pie_svg_exports, {
  default: () => icon_chart_pie_svg_default,
  meta: () => meta509
});
var meta509, icon_chart_pie_svg_default;
var init_icon_chart_pie_svg = __esm({
  "lib/meta/icon_chart-pie.svg.ts"() {
    meta509 = {
      "description": "A pie chart icon representing data visualization and statistical information in a graphical format.",
      "category": [
        "Interface"
      ],
      "tag": [
        "chart",
        "pie",
        "data",
        "visualization",
        "statistics",
        "graph",
        "information",
        "analytics",
        "report",
        "dashboard"
      ],
      "title": "Chart Pie"
    };
    icon_chart_pie_svg_default = meta509;
  }
});

// lib/meta/icon_check-fat.svg.ts
var icon_check_fat_svg_exports = {};
__export(icon_check_fat_svg_exports, {
  default: () => icon_check_fat_svg_default,
  meta: () => meta510
});
var meta510, icon_check_fat_svg_default;
var init_icon_check_fat_svg = __esm({
  "lib/meta/icon_check-fat.svg.ts"() {
    meta510 = {
      "description": "A bold and thick check mark icon, indicating completion or approval. Commonly used in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "check",
        "tick",
        "complete",
        "approve",
        "confirmed",
        "success",
        "ui",
        "symbol",
        "verification",
        "confirmation"
      ],
      "title": "Check Fat"
    };
    icon_check_fat_svg_default = meta510;
  }
});

// lib/meta/icon_check-l.svg.ts
var icon_check_l_svg_exports = {};
__export(icon_check_l_svg_exports, {
  default: () => icon_check_l_svg_default,
  meta: () => meta511
});
var meta511, icon_check_l_svg_default;
var init_icon_check_l_svg = __esm({
  "lib/meta/icon_check-l.svg.ts"() {
    meta511 = {
      "description": "The check-l icon is a symbol representing approval or confirmation. It typically shows a checkmark enclosed in a circle. This icon is commonly used in user interfaces to indicate success or completion.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "approval",
        "confirmation",
        "success",
        "completion",
        "checkbox",
        "tick",
        "verified",
        "validated",
        "acceptance"
      ],
      "title": "Checkmark Large"
    };
    icon_check_l_svg_default = meta511;
  }
});

// lib/meta/icon_check-list.svg.ts
var icon_check_list_svg_exports = {};
__export(icon_check_list_svg_exports, {
  default: () => icon_check_list_svg_default,
  meta: () => meta512
});
var meta512, icon_check_list_svg_default;
var init_icon_check_list_svg = __esm({
  "lib/meta/icon_check-list.svg.ts"() {
    meta512 = {
      "description": "A check-list icon is typically used to represent a list of tasks or items that need to be completed. It often signifies organization, planning, and progress tracking in various applications and interfaces.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "tasks",
        "items",
        "organization",
        "planning",
        "progress tracking",
        "checkbox",
        "to-do list",
        "completion",
        "management",
        "productivity"
      ],
      "title": "Check List"
    };
    icon_check_list_svg_default = meta512;
  }
});

// lib/meta/icon_check-m.svg.ts
var icon_check_m_svg_exports = {};
__export(icon_check_m_svg_exports, {
  default: () => icon_check_m_svg_default,
  meta: () => meta513
});
var meta513, icon_check_m_svg_default;
var init_icon_check_m_svg = __esm({
  "lib/meta/icon_check-m.svg.ts"() {
    meta513 = {
      "description": "The 'check-m' icon is a symbol representing a check mark, indicating completion or approval. It is often used in user interfaces to confirm selections or actions.",
      "category": [
        "Interface"
      ],
      "tag": [
        "confirm",
        "approve",
        "complete",
        "success",
        "tick",
        "checkbox",
        "validation",
        "selection",
        "approval"
      ],
      "title": "Check Mark"
    };
    icon_check_m_svg_default = meta513;
  }
});

// lib/meta/icon_check-s.svg.ts
var icon_check_s_svg_exports = {};
__export(icon_check_s_svg_exports, {
  default: () => icon_check_s_svg_default,
  meta: () => meta514
});
var meta514, icon_check_s_svg_default;
var init_icon_check_s_svg = __esm({
  "lib/meta/icon_check-s.svg.ts"() {
    meta514 = {
      "description": "The check-s icon is a symbol representing a mark indicating a correct or approved status. It is commonly used in user interfaces to confirm selections or actions.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "validation",
        "confirmation",
        "approved",
        "correct",
        "complete",
        "success",
        "tick",
        "select",
        "interface",
        "ui"
      ],
      "title": "Check Symbol"
    };
    icon_check_s_svg_default = meta514;
  }
});

// lib/meta/icon_circle-invisible.svg.ts
var icon_circle_invisible_svg_exports = {};
__export(icon_circle_invisible_svg_exports, {
  default: () => icon_circle_invisible_svg_default,
  meta: () => meta515
});
var meta515, icon_circle_invisible_svg_default;
var init_icon_circle_invisible_svg = __esm({
  "lib/meta/icon_circle-invisible.svg.ts"() {
    meta515 = {
      "description": "The circle-invisible icon represents an invisible circle, typically used to indicate hidden or unknown elements in a user interface.",
      "category": [
        "Interface",
        "Shapes"
      ],
      "tag": [
        "hidden",
        "unknown",
        "element",
        "user interface",
        "invisible",
        "circle",
        "concealed",
        "secret",
        "mask"
      ],
      "title": "Circle Invisible"
    };
    icon_circle_invisible_svg_default = meta515;
  }
});

// lib/meta/icon_circle-subtract.svg.ts
var icon_circle_subtract_svg_exports = {};
__export(icon_circle_subtract_svg_exports, {
  default: () => icon_circle_subtract_svg_default,
  meta: () => meta516
});
var meta516, icon_circle_subtract_svg_default;
var init_icon_circle_subtract_svg = __esm({
  "lib/meta/icon_circle-subtract.svg.ts"() {
    meta516 = {
      "description": "The circle-subtract icon represents the action of subtracting or removing something within a circular shape. It is commonly used in user interfaces to indicate a deletion or removal function.",
      "category": [
        "Interface"
      ],
      "tag": [
        "subtract",
        "delete",
        "remove",
        "eliminate",
        "action",
        "round",
        "interface",
        "function",
        "UI"
      ],
      "title": "Circle Subtract"
    };
    icon_circle_subtract_svg_default = meta516;
  }
});

// lib/meta/icon_circled-add.svg.ts
var icon_circled_add_svg_exports = {};
__export(icon_circled_add_svg_exports, {
  default: () => icon_circled_add_svg_default,
  meta: () => meta517
});
var meta517, icon_circled_add_svg_default;
var init_icon_circled_add_svg = __esm({
  "lib/meta/icon_circled-add.svg.ts"() {
    meta517 = {
      "description": "A circled icon depicting an addition sign, representing the action of adding or including something. This icon is commonly used in user interfaces to indicate the option to create or add something new.",
      "category": [
        "Interface"
      ],
      "tag": [
        "addition",
        "plus",
        "create",
        "include",
        "user interface",
        "action",
        "option",
        "button",
        "feature"
      ],
      "title": "Circled Add"
    };
    icon_circled_add_svg_default = meta517;
  }
});

// lib/meta/icon_circled-broken-heart.svg.ts
var icon_circled_broken_heart_svg_exports = {};
__export(icon_circled_broken_heart_svg_exports, {
  default: () => icon_circled_broken_heart_svg_default,
  meta: () => meta518
});
var meta518, icon_circled_broken_heart_svg_default;
var init_icon_circled_broken_heart_svg = __esm({
  "lib/meta/icon_circled-broken-heart.svg.ts"() {
    meta518 = {
      "description": "A symbol of a heart enclosed in a broken circle, representing a broken heart. Often used to express heartbreak or sadness in a visual form.",
      "category": [
        "Symbol",
        "UI"
      ],
      "tag": [
        "love",
        "emotion",
        "sadness",
        "emoticon",
        "heartbreak",
        "icon",
        "illustration",
        "ui design",
        "broken heart",
        "circled"
      ],
      "title": "Circled Broken Heart"
    };
    icon_circled_broken_heart_svg_default = meta518;
  }
});

// lib/meta/icon_circled-check.svg.ts
var icon_circled_check_svg_exports = {};
__export(icon_circled_check_svg_exports, {
  default: () => icon_circled_check_svg_default,
  meta: () => meta519
});
var meta519, icon_circled_check_svg_default;
var init_icon_circled_check_svg = __esm({
  "lib/meta/icon_circled-check.svg.ts"() {
    meta519 = {
      "description": "The circled-check icon is a symbol representing the action of confirming or validating something. It is commonly used in user interfaces to indicate a successful or completed task.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "confirmation",
        "validation",
        "success",
        "completed",
        "task",
        "checkbox",
        "tick",
        "mark",
        "approved",
        "acknowledgment"
      ],
      "title": "Circled Check"
    };
    icon_circled_check_svg_default = meta519;
  }
});

// lib/meta/icon_circled-edit.svg.ts
var icon_circled_edit_svg_exports = {};
__export(icon_circled_edit_svg_exports, {
  default: () => icon_circled_edit_svg_default,
  meta: () => meta520
});
var meta520, icon_circled_edit_svg_default;
var init_icon_circled_edit_svg = __esm({
  "lib/meta/icon_circled-edit.svg.ts"() {
    meta520 = {
      "description": "A circular icon representing edit or modify action. The icon typically features a pencil or pen inside the circle.",
      "category": [
        "Interface"
      ],
      "tag": [
        "edit",
        "modify",
        "pencil",
        "pen",
        "write",
        "update",
        "change",
        "edit button",
        "editing",
        "user interface"
      ],
      "title": "Circled Edit"
    };
    icon_circled_edit_svg_default = meta520;
  }
});

// lib/meta/icon_circled-exclamation-mark.svg.ts
var icon_circled_exclamation_mark_svg_exports = {};
__export(icon_circled_exclamation_mark_svg_exports, {
  default: () => icon_circled_exclamation_mark_svg_default,
  meta: () => meta521
});
var meta521, icon_circled_exclamation_mark_svg_default;
var init_icon_circled_exclamation_mark_svg = __esm({
  "lib/meta/icon_circled-exclamation-mark.svg.ts"() {
    meta521 = {
      "description": "A circled exclamation mark icon, typically used to indicate warnings, alerts, or important messages in a user interface design.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "alert",
        "warning",
        "attention",
        "notification",
        "hazard",
        "caution",
        "error",
        "exclamation",
        "information",
        "message"
      ],
      "title": "Circled Exclamation Mark"
    };
    icon_circled_exclamation_mark_svg_default = meta521;
  }
});

// lib/meta/icon_circled-heart.svg.ts
var icon_circled_heart_svg_exports = {};
__export(icon_circled_heart_svg_exports, {
  default: () => icon_circled_heart_svg_default,
  meta: () => meta522
});
var meta522, icon_circled_heart_svg_default;
var init_icon_circled_heart_svg = __esm({
  "lib/meta/icon_circled-heart.svg.ts"() {
    meta522 = {
      "description": "A heart shape enclosed in a circle, representing love and affection. It is commonly used in user interfaces for like or favorite buttons.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "love",
        "affection",
        "like",
        "favorite",
        "like button",
        "favorite button",
        "romance",
        "valentine",
        "heart shape",
        "enclosed"
      ],
      "title": "Circled Heart"
    };
    icon_circled_heart_svg_default = meta522;
  }
});

// lib/meta/icon_circled-info.svg.ts
var icon_circled_info_svg_exports = {};
__export(icon_circled_info_svg_exports, {
  default: () => icon_circled_info_svg_default,
  meta: () => meta523
});
var meta523, icon_circled_info_svg_default;
var init_icon_circled_info_svg = __esm({
  "lib/meta/icon_circled-info.svg.ts"() {
    meta523 = {
      "description": "A circled information icon indicating additional information or details",
      "category": [
        "Interface"
      ],
      "tag": [
        "information",
        "details",
        "help",
        "question",
        "tooltip",
        "info",
        "circle",
        "notification",
        "alert",
        "UI"
      ],
      "title": "Circled Info"
    };
    icon_circled_info_svg_default = meta523;
  }
});

// lib/meta/icon_circled-multiply.svg.ts
var icon_circled_multiply_svg_exports = {};
__export(icon_circled_multiply_svg_exports, {
  default: () => icon_circled_multiply_svg_default,
  meta: () => meta524
});
var meta524, icon_circled_multiply_svg_default;
var init_icon_circled_multiply_svg = __esm({
  "lib/meta/icon_circled-multiply.svg.ts"() {
    meta524 = {
      "description": "The circled multiply icon represents the mathematical operation of multiplication enclosed within a circle. It is commonly used in user interfaces to indicate a multiplication action or function.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "math",
        "calculate",
        "operation",
        "multiply",
        "multiplication",
        "circle",
        "button",
        "user interface",
        "symbol",
        "mathematical"
      ],
      "title": "Circled Multiply"
    };
    icon_circled_multiply_svg_default = meta524;
  }
});

// lib/meta/icon_circled-question-mark.svg.ts
var icon_circled_question_mark_svg_exports = {};
__export(icon_circled_question_mark_svg_exports, {
  default: () => icon_circled_question_mark_svg_default,
  meta: () => meta525
});
var meta525, icon_circled_question_mark_svg_default;
var init_icon_circled_question_mark_svg = __esm({
  "lib/meta/icon_circled-question-mark.svg.ts"() {
    meta525 = {
      "description": "A circular icon with a question mark symbol inside, commonly used to indicate help, support, or FAQs in user interfaces.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "question mark",
        "help",
        "support",
        "FAQs",
        "information",
        "query",
        "user interface",
        "assistance",
        "unknown"
      ],
      "title": "Circled Question Mark"
    };
    icon_circled_question_mark_svg_default = meta525;
  }
});

// lib/meta/icon_circled-search.svg.ts
var icon_circled_search_svg_exports = {};
__export(icon_circled_search_svg_exports, {
  default: () => icon_circled_search_svg_default,
  meta: () => meta526
});
var meta526, icon_circled_search_svg_default;
var init_icon_circled_search_svg = __esm({
  "lib/meta/icon_circled-search.svg.ts"() {
    meta526 = {
      "description": "A search icon enclosed within a circle, commonly used in user interfaces to indicate a search function.",
      "category": [
        "Interface"
      ],
      "tag": [
        "search",
        "find",
        "query",
        "lookup",
        "internet",
        "web",
        "UI",
        "search bar",
        "magnifying glass",
        "discover"
      ],
      "title": "Circled Search"
    };
    icon_circled_search_svg_default = meta526;
  }
});

// lib/meta/icon_circled-star.svg.ts
var icon_circled_star_svg_exports = {};
__export(icon_circled_star_svg_exports, {
  default: () => icon_circled_star_svg_default,
  meta: () => meta527
});
var meta527, icon_circled_star_svg_default;
var init_icon_circled_star_svg = __esm({
  "lib/meta/icon_circled-star.svg.ts"() {
    meta527 = {
      "description": "A star enclosed by a circle, representing emphasis or importance.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "emphasis",
        "importance",
        "highlight",
        "enclosed",
        "circle",
        "star",
        "icon",
        "UI",
        "symbol",
        "sign"
      ],
      "title": "Circled Star"
    };
    icon_circled_star_svg_default = meta527;
  }
});

// lib/meta/icon_circled-visible.svg.ts
var icon_circled_visible_svg_exports = {};
__export(icon_circled_visible_svg_exports, {
  default: () => icon_circled_visible_svg_default,
  meta: () => meta528
});
var meta528, icon_circled_visible_svg_default;
var init_icon_circled_visible_svg = __esm({
  "lib/meta/icon_circled-visible.svg.ts"() {
    meta528 = {
      "description": "An icon depicting an eye within a circle, symbolizing visibility or display options in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "eye",
        "visible",
        "visibility",
        "display",
        "UI",
        "user interface",
        "options",
        "settings",
        "circled",
        "view"
      ],
      "title": "Circled Visible"
    };
    icon_circled_visible_svg_default = meta528;
  }
});

// lib/meta/icon_circled.svg.ts
var icon_circled_svg_exports = {};
__export(icon_circled_svg_exports, {
  default: () => icon_circled_svg_default,
  meta: () => meta529
});
var meta529, icon_circled_svg_default;
var init_icon_circled_svg = __esm({
  "lib/meta/icon_circled.svg.ts"() {
    meta529 = {
      "description": "The circled icon represents an enclosed shape or symbol within a circle. It is commonly used in user interfaces to draw attention to or emphasize a particular element.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "Enclosed",
        "Round",
        "Highlight",
        "Emphasis",
        "Decoration",
        "Attention-grabbing",
        "Circular",
        "Outline",
        "Web design",
        "Graphic design"
      ],
      "title": "Circled"
    };
    icon_circled_svg_default = meta529;
  }
});

// lib/meta/icon_circular-loader.svg.ts
var icon_circular_loader_svg_exports = {};
__export(icon_circular_loader_svg_exports, {
  default: () => icon_circular_loader_svg_default,
  meta: () => meta530
});
var meta530, icon_circular_loader_svg_default;
var init_icon_circular_loader_svg = __esm({
  "lib/meta/icon_circular-loader.svg.ts"() {
    meta530 = {
      description: "Circular loader is a common UI element used in web and app interfaces to indicate loading or processing.",
      category: ["Interface"],
      tag: ["loading", "progress", "spinner", "animation", "web", "app", "user interface", "waiting", "circle", "loading indicator"],
      title: "Circular Loader"
    };
    icon_circular_loader_svg_default = meta530;
  }
});

// lib/meta/icon_clock.svg.ts
var icon_clock_svg_exports = {};
__export(icon_clock_svg_exports, {
  default: () => icon_clock_svg_default,
  meta: () => meta531
});
var meta531, icon_clock_svg_default;
var init_icon_clock_svg = __esm({
  "lib/meta/icon_clock.svg.ts"() {
    meta531 = {
      "description": "A simple icon representing a clock, typically used to indicate time or schedule in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "time",
        "schedule",
        "reminder",
        "alarm",
        "plan",
        "hour",
        "minute",
        "second",
        "timing"
      ],
      "title": "Clock"
    };
    icon_clock_svg_default = meta531;
  }
});

// lib/meta/icon_code-brackets-circled.svg.ts
var icon_code_brackets_circled_svg_exports = {};
__export(icon_code_brackets_circled_svg_exports, {
  default: () => icon_code_brackets_circled_svg_default,
  meta: () => meta532
});
var meta532, icon_code_brackets_circled_svg_default;
var init_icon_code_brackets_circled_svg = __esm({
  "lib/meta/icon_code-brackets-circled.svg.ts"() {
    meta532 = {
      "description": "An icon of two curly brackets enclosed in a circle, representing code brackets circled symbol. This icon is commonly used in user interfaces for indicating code snippets or programming related content.",
      "category": [
        "Interface"
      ],
      "tag": [
        "Code",
        "Coding",
        "Programming",
        "Development",
        "Brackets",
        "Circle",
        "Syntax",
        "Snippet",
        "Syntax Highlighting",
        "User Interface"
      ],
      "title": "Code Brackets Circled"
    };
    icon_code_brackets_circled_svg_default = meta532;
  }
});

// lib/meta/icon_code-brackets.svg.ts
var icon_code_brackets_svg_exports = {};
__export(icon_code_brackets_svg_exports, {
  default: () => icon_code_brackets_svg_default,
  meta: () => meta533
});
var meta533, icon_code_brackets_svg_default;
var init_icon_code_brackets_svg = __esm({
  "lib/meta/icon_code-brackets.svg.ts"() {
    meta533 = {
      "description": "The code-brackets icon represents the brackets used in coding to enclose blocks of code. It is commonly used to signify the beginning and end of a segment of code.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "coding",
        "programming",
        "development",
        "syntax",
        "brackets",
        "code editor",
        "software",
        "technology",
        "web development",
        "coding standards"
      ],
      "title": "Code Brackets"
    };
    icon_code_brackets_svg_default = meta533;
  }
});

// lib/meta/icon_code-chevrons-circled.svg.ts
var icon_code_chevrons_circled_svg_exports = {};
__export(icon_code_chevrons_circled_svg_exports, {
  default: () => icon_code_chevrons_circled_svg_default,
  meta: () => meta534
});
var meta534, icon_code_chevrons_circled_svg_default;
var init_icon_code_chevrons_circled_svg = __esm({
  "lib/meta/icon_code-chevrons-circled.svg.ts"() {
    meta534 = {
      "description": "The code chevrons circled icon is a symbol that indicates a set of chevron arrows placed in a circular shape. This icon is commonly used in UI design to represent code snippets or navigation controls.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "code",
        "chevrons",
        "circled",
        "arrows",
        "coding",
        "navigation",
        "UI design",
        "web development",
        "programming"
      ],
      "title": "Code Chevrons Circled"
    };
    icon_code_chevrons_circled_svg_default = meta534;
  }
});

// lib/meta/icon_code-chevrons-open-circled.svg.ts
var icon_code_chevrons_open_circled_svg_exports = {};
__export(icon_code_chevrons_open_circled_svg_exports, {
  default: () => icon_code_chevrons_open_circled_svg_default,
  meta: () => meta535
});
var meta535, icon_code_chevrons_open_circled_svg_default;
var init_icon_code_chevrons_open_circled_svg = __esm({
  "lib/meta/icon_code-chevrons-open-circled.svg.ts"() {
    meta535 = {
      "description": "An icon representing open chevrons enclosed in circles, typically used to indicate expandable code or content in a user interface.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "expand",
        "code",
        "chevrons",
        "circled",
        "UI",
        "interface",
        "expandable",
        "navigation",
        "arrows",
        "nested"
      ],
      "title": "Code Chevrons Open Circled"
    };
    icon_code_chevrons_open_circled_svg_default = meta535;
  }
});

// lib/meta/icon_code-chevrons-open.svg.ts
var icon_code_chevrons_open_svg_exports = {};
__export(icon_code_chevrons_open_svg_exports, {
  default: () => icon_code_chevrons_open_svg_default,
  meta: () => meta536
});
var meta536, icon_code_chevrons_open_svg_default;
var init_icon_code_chevrons_open_svg = __esm({
  "lib/meta/icon_code-chevrons-open.svg.ts"() {
    meta536 = {
      "description": "An icon depicting open chevrons often associated with code editors or programming environments, representing the ability to expand or collapse code sections.",
      "category": [
        "Interface"
      ],
      "tag": [
        "open chevrons",
        "expand",
        "collapse",
        "code editor",
        "programming",
        "development",
        "UI",
        "arrow",
        "navigation",
        "direction"
      ],
      "title": "Code Chevrons Open"
    };
    icon_code_chevrons_open_svg_default = meta536;
  }
});

// lib/meta/icon_code-chevrons.svg.ts
var icon_code_chevrons_svg_exports = {};
__export(icon_code_chevrons_svg_exports, {
  default: () => icon_code_chevrons_svg_default,
  meta: () => meta537
});
var meta537, icon_code_chevrons_svg_default;
var init_icon_code_chevrons_svg = __esm({
  "lib/meta/icon_code-chevrons.svg.ts"() {
    meta537 = {
      "description": "The code chevrons icon typically represents a set of instructions or commands, often used in programming or coding environments. It consists of two chevron arrows pointing towards each other, indicating a sequence of code blocks. This icon is commonly used in user interfaces related to coding, development, or software applications.",
      "category": [
        "Interface"
      ],
      "tag": [
        "Programming",
        "Commands",
        "Instructions",
        "Coding",
        "Code Blocks",
        "Development",
        "Software",
        "User Interface",
        "Sequence",
        "Arrows"
      ],
      "title": "Code Chevrons"
    };
    icon_code_chevrons_svg_default = meta537;
  }
});

// lib/meta/icon_company.svg.ts
var icon_company_svg_exports = {};
__export(icon_company_svg_exports, {
  default: () => icon_company_svg_default,
  meta: () => meta538
});
var meta538, icon_company_svg_default;
var init_icon_company_svg = __esm({
  "lib/meta/icon_company.svg.ts"() {
    meta538 = {
      "description": "The company icon represents a business or corporation. It can be used to symbolize a company, organization, or enterprise in user interfaces or presentations.",
      "category": [
        "Interface"
      ],
      "tag": [
        "corporate",
        "business",
        "enterprise",
        "organization",
        "office",
        "building",
        "company logo",
        "branding",
        "symbol"
      ],
      "title": "Company"
    };
    icon_company_svg_default = meta538;
  }
});

// lib/meta/icon_dislike.svg.ts
var icon_dislike_svg_exports = {};
__export(icon_dislike_svg_exports, {
  default: () => icon_dislike_svg_default,
  meta: () => meta539
});
var meta539, icon_dislike_svg_default;
var init_icon_dislike_svg = __esm({
  "lib/meta/icon_dislike.svg.ts"() {
    meta539 = {
      "description": "The dislike icon represents a negative sentiment towards content or an object. It is commonly used in user interfaces to express disapproval or to indicate that something is not liked.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "dislike",
        "thumb down",
        "unlike",
        "reject",
        "thumbs",
        "negative",
        "emotion",
        "feedback",
        "UI",
        "expression"
      ],
      "title": "Dislike"
    };
    icon_dislike_svg_default = meta539;
  }
});

// lib/meta/icon_edit-fat.svg.ts
var icon_edit_fat_svg_exports = {};
__export(icon_edit_fat_svg_exports, {
  default: () => icon_edit_fat_svg_default,
  meta: () => meta540
});
var meta540, icon_edit_fat_svg_default;
var init_icon_edit_fat_svg = __esm({
  "lib/meta/icon_edit-fat.svg.ts"() {
    meta540 = {
      "description": "The edit-fat icon is a bold and thick design of a pencil on a sheet of paper, symbolizing editing or making changes to content. It is commonly used in user interfaces for editing functionalities.",
      "category": [
        "Interface"
      ],
      "tag": [
        "edit",
        "pencil",
        "paper",
        "edit content",
        "modify",
        "update",
        "UI design",
        "document editing",
        "user interface",
        "customize"
      ],
      "title": "Edit Fat"
    };
    icon_edit_fat_svg_default = meta540;
  }
});

// lib/meta/icon_edit-l.svg.ts
var icon_edit_l_svg_exports = {};
__export(icon_edit_l_svg_exports, {
  default: () => icon_edit_l_svg_default,
  meta: () => meta541
});
var meta541, icon_edit_l_svg_default;
var init_icon_edit_l_svg = __esm({
  "lib/meta/icon_edit-l.svg.ts"() {
    meta541 = {
      "description": "The edit-l icon is used to represent an editing tool or feature. It typically signifies the ability to make changes or modifications to content or elements.",
      "category": [
        "Interface"
      ],
      "tag": [
        "edit",
        "pencil",
        "modify",
        "update",
        "change",
        "edit tool",
        "design",
        "editor",
        "customize"
      ],
      "title": "Edit Tool"
    };
    icon_edit_l_svg_default = meta541;
  }
});

// lib/meta/icon_edit-line-swirl.svg.ts
var icon_edit_line_swirl_svg_exports = {};
__export(icon_edit_line_swirl_svg_exports, {
  default: () => icon_edit_line_swirl_svg_default,
  meta: () => meta542
});
var meta542, icon_edit_line_swirl_svg_default;
var init_icon_edit_line_swirl_svg = __esm({
  "lib/meta/icon_edit-line-swirl.svg.ts"() {
    meta542 = {
      "description": "The edit-line-swirl icon is a stylish and modern design featuring a swirling line that symbolizes creativity and editing. This icon is perfect for representing editing functions in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "edit",
        "swirl",
        "creative",
        "modern",
        "stylish",
        "user interface",
        "design",
        "editing",
        "function"
      ],
      "title": "Edit Line Swirl"
    };
    icon_edit_line_swirl_svg_default = meta542;
  }
});

// lib/meta/icon_edit-line.svg.ts
var icon_edit_line_svg_exports = {};
__export(icon_edit_line_svg_exports, {
  default: () => icon_edit_line_svg_default,
  meta: () => meta543
});
var meta543, icon_edit_line_svg_default;
var init_icon_edit_line_svg = __esm({
  "lib/meta/icon_edit-line.svg.ts"() {
    meta543 = {
      "description": "The edit-line icon is a simple and modern representation of an editing tool, commonly used to indicate an option for making changes or updates to content. It features a pencil or pen-like element that signifies the editing process.",
      "category": [
        "Interface"
      ],
      "tag": [
        "edit",
        "update",
        "modify",
        "change",
        "edit tool",
        "pen",
        "pencil",
        "writing",
        "digital",
        "interface"
      ],
      "title": "Edit Line"
    };
    icon_edit_line_svg_default = meta543;
  }
});

// lib/meta/icon_edit-m.svg.ts
var icon_edit_m_svg_exports = {};
__export(icon_edit_m_svg_exports, {
  default: () => icon_edit_m_svg_default,
  meta: () => meta544
});
var meta544, icon_edit_m_svg_default;
var init_icon_edit_m_svg = __esm({
  "lib/meta/icon_edit-m.svg.ts"() {
    meta544 = {
      "description": "The edit-m icon is used to represent an edit function or feature in user interfaces. It typically indicates the option to modify or update existing content.",
      "category": [
        "Interface"
      ],
      "tag": [
        "edit",
        "modify",
        "update",
        "change",
        "edit button",
        "edit icon",
        "user interface",
        "interaction",
        "function",
        "feature"
      ],
      "title": "Edit (Medium)"
    };
    icon_edit_m_svg_default = meta544;
  }
});

// lib/meta/icon_edit-s.svg.ts
var icon_edit_s_svg_exports = {};
__export(icon_edit_s_svg_exports, {
  default: () => icon_edit_s_svg_default,
  meta: () => meta545
});
var meta545, icon_edit_s_svg_default;
var init_icon_edit_s_svg = __esm({
  "lib/meta/icon_edit-s.svg.ts"() {
    meta545 = {
      "description": "The 'edit-s' icon from the user interface category is a small pencil symbol, typically used to represent the action of editing or modifying content. This icon is commonly used in various applications and software interfaces for indicating the ability to make changes to text or images.",
      "category": [
        "Interface"
      ],
      "tag": [
        "edit",
        "pencil",
        "modify",
        "update",
        "change",
        "edit content",
        "user interface",
        "software",
        "application",
        "symbol"
      ],
      "title": "Edit Icon"
    };
    icon_edit_s_svg_default = meta545;
  }
});

// lib/meta/icon_exclamation-mark-fat.svg.ts
var icon_exclamation_mark_fat_svg_exports = {};
__export(icon_exclamation_mark_fat_svg_exports, {
  default: () => icon_exclamation_mark_fat_svg_default,
  meta: () => meta546
});
var meta546, icon_exclamation_mark_fat_svg_default;
var init_icon_exclamation_mark_fat_svg = __esm({
  "lib/meta/icon_exclamation-mark-fat.svg.ts"() {
    meta546 = {
      "description": "An icon of a fat exclamation mark, commonly used to indicate warnings or important information in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "alert",
        "attention",
        "emphasis",
        "notification",
        "warning",
        "important",
        "message",
        "interface",
        "sign",
        "symbol"
      ],
      "title": "Exclamation Mark Fat"
    };
    icon_exclamation_mark_fat_svg_default = meta546;
  }
});

// lib/meta/icon_exclamation-mark-l.svg.ts
var icon_exclamation_mark_l_svg_exports = {};
__export(icon_exclamation_mark_l_svg_exports, {
  default: () => icon_exclamation_mark_l_svg_default,
  meta: () => meta547
});
var meta547, icon_exclamation_mark_l_svg_default;
var init_icon_exclamation_mark_l_svg = __esm({
  "lib/meta/icon_exclamation-mark-l.svg.ts"() {
    meta547 = {
      "description": "An exclamation mark icon suitable for use in user interfaces to indicate warnings or important information.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "alert",
        "warning",
        "important",
        "notification",
        "attention",
        "message",
        "exclamation",
        "UI",
        "interface",
        "communication"
      ],
      "title": "Exclamation Mark L"
    };
    icon_exclamation_mark_l_svg_default = meta547;
  }
});

// lib/meta/icon_exclamation-mark-m.svg.ts
var icon_exclamation_mark_m_svg_exports = {};
__export(icon_exclamation_mark_m_svg_exports, {
  default: () => icon_exclamation_mark_m_svg_default,
  meta: () => meta548
});
var meta548, icon_exclamation_mark_m_svg_default;
var init_icon_exclamation_mark_m_svg = __esm({
  "lib/meta/icon_exclamation-mark-m.svg.ts"() {
    meta548 = {
      "description": "An icon depicting a bold exclamation mark inside a square container, often used to indicate a warning or important information in user interfaces.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "attention",
        "alert",
        "notification",
        "warning",
        "exclamation",
        "important",
        "ui",
        "user interface",
        "message",
        "information"
      ],
      "title": "Exclamation Mark M"
    };
    icon_exclamation_mark_m_svg_default = meta548;
  }
});

// lib/meta/icon_exclamation-mark-s.svg.ts
var icon_exclamation_mark_s_svg_exports = {};
__export(icon_exclamation_mark_s_svg_exports, {
  default: () => icon_exclamation_mark_s_svg_default,
  meta: () => meta549
});
var meta549, icon_exclamation_mark_s_svg_default;
var init_icon_exclamation_mark_s_svg = __esm({
  "lib/meta/icon_exclamation-mark-s.svg.ts"() {
    meta549 = {
      "description": "An exclamation mark icon typically used to draw attention to important messages or warnings in user interfaces.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "alert",
        "attention",
        "warning",
        "notification",
        "important",
        "message",
        "UI",
        "icon",
        "exclamation mark"
      ],
      "title": "Exclamation Mark"
    };
    icon_exclamation_mark_s_svg_default = meta549;
  }
});

// lib/meta/icon_female-simplified.svg.ts
var icon_female_simplified_svg_exports = {};
__export(icon_female_simplified_svg_exports, {
  default: () => icon_female_simplified_svg_default,
  meta: () => meta550
});
var meta550, icon_female_simplified_svg_default;
var init_icon_female_simplified_svg = __esm({
  "lib/meta/icon_female-simplified.svg.ts"() {
    meta550 = {
      "description": "A simplified icon representing a female user or character. The design is minimalistic and easy to recognize.",
      "category": [
        "Interface"
      ],
      "tag": [
        "female",
        "simplified",
        "user",
        "character",
        "woman",
        "person",
        "avatar",
        "profile",
        "minimalistic",
        "symbol"
      ],
      "title": "Female Simplified"
    };
    icon_female_simplified_svg_default = meta550;
  }
});

// lib/meta/icon_file-add 2-67.svg.ts
var icon_file_add_2_67_svg_exports = {};
__export(icon_file_add_2_67_svg_exports, {
  default: () => icon_file_add_2_67_svg_default,
  meta: () => meta551
});
var meta551, icon_file_add_2_67_svg_default;
var init_icon_file_add_2_67_svg = __esm({
  "lib/meta/icon_file-add 2-67.svg.ts"() {
    meta551 = {
      "description": "The file-add 2-67 icon is an icon representing adding a new file to a user interface. It typically signifies the action of creating a new file or document.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "add",
        "new",
        "file",
        "document",
        "create",
        "upload",
        "interface",
        "user",
        "data",
        "information"
      ],
      "title": "File Add 2-67"
    };
    icon_file_add_2_67_svg_default = meta551;
  }
});

// lib/meta/icon_file-add 2-69.svg.ts
var icon_file_add_2_69_svg_exports = {};
__export(icon_file_add_2_69_svg_exports, {
  default: () => icon_file_add_2_69_svg_default,
  meta: () => meta552
});
var meta552, icon_file_add_2_69_svg_default;
var init_icon_file_add_2_69_svg = __esm({
  "lib/meta/icon_file-add 2-69.svg.ts"() {
    meta552 = {
      "description": "A file with a plus sign indicating the action of adding a new file. This icon is designed in a simple and modern style.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file",
        "add",
        "plus",
        "create",
        "new",
        "document",
        "ui",
        "interface",
        "modern",
        "simple"
      ],
      "title": "File Add"
    };
    icon_file_add_2_69_svg_default = meta552;
  }
});

// lib/meta/icon_file-add.svg.ts
var icon_file_add_svg_exports = {};
__export(icon_file_add_svg_exports, {
  default: () => icon_file_add_svg_default,
  meta: () => meta553
});
var meta553, icon_file_add_svg_default;
var init_icon_file_add_svg = __esm({
  "lib/meta/icon_file-add.svg.ts"() {
    meta553 = {
      "description": "The file-add icon is used to symbolize the action of adding a new file or document. It typically features a blank document with a 'plus' sign to signify addition.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file",
        "add",
        "upload",
        "create",
        "new",
        "document",
        "paper",
        "file system",
        "data management",
        "digital"
      ],
      "title": "File Add"
    };
    icon_file_add_svg_default = meta553;
  }
});

// lib/meta/icon_file-archive.svg.ts
var icon_file_archive_svg_exports = {};
__export(icon_file_archive_svg_exports, {
  default: () => icon_file_archive_svg_default,
  meta: () => meta554
});
var meta554, icon_file_archive_svg_default;
var init_icon_file_archive_svg = __esm({
  "lib/meta/icon_file-archive.svg.ts"() {
    meta554 = {
      "description": "The file-archive icon represents a compressed or archived file. It is commonly used to symbolize a collection of files that have been compressed into a single archive file.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "folder",
        "zip",
        "compress",
        "storage",
        "data",
        "format",
        "file",
        "archive",
        "compressed",
        "zipped"
      ],
      "title": "File Archive"
    };
    icon_file_archive_svg_default = meta554;
  }
});

// lib/meta/icon_file-arrow-up.svg.ts
var icon_file_arrow_up_svg_exports = {};
__export(icon_file_arrow_up_svg_exports, {
  default: () => icon_file_arrow_up_svg_default,
  meta: () => meta555
});
var meta555, icon_file_arrow_up_svg_default;
var init_icon_file_arrow_up_svg = __esm({
  "lib/meta/icon_file-arrow-up.svg.ts"() {
    meta555 = {
      "description": "A simple icon featuring an arrow pointing upwards, indicating the action of moving or uploading a file. This icon is commonly used in user interfaces to signify a file upload operation.",
      "category": [
        "Arrows",
        "Interface",
        "Document"
      ],
      "tag": [
        "upload",
        "move",
        "arrow",
        "file",
        "direction",
        "interface",
        "navigation",
        "symbol",
        "action",
        "operation"
      ],
      "title": "File Arrow Up"
    };
    icon_file_arrow_up_svg_default = meta555;
  }
});

// lib/meta/icon_file-binary.svg.ts
var icon_file_binary_svg_exports = {};
__export(icon_file_binary_svg_exports, {
  default: () => icon_file_binary_svg_default,
  meta: () => meta556
});
var meta556, icon_file_binary_svg_default;
var init_icon_file_binary_svg = __esm({
  "lib/meta/icon_file-binary.svg.ts"() {
    meta556 = {
      "description": "A binary file icon typically represents a file that contains compiled code or data in a format that is not human-readable. This icon is commonly used in user interfaces to distinguish binary files from other file types.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file",
        "binary",
        "code",
        "data",
        "computer",
        "technology",
        "software",
        "download",
        "information",
        "program"
      ],
      "title": "File Binary"
    };
    icon_file_binary_svg_default = meta556;
  }
});

// lib/meta/icon_file-broken-heart 2.svg.ts
var icon_file_broken_heart_2_svg_exports = {};
__export(icon_file_broken_heart_2_svg_exports, {
  default: () => icon_file_broken_heart_2_svg_default,
  meta: () => meta557
});
var meta557, icon_file_broken_heart_2_svg_default;
var init_icon_file_broken_heart_2_svg = __esm({
  "lib/meta/icon_file-broken-heart 2.svg.ts"() {
    meta557 = {
      "description": "An icon of a broken heart symbol overlaid on top of a file document, representing a file that cannot be opened due to a corrupted or broken heart. This icon can be used in user interfaces to indicate a broken or inaccessible file.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "broken heart",
        "file",
        "corrupted",
        "inaccessible",
        "error",
        "data loss",
        "problem",
        "user interface",
        "emotion",
        "depression"
      ],
      "title": "File Broken Heart"
    };
    icon_file_broken_heart_2_svg_default = meta557;
  }
});

// lib/meta/icon_file-broken-heart.svg.ts
var icon_file_broken_heart_svg_exports = {};
__export(icon_file_broken_heart_svg_exports, {
  default: () => icon_file_broken_heart_svg_default,
  meta: () => meta558
});
var meta558, icon_file_broken_heart_svg_default;
var init_icon_file_broken_heart_svg = __esm({
  "lib/meta/icon_file-broken-heart.svg.ts"() {
    meta558 = {
      "description": "A broken heart shape symbolizing a broken file, typically used to represent a file error or corrupted data in user interface designs.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "error",
        "file",
        "broken",
        "heart",
        "data",
        "corrupted",
        "icon",
        "user interface",
        "design",
        "symbol"
      ],
      "title": "File Broken Heart"
    };
    icon_file_broken_heart_svg_default = meta558;
  }
});

// lib/meta/icon_file-check 2.svg.ts
var icon_file_check_2_svg_exports = {};
__export(icon_file_check_2_svg_exports, {
  default: () => icon_file_check_2_svg_default,
  meta: () => meta559
});
var meta559, icon_file_check_2_svg_default;
var init_icon_file_check_2_svg = __esm({
  "lib/meta/icon_file-check 2.svg.ts"() {
    meta559 = {
      "description": "The file-check 2 icon represents a document with a checkmark, indicating that the file has been verified or approved. This icon is commonly used in user interfaces to show that a task has been completed successfully.",
      "category": [
        "Document",
        "Interface"
      ],
      "tag": [
        "file",
        "check",
        "document",
        "verified",
        "approved",
        "completed",
        "success",
        "task",
        "user interface",
        "verification"
      ],
      "title": "File Check 2"
    };
    icon_file_check_2_svg_default = meta559;
  }
});

// lib/meta/icon_file-check.svg.ts
var icon_file_check_svg_exports = {};
__export(icon_file_check_svg_exports, {
  default: () => icon_file_check_svg_default,
  meta: () => meta560
});
var meta560, icon_file_check_svg_default;
var init_icon_file_check_svg = __esm({
  "lib/meta/icon_file-check.svg.ts"() {
    meta560 = {
      "description": "The file-check icon represents a document or file that has been verified or approved with a checkmark. It is commonly used in user interfaces to indicate a successful action or completion.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file",
        "check",
        "validate",
        "approve",
        "verification",
        "completion",
        "status",
        "success",
        "approve"
      ],
      "title": "File Check"
    };
    icon_file_check_svg_default = meta560;
  }
});

// lib/meta/icon_file-cloud.svg.ts
var icon_file_cloud_svg_exports = {};
__export(icon_file_cloud_svg_exports, {
  default: () => icon_file_cloud_svg_default,
  meta: () => meta561
});
var meta561, icon_file_cloud_svg_default;
var init_icon_file_cloud_svg = __esm({
  "lib/meta/icon_file-cloud.svg.ts"() {
    meta561 = {
      "description": "The file-cloud icon represents a file storage service that allows users to store and access their files from the cloud. It symbolizes cloud-based file management and sharing.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "data",
        "storage",
        "cloud computing",
        "technology",
        "internet",
        "digital",
        "transfer",
        "upload",
        "download",
        "backup"
      ],
      "title": "File Cloud"
    };
    icon_file_cloud_svg_default = meta561;
  }
});

// lib/meta/icon_file-code.svg.ts
var icon_file_code_svg_exports = {};
__export(icon_file_code_svg_exports, {
  default: () => icon_file_code_svg_default,
  meta: () => meta562
});
var meta562, icon_file_code_svg_default;
var init_icon_file_code_svg = __esm({
  "lib/meta/icon_file-code.svg.ts"() {
    meta562 = {
      "description": "The file-code icon represents a document containing code or programming scripts. It is commonly used to indicate files related to software development, coding, or programming languages.",
      "category": [
        "Document",
        "Interface"
      ],
      "tag": [
        "programming",
        "code",
        "development",
        "script",
        "software",
        "technology",
        "coding",
        "developer",
        "programming language",
        "computer"
      ],
      "title": "File Code"
    };
    icon_file_code_svg_default = meta562;
  }
});

// lib/meta/icon_file-columns.svg.ts
var icon_file_columns_svg_exports = {};
__export(icon_file_columns_svg_exports, {
  default: () => icon_file_columns_svg_default,
  meta: () => meta563
});
var meta563, icon_file_columns_svg_default;
var init_icon_file_columns_svg = __esm({
  "lib/meta/icon_file-columns.svg.ts"() {
    meta563 = {
      "description": "The file-columns icon represents a set of columns or a table structure. It is often used to indicate a spreadsheet or tabular data in a document or interface.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "spreadsheet",
        "table",
        "data",
        "file",
        "document",
        "columns",
        "structure",
        "grid",
        "information",
        "ui"
      ],
      "title": "File Columns"
    };
    icon_file_columns_svg_default = meta563;
  }
});

// lib/meta/icon_file-edit 2.svg.ts
var icon_file_edit_2_svg_exports = {};
__export(icon_file_edit_2_svg_exports, {
  default: () => icon_file_edit_2_svg_default,
  meta: () => meta564
});
var meta564, icon_file_edit_2_svg_default;
var init_icon_file_edit_2_svg = __esm({
  "lib/meta/icon_file-edit 2.svg.ts"() {
    meta564 = {
      "description": "An icon representing a file being edited, with two overlapping sheets indicating multiple edits. This icon is commonly used in user interfaces to denote the action of editing a file.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "edit",
        "file",
        "document",
        "writing",
        "update",
        "revision",
        "modification",
        "text",
        "interface",
        "edit"
      ],
      "title": "File Edit 2"
    };
    icon_file_edit_2_svg_default = meta564;
  }
});

// lib/meta/icon_file-edit.svg.ts
var icon_file_edit_svg_exports = {};
__export(icon_file_edit_svg_exports, {
  default: () => icon_file_edit_svg_default,
  meta: () => meta565
});
var meta565, icon_file_edit_svg_default;
var init_icon_file_edit_svg = __esm({
  "lib/meta/icon_file-edit.svg.ts"() {
    meta565 = {
      "description": "The file-edit icon represents an editable file or document. It typically signifies the ability to modify or update the content within the file.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "edit",
        "file",
        "document",
        "update",
        "modify",
        "content",
        "folder",
        "data",
        "information",
        "management"
      ],
      "title": "File Edit"
    };
    icon_file_edit_svg_default = meta565;
  }
});

// lib/meta/icon_file-exclamation-mark-2.svg.ts
var icon_file_exclamation_mark_2_svg_exports = {};
__export(icon_file_exclamation_mark_2_svg_exports, {
  default: () => icon_file_exclamation_mark_2_svg_default,
  meta: () => meta566
});
var meta566, icon_file_exclamation_mark_2_svg_default;
var init_icon_file_exclamation_mark_2_svg = __esm({
  "lib/meta/icon_file-exclamation-mark-2.svg.ts"() {
    meta566 = {
      "description": "A file icon with an exclamation mark, indicating a warning or alert associated with the file. Suitable for use in UI designs to attract attention to important messages or errors.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file",
        "exclamation mark",
        "warning",
        "alert",
        "message",
        "error",
        "UI design",
        "attention",
        "important",
        "notify"
      ],
      "title": "File Exclamation Mark 2"
    };
    icon_file_exclamation_mark_2_svg_default = meta566;
  }
});

// lib/meta/icon_file-exclamation-mark.svg.ts
var icon_file_exclamation_mark_svg_exports = {};
__export(icon_file_exclamation_mark_svg_exports, {
  default: () => icon_file_exclamation_mark_svg_default,
  meta: () => meta567
});
var meta567, icon_file_exclamation_mark_svg_default;
var init_icon_file_exclamation_mark_svg = __esm({
  "lib/meta/icon_file-exclamation-mark.svg.ts"() {
    meta567 = {
      "description": "An icon depicting a file with an exclamation mark, commonly used to indicate important or urgent information related to a document or file.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "alert",
        "warning",
        "important",
        "notification",
        "file",
        "exclamation mark",
        "document",
        "urgent",
        "reminder",
        "symbol"
      ],
      "title": "File Exclamation Mark"
    };
    icon_file_exclamation_mark_svg_default = meta567;
  }
});

// lib/meta/icon_file-graphs.svg.ts
var icon_file_graphs_svg_exports = {};
__export(icon_file_graphs_svg_exports, {
  default: () => icon_file_graphs_svg_default,
  meta: () => meta568
});
var meta568, icon_file_graphs_svg_default;
var init_icon_file_graphs_svg = __esm({
  "lib/meta/icon_file-graphs.svg.ts"() {
    meta568 = {
      "description": "An icon representing a file related to data graphs or charts, often used in user interfaces to symbolize data visualization or analysis.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file",
        "graphs",
        "data",
        "charts",
        "analysis",
        "visualization",
        "UI",
        "statistics",
        "reporting",
        "information"
      ],
      "title": "File Graphs"
    };
    icon_file_graphs_svg_default = meta568;
  }
});

// lib/meta/icon_file-heart 2.svg.ts
var icon_file_heart_2_svg_exports = {};
__export(icon_file_heart_2_svg_exports, {
  default: () => icon_file_heart_2_svg_default,
  meta: () => meta569
});
var meta569, icon_file_heart_2_svg_default;
var init_icon_file_heart_2_svg = __esm({
  "lib/meta/icon_file-heart 2.svg.ts"() {
    meta569 = {
      "description": "A heart symbol inside a file icon, representing a file related to love or favorite content.",
      "category": [
        "Interface",
        "Symbol",
        "Document"
      ],
      "tag": [
        "file",
        "heart",
        "love",
        "favorite",
        "content",
        "attachment",
        "document",
        "icon",
        "UI",
        "file-heart"
      ],
      "title": "File Heart 2"
    };
    icon_file_heart_2_svg_default = meta569;
  }
});

// lib/meta/icon_file-heart.svg.ts
var icon_file_heart_svg_exports = {};
__export(icon_file_heart_svg_exports, {
  default: () => icon_file_heart_svg_default,
  meta: () => meta570
});
var meta570, icon_file_heart_svg_default;
var init_icon_file_heart_svg = __esm({
  "lib/meta/icon_file-heart.svg.ts"() {
    meta570 = {
      "description": "A heart symbol representing love or favorite content often used in user interfaces to denote saving or liking a file.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "heart",
        "love",
        "favorite",
        "like",
        "UI",
        "file",
        "save",
        "icon",
        "symbol",
        "emotion"
      ],
      "title": "File Heart"
    };
    icon_file_heart_svg_default = meta570;
  }
});

// lib/meta/icon_file-info-2.svg.ts
var icon_file_info_2_svg_exports = {};
__export(icon_file_info_2_svg_exports, {
  default: () => icon_file_info_2_svg_default,
  meta: () => meta571
});
var meta571, icon_file_info_2_svg_default;
var init_icon_file_info_2_svg = __esm({
  "lib/meta/icon_file-info-2.svg.ts"() {
    meta571 = {
      "description": "A detailed icon representing information or details about a file. It includes a document with a magnifying glass signifying inspection or analysis.",
      "category": [
        "Document",
        "Interface"
      ],
      "tag": [
        "file",
        "info",
        "details",
        "analysis",
        "document",
        "inspection",
        "information",
        "files",
        "data",
        "report"
      ],
      "title": "File Information 2"
    };
    icon_file_info_2_svg_default = meta571;
  }
});

// lib/meta/icon_file-info.svg.ts
var icon_file_info_svg_exports = {};
__export(icon_file_info_svg_exports, {
  default: () => icon_file_info_svg_default,
  meta: () => meta572
});
var meta572, icon_file_info_svg_default;
var init_icon_file_info_svg = __esm({
  "lib/meta/icon_file-info.svg.ts"() {
    meta572 = {
      "description": "The file-info icon is used to represent information or details about a file, such as file size, type, or other metadata.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file info",
        "details",
        "metadata",
        "information",
        "document",
        "file",
        "file type",
        "information icon"
      ],
      "title": "File Information"
    };
    icon_file_info_svg_default = meta572;
  }
});

// lib/meta/icon_file-invisible 2.svg.ts
var icon_file_invisible_2_svg_exports = {};
__export(icon_file_invisible_2_svg_exports, {
  default: () => icon_file_invisible_2_svg_default,
  meta: () => meta573
});
var meta573, icon_file_invisible_2_svg_default;
var init_icon_file_invisible_2_svg = __esm({
  "lib/meta/icon_file-invisible 2.svg.ts"() {
    meta573 = {
      "description": "The file-invisible icon represents a hidden or invisible file. It is commonly used to symbolize files that are not visible or accessible to the user. The icon typically features a transparent or faded appearance to convey its hidden nature.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "invisible",
        "hidden",
        "file",
        "document",
        "access",
        "privacy",
        "confidential",
        "secret",
        "discreet",
        "unseen"
      ],
      "title": "File Invisible"
    };
    icon_file_invisible_2_svg_default = meta573;
  }
});

// lib/meta/icon_file-invisible.svg.ts
var icon_file_invisible_svg_exports = {};
__export(icon_file_invisible_svg_exports, {
  default: () => icon_file_invisible_svg_default,
  meta: () => meta574
});
var meta574, icon_file_invisible_svg_default;
var init_icon_file_invisible_svg = __esm({
  "lib/meta/icon_file-invisible.svg.ts"() {
    meta574 = {
      "description": "The file-invisible icon represents a file that is hidden or invisible. It is commonly used to indicate a file that is not currently visible or accessible.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "hidden",
        "encrypted",
        "secure",
        "unseen",
        "invisible",
        "file",
        "document",
        "restricted",
        "private",
        "access"
      ],
      "title": "File Invisible"
    };
    icon_file_invisible_svg_default = meta574;
  }
});

// lib/meta/icon_file-multiply.svg.ts
var icon_file_multiply_svg_exports = {};
__export(icon_file_multiply_svg_exports, {
  default: () => icon_file_multiply_svg_default,
  meta: () => meta575
});
var meta575, icon_file_multiply_svg_default;
var init_icon_file_multiply_svg = __esm({
  "lib/meta/icon_file-multiply.svg.ts"() {
    meta575 = {
      "description": "A file icon with a multiplication symbol, indicating the ability to perform a multiply action on the file contents. This icon is commonly used in user interfaces for functions such as file multiplication or duplication.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "multiply",
        "file",
        "document",
        "interface",
        "operation",
        "copy",
        "replicate",
        "duplicate",
        "user interface"
      ],
      "title": "File Multiply"
    };
    icon_file_multiply_svg_default = meta575;
  }
});

// lib/meta/icon_file-question-mark-2.svg.ts
var icon_file_question_mark_2_svg_exports = {};
__export(icon_file_question_mark_2_svg_exports, {
  default: () => icon_file_question_mark_2_svg_default,
  meta: () => meta576
});
var meta576, icon_file_question_mark_2_svg_default;
var init_icon_file_question_mark_2_svg = __esm({
  "lib/meta/icon_file-question-mark-2.svg.ts"() {
    meta576 = {
      "description": "A file icon with a question mark symbol in the center, indicating uncertainty or a need for assistance.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file",
        "question mark",
        "uncertainty",
        "help",
        "assistance",
        "information",
        "document",
        "query",
        "support",
        "ui"
      ],
      "title": "File Question Mark 2"
    };
    icon_file_question_mark_2_svg_default = meta576;
  }
});

// lib/meta/icon_file-question-mark.svg.ts
var icon_file_question_mark_svg_exports = {};
__export(icon_file_question_mark_svg_exports, {
  default: () => icon_file_question_mark_svg_default,
  meta: () => meta577
});
var meta577, icon_file_question_mark_svg_default;
var init_icon_file_question_mark_svg = __esm({
  "lib/meta/icon_file-question-mark.svg.ts"() {
    meta577 = {
      "description": "An icon representing a file with a question mark symbol, typically used to indicate an unknown or unsupported file format.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file",
        "question mark",
        "unknown",
        "unsuppored",
        "format",
        "information",
        "help",
        "document",
        "ui"
      ],
      "title": "File Question Mark"
    };
    icon_file_question_mark_svg_default = meta577;
  }
});

// lib/meta/icon_file-search 2.svg.ts
var icon_file_search_2_svg_exports = {};
__export(icon_file_search_2_svg_exports, {
  default: () => icon_file_search_2_svg_default,
  meta: () => meta578
});
var meta578, icon_file_search_2_svg_default;
var init_icon_file_search_2_svg = __esm({
  "lib/meta/icon_file-search 2.svg.ts"() {
    meta578 = {
      "description": "This icon depicts a magnifying glass hovering over a file, symbolizing a search function within a file. It can be used to represent search, explore, or browse actions within a document or file system.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "search",
        "find",
        "document",
        "browse",
        "explore",
        "file system",
        "magnifying glass",
        "search tool",
        "query",
        "lookup"
      ],
      "title": "File Search 2"
    };
    icon_file_search_2_svg_default = meta578;
  }
});

// lib/meta/icon_file-search.svg.ts
var icon_file_search_svg_exports = {};
__export(icon_file_search_svg_exports, {
  default: () => icon_file_search_svg_default,
  meta: () => meta579
});
var meta579, icon_file_search_svg_default;
var init_icon_file_search_svg = __esm({
  "lib/meta/icon_file-search.svg.ts"() {
    meta579 = {
      "description": "The file-search icon represents a magnifying glass searching for a specific file or document. It is commonly used in user interfaces to indicate a search function for finding files on a system.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "search",
        "find",
        "file",
        "document",
        "lookup",
        "magnifying glass",
        "data",
        "information",
        "query",
        "searching"
      ],
      "title": "File Search"
    };
    icon_file_search_svg_default = meta579;
  }
});

// lib/meta/icon_file-star 2.svg.ts
var icon_file_star_2_svg_exports = {};
__export(icon_file_star_2_svg_exports, {
  default: () => icon_file_star_2_svg_default,
  meta: () => meta580
});
var meta580, icon_file_star_2_svg_default;
var init_icon_file_star_2_svg = __esm({
  "lib/meta/icon_file-star 2.svg.ts"() {
    meta580 = {
      "description": "A stylish icon representing a starred file, indicating importance or favoritism.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "star",
        "file",
        "importance",
        "favorite",
        "mark",
        "important",
        "document",
        "ui",
        "favorite file",
        "starred"
      ],
      "title": "File Star 2"
    };
    icon_file_star_2_svg_default = meta580;
  }
});

// lib/meta/icon_file-star.svg.ts
var icon_file_star_svg_exports = {};
__export(icon_file_star_svg_exports, {
  default: () => icon_file_star_svg_default,
  meta: () => meta581
});
var meta581, icon_file_star_svg_default;
var init_icon_file_star_svg = __esm({
  "lib/meta/icon_file-star.svg.ts"() {
    meta581 = {
      "description": "A star symbol often used to represent favorite or important files. Can be used as a visual indicator for users to easily identify important documents.",
      "category": [
        "Interface",
        "Symbol",
        "Document"
      ],
      "tag": [
        "star",
        "favorite",
        "important",
        "file",
        "document",
        "ui",
        "icon",
        "marker",
        "highlight",
        "symbol"
      ],
      "title": "File Star"
    };
    icon_file_star_svg_default = meta581;
  }
});

// lib/meta/icon_file-subtract 2.svg.ts
var icon_file_subtract_2_svg_exports = {};
__export(icon_file_subtract_2_svg_exports, {
  default: () => icon_file_subtract_2_svg_default,
  meta: () => meta582
});
var meta582, icon_file_subtract_2_svg_default;
var init_icon_file_subtract_2_svg = __esm({
  "lib/meta/icon_file-subtract 2.svg.ts"() {
    meta582 = {
      "description": "The icon shows a document with a subtraction symbol, representing the action of removing or subtracting a file. It is commonly used in user interfaces for deletion or removal functionalities.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file",
        "subtract",
        "remove",
        "delete",
        "document",
        "interface",
        "action",
        "ui",
        "file management",
        "subtraction"
      ],
      "title": "File Subtract"
    };
    icon_file_subtract_2_svg_default = meta582;
  }
});

// lib/meta/icon_file-subtract.svg.ts
var icon_file_subtract_svg_exports = {};
__export(icon_file_subtract_svg_exports, {
  default: () => icon_file_subtract_svg_default,
  meta: () => meta583
});
var meta583, icon_file_subtract_svg_default;
var init_icon_file_subtract_svg = __esm({
  "lib/meta/icon_file-subtract.svg.ts"() {
    meta583 = {
      "description": "The file subtract icon represents the action of removing or deleting a file. It can be used in user interface designs to indicate the subtraction or removal of a file from a system.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file",
        "subtract",
        "delete",
        "remove",
        "interface",
        "design",
        "system",
        "user interface",
        "action",
        "symbol"
      ],
      "title": "File Subtract"
    };
    icon_file_subtract_svg_default = meta583;
  }
});

// lib/meta/icon_file-text.svg.ts
var icon_file_text_svg_exports = {};
__export(icon_file_text_svg_exports, {
  default: () => icon_file_text_svg_default,
  meta: () => meta584
});
var meta584, icon_file_text_svg_default;
var init_icon_file_text_svg = __esm({
  "lib/meta/icon_file-text.svg.ts"() {
    meta584 = {
      "description": "The file-text icon represents a text document in a user interface. It is commonly used to indicate a file containing text content.",
      "category": [
        "Interface",
        "Document",
        "Text"
      ],
      "tag": [
        "File",
        "Text",
        "Document",
        "UI",
        "Content",
        "Information",
        "Page",
        "Edit",
        "Write",
        "Read"
      ],
      "title": "File Text"
    };
    icon_file_text_svg_default = meta584;
  }
});

// lib/meta/icon_file-tray-stack.svg.ts
var icon_file_tray_stack_svg_exports = {};
__export(icon_file_tray_stack_svg_exports, {
  default: () => icon_file_tray_stack_svg_default,
  meta: () => meta585
});
var meta585, icon_file_tray_stack_svg_default;
var init_icon_file_tray_stack_svg = __esm({
  "lib/meta/icon_file-tray-stack.svg.ts"() {
    meta585 = {
      "description": "The file tray stack icon represents a stack of files or documents organized neatly in a tray. It is commonly used in user interfaces to indicate a collection of files or documents.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "files",
        "documents",
        "organization",
        "storage",
        "stack",
        "tray",
        "user interface",
        "data",
        "information",
        "collection"
      ],
      "title": "File Tray Stack"
    };
    icon_file_tray_stack_svg_default = meta585;
  }
});

// lib/meta/icon_file-tray.svg.ts
var icon_file_tray_svg_exports = {};
__export(icon_file_tray_svg_exports, {
  default: () => icon_file_tray_svg_default,
  meta: () => meta586
});
var meta586, icon_file_tray_svg_default;
var init_icon_file_tray_svg = __esm({
  "lib/meta/icon_file-tray.svg.ts"() {
    meta586 = {
      "description": "The file-tray icon represents a stack of files or documents placed in a tray. It is commonly used to symbolize file management, organization, and storage.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file",
        "tray",
        "documents",
        "storage",
        "management",
        "organization",
        "data",
        "files",
        "records",
        "archive"
      ],
      "title": "File Tray"
    };
    icon_file_tray_svg_default = meta586;
  }
});

// lib/meta/icon_file-visible 2.svg.ts
var icon_file_visible_2_svg_exports = {};
__export(icon_file_visible_2_svg_exports, {
  default: () => icon_file_visible_2_svg_default,
  meta: () => meta587
});
var meta587, icon_file_visible_2_svg_default;
var init_icon_file_visible_2_svg = __esm({
  "lib/meta/icon_file-visible 2.svg.ts"() {
    meta587 = {
      "description": "The icon 'file-visible 2' represents a file that is visible or accessible. It is typically used in user interfaces to indicate a file that is not hidden or encrypted. The icon can be used in file management systems or applications.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file",
        "visible",
        "accessible",
        "user interface",
        "document",
        "file management",
        "visible file",
        "interface design",
        "UI",
        "data"
      ],
      "title": "File Visible 2"
    };
    icon_file_visible_2_svg_default = meta587;
  }
});

// lib/meta/icon_file-visible.svg.ts
var icon_file_visible_svg_exports = {};
__export(icon_file_visible_svg_exports, {
  default: () => icon_file_visible_svg_default,
  meta: () => meta588
});
var meta588, icon_file_visible_svg_default;
var init_icon_file_visible_svg = __esm({
  "lib/meta/icon_file-visible.svg.ts"() {
    meta588 = {
      "description": "The file-visible icon represents a file that is visible and accessible. It is commonly used to indicate that a file is not hidden and can be viewed or accessed. The icon is designed with a clear visibility symbol to convey its meaning.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file",
        "visible",
        "access",
        "view",
        "show",
        "open",
        "display",
        "file system",
        "file management",
        "accessibility"
      ],
      "title": "File Visible"
    };
    icon_file_visible_svg_default = meta588;
  }
});

// lib/meta/icon_file.svg.ts
var icon_file_svg_exports = {};
__export(icon_file_svg_exports, {
  default: () => icon_file_svg_default,
  meta: () => meta589
});
var meta589, icon_file_svg_default;
var init_icon_file_svg = __esm({
  "lib/meta/icon_file.svg.ts"() {
    meta589 = {
      "description": "A simple icon representing a file, typically used to indicate the presence of a digital document.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file",
        "document",
        "data",
        "information",
        "storage",
        "digital",
        "record",
        "paperwork",
        "attachment",
        "icon"
      ],
      "title": "File"
    };
    icon_file_svg_default = meta589;
  }
});

// lib/meta/icon_folder-add 2.svg.ts
var icon_folder_add_2_svg_exports = {};
__export(icon_folder_add_2_svg_exports, {
  default: () => icon_folder_add_2_svg_default,
  meta: () => meta590
});
var meta590, icon_folder_add_2_svg_default;
var init_icon_folder_add_2_svg = __esm({
  "lib/meta/icon_folder-add 2.svg.ts"() {
    meta590 = {
      "description": "The icon 'folder-add 2' represents adding a new folder. It features a folder symbol with a plus sign, indicating the action of creating a new folder.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file management",
        "directory",
        "create",
        "new",
        "add",
        "interface",
        "storage",
        "organize",
        "data"
      ],
      "title": "Folder Add 2"
    };
    icon_folder_add_2_svg_default = meta590;
  }
});

// lib/meta/icon_folder-add.svg.ts
var icon_folder_add_svg_exports = {};
__export(icon_folder_add_svg_exports, {
  default: () => icon_folder_add_svg_default,
  meta: () => meta591
});
var meta591, icon_folder_add_svg_default;
var init_icon_folder_add_svg = __esm({
  "lib/meta/icon_folder-add.svg.ts"() {
    meta591 = {
      "description": "The folder-add icon represents adding a new folder to a file system or directory. It typically symbolizes the action of creating a new folder to organize files or documents.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "folder",
        "add",
        "directory",
        "file system",
        "organize",
        "create",
        "new",
        "documents",
        "folders",
        "storage"
      ],
      "title": "Folder Add"
    };
    icon_folder_add_svg_default = meta591;
  }
});

// lib/meta/icon_folder-broken-heart 2.svg.ts
var icon_folder_broken_heart_2_svg_exports = {};
__export(icon_folder_broken_heart_2_svg_exports, {
  default: () => icon_folder_broken_heart_2_svg_default,
  meta: () => meta592
});
var meta592, icon_folder_broken_heart_2_svg_default;
var init_icon_folder_broken_heart_2_svg = __esm({
  "lib/meta/icon_folder-broken-heart 2.svg.ts"() {
    meta592 = {
      "description": "The icon 'folder-broken-heart 2' represents a broken heart symbol inside a folder, symbolizing heartache or loss. It can be used in user interfaces to convey a sense of sentimental or emotional content within a folder context.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "Folder",
        "Broken heart",
        "Emotion",
        "Sadness",
        "Loss",
        "Sentimental",
        "User interface",
        "Folder icon",
        "Heart icon",
        "Symbol icon"
      ],
      "title": "Folder Broken Heart 2"
    };
    icon_folder_broken_heart_2_svg_default = meta592;
  }
});

// lib/meta/icon_folder-broken-heart.svg.ts
var icon_folder_broken_heart_svg_exports = {};
__export(icon_folder_broken_heart_svg_exports, {
  default: () => icon_folder_broken_heart_svg_default,
  meta: () => meta593
});
var meta593, icon_folder_broken_heart_svg_default;
var init_icon_folder_broken_heart_svg = __esm({
  "lib/meta/icon_folder-broken-heart.svg.ts"() {
    meta593 = {
      "description": "The 'Folder Broken Heart' icon is a symbolic representation of a folder with a broken heart in the middle, conveying a sense of loss or emotional distress related to the contents of the folder. It can be used in user interfaces to indicate a directory or file that holds sentimental or important data that has been damaged or compromised.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "folder",
        "broken heart",
        "emotional",
        "distress",
        "loss",
        "data",
        "user interface",
        "symbolic",
        "directory",
        "file"
      ],
      "title": "Folder Broken Heart"
    };
    icon_folder_broken_heart_svg_default = meta593;
  }
});

// lib/meta/icon_folder-check 2.svg.ts
var icon_folder_check_2_svg_exports = {};
__export(icon_folder_check_2_svg_exports, {
  default: () => icon_folder_check_2_svg_default,
  meta: () => meta594
});
var meta594, icon_folder_check_2_svg_default;
var init_icon_folder_check_2_svg = __esm({
  "lib/meta/icon_folder-check 2.svg.ts"() {
    meta594 = {
      "description": "The folder-check 2 icon is a user interface icon representing a folder with a checkmark symbol, indicating that it contains verified or approved files. This icon is commonly used in file management systems and applications.",
      "category": [
        "Interface"
      ],
      "tag": [
        "folder",
        "checkmark",
        "verified",
        "approved",
        "files",
        "management",
        "folders",
        "documents",
        "UI"
      ],
      "title": "Folder Check 2"
    };
    icon_folder_check_2_svg_default = meta594;
  }
});

// lib/meta/icon_folder-check.svg.ts
var icon_folder_check_svg_exports = {};
__export(icon_folder_check_svg_exports, {
  default: () => icon_folder_check_svg_default,
  meta: () => meta595
});
var meta595, icon_folder_check_svg_default;
var init_icon_folder_check_svg = __esm({
  "lib/meta/icon_folder-check.svg.ts"() {
    meta595 = {
      "description": "The folder-check icon represents a folder with a check mark, indicating that the folder has been checked or verified. This icon is commonly used in file management systems and applications.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "folder",
        "check",
        "verified",
        "file management",
        "folder icon",
        "document icon",
        "file verification",
        "folder check",
        "folder validation"
      ],
      "title": "Folder Check"
    };
    icon_folder_check_svg_default = meta595;
  }
});

// lib/meta/icon_folder-edit 2.svg.ts
var icon_folder_edit_2_svg_exports = {};
__export(icon_folder_edit_2_svg_exports, {
  default: () => icon_folder_edit_2_svg_default,
  meta: () => meta596
});
var meta596, icon_folder_edit_2_svg_default;
var init_icon_folder_edit_2_svg = __esm({
  "lib/meta/icon_folder-edit 2.svg.ts"() {
    meta596 = {
      "description": "A folder icon with a pencil indicating the option to edit or modify the contents. This icon is commonly used in user interfaces to represent a folder that can be edited.",
      "category": [
        "Interface"
      ],
      "tag": [
        "folder",
        "edit",
        "modify",
        "update",
        "directory",
        "documents",
        "storage",
        "file management",
        "interface",
        "user interface"
      ],
      "title": "Folder Edit"
    };
    icon_folder_edit_2_svg_default = meta596;
  }
});

// lib/meta/icon_folder-edit.svg.ts
var icon_folder_edit_svg_exports = {};
__export(icon_folder_edit_svg_exports, {
  default: () => icon_folder_edit_svg_default,
  meta: () => meta597
});
var meta597, icon_folder_edit_svg_default;
var init_icon_folder_edit_svg = __esm({
  "lib/meta/icon_folder-edit.svg.ts"() {
    meta597 = {
      "description": "The folder-edit icon depicts a folder with a pencil, symbolizing the ability to edit or modify the contents within the folder. It is commonly used in interfaces to represent options for modifying or updating files or directories.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "folder",
        "edit",
        "directory",
        "file management",
        "update",
        "modify",
        "pencil",
        "interface",
        "icon"
      ],
      "title": "Folder Edit"
    };
    icon_folder_edit_svg_default = meta597;
  }
});

// lib/meta/icon_folder-exclamation-mark-2.svg.ts
var icon_folder_exclamation_mark_2_svg_exports = {};
__export(icon_folder_exclamation_mark_2_svg_exports, {
  default: () => icon_folder_exclamation_mark_2_svg_default,
  meta: () => meta598
});
var meta598, icon_folder_exclamation_mark_2_svg_default;
var init_icon_folder_exclamation_mark_2_svg = __esm({
  "lib/meta/icon_folder-exclamation-mark-2.svg.ts"() {
    meta598 = {
      "description": "A folder icon with an exclamation mark symbol indicating an important or urgent folder. This icon is commonly used in user interfaces to draw attention to specific folders.",
      "category": [
        "Interface"
      ],
      "tag": [
        "folder",
        "exclamation mark",
        "important",
        "urgent",
        "notification",
        "attention",
        "file management",
        "UI",
        "symbol"
      ],
      "title": "Folder Exclamation Mark 2"
    };
    icon_folder_exclamation_mark_2_svg_default = meta598;
  }
});

// lib/meta/icon_folder-exclamation-mark.svg.ts
var icon_folder_exclamation_mark_svg_exports = {};
__export(icon_folder_exclamation_mark_svg_exports, {
  default: () => icon_folder_exclamation_mark_svg_default,
  meta: () => meta599
});
var meta599, icon_folder_exclamation_mark_svg_default;
var init_icon_folder_exclamation_mark_svg = __esm({
  "lib/meta/icon_folder-exclamation-mark.svg.ts"() {
    meta599 = {
      "description": "The folder-exclamation-mark icon is used to indicate a folder that contains important or urgent information. It is commonly used in user interfaces to draw attention to specific folders or directories.",
      "category": [
        "Interface"
      ],
      "tag": [
        "folder",
        "exclamation mark",
        "important",
        "urgent",
        "attention",
        "file management",
        "warning",
        "notification",
        "UI"
      ],
      "title": "Folder Exclamation Mark"
    };
    icon_folder_exclamation_mark_svg_default = meta599;
  }
});

// lib/meta/icon_folder-heart 2.svg.ts
var icon_folder_heart_2_svg_exports = {};
__export(icon_folder_heart_2_svg_exports, {
  default: () => icon_folder_heart_2_svg_default,
  meta: () => meta600
});
var meta600, icon_folder_heart_2_svg_default;
var init_icon_folder_heart_2_svg = __esm({
  "lib/meta/icon_folder-heart 2.svg.ts"() {
    meta600 = {
      "description": "A heart symbol inside a folder icon, representing a collection of favorite or beloved files or content within a directory.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "love",
        "favorite",
        "collection",
        "directory",
        "storage",
        "files",
        "folders",
        "UI",
        "heart",
        "documents"
      ],
      "title": "Folder Heart"
    };
    icon_folder_heart_2_svg_default = meta600;
  }
});

// lib/meta/icon_folder-heart.svg.ts
var icon_folder_heart_svg_exports = {};
__export(icon_folder_heart_svg_exports, {
  default: () => icon_folder_heart_svg_default,
  meta: () => meta601
});
var meta601, icon_folder_heart_svg_default;
var init_icon_folder_heart_svg = __esm({
  "lib/meta/icon_folder-heart.svg.ts"() {
    meta601 = {
      "description": "This icon features a folder symbol with a heart in the center, representing a collection of favorite or cherished items within a directory.",
      "category": [
        "Interface"
      ],
      "tag": [
        "folder",
        "heart",
        "favorite",
        "directory",
        "storage",
        "love",
        "ui",
        "file",
        "document",
        "storage"
      ],
      "title": "Folder Heart"
    };
    icon_folder_heart_svg_default = meta601;
  }
});

// lib/meta/icon_folder-info-2.svg.ts
var icon_folder_info_2_svg_exports = {};
__export(icon_folder_info_2_svg_exports, {
  default: () => icon_folder_info_2_svg_default,
  meta: () => meta602
});
var meta602, icon_folder_info_2_svg_default;
var init_icon_folder_info_2_svg = __esm({
  "lib/meta/icon_folder-info-2.svg.ts"() {
    meta602 = {
      "description": "The 'folder-info-2' icon in the UI category represents a folder icon with an information symbol. It is commonly used to indicate additional details or notes related to a folder.",
      "category": [
        "Interface"
      ],
      "tag": [
        "folder",
        "info",
        "details",
        "notes",
        "information",
        "document",
        "data",
        "storage",
        "UI",
        "icon"
      ],
      "title": "Folder with Information"
    };
    icon_folder_info_2_svg_default = meta602;
  }
});

// lib/meta/icon_folder-info.svg.ts
var icon_folder_info_svg_exports = {};
__export(icon_folder_info_svg_exports, {
  default: () => icon_folder_info_svg_default,
  meta: () => meta603
});
var meta603, icon_folder_info_svg_default;
var init_icon_folder_info_svg = __esm({
  "lib/meta/icon_folder-info.svg.ts"() {
    meta603 = {
      "description": "The folder-info icon represents a folder with additional information or details. It is commonly used in user interfaces to indicate that the folder contains important information or documents.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "folder",
        "information",
        "details",
        "storage",
        "data",
        "files",
        "documents",
        "directory",
        "UI",
        "user interface"
      ],
      "title": "Folder Information"
    };
    icon_folder_info_svg_default = meta603;
  }
});

// lib/meta/icon_folder-invisible 2.svg.ts
var icon_folder_invisible_2_svg_exports = {};
__export(icon_folder_invisible_2_svg_exports, {
  default: () => icon_folder_invisible_2_svg_default,
  meta: () => meta604
});
var meta604, icon_folder_invisible_2_svg_default;
var init_icon_folder_invisible_2_svg = __esm({
  "lib/meta/icon_folder-invisible 2.svg.ts"() {
    meta604 = {
      "description": "The 'folder-invisible 2' icon represents a hidden or invisible folder in a user interface. This icon is commonly used to indicate a folder that is not visible or accessible to the user.",
      "category": [
        "Interface"
      ],
      "tag": [
        "hidden",
        "invisible",
        "folder",
        "directory",
        "file",
        "computer",
        "storage",
        "accessibility",
        "user interface",
        "UI"
      ],
      "title": "Folder Invisible 2"
    };
    icon_folder_invisible_2_svg_default = meta604;
  }
});

// lib/meta/icon_folder-invisible.svg.ts
var icon_folder_invisible_svg_exports = {};
__export(icon_folder_invisible_svg_exports, {
  default: () => icon_folder_invisible_svg_default,
  meta: () => meta605
});
var meta605, icon_folder_invisible_svg_default;
var init_icon_folder_invisible_svg = __esm({
  "lib/meta/icon_folder-invisible.svg.ts"() {
    meta605 = {
      "description": "An icon representing an invisible or hidden folder. It is typically used to indicate a folder that is not visible or accessible.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "folder",
        "invisible",
        "hidden",
        "directory",
        "files",
        "storage",
        "accessibility",
        "secret",
        "concealed"
      ],
      "title": "Invisible Folder"
    };
    icon_folder_invisible_svg_default = meta605;
  }
});

// lib/meta/icon_folder-multiply 2.svg.ts
var icon_folder_multiply_2_svg_exports = {};
__export(icon_folder_multiply_2_svg_exports, {
  default: () => icon_folder_multiply_2_svg_default,
  meta: () => meta606
});
var meta606, icon_folder_multiply_2_svg_default;
var init_icon_folder_multiply_2_svg = __esm({
  "lib/meta/icon_folder-multiply 2.svg.ts"() {
    meta606 = {
      "description": "The folder-multiply 2 icon represents a folder with a multiplication symbol, indicating the action of deleting or removing multiple items from a folder. It conveys the concept of bulk deletion or removal of files.",
      "category": [
        "Interface"
      ],
      "tag": [
        "folder",
        "multiply",
        "delete",
        "remove",
        "bulk",
        "file management",
        "directory",
        "data",
        "documents",
        "storage"
      ],
      "title": "Folder with Multiply Symbol"
    };
    icon_folder_multiply_2_svg_default = meta606;
  }
});

// lib/meta/icon_folder-multiply.svg.ts
var icon_folder_multiply_svg_exports = {};
__export(icon_folder_multiply_svg_exports, {
  default: () => icon_folder_multiply_svg_default,
  meta: () => meta607
});
var meta607, icon_folder_multiply_svg_default;
var init_icon_folder_multiply_svg = __esm({
  "lib/meta/icon_folder-multiply.svg.ts"() {
    meta607 = {
      "description": "A folder icon with a multiplication or delete symbol on it, indicating the action of deleting multiple items within the folder.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "folder",
        "multiply",
        "delete",
        "directory",
        "file manager",
        "organize",
        "storage",
        "bulk delete",
        "multiple items",
        "clean up"
      ],
      "title": "Folder Multiply"
    };
    icon_folder_multiply_svg_default = meta607;
  }
});

// lib/meta/icon_folder-question-mark-2.svg.ts
var icon_folder_question_mark_2_svg_exports = {};
__export(icon_folder_question_mark_2_svg_exports, {
  default: () => icon_folder_question_mark_2_svg_default,
  meta: () => meta608
});
var meta608, icon_folder_question_mark_2_svg_default;
var init_icon_folder_question_mark_2_svg = __esm({
  "lib/meta/icon_folder-question-mark-2.svg.ts"() {
    meta608 = {
      "description": "This icon depicts a folder with a question mark on it, indicating uncertainty or lack of information. It can be used to represent a folder with unknown content or to ask questions about a specific folder.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "folder",
        "question mark",
        "uncertainty",
        "information",
        "data",
        "directory",
        "enquiry",
        "query",
        "unknown"
      ],
      "title": "Folder Question Mark 2"
    };
    icon_folder_question_mark_2_svg_default = meta608;
  }
});

// lib/meta/icon_folder-question-mark.svg.ts
var icon_folder_question_mark_svg_exports = {};
__export(icon_folder_question_mark_svg_exports, {
  default: () => icon_folder_question_mark_svg_default,
  meta: () => meta609
});
var meta609, icon_folder_question_mark_svg_default;
var init_icon_folder_question_mark_svg = __esm({
  "lib/meta/icon_folder-question-mark.svg.ts"() {
    meta609 = {
      "description": "The icon depicts a folder with a question mark symbol, typically used to represent an unknown or uncertain folder within a user interface.",
      "category": [
        "Interface"
      ],
      "tag": [
        "folder",
        "question mark",
        "uncertainty",
        "directory",
        "file system",
        "UI",
        "unclear",
        "confusion",
        "information"
      ],
      "title": "Folder Question Mark"
    };
    icon_folder_question_mark_svg_default = meta609;
  }
});

// lib/meta/icon_folder-search 2.svg.ts
var icon_folder_search_2_svg_exports = {};
__export(icon_folder_search_2_svg_exports, {
  default: () => icon_folder_search_2_svg_default,
  meta: () => meta610
});
var meta610, icon_folder_search_2_svg_default;
var init_icon_folder_search_2_svg = __esm({
  "lib/meta/icon_folder-search 2.svg.ts"() {
    meta610 = {
      "description": "A folder icon with a magnifying glass symbolizing search functionality. This icon is commonly used to represent searching within a specific folder or directory.",
      "category": [
        "Interface"
      ],
      "tag": [
        "folder",
        "search",
        "directory",
        "exploration",
        "file",
        "magnifier",
        "explorer",
        "lookup",
        "navigation",
        "find"
      ],
      "title": "Folder Search"
    };
    icon_folder_search_2_svg_default = meta610;
  }
});

// lib/meta/icon_folder-search.svg.ts
var icon_folder_search_svg_exports = {};
__export(icon_folder_search_svg_exports, {
  default: () => icon_folder_search_svg_default,
  meta: () => meta611
});
var meta611, icon_folder_search_svg_default;
var init_icon_folder_search_svg = __esm({
  "lib/meta/icon_folder-search.svg.ts"() {
    meta611 = {
      "description": "The folder-search icon is used to represent a folder with a magnifying glass, indicating the action of searching within the folder. It is commonly used in user interfaces for search functions related to folders.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "folder",
        "search",
        "directory",
        "exploration",
        "file management",
        "find",
        "explorer",
        "documents",
        "browse",
        "navigation"
      ],
      "title": "Folder Search"
    };
    icon_folder_search_svg_default = meta611;
  }
});

// lib/meta/icon_folder-star 2.svg.ts
var icon_folder_star_2_svg_exports = {};
__export(icon_folder_star_2_svg_exports, {
  default: () => icon_folder_star_2_svg_default,
  meta: () => meta612
});
var meta612, icon_folder_star_2_svg_default;
var init_icon_folder_star_2_svg = __esm({
  "lib/meta/icon_folder-star 2.svg.ts"() {
    meta612 = {
      "description": "A folder icon with a star symbol, representing a favorite or important folder. This icon is commonly used to highlight important directories or files.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "folder",
        "star",
        "favorite",
        "important",
        "directory",
        "file",
        "storage",
        "organization",
        "icon"
      ],
      "title": "Folder Star"
    };
    icon_folder_star_2_svg_default = meta612;
  }
});

// lib/meta/icon_folder-star.svg.ts
var icon_folder_star_svg_exports = {};
__export(icon_folder_star_svg_exports, {
  default: () => icon_folder_star_svg_default,
  meta: () => meta613
});
var meta613, icon_folder_star_svg_default;
var init_icon_folder_star_svg = __esm({
  "lib/meta/icon_folder-star.svg.ts"() {
    meta613 = {
      "description": "Folder icon with a star symbol to indicate special or favorite folders. Can be used to mark important folders for easier identification.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "folder",
        "star",
        "favorite",
        "mark",
        "special",
        "important",
        "organization",
        "storage",
        "directory",
        "UI"
      ],
      "title": "Folder Star"
    };
    icon_folder_star_svg_default = meta613;
  }
});

// lib/meta/icon_folder-subtract 2.svg.ts
var icon_folder_subtract_2_svg_exports = {};
__export(icon_folder_subtract_2_svg_exports, {
  default: () => icon_folder_subtract_2_svg_default,
  meta: () => meta614
});
var meta614, icon_folder_subtract_2_svg_default;
var init_icon_folder_subtract_2_svg = __esm({
  "lib/meta/icon_folder-subtract 2.svg.ts"() {
    meta614 = {
      "description": "The folder-subtract 2 icon is a user interface icon depicting a folder with a minus symbol, indicating the action of subtracting or removing a folder. This icon is commonly used in file management interfaces to delete folders or directories.",
      "category": [
        "Interface"
      ],
      "tag": [
        "Folder",
        "Subtract",
        "Delete",
        "Directory",
        "File",
        "Management",
        "UI",
        "Document",
        "Storage"
      ],
      "title": "Folder Subtract 2"
    };
    icon_folder_subtract_2_svg_default = meta614;
  }
});

// lib/meta/icon_folder-subtract.svg.ts
var icon_folder_subtract_svg_exports = {};
__export(icon_folder_subtract_svg_exports, {
  default: () => icon_folder_subtract_svg_default,
  meta: () => meta615
});
var meta615, icon_folder_subtract_svg_default;
var init_icon_folder_subtract_svg = __esm({
  "lib/meta/icon_folder-subtract.svg.ts"() {
    meta615 = {
      "description": "The folder-subtract icon represents the action of removing or deleting a folder. It is commonly used in user interfaces to signify the deletion of a specific folder or directory.",
      "category": [
        "Interface"
      ],
      "tag": [
        "folder",
        "subtract",
        "remove",
        "delete",
        "directory",
        "file",
        "document",
        "interface",
        "UI"
      ],
      "title": "Folder Subtract"
    };
    icon_folder_subtract_svg_default = meta615;
  }
});

// lib/meta/icon_folder-visible 2.svg.ts
var icon_folder_visible_2_svg_exports = {};
__export(icon_folder_visible_2_svg_exports, {
  default: () => icon_folder_visible_2_svg_default,
  meta: () => meta616
});
var meta616, icon_folder_visible_2_svg_default;
var init_icon_folder_visible_2_svg = __esm({
  "lib/meta/icon_folder-visible 2.svg.ts"() {
    meta616 = {
      "description": "The folder-visible 2 icon is a representation of a folder with an open flap, indicating that its contents are visible. This icon is commonly used in user interfaces to signify that a folder is currently open and its contents are accessible.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "folder",
        "open",
        "flap",
        "visible",
        "contents",
        "directory",
        "access",
        "interface",
        "user interface",
        "UI"
      ],
      "title": "Folder Visible 2"
    };
    icon_folder_visible_2_svg_default = meta616;
  }
});

// lib/meta/icon_folder-visible.svg.ts
var icon_folder_visible_svg_exports = {};
__export(icon_folder_visible_svg_exports, {
  default: () => icon_folder_visible_svg_default,
  meta: () => meta617
});
var meta617, icon_folder_visible_svg_default;
var init_icon_folder_visible_svg = __esm({
  "lib/meta/icon_folder-visible.svg.ts"() {
    meta617 = {
      "description": "A visible folder icon usually used to represent a folder that is currently open or expanded to show its contents.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "directory",
        "file system",
        "explorer",
        "open",
        "expanded",
        "contents",
        "nested",
        "hierarchy",
        "storage",
        "organized"
      ],
      "title": "Folder Visible"
    };
    icon_folder_visible_svg_default = meta617;
  }
});

// lib/meta/icon_folder.svg.ts
var icon_folder_svg_exports = {};
__export(icon_folder_svg_exports, {
  default: () => icon_folder_svg_default,
  meta: () => meta618
});
var meta618, icon_folder_svg_default;
var init_icon_folder_svg = __esm({
  "lib/meta/icon_folder.svg.ts"() {
    meta618 = {
      "description": "A simple icon representing a folder, typically used to organize and store files on a computer or digital device.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "file management",
        "digital organization",
        "directory",
        "storage",
        "computer",
        "data",
        "information",
        "archive",
        "system"
      ],
      "title": "Folder"
    };
    icon_folder_svg_default = meta618;
  }
});

// lib/meta/icon_girl.svg.ts
var icon_girl_svg_exports = {};
__export(icon_girl_svg_exports, {
  default: () => icon_girl_svg_default,
  meta: () => meta619
});
var meta619, icon_girl_svg_default;
var init_icon_girl_svg = __esm({
  "lib/meta/icon_girl.svg.ts"() {
    meta619 = {
      "description": "A simple and generic icon representing a girl. It can be used in UI designs to symbolize female gender or character.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "woman",
        "female",
        "gender",
        "avatar",
        "character",
        "people",
        "person",
        "profile",
        "feminine",
        "representation"
      ],
      "title": "Girl"
    };
    icon_girl_svg_default = meta619;
  }
});

// lib/meta/icon_git-branch.svg.ts
var icon_git_branch_svg_exports = {};
__export(icon_git_branch_svg_exports, {
  default: () => icon_git_branch_svg_default,
  meta: () => meta620
});
var meta620, icon_git_branch_svg_default;
var init_icon_git_branch_svg = __esm({
  "lib/meta/icon_git-branch.svg.ts"() {
    meta620 = {
      "description": "The Git branch icon represents a separate line of development and allows users to work on different features simultaneously within a Git repository.",
      "category": [
        "Interface"
      ],
      "tag": [
        "version control",
        "development",
        "branching",
        "code",
        "repository",
        "git",
        "software",
        "collaboration",
        "programming",
        "workflow"
      ],
      "title": "Git Branch"
    };
    icon_git_branch_svg_default = meta620;
  }
});

// lib/meta/icon_git-compare.svg.ts
var icon_git_compare_svg_exports = {};
__export(icon_git_compare_svg_exports, {
  default: () => icon_git_compare_svg_default,
  meta: () => meta621
});
var meta621, icon_git_compare_svg_default;
var init_icon_git_compare_svg = __esm({
  "lib/meta/icon_git-compare.svg.ts"() {
    meta621 = {
      "description": "The git compare icon is typically used in user interfaces to indicate a side-by-side comparison of code or files in a version control system. It often represents the action of comparing changes between branches or commits.",
      "category": [
        "Interface"
      ],
      "tag": [
        "version control",
        "code",
        "file",
        "repository",
        "commit",
        "branch",
        "comparison",
        "difference",
        "changes",
        "developer"
      ],
      "title": "Git Compare"
    };
    icon_git_compare_svg_default = meta621;
  }
});

// lib/meta/icon_git-merge-queue.svg.ts
var icon_git_merge_queue_svg_exports = {};
__export(icon_git_merge_queue_svg_exports, {
  default: () => icon_git_merge_queue_svg_default,
  meta: () => meta622
});
var meta622, icon_git_merge_queue_svg_default;
var init_icon_git_merge_queue_svg = __esm({
  "lib/meta/icon_git-merge-queue.svg.ts"() {
    meta622 = {
      "description": "The Git Merge Queue icon represents the process of adding changes from one branch to another in a Git repository. It symbolizes the action of merging code changes in a sequential order in a version control system.",
      "category": [
        "Interface"
      ],
      "tag": [
        "git",
        "merge",
        "queue",
        "version control",
        "code",
        "development",
        "branch",
        "repository",
        "versioning",
        "VCS"
      ],
      "title": "Git Merge Queue"
    };
    icon_git_merge_queue_svg_default = meta622;
  }
});

// lib/meta/icon_git-merge.svg.ts
var icon_git_merge_svg_exports = {};
__export(icon_git_merge_svg_exports, {
  default: () => icon_git_merge_svg_default,
  meta: () => meta623
});
var meta623, icon_git_merge_svg_default;
var init_icon_git_merge_svg = __esm({
  "lib/meta/icon_git-merge.svg.ts"() {
    meta623 = {
      "description": "The git merge icon represents the process of merging branches in the git version control system. It is commonly used in UI design to symbolize combining code changes from different branches into a single branch.",
      "category": [
        "Interface"
      ],
      "tag": [
        "git",
        "merge",
        "version control",
        "code",
        "branch",
        "merge process",
        "UI design",
        "code changes",
        "development",
        "collaboration"
      ],
      "title": "Git Merge"
    };
    icon_git_merge_svg_default = meta623;
  }
});

// lib/meta/icon_git-pull-request-closed.svg.ts
var icon_git_pull_request_closed_svg_exports = {};
__export(icon_git_pull_request_closed_svg_exports, {
  default: () => icon_git_pull_request_closed_svg_default,
  meta: () => meta624
});
var meta624, icon_git_pull_request_closed_svg_default;
var init_icon_git_pull_request_closed_svg = __esm({
  "lib/meta/icon_git-pull-request-closed.svg.ts"() {
    meta624 = {
      "description": "A symbol indicating a closed pull request in the Git version control system. This icon is commonly used in user interfaces to represent a pull request that has been closed and merged.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "git",
        "pull request",
        "closed",
        "merge",
        "version control",
        "source code",
        "development",
        "UI",
        "icon"
      ],
      "title": "Git Pull Request Closed"
    };
    icon_git_pull_request_closed_svg_default = meta624;
  }
});

// lib/meta/icon_git-pull-request-draft.svg.ts
var icon_git_pull_request_draft_svg_exports = {};
__export(icon_git_pull_request_draft_svg_exports, {
  default: () => icon_git_pull_request_draft_svg_default,
  meta: () => meta625
});
var meta625, icon_git_pull_request_draft_svg_default;
var init_icon_git_pull_request_draft_svg = __esm({
  "lib/meta/icon_git-pull-request-draft.svg.ts"() {
    meta625 = {
      "description": "The git-pull-request-draft icon represents a draft version of a pull request in Git. It is typically used in user interfaces to indicate that a pull request is still a work in progress and has not been submitted for review yet.",
      "category": [
        "Interface"
      ],
      "tag": [
        "git",
        "pull request",
        "draft",
        "version control",
        "revision",
        "work in progress",
        "code review",
        "GitLab",
        "Bitbucket",
        "GitHub"
      ],
      "title": "Git Pull Request Draft"
    };
    icon_git_pull_request_draft_svg_default = meta625;
  }
});

// lib/meta/icon_git-pull-request.svg.ts
var icon_git_pull_request_svg_exports = {};
__export(icon_git_pull_request_svg_exports, {
  default: () => icon_git_pull_request_svg_default,
  meta: () => meta626
});
var meta626, icon_git_pull_request_svg_default;
var init_icon_git_pull_request_svg = __esm({
  "lib/meta/icon_git-pull-request.svg.ts"() {
    meta626 = {
      "description": "Git pull request icon is used as a symbol for requesting changes to a codebase in Git version control system. This icon usually represents the action of pulling the changes made in a repository to be reviewed and potentially merged with the main codebase.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "git",
        "pull request",
        "version control",
        "code",
        "repository",
        "review",
        "merge",
        "VCS",
        "source control",
        "development"
      ],
      "title": "Git Pull Request"
    };
    icon_git_pull_request_svg_default = meta626;
  }
});

// lib/meta/icon_git-repo-fork.svg.ts
var icon_git_repo_fork_svg_exports = {};
__export(icon_git_repo_fork_svg_exports, {
  default: () => icon_git_repo_fork_svg_default,
  meta: () => meta627
});
var meta627, icon_git_repo_fork_svg_default;
var init_icon_git_repo_fork_svg = __esm({
  "lib/meta/icon_git-repo-fork.svg.ts"() {
    meta627 = {
      "description": "The git-repo-fork icon represents a forked repository, indicating that the codebase has been duplicated for further development or modification. It is commonly used in version control systems and software development platforms.",
      "category": [
        "Interface"
      ],
      "tag": [
        "git",
        "repository",
        "fork",
        "code",
        "development",
        "version control",
        "software",
        "duplicate",
        "modification",
        "branch"
      ],
      "title": "Git Repository Fork"
    };
    icon_git_repo_fork_svg_default = meta627;
  }
});

// lib/meta/icon_heart-broken-small.svg.ts
var icon_heart_broken_small_svg_exports = {};
__export(icon_heart_broken_small_svg_exports, {
  default: () => icon_heart_broken_small_svg_default,
  meta: () => meta628
});
var meta628, icon_heart_broken_small_svg_default;
var init_icon_heart_broken_small_svg = __esm({
  "lib/meta/icon_heart-broken-small.svg.ts"() {
    meta628 = {
      "description": "A small heart icon depicting a broken heart, often used to symbolize sadness or heartbreak in user interface designs.",
      "category": [
        "Interface"
      ],
      "tag": [
        "heart",
        "broken",
        "sadness",
        "love",
        "emotions",
        "ui",
        "symbol",
        "small",
        "icon",
        "graphic"
      ],
      "title": "Heart Broken Small"
    };
    icon_heart_broken_small_svg_default = meta628;
  }
});

// lib/meta/icon_heart-fat.svg.ts
var icon_heart_fat_svg_exports = {};
__export(icon_heart_fat_svg_exports, {
  default: () => icon_heart_fat_svg_default,
  meta: () => meta629
});
var meta629, icon_heart_fat_svg_default;
var init_icon_heart_fat_svg = __esm({
  "lib/meta/icon_heart-fat.svg.ts"() {
    meta629 = {
      "description": "A fat-style heart icon, commonly used to symbolize love and affection in user interfaces.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "love",
        "romance",
        "Valentine's Day",
        "affection",
        "like",
        "favorite",
        "emoticon",
        "relationship",
        "dating",
        "icon"
      ],
      "title": "Heart Fat"
    };
    icon_heart_fat_svg_default = meta629;
  }
});

// lib/meta/icon_heart-l.svg.ts
var icon_heart_l_svg_exports = {};
__export(icon_heart_l_svg_exports, {
  default: () => icon_heart_l_svg_default,
  meta: () => meta630
});
var meta630, icon_heart_l_svg_default;
var init_icon_heart_l_svg = __esm({
  "lib/meta/icon_heart-l.svg.ts"() {
    meta630 = {
      "description": "The heart-l icon is a symbol representing love, affection, and romance. It is commonly used in user interfaces to indicate liking or favoriting something.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "heart",
        "love",
        "like",
        "romance",
        "affection",
        "favorite",
        "emoticon",
        "Valentine's Day",
        "user interface",
        "symbol"
      ],
      "title": "Heart Icon"
    };
    icon_heart_l_svg_default = meta630;
  }
});

// lib/meta/icon_heart-m.svg.ts
var icon_heart_m_svg_exports = {};
__export(icon_heart_m_svg_exports, {
  default: () => icon_heart_m_svg_default,
  meta: () => meta631
});
var meta631, icon_heart_m_svg_default;
var init_icon_heart_m_svg = __esm({
  "lib/meta/icon_heart-m.svg.ts"() {
    meta631 = {
      "description": "A heart icon typically used to represent love, care, and affection in user interfaces.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "love",
        "like",
        "valentine",
        "romance",
        "affection",
        "emotion",
        "favorite",
        "relationship",
        "health",
        "medical"
      ],
      "title": "Heart"
    };
    icon_heart_m_svg_default = meta631;
  }
});

// lib/meta/icon_heart-small.svg.ts
var icon_heart_small_svg_exports = {};
__export(icon_heart_small_svg_exports, {
  default: () => icon_heart_small_svg_default,
  meta: () => meta632
});
var meta632, icon_heart_small_svg_default;
var init_icon_heart_small_svg = __esm({
  "lib/meta/icon_heart-small.svg.ts"() {
    meta632 = {
      "description": "A small heart icon suitable for UI design, representing love and emotion.",
      "category": [
        "Interface"
      ],
      "tag": [
        "heart",
        "love",
        "romantic",
        "valentine",
        "affection",
        "symbol",
        "icon",
        "graphic",
        "small"
      ],
      "title": "Heart Small"
    };
    icon_heart_small_svg_default = meta632;
  }
});

// lib/meta/icon_info-fat.svg.ts
var icon_info_fat_svg_exports = {};
__export(icon_info_fat_svg_exports, {
  default: () => icon_info_fat_svg_default,
  meta: () => meta633
});
var meta633, icon_info_fat_svg_default;
var init_icon_info_fat_svg = __esm({
  "lib/meta/icon_info-fat.svg.ts"() {
    meta633 = {
      "description": "A bold icon depicting important information or instructions. The 'info-fat' icon can be used to draw attention to key details or messages.",
      "category": [
        "Interface"
      ],
      "tag": [
        "information",
        "attention",
        "details",
        "instructions",
        "important",
        "alert",
        "notice",
        "notification",
        "message",
        "communication"
      ],
      "title": "Info Fat"
    };
    icon_info_fat_svg_default = meta633;
  }
});

// lib/meta/icon_info-l.svg.ts
var icon_info_l_svg_exports = {};
__export(icon_info_l_svg_exports, {
  default: () => icon_info_l_svg_default,
  meta: () => meta634
});
var meta634, icon_info_l_svg_default;
var init_icon_info_l_svg = __esm({
  "lib/meta/icon_info-l.svg.ts"() {
    meta634 = {
      "description": "The 'info-l' icon is typically used to indicate additional information or help content. It is commonly used in user interfaces to provide users with relevant details or guidance.",
      "category": [
        "Interface"
      ],
      "tag": [
        "information",
        "help",
        "guide",
        "details",
        "informational",
        "notification",
        "advice",
        "tips",
        "assistance",
        "explanation"
      ],
      "title": "Info Icon - Large"
    };
    icon_info_l_svg_default = meta634;
  }
});

// lib/meta/icon_info-m.svg.ts
var icon_info_m_svg_exports = {};
__export(icon_info_m_svg_exports, {
  default: () => icon_info_m_svg_default,
  meta: () => meta635
});
var meta635, icon_info_m_svg_default;
var init_icon_info_m_svg = __esm({
  "lib/meta/icon_info-m.svg.ts"() {
    meta635 = {
      "description": "An icon representing information or details. It can be used to indicate additional information or help.",
      "category": [
        "Interface"
      ],
      "tag": [
        "information",
        "details",
        "help",
        "explanation",
        "knowledge",
        "communication",
        "UI",
        "notification",
        "guide",
        "instruction"
      ],
      "title": "Info Icon"
    };
    icon_info_m_svg_default = meta635;
  }
});

// lib/meta/icon_info-s.svg.ts
var icon_info_s_svg_exports = {};
__export(icon_info_s_svg_exports, {
  default: () => icon_info_s_svg_default,
  meta: () => meta636
});
var meta636, icon_info_s_svg_default;
var init_icon_info_s_svg = __esm({
  "lib/meta/icon_info-s.svg.ts"() {
    meta636 = {
      "description": "A simple 'information' icon represented by a lowercase 'i' inside a circle. This icon is commonly used to indicate additional information or details.",
      "category": [
        "Interface"
      ],
      "tag": [
        "information",
        "details",
        "info",
        "help",
        "assistance",
        "question",
        "alert",
        "notification",
        "advice",
        "guide"
      ],
      "title": "Info S"
    };
    icon_info_s_svg_default = meta636;
  }
});

// lib/meta/icon_invisible-fat.svg.ts
var icon_invisible_fat_svg_exports = {};
__export(icon_invisible_fat_svg_exports, {
  default: () => icon_invisible_fat_svg_default,
  meta: () => meta637
});
var meta637, icon_invisible_fat_svg_default;
var init_icon_invisible_fat_svg = __esm({
  "lib/meta/icon_invisible-fat.svg.ts"() {
    meta637 = {
      "description": "An icon representing a fat invisible element for UI design purposes.",
      "category": [
        "Interface"
      ],
      "tag": [
        "invisible",
        "fat",
        "UI design",
        "hidden",
        "user interface",
        "element",
        "symbol",
        "graphic",
        "icon",
        "graphic design"
      ],
      "title": "Invisible Fat"
    };
    icon_invisible_fat_svg_default = meta637;
  }
});

// lib/meta/icon_invisible-l.svg.ts
var icon_invisible_l_svg_exports = {};
__export(icon_invisible_l_svg_exports, {
  default: () => icon_invisible_l_svg_default,
  meta: () => meta638
});
var meta638, icon_invisible_l_svg_default;
var init_icon_invisible_l_svg = __esm({
  "lib/meta/icon_invisible-l.svg.ts"() {
    meta638 = {
      "description": "An icon representing an invisible element or object, typically used in user interfaces to denote hidden content or inactive features.",
      "category": [
        "Interface"
      ],
      "tag": [
        "Hidden",
        "Inactive",
        "Concealed",
        "UI design",
        "Invisible element",
        "User interface",
        "Transparent",
        "Unseen",
        "Concealed feature",
        "Concealed content"
      ],
      "title": "Invisible Element"
    };
    icon_invisible_l_svg_default = meta638;
  }
});

// lib/meta/icon_invisible-m.svg.ts
var icon_invisible_m_svg_exports = {};
__export(icon_invisible_m_svg_exports, {
  default: () => icon_invisible_m_svg_default,
  meta: () => meta639
});
var meta639, icon_invisible_m_svg_default;
var init_icon_invisible_m_svg = __esm({
  "lib/meta/icon_invisible-m.svg.ts"() {
    meta639 = {
      "description": "An invisible icon designed for user interface, representing hidden or unseen elements in a graphical user interface.",
      "category": [
        "Interface"
      ],
      "tag": [
        "invisible",
        "hidden",
        "unseen",
        "concealed",
        "user interface",
        "UI",
        "element",
        "graphic",
        "symbol",
        "minimal"
      ],
      "title": "Invisible M"
    };
    icon_invisible_m_svg_default = meta639;
  }
});

// lib/meta/icon_invisible-s.svg.ts
var icon_invisible_s_svg_exports = {};
__export(icon_invisible_s_svg_exports, {
  default: () => icon_invisible_s_svg_default,
  meta: () => meta640
});
var meta640, icon_invisible_s_svg_default;
var init_icon_invisible_s_svg = __esm({
  "lib/meta/icon_invisible-s.svg.ts"() {
    meta640 = {
      "description": "An icon representing invisibility, often used in user interfaces to symbolize hiding or making something invisible.",
      "category": [
        "Interface"
      ],
      "tag": [
        "invisible",
        "hide",
        "visibility",
        "eyes",
        "conceal",
        "screen",
        "stealth",
        "camouflage",
        "mask",
        "cloaked"
      ],
      "title": "Invisible"
    };
    icon_invisible_s_svg_default = meta640;
  }
});

// lib/meta/icon_key-backspace.svg.ts
var icon_key_backspace_svg_exports = {};
__export(icon_key_backspace_svg_exports, {
  default: () => icon_key_backspace_svg_default,
  meta: () => meta641
});
var meta641, icon_key_backspace_svg_default;
var init_icon_key_backspace_svg = __esm({
  "lib/meta/icon_key-backspace.svg.ts"() {
    meta641 = {
      "description": "The key-backspace icon is a combination of a key and a backspace arrow, indicating a function to delete text or elements using a keyboard shortcut.",
      "category": [
        "Interface"
      ],
      "tag": [
        "keyboard",
        "delete",
        "backspace",
        "shortcut",
        "input",
        "text editing",
        "ui",
        "function",
        "shortcut",
        "key"
      ],
      "title": "Key Backspace"
    };
    icon_key_backspace_svg_default = meta641;
  }
});

// lib/meta/icon_key-delete.svg.ts
var icon_key_delete_svg_exports = {};
__export(icon_key_delete_svg_exports, {
  default: () => icon_key_delete_svg_default,
  meta: () => meta642
});
var meta642, icon_key_delete_svg_default;
var init_icon_key_delete_svg = __esm({
  "lib/meta/icon_key-delete.svg.ts"() {
    meta642 = {
      "description": "The key-delete icon represents a key with a small 'x' symbol on it, indicating the action of deleting or removing a key. This icon is commonly used in user interfaces to indicate the option to delete a key or disable access.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "key",
        "delete",
        "remove",
        "access",
        "lock",
        "security",
        "user interface",
        "interaction",
        "authentication",
        "privacy"
      ],
      "title": "Key Delete"
    };
    icon_key_delete_svg_default = meta642;
  }
});

// lib/meta/icon_key-down.svg.ts
var icon_key_down_svg_exports = {};
__export(icon_key_down_svg_exports, {
  default: () => icon_key_down_svg_default,
  meta: () => meta643
});
var meta643, icon_key_down_svg_default;
var init_icon_key_down_svg = __esm({
  "lib/meta/icon_key-down.svg.ts"() {
    meta643 = {
      "description": "An icon representing a downward key or keyboard key press. This icon is often used in user interfaces to indicate a keyboard shortcut or key press action.",
      "category": [
        "Interface"
      ],
      "tag": [
        "key",
        "down",
        "keyboard",
        "shortcut",
        "press",
        "action",
        "input",
        "computer",
        "symbol",
        "ui"
      ],
      "title": "Key Down"
    };
    icon_key_down_svg_default = meta643;
  }
});

// lib/meta/icon_key-eject.svg.ts
var icon_key_eject_svg_exports = {};
__export(icon_key_eject_svg_exports, {
  default: () => icon_key_eject_svg_default,
  meta: () => meta644
});
var meta644, icon_key_eject_svg_default;
var init_icon_key_eject_svg = __esm({
  "lib/meta/icon_key-eject.svg.ts"() {
    meta644 = {
      "description": "The key-eject icon represents the action of ejecting a key or safely removing a secure device. It is commonly used in user interfaces and applications to symbolize the act of disconnecting or logging out securely.",
      "category": [
        "Interface"
      ],
      "tag": [
        "eject",
        "key",
        "security",
        "disconnect",
        "safely remove",
        "user interface",
        "log out",
        "safety",
        "interaction",
        "accessibility"
      ],
      "title": "Key Eject"
    };
    icon_key_eject_svg_default = meta644;
  }
});

// lib/meta/icon_key-enter.svg.ts
var icon_key_enter_svg_exports = {};
__export(icon_key_enter_svg_exports, {
  default: () => icon_key_enter_svg_default,
  meta: () => meta645
});
var meta645, icon_key_enter_svg_default;
var init_icon_key_enter_svg = __esm({
  "lib/meta/icon_key-enter.svg.ts"() {
    meta645 = {
      "description": "The key-enter icon represents the action of pressing a key on the keyboard to confirm or submit something, often used in user interfaces to submit forms or execute commands.",
      "category": [
        "Interface"
      ],
      "tag": [
        "keyboard",
        "submit",
        "confirm",
        "input",
        "interaction",
        "form",
        "enter key",
        "accessibility",
        "ui",
        "action"
      ],
      "title": "Key Enter"
    };
    icon_key_enter_svg_default = meta645;
  }
});

// lib/meta/icon_key-function.svg.ts
var icon_key_function_svg_exports = {};
__export(icon_key_function_svg_exports, {
  default: () => icon_key_function_svg_default,
  meta: () => meta646
});
var meta646, icon_key_function_svg_default;
var init_icon_key_function_svg = __esm({
  "lib/meta/icon_key-function.svg.ts"() {
    meta646 = {
      "description": "A key icon representing a function or feature. This icon is commonly used in user interface design to indicate a key action or setting.",
      "category": [
        "Interface"
      ],
      "tag": [
        "key",
        "function",
        "user interface",
        "action",
        "setting",
        "feature",
        "icon",
        "design",
        "symbol",
        "ui"
      ],
      "title": "Key Function"
    };
    icon_key_function_svg_default = meta646;
  }
});

// lib/meta/icon_key-mac-command.svg.ts
var icon_key_mac_command_svg_exports = {};
__export(icon_key_mac_command_svg_exports, {
  default: () => icon_key_mac_command_svg_default,
  meta: () => meta647
});
var meta647, icon_key_mac_command_svg_default;
var init_icon_key_mac_command_svg = __esm({
  "lib/meta/icon_key-mac-command.svg.ts"() {
    meta647 = {
      "description": "A unique icon representing the Command key on a Mac keyboard, commonly used in user interfaces to indicate shortcut commands.",
      "category": [
        "Interface"
      ],
      "tag": [
        "key",
        "mac",
        "command",
        "keyboard",
        "shortcut",
        "symbol",
        "ui",
        "technology",
        "input",
        "computing"
      ],
      "title": "Key Mac Command"
    };
    icon_key_mac_command_svg_default = meta647;
  }
});

// lib/meta/icon_key-option.svg.ts
var icon_key_option_svg_exports = {};
__export(icon_key_option_svg_exports, {
  default: () => icon_key_option_svg_default,
  meta: () => meta648
});
var meta648, icon_key_option_svg_default;
var init_icon_key_option_svg = __esm({
  "lib/meta/icon_key-option.svg.ts"() {
    meta648 = {
      "description": "The key-option icon represents a customizable option related to keys, such as key settings or key preferences.",
      "category": [
        "Interface"
      ],
      "tag": [
        "key",
        "lock",
        "security",
        "customize",
        "settings",
        "preferences",
        "access",
        "entry",
        "privacy",
        "protection"
      ],
      "title": "Key Option"
    };
    icon_key_option_svg_default = meta648;
  }
});

// lib/meta/icon_key-page-down.svg.ts
var icon_key_page_down_svg_exports = {};
__export(icon_key_page_down_svg_exports, {
  default: () => icon_key_page_down_svg_default,
  meta: () => meta649
});
var meta649, icon_key_page_down_svg_default;
var init_icon_key_page_down_svg = __esm({
  "lib/meta/icon_key-page-down.svg.ts"() {
    meta649 = {
      "description": "An icon representing a key with an arrow pointing downwards, indicating the action of moving a page down. This icon is commonly used in user interfaces for navigation purposes.",
      "category": [
        "Interface"
      ],
      "tag": [
        "key",
        "page down",
        "navigation",
        "scrolling",
        "user interface",
        "arrow",
        "downwards",
        "button",
        "website",
        "app"
      ],
      "title": "Key Page Down"
    };
    icon_key_page_down_svg_default = meta649;
  }
});

// lib/meta/icon_key-page-next.svg.ts
var icon_key_page_next_svg_exports = {};
__export(icon_key_page_next_svg_exports, {
  default: () => icon_key_page_next_svg_default,
  meta: () => meta650
});
var meta650, icon_key_page_next_svg_default;
var init_icon_key_page_next_svg = __esm({
  "lib/meta/icon_key-page-next.svg.ts"() {
    meta650 = {
      "description": "The icon 'key-page-next' represents a key with an arrow pointing to the right, indicating the action of navigating to the next page. This icon is commonly used in user interfaces for pagination.",
      "category": [
        "Interface",
        "Arrows"
      ],
      "tag": [
        "navigation",
        "pagination",
        "arrow",
        "key",
        "next",
        "forward",
        "interface",
        "button",
        "website",
        "web design"
      ],
      "title": "Key Page Next"
    };
    icon_key_page_next_svg_default = meta650;
  }
});

// lib/meta/icon_key-page-up.svg.ts
var icon_key_page_up_svg_exports = {};
__export(icon_key_page_up_svg_exports, {
  default: () => icon_key_page_up_svg_default,
  meta: () => meta651
});
var meta651, icon_key_page_up_svg_default;
var init_icon_key_page_up_svg = __esm({
  "lib/meta/icon_key-page-up.svg.ts"() {
    meta651 = {
      "description": "The key-page-up icon represents the key that allows users to move the page upwards. This icon is commonly used in user interface design to indicate a keyboard shortcut for scrolling up on a webpage.",
      "category": [
        "Interface"
      ],
      "tag": [
        "keyboard",
        "shortcut",
        "scroll",
        "up",
        "navigation",
        "webpage",
        "move",
        "UI",
        "user interface",
        "key"
      ],
      "title": "Key Page Up"
    };
    icon_key_page_up_svg_default = meta651;
  }
});

// lib/meta/icon_key-previous-up.svg.ts
var icon_key_previous_up_svg_exports = {};
__export(icon_key_previous_up_svg_exports, {
  default: () => icon_key_previous_up_svg_default,
  meta: () => meta652
});
var meta652, icon_key_previous_up_svg_default;
var init_icon_key_previous_up_svg = __esm({
  "lib/meta/icon_key-previous-up.svg.ts"() {
    meta652 = {
      "description": "The key-previous-up icon is a graphical representation of a key pointing upwards, indicating a function or action related to going back or returning. This icon is commonly used in user interfaces to represent a previous step or action.",
      "category": [
        "Interface"
      ],
      "tag": [
        "key",
        "previous",
        "up",
        "navigation",
        "return",
        "user interface",
        "button",
        "arrow",
        "action",
        "step"
      ],
      "title": "Key Previous Up"
    };
    icon_key_previous_up_svg_default = meta652;
  }
});

// lib/meta/icon_key-shift.svg.ts
var icon_key_shift_svg_exports = {};
__export(icon_key_shift_svg_exports, {
  default: () => icon_key_shift_svg_default,
  meta: () => meta653
});
var meta653, icon_key_shift_svg_default;
var init_icon_key_shift_svg = __esm({
  "lib/meta/icon_key-shift.svg.ts"() {
    meta653 = {
      "description": "The key-shift icon represents a key with an arrow pointing upwards, symbolizing a shift or change. This icon is commonly used to indicate a key that activates a shift function or changes the current state.",
      "category": [
        "Interface"
      ],
      "tag": [
        "keyboard",
        "shift",
        "arrow",
        "change",
        "switch",
        "modifier",
        "control",
        "navigation",
        "user interface",
        "function"
      ],
      "title": "Key Shift"
    };
    icon_key_shift_svg_default = meta653;
  }
});

// lib/meta/icon_key-tab.svg.ts
var icon_key_tab_svg_exports = {};
__export(icon_key_tab_svg_exports, {
  default: () => icon_key_tab_svg_default,
  meta: () => meta654
});
var meta654, icon_key_tab_svg_default;
var init_icon_key_tab_svg = __esm({
  "lib/meta/icon_key-tab.svg.ts"() {
    meta654 = {
      "description": "The key-tab icon represents a key symbol often used to indicate the 'tab' key on a keyboard. This icon is commonly used in user interfaces to guide users in navigating through different fields or sections.",
      "category": [
        "Interface"
      ],
      "tag": [
        "keyboard",
        "navigation",
        "input",
        "interface",
        "control",
        "tab key",
        "shortcut",
        "user interface",
        "accessibility",
        "symbol"
      ],
      "title": "Key Tab"
    };
    icon_key_tab_svg_default = meta654;
  }
});

// lib/meta/icon_key-up.svg.ts
var icon_key_up_svg_exports = {};
__export(icon_key_up_svg_exports, {
  default: () => icon_key_up_svg_default,
  meta: () => meta655
});
var meta655, icon_key_up_svg_default;
var init_icon_key_up_svg = __esm({
  "lib/meta/icon_key-up.svg.ts"() {
    meta655 = {
      "description": "The key-up icon represents the action of pressing the 'Up' arrow key on a keyboard. It is commonly used in user interfaces to indicate keyboard navigation or scrolling upwards.",
      "category": [
        "Interface",
        "Arrows"
      ],
      "tag": [
        "keyboard",
        "arrow key",
        "navigation",
        "scrolling",
        "upwards",
        "user interface",
        "input",
        "control",
        "symbol"
      ],
      "title": "Key Up"
    };
    icon_key_up_svg_default = meta655;
  }
});

// lib/meta/icon_like.svg.ts
var icon_like_svg_exports = {};
__export(icon_like_svg_exports, {
  default: () => icon_like_svg_default,
  meta: () => meta656
});
var meta656, icon_like_svg_default;
var init_icon_like_svg = __esm({
  "lib/meta/icon_like.svg.ts"() {
    meta656 = {
      "description": "An icon representing liking or approval, often used in social media platforms to show appreciation towards a post or content.",
      "category": [
        "Interface"
      ],
      "tag": [
        "like",
        "heart",
        "thumb",
        "approval",
        "social media",
        "react",
        "positive",
        "feedback",
        "appreciation",
        "icon"
      ],
      "title": "Like"
    };
    icon_like_svg_default = meta656;
  }
});

// lib/meta/icon_link.svg.ts
var icon_link_svg_exports = {};
__export(icon_link_svg_exports, {
  default: () => icon_link_svg_default,
  meta: () => meta657
});
var meta657, icon_link_svg_default;
var init_icon_link_svg = __esm({
  "lib/meta/icon_link.svg.ts"() {
    meta657 = {
      "description": "The icon 'link' represents a hyperlink or connection between items. It is commonly used to indicate clickable text or elements that redirect to another webpage or location.",
      "category": [
        "Interface"
      ],
      "tag": [
        "hyperlink",
        "connection",
        "web",
        "URL",
        "navigation",
        "internet",
        "clickable",
        "URL",
        "redirect",
        "online"
      ],
      "title": "Link"
    };
    icon_link_svg_default = meta657;
  }
});

// lib/meta/icon_loader-dots 2.svg.ts
var icon_loader_dots_2_svg_exports = {};
__export(icon_loader_dots_2_svg_exports, {
  default: () => icon_loader_dots_2_svg_default,
  meta: () => meta658
});
var meta658, icon_loader_dots_2_svg_default;
var init_icon_loader_dots_2_svg = __esm({
  "lib/meta/icon_loader-dots 2.svg.ts"() {
    meta658 = {
      "description": "A set of three circular loading dots arranged in a horizontal line, representing a loading animation or process indicator.",
      "category": [
        "Interface"
      ],
      "tag": [
        "loading animation",
        "loading process",
        "dots",
        "loader",
        "wait",
        "progress",
        "activity",
        "loading screen",
        "indicator",
        "user interface"
      ],
      "title": "Loader Dots 2"
    };
    icon_loader_dots_2_svg_default = meta658;
  }
});

// lib/meta/icon_loader-dots.svg.ts
var icon_loader_dots_svg_exports = {};
__export(icon_loader_dots_svg_exports, {
  default: () => icon_loader_dots_svg_default,
  meta: () => meta659
});
var meta659, icon_loader_dots_svg_default;
var init_icon_loader_dots_svg = __esm({
  "lib/meta/icon_loader-dots.svg.ts"() {
    meta659 = {
      "description": "Loader dots is a simple icon consisting of three dots that animate in a loading sequence. Commonly used in interfaces to indicate that a process is ongoing or loading.",
      "category": [
        "Interface"
      ],
      "tag": [
        "loader",
        "dots",
        "loading",
        "animation",
        "progress",
        "interface",
        "waiting",
        "sequence",
        "spinner",
        "activity"
      ],
      "title": "Loader Dots"
    };
    icon_loader_dots_svg_default = meta659;
  }
});

// lib/meta/icon_male-simplified.svg.ts
var icon_male_simplified_svg_exports = {};
__export(icon_male_simplified_svg_exports, {
  default: () => icon_male_simplified_svg_default,
  meta: () => meta660
});
var meta660, icon_male_simplified_svg_default;
var init_icon_male_simplified_svg = __esm({
  "lib/meta/icon_male-simplified.svg.ts"() {
    meta660 = {
      "description": "A simplified icon depicting a male figure, commonly used to represent men or masculinity in user interface designs.",
      "category": [
        "Interface"
      ],
      "tag": [
        "male",
        "man",
        "gender",
        "person",
        "avatar",
        "profile",
        "UI design",
        "simplified",
        "masculinity",
        "symbol"
      ],
      "title": "Male Simplified"
    };
    icon_male_simplified_svg_default = meta660;
  }
});

// lib/meta/icon_moving-block.svg.ts
var icon_moving_block_svg_exports = {};
__export(icon_moving_block_svg_exports, {
  default: () => icon_moving_block_svg_default,
  meta: () => meta661
});
var meta661, icon_moving_block_svg_default;
var init_icon_moving_block_svg = __esm({
  "lib/meta/icon_moving-block.svg.ts"() {
    meta661 = {
      "description": "An icon of a moving block, representing dynamic content or interactive elements in a user interface.",
      "category": [
        "Interface",
        "Shapes"
      ],
      "tag": [
        "dynamic",
        "block",
        "interactive",
        "content",
        "user interface",
        "animation",
        "gaming",
        "design",
        "interface element",
        "widget"
      ],
      "title": "Moving Block"
    };
    icon_moving_block_svg_default = meta661;
  }
});

// lib/meta/icon_multiply-fat.svg.ts
var icon_multiply_fat_svg_exports = {};
__export(icon_multiply_fat_svg_exports, {
  default: () => icon_multiply_fat_svg_default,
  meta: () => meta662
});
var meta662, icon_multiply_fat_svg_default;
var init_icon_multiply_fat_svg = __esm({
  "lib/meta/icon_multiply-fat.svg.ts"() {
    meta662 = {
      "description": "A bold and modern icon of a multiplication symbol, representing the mathematical operation of multiplication. This icon is designed with a thick, fat line style for a contemporary look.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "math",
        "calculation",
        "operation",
        "mathematics",
        "symbol",
        "multiply",
        "math symbol"
      ],
      "title": "Multiply Fat"
    };
    icon_multiply_fat_svg_default = meta662;
  }
});

// lib/meta/icon_multiply-l.svg.ts
var icon_multiply_l_svg_exports = {};
__export(icon_multiply_l_svg_exports, {
  default: () => icon_multiply_l_svg_default,
  meta: () => meta663
});
var meta663, icon_multiply_l_svg_default;
var init_icon_multiply_l_svg = __esm({
  "lib/meta/icon_multiply-l.svg.ts"() {
    meta663 = {
      "description": "The 'multiply-l' icon represents the mathematical operation of multiplication in a graphical form. It is commonly used to indicate multiplying two values together. This icon can be utilized in various user interface designs to symbolize multiplication.",
      "category": [
        "Interface"
      ],
      "tag": [
        "math",
        "operation",
        "multiply",
        "calculation",
        "arithmetic",
        "symbol",
        "mathematics",
        "equation",
        "algorithm",
        "computation"
      ],
      "title": "Multiply Large"
    };
    icon_multiply_l_svg_default = meta663;
  }
});

// lib/meta/icon_multiply-m.svg.ts
var icon_multiply_m_svg_exports = {};
__export(icon_multiply_m_svg_exports, {
  default: () => icon_multiply_m_svg_default,
  meta: () => meta664
});
var meta664, icon_multiply_m_svg_default;
var init_icon_multiply_m_svg = __esm({
  "lib/meta/icon_multiply-m.svg.ts"() {
    meta664 = {
      "description": "The multiply icon is commonly used to represent multiplication or combining two elements together. It is often used in calculators, math-related applications, and design software.",
      "category": [
        "Interface"
      ],
      "tag": [
        "arithmetic",
        "math",
        "calculator",
        "operation",
        "calculation",
        "design",
        "symbol",
        "multiply",
        "mathematics",
        "algebra"
      ],
      "title": "Multiply Icon"
    };
    icon_multiply_m_svg_default = meta664;
  }
});

// lib/meta/icon_multiply-s.svg.ts
var icon_multiply_s_svg_exports = {};
__export(icon_multiply_s_svg_exports, {
  default: () => icon_multiply_s_svg_default,
  meta: () => meta665
});
var meta665, icon_multiply_s_svg_default;
var init_icon_multiply_s_svg = __esm({
  "lib/meta/icon_multiply-s.svg.ts"() {
    meta665 = {
      "description": "The multiply-s icon is a small, simple icon typically used to represent multiplication or close functionality in a user interface.",
      "category": [
        "Interface"
      ],
      "tag": [
        "multiply",
        "math",
        "operation",
        "close",
        "button",
        "icon",
        "symbol",
        "ui",
        "small",
        "simple"
      ],
      "title": "Multiply Symbol"
    };
    icon_multiply_s_svg_default = meta665;
  }
});

// lib/meta/icon_note-add 2.svg.ts
var icon_note_add_2_svg_exports = {};
__export(icon_note_add_2_svg_exports, {
  default: () => icon_note_add_2_svg_default,
  meta: () => meta666
});
var meta666, icon_note_add_2_svg_default;
var init_icon_note_add_2_svg = __esm({
  "lib/meta/icon_note-add 2.svg.ts"() {
    meta666 = {
      "description": "The note-add 2 icon is used to represent the action of adding a new note or document. It typically symbolizes creating a new piece of text or information.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "note",
        "add",
        "create",
        "text",
        "information",
        "write",
        "document",
        "file",
        "edit",
        "compose"
      ],
      "title": "Note Add 2"
    };
    icon_note_add_2_svg_default = meta666;
  }
});

// lib/meta/icon_note-add.svg.ts
var icon_note_add_svg_exports = {};
__export(icon_note_add_svg_exports, {
  default: () => icon_note_add_svg_default,
  meta: () => meta667
});
var meta667, icon_note_add_svg_default;
var init_icon_note_add_svg = __esm({
  "lib/meta/icon_note-add.svg.ts"() {
    meta667 = {
      "description": "An icon representing the action of adding or creating a new note. This icon typically features a symbol of a piece of paper with a plus sign or a pencil to signify that a new note can be added.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "note",
        "add",
        "create",
        "write",
        "write down",
        "notebook",
        "memo",
        "paper",
        "text",
        "editor"
      ],
      "title": "Note Add"
    };
    icon_note_add_svg_default = meta667;
  }
});

// lib/meta/icon_note-broken-heart 2.svg.ts
var icon_note_broken_heart_2_svg_exports = {};
__export(icon_note_broken_heart_2_svg_exports, {
  default: () => icon_note_broken_heart_2_svg_default,
  meta: () => meta668
});
var meta668, icon_note_broken_heart_2_svg_default;
var init_icon_note_broken_heart_2_svg = __esm({
  "lib/meta/icon_note-broken-heart 2.svg.ts"() {
    meta668 = {
      "description": "A broken heart with a note symbolizing sadness or heartbreak. This icon may be used in user interfaces to represent a note related to emotional content.",
      "category": [
        "UI"
      ],
      "tag": [
        "note",
        "broken heart",
        "heartbreak",
        "emotion",
        "user interface",
        "sadness",
        "love",
        "relationship",
        "symbol",
        "depression"
      ],
      "title": "Note Broken Heart"
    };
    icon_note_broken_heart_2_svg_default = meta668;
  }
});

// lib/meta/icon_note-broken-heart.svg.ts
var icon_note_broken_heart_svg_exports = {};
__export(icon_note_broken_heart_svg_exports, {
  default: () => icon_note_broken_heart_svg_default,
  meta: () => meta669
});
var meta669, icon_note_broken_heart_svg_default;
var init_icon_note_broken_heart_svg = __esm({
  "lib/meta/icon_note-broken-heart.svg.ts"() {
    meta669 = {
      "description": "The icon 'note-broken-heart' represents a broken heart shape inside a note, symbolizing heartbreak or sadness. This icon can be used in user interfaces to convey emotions or messages related to love stories, relationships, or emotional content.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "love",
        "heartbreak",
        "sadness",
        "emotions",
        "relationships",
        "note",
        "message",
        "user interface",
        "broken heart",
        "symbol"
      ],
      "title": "Note Broken Heart"
    };
    icon_note_broken_heart_svg_default = meta669;
  }
});

// lib/meta/icon_note-check 2.svg.ts
var icon_note_check_2_svg_exports = {};
__export(icon_note_check_2_svg_exports, {
  default: () => icon_note_check_2_svg_default,
  meta: () => meta670
});
var meta670, icon_note_check_2_svg_default;
var init_icon_note_check_2_svg = __esm({
  "lib/meta/icon_note-check 2.svg.ts"() {
    meta670 = {
      "description": "The note-check 2 icon is a symbol representing a checked note or completed task. It can be used in user interfaces to indicate successful completion or verification.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "checked",
        "completed",
        "task",
        "note",
        "success",
        "verification",
        "user interface",
        "symbol",
        "tick",
        "confirmation"
      ],
      "title": "Note Check 2"
    };
    icon_note_check_2_svg_default = meta670;
  }
});

// lib/meta/icon_note-check.svg.ts
var icon_note_check_svg_exports = {};
__export(icon_note_check_svg_exports, {
  default: () => icon_note_check_svg_default,
  meta: () => meta671
});
var meta671, icon_note_check_svg_default;
var init_icon_note_check_svg = __esm({
  "lib/meta/icon_note-check.svg.ts"() {
    meta671 = {
      "description": "A checkmark symbol on a note paper, indicating completion or approval. Used in user interfaces and applications to signify a successful action or task completion.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "checkmark",
        "note",
        "paper",
        "completion",
        "approval",
        "success",
        "task",
        "interface",
        "application",
        "ui"
      ],
      "title": "Note Check"
    };
    icon_note_check_svg_default = meta671;
  }
});

// lib/meta/icon_note-edit 2.svg.ts
var icon_note_edit_2_svg_exports = {};
__export(icon_note_edit_2_svg_exports, {
  default: () => icon_note_edit_2_svg_default,
  meta: () => meta672
});
var meta672, icon_note_edit_2_svg_default;
var init_icon_note_edit_2_svg = __esm({
  "lib/meta/icon_note-edit 2.svg.ts"() {
    meta672 = {
      "description": "An icon of a pencil and paper, representing editing or modifying notes. This icon is perfect for applications related to note-taking, documentation, editing, and more.",
      "category": [
        "Interface"
      ],
      "tag": [
        "note",
        "edit",
        "modify",
        "pencil",
        "paper",
        "document",
        "edit notes",
        "note-taking",
        "editing",
        "documentation"
      ],
      "title": "Note Edit 2"
    };
    icon_note_edit_2_svg_default = meta672;
  }
});

// lib/meta/icon_note-edit.svg.ts
var icon_note_edit_svg_exports = {};
__export(icon_note_edit_svg_exports, {
  default: () => icon_note_edit_svg_default,
  meta: () => meta673
});
var meta673, icon_note_edit_svg_default;
var init_icon_note_edit_svg = __esm({
  "lib/meta/icon_note-edit.svg.ts"() {
    meta673 = {
      "description": "A stylized icon representing a note being edited, featuring a pencil and a sheet of paper. This icon is commonly used in user interfaces for indicating an option to edit notes or text content.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "edit",
        "note",
        "text",
        "interface",
        "writing",
        "pencil",
        "paper",
        "document",
        "edit option",
        "user interface"
      ],
      "title": "Note Edit"
    };
    icon_note_edit_svg_default = meta673;
  }
});

// lib/meta/icon_note-exclamation-mark-2.svg.ts
var icon_note_exclamation_mark_2_svg_exports = {};
__export(icon_note_exclamation_mark_2_svg_exports, {
  default: () => icon_note_exclamation_mark_2_svg_default,
  meta: () => meta674
});
var meta674, icon_note_exclamation_mark_2_svg_default;
var init_icon_note_exclamation_mark_2_svg = __esm({
  "lib/meta/icon_note-exclamation-mark-2.svg.ts"() {
    meta674 = {
      "description": "An exclamation mark within a note, indicating an important message or reminder. This icon is commonly used in user interfaces to draw attention to specific information.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "note",
        "exclamation",
        "mark",
        "important",
        "message",
        "reminder",
        "notify",
        "communication",
        "attention",
        "warning"
      ],
      "title": "Note Exclamation Mark 2"
    };
    icon_note_exclamation_mark_2_svg_default = meta674;
  }
});

// lib/meta/icon_note-exclamation-mark.svg.ts
var icon_note_exclamation_mark_svg_exports = {};
__export(icon_note_exclamation_mark_svg_exports, {
  default: () => icon_note_exclamation_mark_svg_default,
  meta: () => meta675
});
var meta675, icon_note_exclamation_mark_svg_default;
var init_icon_note_exclamation_mark_svg = __esm({
  "lib/meta/icon_note-exclamation-mark.svg.ts"() {
    meta675 = {
      "description": "An icon of a note with an exclamation mark, commonly used to draw attention or highlight important information in user interfaces.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "attention",
        "exclamation mark",
        "important",
        "alert",
        "notification",
        "UI",
        "user interface",
        "message",
        "reminder",
        "note"
      ],
      "title": "Note Exclamation Mark"
    };
    icon_note_exclamation_mark_svg_default = meta675;
  }
});

// lib/meta/icon_note-heart 2.svg.ts
var icon_note_heart_2_svg_exports = {};
__export(icon_note_heart_2_svg_exports, {
  default: () => icon_note_heart_2_svg_default,
  meta: () => meta676
});
var meta676, icon_note_heart_2_svg_default;
var init_icon_note_heart_2_svg = __esm({
  "lib/meta/icon_note-heart 2.svg.ts"() {
    meta676 = {
      "description": "A heart-shaped note symbol, indicating expressing love or affection through a message. It can be used in user interface designs, especially for features related to expressing emotions or sending messages of love.",
      "category": [
        "UI"
      ],
      "tag": [
        "heart",
        "love",
        "affection",
        "message",
        "emotions",
        "romantic",
        "communication",
        "user interface",
        "note",
        "symbol"
      ],
      "title": "Note Heart"
    };
    icon_note_heart_2_svg_default = meta676;
  }
});

// lib/meta/icon_note-heart.svg.ts
var icon_note_heart_svg_exports = {};
__export(icon_note_heart_svg_exports, {
  default: () => icon_note_heart_svg_default,
  meta: () => meta677
});
var meta677, icon_note_heart_svg_default;
var init_icon_note_heart_svg = __esm({
  "lib/meta/icon_note-heart.svg.ts"() {
    meta677 = {
      "description": "The note-heart icon is a representation of a heart shape commonly used to symbolize love and affection. It combines the visual of a heart with a sheet of paper, suggesting a message or expression of sentiment.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "love",
        "affection",
        "Valentine's Day",
        "message",
        "note",
        "communication",
        "emoticon",
        "romance",
        "card",
        "heart"
      ],
      "title": "Note Heart"
    };
    icon_note_heart_svg_default = meta677;
  }
});

// lib/meta/icon_note-info-2.svg.ts
var icon_note_info_2_svg_exports = {};
__export(icon_note_info_2_svg_exports, {
  default: () => icon_note_info_2_svg_default,
  meta: () => meta678
});
var meta678, icon_note_info_2_svg_default;
var init_icon_note_info_2_svg = __esm({
  "lib/meta/icon_note-info-2.svg.ts"() {
    meta678 = {
      "description": "An informational note icon with the number 2, indicating additional information or details related to a specific topic.",
      "category": [
        "Interface"
      ],
      "tag": [
        "note",
        "info",
        "information",
        "details",
        "additional",
        "data",
        "ui",
        "notebook",
        "reminder",
        "annotate"
      ],
      "title": "Note Info 2"
    };
    icon_note_info_2_svg_default = meta678;
  }
});

// lib/meta/icon_note-info.svg.ts
var icon_note_info_svg_exports = {};
__export(icon_note_info_svg_exports, {
  default: () => icon_note_info_svg_default,
  meta: () => meta679
});
var meta679, icon_note_info_svg_default;
var init_icon_note_info_svg = __esm({
  "lib/meta/icon_note-info.svg.ts"() {
    meta679 = {
      "description": "A note-info icon typically represents information or notes. It is commonly used to indicate helpful information or additional details.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "note",
        "info",
        "information",
        "details",
        "message",
        "communication",
        "notification",
        "notebook",
        "reminder",
        "alert"
      ],
      "title": "Note Info"
    };
    icon_note_info_svg_default = meta679;
  }
});

// lib/meta/icon_note-invisible 2.svg.ts
var icon_note_invisible_2_svg_exports = {};
__export(icon_note_invisible_2_svg_exports, {
  default: () => icon_note_invisible_2_svg_default,
  meta: () => meta680
});
var meta680, icon_note_invisible_2_svg_default;
var init_icon_note_invisible_2_svg = __esm({
  "lib/meta/icon_note-invisible 2.svg.ts"() {
    meta680 = {
      "description": "A hidden or invisible note icon for user interface design. Represents a note that is not visible or hidden from view.",
      "category": [
        "Interface"
      ],
      "tag": [
        "invisible",
        "note",
        "memo",
        "hidden",
        "message",
        "notification",
        "communication",
        "UI",
        "user interface",
        "design"
      ],
      "title": "Note Invisible 2"
    };
    icon_note_invisible_2_svg_default = meta680;
  }
});

// lib/meta/icon_note-invisible.svg.ts
var icon_note_invisible_svg_exports = {};
__export(icon_note_invisible_svg_exports, {
  default: () => icon_note_invisible_svg_default,
  meta: () => meta681
});
var meta681, icon_note_invisible_svg_default;
var init_icon_note_invisible_svg = __esm({
  "lib/meta/icon_note-invisible.svg.ts"() {
    meta681 = {
      "description": "An invisible note icon that signifies hidden or unseen information.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "invisible note",
        "hidden information",
        "unseen",
        "concealed",
        "secret",
        "stealth",
        "silent",
        "private",
        "unknown",
        "undisclosed"
      ],
      "title": "Note Invisible"
    };
    icon_note_invisible_svg_default = meta681;
  }
});

// lib/meta/icon_note-multiply 2.svg.ts
var icon_note_multiply_2_svg_exports = {};
__export(icon_note_multiply_2_svg_exports, {
  default: () => icon_note_multiply_2_svg_default,
  meta: () => meta682
});
var meta682, icon_note_multiply_2_svg_default;
var init_icon_note_multiply_2_svg = __esm({
  "lib/meta/icon_note-multiply 2.svg.ts"() {
    meta682 = {
      "description": "The 'note-multiply 2' icon is a UI icon depicting two overlapping notes with a multiplication sign, representing a note-taking or document editing action.",
      "category": [
        "Interface"
      ],
      "tag": [
        "notes",
        "multiply",
        "edit",
        "document",
        "interface",
        "UI",
        "edit",
        "notes"
      ],
      "title": "Note Multiply 2"
    };
    icon_note_multiply_2_svg_default = meta682;
  }
});

// lib/meta/icon_note-multiply.svg.ts
var icon_note_multiply_svg_exports = {};
__export(icon_note_multiply_svg_exports, {
  default: () => icon_note_multiply_svg_default,
  meta: () => meta683
});
var meta683, icon_note_multiply_svg_default;
var init_icon_note_multiply_svg = __esm({
  "lib/meta/icon_note-multiply.svg.ts"() {
    meta683 = {
      "description": "An icon of a note with a multiplication symbol, representing a concept of mathematical notes or calculations. Can be used in educational or productivity-related interfaces.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "note multiply",
        "mathematics",
        "calculation",
        "education",
        "productivity",
        "study",
        "multiply",
        "notation",
        "symbol",
        "interface"
      ],
      "title": "Note Multiply"
    };
    icon_note_multiply_svg_default = meta683;
  }
});

// lib/meta/icon_note-question-mark-2.svg.ts
var icon_note_question_mark_2_svg_exports = {};
__export(icon_note_question_mark_2_svg_exports, {
  default: () => icon_note_question_mark_2_svg_default,
  meta: () => meta684
});
var meta684, icon_note_question_mark_2_svg_default;
var init_icon_note_question_mark_2_svg = __esm({
  "lib/meta/icon_note-question-mark-2.svg.ts"() {
    meta684 = {
      "description": "An icon of a note with a question mark, typically used to represent help or FAQs in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "note",
        "question mark",
        "help",
        "FAQs",
        "information",
        "communication",
        "UI",
        "query",
        "inquiry",
        "advice"
      ],
      "title": "Note Question Mark 2"
    };
    icon_note_question_mark_2_svg_default = meta684;
  }
});

// lib/meta/icon_note-question-mark.svg.ts
var icon_note_question_mark_svg_exports = {};
__export(icon_note_question_mark_svg_exports, {
  default: () => icon_note_question_mark_svg_default,
  meta: () => meta685
});
var meta685, icon_note_question_mark_svg_default;
var init_icon_note_question_mark_svg = __esm({
  "lib/meta/icon_note-question-mark.svg.ts"() {
    meta685 = {
      "description": "A note icon with a question mark, indicating a piece of information that requires attention or clarification.",
      "category": [
        "Interface"
      ],
      "tag": [
        "note",
        "question mark",
        "information",
        "attention",
        "message",
        "query",
        "help",
        "communication",
        "notification",
        "alert"
      ],
      "title": "Note with Question Mark"
    };
    icon_note_question_mark_svg_default = meta685;
  }
});

// lib/meta/icon_note-search 2.svg.ts
var icon_note_search_2_svg_exports = {};
__export(icon_note_search_2_svg_exports, {
  default: () => icon_note_search_2_svg_default,
  meta: () => meta686
});
var meta686, icon_note_search_2_svg_default;
var init_icon_note_search_2_svg = __esm({
  "lib/meta/icon_note-search 2.svg.ts"() {
    meta686 = {
      "description": "The note-search 2 icon is a visual representation of a magnifying glass searching through a document or note. This icon is commonly used in user interfaces to indicate search functionality within notes or documents.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "search",
        "document",
        "note",
        "find",
        "magnifying glass",
        "searching",
        "user interface",
        "information",
        "lookup",
        "query"
      ],
      "title": "Note Search 2"
    };
    icon_note_search_2_svg_default = meta686;
  }
});

// lib/meta/icon_note-search.svg.ts
var icon_note_search_svg_exports = {};
__export(icon_note_search_svg_exports, {
  default: () => icon_note_search_svg_default,
  meta: () => meta687
});
var meta687, icon_note_search_svg_default;
var init_icon_note_search_svg = __esm({
  "lib/meta/icon_note-search.svg.ts"() {
    meta687 = {
      "description": "The note-search icon is used to represent a search function within a note-taking application or feature, allowing users to quickly find specific notes using keywords or phrases.",
      "category": [
        "Interface"
      ],
      "tag": [
        "search",
        "note",
        "query",
        "find",
        "lookup",
        "research",
        "information",
        "tool",
        "document"
      ],
      "title": "Note Search"
    };
    icon_note_search_svg_default = meta687;
  }
});

// lib/meta/icon_note-star 2.svg.ts
var icon_note_star_2_svg_exports = {};
__export(icon_note_star_2_svg_exports, {
  default: () => icon_note_star_2_svg_default,
  meta: () => meta688
});
var meta688, icon_note_star_2_svg_default;
var init_icon_note_star_2_svg = __esm({
  "lib/meta/icon_note-star 2.svg.ts"() {
    meta688 = {
      "description": "Icon representing a starred note, indicating importance or special attention. This icon is commonly used in interfaces to denote favorited items or important notes.",
      "category": [
        "Interface"
      ],
      "tag": [
        "star",
        "note",
        "importance",
        "favorite",
        "attention",
        "mark",
        "interface",
        "symbol",
        "important",
        "highlight"
      ],
      "title": "Note Star 2"
    };
    icon_note_star_2_svg_default = meta688;
  }
});

// lib/meta/icon_note-star.svg.ts
var icon_note_star_svg_exports = {};
__export(icon_note_star_svg_exports, {
  default: () => icon_note_star_svg_default,
  meta: () => meta689
});
var meta689, icon_note_star_svg_default;
var init_icon_note_star_svg = __esm({
  "lib/meta/icon_note-star.svg.ts"() {
    meta689 = {
      "description": "A star symbol often used to indicate importance or to highlight something in a note or document.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "star",
        "note",
        "importance",
        "highlight",
        "favorite",
        "marker",
        "reminder",
        "notation",
        "bookmark",
        "ui"
      ],
      "title": "Note Star"
    };
    icon_note_star_svg_default = meta689;
  }
});

// lib/meta/icon_note-subtract 2.svg.ts
var icon_note_subtract_2_svg_exports = {};
__export(icon_note_subtract_2_svg_exports, {
  default: () => icon_note_subtract_2_svg_default,
  meta: () => meta690
});
var meta690, icon_note_subtract_2_svg_default;
var init_icon_note_subtract_2_svg = __esm({
  "lib/meta/icon_note-subtract 2.svg.ts"() {
    meta690 = {
      "description": "A subtraction symbol inside a note icon, indicating a reduction or removal of content. This icon is commonly used in user interfaces to represent the action of removing a note or information.",
      "category": [
        "Interface"
      ],
      "tag": [
        "subtract",
        "note",
        "remove",
        "interface",
        "edit",
        "update",
        "delete",
        "ui",
        "symbol",
        "communication"
      ],
      "title": "Note Subtract"
    };
    icon_note_subtract_2_svg_default = meta690;
  }
});

// lib/meta/icon_note-subtract.svg.ts
var icon_note_subtract_svg_exports = {};
__export(icon_note_subtract_svg_exports, {
  default: () => icon_note_subtract_svg_default,
  meta: () => meta691
});
var meta691, icon_note_subtract_svg_default;
var init_icon_note_subtract_svg = __esm({
  "lib/meta/icon_note-subtract.svg.ts"() {
    meta691 = {
      "description": "An icon depicting the subtraction of a note or document. It may symbolize removing or deleting a written note or text.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "note",
        "subtract",
        "remove",
        "delete",
        "text",
        "paper",
        "edit",
        "erase",
        "ui",
        "writing"
      ],
      "title": "Note Subtract"
    };
    icon_note_subtract_svg_default = meta691;
  }
});

// lib/meta/icon_note-visible 2.svg.ts
var icon_note_visible_2_svg_exports = {};
__export(icon_note_visible_2_svg_exports, {
  default: () => icon_note_visible_2_svg_default,
  meta: () => meta692
});
var meta692, icon_note_visible_2_svg_default;
var init_icon_note_visible_2_svg = __esm({
  "lib/meta/icon_note-visible 2.svg.ts"() {
    meta692 = {
      "description": "A visible note icon with two lines, representing a note that is viewable and contains information. This icon is commonly used in user interfaces to indicate the presence of notes or messages.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "note",
        "visible",
        "viewable",
        "information",
        "message",
        "communication",
        "user interface",
        "text",
        "note-taking",
        "documentation"
      ],
      "title": "Note Visible 2"
    };
    icon_note_visible_2_svg_default = meta692;
  }
});

// lib/meta/icon_note-visible.svg.ts
var icon_note_visible_svg_exports = {};
__export(icon_note_visible_svg_exports, {
  default: () => icon_note_visible_svg_default,
  meta: () => meta693
});
var meta693, icon_note_visible_svg_default;
var init_icon_note_visible_svg = __esm({
  "lib/meta/icon_note-visible.svg.ts"() {
    meta693 = {
      "description": "An icon representing a visible note, typically used in user interfaces or applications to indicate the presence of a note or message that is visible or open.",
      "category": [
        "Interface"
      ],
      "tag": [
        "note",
        "message",
        "visible",
        "notification",
        "reminder",
        "communication",
        "symbol",
        "information",
        "user interface",
        "application"
      ],
      "title": "Note Visible"
    };
    icon_note_visible_svg_default = meta693;
  }
});

// lib/meta/icon_note.svg.ts
var icon_note_svg_exports = {};
__export(icon_note_svg_exports, {
  default: () => icon_note_svg_default,
  meta: () => meta694
});
var meta694, icon_note_svg_default;
var init_icon_note_svg = __esm({
  "lib/meta/icon_note.svg.ts"() {
    meta694 = {
      "description": "The note icon represents a small piece of paper with lines, typically used to write short messages or reminders. It is commonly used in user interfaces to indicate areas where users can add or view text notes.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "memo",
        "message",
        "reminder",
        "paper",
        "communication",
        "text",
        "UI",
        "notebook",
        "sticky note",
        "comment"
      ],
      "title": "Note"
    };
    icon_note_svg_default = meta694;
  }
});

// lib/meta/icon_on-target.svg.ts
var icon_on_target_svg_exports = {};
__export(icon_on_target_svg_exports, {
  default: () => icon_on_target_svg_default,
  meta: () => meta695
});
var meta695, icon_on_target_svg_default;
var init_icon_on_target_svg = __esm({
  "lib/meta/icon_on-target.svg.ts"() {
    meta695 = {
      "description": "The 'on-target' icon represents hitting the mark or achieving a goal. It can be used to signify successful completion or accuracy.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "success",
        "achievement",
        "goal",
        "accuracy",
        "completion",
        "bullseye",
        "aim",
        "hit",
        "performance",
        "accomplish"
      ],
      "title": "On Target"
    };
    icon_on_target_svg_default = meta695;
  }
});

// lib/meta/icon_paragraph.svg.ts
var icon_paragraph_svg_exports = {};
__export(icon_paragraph_svg_exports, {
  default: () => icon_paragraph_svg_default,
  meta: () => meta696
});
var meta696, icon_paragraph_svg_default;
var init_icon_paragraph_svg = __esm({
  "lib/meta/icon_paragraph.svg.ts"() {
    meta696 = {
      "description": "The paragraph icon represents a block of text or a section in a document. It is commonly used to indicate where large bodies of text begin or end.",
      "category": [
        "Interface",
        "Text",
        "Document"
      ],
      "tag": [
        "text",
        "content",
        "writing",
        "editor",
        "format",
        "article",
        "blog",
        "copy",
        "block",
        "section"
      ],
      "title": "Paragraph"
    };
    icon_paragraph_svg_default = meta696;
  }
});

// lib/meta/icon_performance 2.svg.ts
var icon_performance_2_svg_exports = {};
__export(icon_performance_2_svg_exports, {
  default: () => icon_performance_2_svg_default,
  meta: () => meta697
});
var meta697, icon_performance_2_svg_default;
var init_icon_performance_2_svg = __esm({
  "lib/meta/icon_performance 2.svg.ts"() {
    meta697 = {
      "description": "The performance 2 icon is a symbol representing performance or efficiency. It can be used to indicate high performance, optimization, or speed in user interface designs.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "efficiency",
        "speed",
        "optimization",
        "productivity",
        "technology",
        "progress",
        "data",
        "success",
        "efficient",
        "fast"
      ],
      "title": "Performance 2"
    };
    icon_performance_2_svg_default = meta697;
  }
});

// lib/meta/icon_performance.svg.ts
var icon_performance_svg_exports = {};
__export(icon_performance_svg_exports, {
  default: () => icon_performance_svg_default,
  meta: () => meta698
});
var meta698, icon_performance_svg_default;
var init_icon_performance_svg = __esm({
  "lib/meta/icon_performance.svg.ts"() {
    meta698 = {
      "description": "The performance icon is commonly used to represent speed, efficiency, and productivity. It can be used in UI design to indicate high performance levels or optimization.",
      "category": [
        "Interface"
      ],
      "tag": [
        "efficiency",
        "productivity",
        "speed",
        "optimization",
        "UI design",
        "speedometer",
        "progress",
        "achievement",
        "success",
        "fast"
      ],
      "title": "Performance"
    };
    icon_performance_svg_default = meta698;
  }
});

// lib/meta/icon_pin-tilted.svg.ts
var icon_pin_tilted_svg_exports = {};
__export(icon_pin_tilted_svg_exports, {
  default: () => icon_pin_tilted_svg_default,
  meta: () => meta699
});
var meta699, icon_pin_tilted_svg_default;
var init_icon_pin_tilted_svg = __esm({
  "lib/meta/icon_pin-tilted.svg.ts"() {
    meta699 = {
      "description": "A tilted pin icon commonly used to indicate or mark a specific location on a map.",
      "category": [
        "Interface"
      ],
      "tag": [
        "navigation",
        "location",
        "marker",
        "pointer",
        "direction",
        "indicator",
        "pin",
        "tracking",
        "gps",
        "map"
      ],
      "title": "Pin Tilted"
    };
    icon_pin_tilted_svg_default = meta699;
  }
});

// lib/meta/icon_pin.svg.ts
var icon_pin_svg_exports = {};
__export(icon_pin_svg_exports, {
  default: () => icon_pin_svg_default,
  meta: () => meta700
});
var meta700, icon_pin_svg_default;
var init_icon_pin_svg = __esm({
  "lib/meta/icon_pin.svg.ts"() {
    meta700 = {
      "description": "The pin icon represents a location marker, commonly used to indicate a specific point on a map. It is typically shaped like a dropped pin or a pushpin.",
      "category": [
        "Interface"
      ],
      "tag": [
        "map",
        "location",
        "marker",
        "navigation",
        "point of interest",
        "pointer",
        "geo",
        "position",
        "destination",
        "place"
      ],
      "title": "Pin"
    };
    icon_pin_svg_default = meta700;
  }
});

// lib/meta/icon_planner.svg.ts
var icon_planner_svg_exports = {};
__export(icon_planner_svg_exports, {
  default: () => icon_planner_svg_default,
  meta: () => meta701
});
var meta701, icon_planner_svg_default;
var init_icon_planner_svg = __esm({
  "lib/meta/icon_planner.svg.ts"() {
    meta701 = {
      "description": "The planner icon represents a tool used for organizing and managing schedules, tasks, and appointments. It is commonly used in user interface design to symbolize planning and time management.",
      "category": [
        "Interface"
      ],
      "tag": [
        "planner",
        "organization",
        "schedule",
        "task",
        "appointment",
        "time management",
        "calendar",
        "tool",
        "ui",
        "icon"
      ],
      "title": "Planner"
    };
    icon_planner_svg_default = meta701;
  }
});

// lib/meta/icon_pointer-arrow-line.svg.ts
var icon_pointer_arrow_line_svg_exports = {};
__export(icon_pointer_arrow_line_svg_exports, {
  default: () => icon_pointer_arrow_line_svg_default,
  meta: () => meta702
});
var meta702, icon_pointer_arrow_line_svg_default;
var init_icon_pointer_arrow_line_svg = __esm({
  "lib/meta/icon_pointer-arrow-line.svg.ts"() {
    meta702 = {
      "description": "The pointer arrow line icon is a simple and clean icon depicting an arrow pointer. It can be used in various user interface designs to indicate direction or focus.",
      "category": [
        "Interface"
      ],
      "tag": [
        "arrow",
        "pointer",
        "direction",
        "focus",
        "navigation",
        "ui design",
        "graphic",
        "simple",
        "clean",
        "line icon"
      ],
      "title": "Pointer Arrow Line"
    };
    icon_pointer_arrow_line_svg_default = meta702;
  }
});

// lib/meta/icon_pointer-arrow.svg.ts
var icon_pointer_arrow_svg_exports = {};
__export(icon_pointer_arrow_svg_exports, {
  default: () => icon_pointer_arrow_svg_default,
  meta: () => meta703
});
var meta703, icon_pointer_arrow_svg_default;
var init_icon_pointer_arrow_svg = __esm({
  "lib/meta/icon_pointer-arrow.svg.ts"() {
    meta703 = {
      "description": "A pointer arrow icon is used to indicate a specific direction or point of interest on a user interface. It is commonly used in navigation systems to guide users to a target.",
      "category": [
        "Interface",
        "Arrows"
      ],
      "tag": [
        "Pointer",
        "Arrow",
        "Navigation",
        "Indicator",
        "Direction",
        "Guide",
        "UI",
        "Element",
        "Symbol",
        "Design"
      ],
      "title": "Pointer Arrow"
    };
    icon_pointer_arrow_svg_default = meta703;
  }
});

// lib/meta/icon_pointer-cross.svg.ts
var icon_pointer_cross_svg_exports = {};
__export(icon_pointer_cross_svg_exports, {
  default: () => icon_pointer_cross_svg_default,
  meta: () => meta704
});
var meta704, icon_pointer_cross_svg_default;
var init_icon_pointer_cross_svg = __esm({
  "lib/meta/icon_pointer-cross.svg.ts"() {
    meta704 = {
      "description": "The pointer-cross icon is a user interface (UI) element representing a cursor or pointer with a crosshair symbol, often used to indicate a precise location or selection point.",
      "category": [
        "Interface"
      ],
      "tag": [
        "pointer",
        "crosshair",
        "selection",
        "interface",
        "cursor",
        "navigation",
        "click",
        "target",
        "position"
      ],
      "title": "Pointer Cross"
    };
    icon_pointer_cross_svg_default = meta704;
  }
});

// lib/meta/icon_pointer-hand.svg.ts
var icon_pointer_hand_svg_exports = {};
__export(icon_pointer_hand_svg_exports, {
  default: () => icon_pointer_hand_svg_default,
  meta: () => meta705
});
var meta705, icon_pointer_hand_svg_default;
var init_icon_pointer_hand_svg = __esm({
  "lib/meta/icon_pointer-hand.svg.ts"() {
    meta705 = {
      "description": "A hand-shaped pointer icon commonly used in user interfaces to indicate clickable elements or links.",
      "category": [
        "Interface"
      ],
      "tag": [
        "pointer",
        "hand",
        "click",
        "cursor",
        "interface",
        "interaction",
        "website",
        "navigation",
        "button",
        "link"
      ],
      "title": "Pointer Hand"
    };
    icon_pointer_hand_svg_default = meta705;
  }
});

// lib/meta/icon_pointer-left.svg.ts
var icon_pointer_left_svg_exports = {};
__export(icon_pointer_left_svg_exports, {
  default: () => icon_pointer_left_svg_default,
  meta: () => meta706
});
var meta706, icon_pointer_left_svg_default;
var init_icon_pointer_left_svg = __esm({
  "lib/meta/icon_pointer-left.svg.ts"() {
    meta706 = {
      "description": "The pointer-left icon is commonly used to indicate a leftward direction or to navigate to the previous item or page in a user interface.",
      "category": [
        "Arrows",
        "Interface"
      ],
      "tag": [
        "navigation",
        "direction",
        "back",
        "left",
        "previous",
        "arrow",
        "button",
        "click",
        "pointer"
      ],
      "title": "Pointer Left"
    };
    icon_pointer_left_svg_default = meta706;
  }
});

// lib/meta/icon_pointer-mouse.svg.ts
var icon_pointer_mouse_svg_exports = {};
__export(icon_pointer_mouse_svg_exports, {
  default: () => icon_pointer_mouse_svg_default,
  meta: () => meta707
});
var meta707, icon_pointer_mouse_svg_default;
var init_icon_pointer_mouse_svg = __esm({
  "lib/meta/icon_pointer-mouse.svg.ts"() {
    meta707 = {
      "description": "A mouse pointer is a graphical image that moves as you move the mouse, typically used to interact with computer software by clicking on buttons, links, or other elements on the screen.",
      "category": [
        "Interface"
      ],
      "tag": [
        "computer",
        "technology",
        "click",
        "cursor",
        "interaction",
        "user interface",
        "web design",
        "digital",
        "pointing",
        "navigation"
      ],
      "title": "Pointer Mouse"
    };
    icon_pointer_mouse_svg_default = meta707;
  }
});

// lib/meta/icon_pointer-pen.svg.ts
var icon_pointer_pen_svg_exports = {};
__export(icon_pointer_pen_svg_exports, {
  default: () => icon_pointer_pen_svg_default,
  meta: () => meta708
});
var meta708, icon_pointer_pen_svg_default;
var init_icon_pointer_pen_svg = __esm({
  "lib/meta/icon_pointer-pen.svg.ts"() {
    meta708 = {
      "description": "The pointer-pen icon is a combination of a pointer and a pen, symbolizing the act of pointing and writing. It is commonly used in user interface design to indicate selecting and editing functionalities.",
      "category": [
        "Interface"
      ],
      "tag": [
        "pointer",
        "pen",
        "select",
        "edit",
        "write",
        "design",
        "user interface",
        "tool",
        "click",
        "annotate"
      ],
      "title": "Pointer Pen"
    };
    icon_pointer_pen_svg_default = meta708;
  }
});

// lib/meta/icon_pointer-text.svg.ts
var icon_pointer_text_svg_exports = {};
__export(icon_pointer_text_svg_exports, {
  default: () => icon_pointer_text_svg_default,
  meta: () => meta709
});
var meta709, icon_pointer_text_svg_default;
var init_icon_pointer_text_svg = __esm({
  "lib/meta/icon_pointer-text.svg.ts"() {
    meta709 = {
      "description": "The pointer-text icon represents a cursor or pointer used for selecting and editing text in user interfaces. It is commonly used in applications and websites to indicate where text input can be made.",
      "category": [
        "Interface",
        "Text"
      ],
      "tag": [
        "cursor",
        "selection",
        "editing",
        "input",
        "user interface",
        "applications",
        "websites",
        "interactive",
        "pointing",
        "click"
      ],
      "title": "Pointer Text"
    };
    icon_pointer_text_svg_default = meta709;
  }
});

// lib/meta/icon_question-mark-fat.svg.ts
var icon_question_mark_fat_svg_exports = {};
__export(icon_question_mark_fat_svg_exports, {
  default: () => icon_question_mark_fat_svg_default,
  meta: () => meta710
});
var meta710, icon_question_mark_fat_svg_default;
var init_icon_question_mark_fat_svg = __esm({
  "lib/meta/icon_question-mark-fat.svg.ts"() {
    meta710 = {
      "description": "A fat style question mark icon commonly used in user interface designs.",
      "category": [
        "Interface"
      ],
      "tag": [
        "question mark",
        "fat style",
        "user interface",
        "design",
        "help",
        "information",
        "query",
        "punctuation",
        "icon",
        "symbol"
      ],
      "title": "Question Mark Fat"
    };
    icon_question_mark_fat_svg_default = meta710;
  }
});

// lib/meta/icon_question-mark-l.svg.ts
var icon_question_mark_l_svg_exports = {};
__export(icon_question_mark_l_svg_exports, {
  default: () => icon_question_mark_l_svg_default,
  meta: () => meta711
});
var meta711, icon_question_mark_l_svg_default;
var init_icon_question_mark_l_svg = __esm({
  "lib/meta/icon_question-mark-l.svg.ts"() {
    meta711 = {
      "description": "A simple question mark icon designed in a modern and sleek style. Perfect for use in user interface designs to indicate help, support, or FAQs.",
      "category": [
        "Interface"
      ],
      "tag": [
        "question mark",
        "help",
        "support",
        "FAQ",
        "UI",
        "user interface",
        "information",
        "query",
        "unknown",
        "puzzle"
      ],
      "title": "Question Mark L"
    };
    icon_question_mark_l_svg_default = meta711;
  }
});

// lib/meta/icon_question-mark-m.svg.ts
var icon_question_mark_m_svg_exports = {};
__export(icon_question_mark_m_svg_exports, {
  default: () => icon_question_mark_m_svg_default,
  meta: () => meta712
});
var meta712, icon_question_mark_m_svg_default;
var init_icon_question_mark_m_svg = __esm({
  "lib/meta/icon_question-mark-m.svg.ts"() {
    meta712 = {
      "description": "This icon represents a question mark enclosed in a circle, commonly used to indicate an unknown or unclear situation. It is often used in user interfaces to prompt the user for help or further information.",
      "category": [
        "Interface"
      ],
      "tag": [
        "question mark",
        "help",
        "information",
        "unclear",
        "user interface",
        "query",
        "problem",
        "solution",
        "FAQ",
        "support"
      ],
      "title": "Question Mark Circle"
    };
    icon_question_mark_m_svg_default = meta712;
  }
});

// lib/meta/icon_question-mark-s.svg.ts
var icon_question_mark_s_svg_exports = {};
__export(icon_question_mark_s_svg_exports, {
  default: () => icon_question_mark_s_svg_default,
  meta: () => meta713
});
var meta713, icon_question_mark_s_svg_default;
var init_icon_question_mark_s_svg = __esm({
  "lib/meta/icon_question-mark-s.svg.ts"() {
    meta713 = {
      "description": "A simple question mark icon in a circle, commonly used to indicate a help or information section in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "question mark",
        "help",
        "information",
        "ui",
        "user interface",
        "query",
        "support",
        "uncertainty",
        "interrogation",
        "punctuation"
      ],
      "title": "Question Mark S"
    };
    icon_question_mark_s_svg_default = meta713;
  }
});

// lib/meta/icon_remove-lines.svg.ts
var icon_remove_lines_svg_exports = {};
__export(icon_remove_lines_svg_exports, {
  default: () => icon_remove_lines_svg_default,
  meta: () => meta714
});
var meta714, icon_remove_lines_svg_default;
var init_icon_remove_lines_svg = __esm({
  "lib/meta/icon_remove-lines.svg.ts"() {
    meta714 = {
      "description": "The remove-lines icon represents a design element with multiple lines that can be used for the removal or deletion of content. It is often used in user interfaces for editing or deleting options.",
      "category": [
        "Interface"
      ],
      "tag": [
        "delete",
        "edit",
        "remove",
        "clean",
        "erase",
        "interface",
        "lines",
        "symbol",
        "design",
        "ui"
      ],
      "title": "Remove Lines"
    };
    icon_remove_lines_svg_default = meta714;
  }
});

// lib/meta/icon_search-fat.svg.ts
var icon_search_fat_svg_exports = {};
__export(icon_search_fat_svg_exports, {
  default: () => icon_search_fat_svg_default,
  meta: () => meta715
});
var meta715, icon_search_fat_svg_default;
var init_icon_search_fat_svg = __esm({
  "lib/meta/icon_search-fat.svg.ts"() {
    meta715 = {
      "description": "A bold and thick search icon, ideal for user interfaces and navigation bars.",
      "category": [
        "Interface"
      ],
      "tag": [
        "search",
        "icon",
        "fat",
        "bold",
        "thick",
        "user interface",
        "navigation",
        "bar",
        "find",
        "discover"
      ],
      "title": "Search Fat"
    };
    icon_search_fat_svg_default = meta715;
  }
});

// lib/meta/icon_search-l.svg.ts
var icon_search_l_svg_exports = {};
__export(icon_search_l_svg_exports, {
  default: () => icon_search_l_svg_default,
  meta: () => meta716
});
var meta716, icon_search_l_svg_default;
var init_icon_search_l_svg = __esm({
  "lib/meta/icon_search-l.svg.ts"() {
    meta716 = {
      "description": "The search-l icon represents a design of a magnifying glass often used to symbolize a search function.",
      "category": [
        "Interface"
      ],
      "tag": [
        "search",
        "find",
        "lookup",
        "magnify",
        "icon",
        "ui",
        "search bar",
        "web design",
        "internet",
        "search tool"
      ],
      "title": "Search Icon"
    };
    icon_search_l_svg_default = meta716;
  }
});

// lib/meta/icon_search-m.svg.ts
var icon_search_m_svg_exports = {};
__export(icon_search_m_svg_exports, {
  default: () => icon_search_m_svg_default,
  meta: () => meta717
});
var meta717, icon_search_m_svg_default;
var init_icon_search_m_svg = __esm({
  "lib/meta/icon_search-m.svg.ts"() {
    meta717 = {
      "description": "A magnifying glass icon depicting a search symbol. Ideal for use in search bars or search functionalities in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "search",
        "magnifying glass",
        "search bar",
        "find",
        "query",
        "lookup",
        "exploration",
        "search engine",
        "web design",
        "user interface"
      ],
      "title": "Search Magnifier"
    };
    icon_search_m_svg_default = meta717;
  }
});

// lib/meta/icon_search-small.svg.ts
var icon_search_small_svg_exports = {};
__export(icon_search_small_svg_exports, {
  default: () => icon_search_small_svg_default,
  meta: () => meta718
});
var meta718, icon_search_small_svg_default;
var init_icon_search_small_svg = __esm({
  "lib/meta/icon_search-small.svg.ts"() {
    meta718 = {
      "description": "The search-small icon is a small magnifying glass commonly used to indicate a search function in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "search",
        "find",
        "magnifying glass",
        "query",
        "navigation",
        "small",
        "input",
        "lookup",
        "seek",
        "discover"
      ],
      "title": "Search Small"
    };
    icon_search_small_svg_default = meta718;
  }
});

// lib/meta/icon_section.svg.ts
var icon_section_svg_exports = {};
__export(icon_section_svg_exports, {
  default: () => icon_section_svg_default,
  meta: () => meta719
});
var meta719, icon_section_svg_default;
var init_icon_section_svg = __esm({
  "lib/meta/icon_section.svg.ts"() {
    meta719 = {
      "description": "A simple icon indicating a section or a division within a user interface.",
      "category": [
        "Interface"
      ],
      "tag": [
        "divider",
        "user interface",
        "division",
        "segment",
        "categorization",
        "navigation",
        "structure",
        "menu",
        "partition",
        "segmentation"
      ],
      "title": "Section"
    };
    icon_section_svg_default = meta719;
  }
});

// lib/meta/icon_settings 2.svg.ts
var icon_settings_2_svg_exports = {};
__export(icon_settings_2_svg_exports, {
  default: () => icon_settings_2_svg_default,
  meta: () => meta720
});
var meta720, icon_settings_2_svg_default;
var init_icon_settings_2_svg = __esm({
  "lib/meta/icon_settings 2.svg.ts"() {
    meta720 = {
      "description": "The settings 2 icon is commonly used in user interfaces to indicate a menu for configuration options. It typically consists of a gear or cogwheel symbol.",
      "category": [
        "Interface"
      ],
      "tag": [
        "settings",
        "gear",
        "cogwheel",
        "options",
        "menu",
        "configuration",
        "preferences",
        "interface",
        "UI",
        "user interface"
      ],
      "title": "Settings 2"
    };
    icon_settings_2_svg_default = meta720;
  }
});

// lib/meta/icon_settings 3.svg.ts
var icon_settings_3_svg_exports = {};
__export(icon_settings_3_svg_exports, {
  default: () => icon_settings_3_svg_default,
  meta: () => meta721
});
var meta721, icon_settings_3_svg_default;
var init_icon_settings_3_svg = __esm({
  "lib/meta/icon_settings 3.svg.ts"() {
    meta721 = {
      "description": "The 'settings 3' icon is commonly used to represent the settings or preferences menu in a user interface. It typically signifies the option to customize and control various aspects of a software application or device.",
      "category": [
        "Interface"
      ],
      "tag": [
        "settings",
        "preferences",
        "menu",
        "control",
        "customize",
        "options",
        "interface",
        "software",
        "settings menu",
        "preferences menu"
      ],
      "title": "Settings Three"
    };
    icon_settings_3_svg_default = meta721;
  }
});

// lib/meta/icon_settings 4.svg.ts
var icon_settings_4_svg_exports = {};
__export(icon_settings_4_svg_exports, {
  default: () => icon_settings_4_svg_default,
  meta: () => meta722
});
var meta722, icon_settings_4_svg_default;
var init_icon_settings_4_svg = __esm({
  "lib/meta/icon_settings 4.svg.ts"() {
    meta722 = {
      "description": "The settings 4 icon represents a gear or cogwheel often used to symbolize settings or options in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "gear",
        "cogwheel",
        "options",
        "preferences",
        "configuration",
        "adjustments",
        "controls",
        "settings",
        "menu",
        "user interface"
      ],
      "title": "Settings 4"
    };
    icon_settings_4_svg_default = meta722;
  }
});

// lib/meta/icon_settings 5.svg.ts
var icon_settings_5_svg_exports = {};
__export(icon_settings_5_svg_exports, {
  default: () => icon_settings_5_svg_default,
  meta: () => meta723
});
var meta723, icon_settings_5_svg_default;
var init_icon_settings_5_svg = __esm({
  "lib/meta/icon_settings 5.svg.ts"() {
    meta723 = {
      "description": "Settings 5 icon is a simple graphic depicting five circular settings gears. It is commonly used in user interface designs to represent a settings or options menu.",
      "category": [
        "Interface"
      ],
      "tag": [
        "settings",
        "gears",
        "options",
        "menu",
        "interface",
        "configuration",
        "preferences",
        "tools",
        "control",
        "customize"
      ],
      "title": "Settings Five"
    };
    icon_settings_5_svg_default = meta723;
  }
});

// lib/meta/icon_settings.svg.ts
var icon_settings_svg_exports = {};
__export(icon_settings_svg_exports, {
  default: () => icon_settings_svg_default,
  meta: () => meta724
});
var meta724, icon_settings_svg_default;
var init_icon_settings_svg = __esm({
  "lib/meta/icon_settings.svg.ts"() {
    meta724 = {
      "description": "An icon representing settings, typically used to access or modify various options and preferences.",
      "category": [
        "Interface"
      ],
      "tag": [
        "options",
        "preferences",
        "controls",
        "configuration",
        "setup",
        "gear",
        "menu",
        "adjust",
        "customization",
        "tools"
      ],
      "title": "Settings"
    };
    icon_settings_svg_default = meta724;
  }
});

// lib/meta/icon_speech-balloon-2.svg.ts
var icon_speech_balloon_2_svg_exports = {};
__export(icon_speech_balloon_2_svg_exports, {
  default: () => icon_speech_balloon_2_svg_default,
  meta: () => meta725
});
var meta725, icon_speech_balloon_2_svg_default;
var init_icon_speech_balloon_2_svg = __esm({
  "lib/meta/icon_speech-balloon-2.svg.ts"() {
    meta725 = {
      "description": "A speech balloon icon indicating conversation or dialogue, commonly used in user interfaces for messaging or chat features.",
      "category": [
        "Interface"
      ],
      "tag": [
        "communication",
        "chat",
        "conversation",
        "dialogue",
        "speech",
        "bubble",
        "message",
        "messaging",
        "talk",
        "user interface"
      ],
      "title": "Speech Balloon 2"
    };
    icon_speech_balloon_2_svg_default = meta725;
  }
});

// lib/meta/icon_speech-balloon-square 2.svg.ts
var icon_speech_balloon_square_2_svg_exports = {};
__export(icon_speech_balloon_square_2_svg_exports, {
  default: () => icon_speech_balloon_square_2_svg_default,
  meta: () => meta726
});
var meta726, icon_speech_balloon_square_2_svg_default;
var init_icon_speech_balloon_square_2_svg = __esm({
  "lib/meta/icon_speech-balloon-square 2.svg.ts"() {
    meta726 = {
      "description": "The speech balloon square 2 icon is a UI element representing a message or chat bubble. It can be used in messaging apps, social media platforms, or communication-related interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "speech bubble",
        "chat",
        "message",
        "communication",
        "conversation",
        "notification",
        "messaging",
        "dialogue",
        "texting",
        "talk"
      ],
      "title": "Speech Balloon Square 2"
    };
    icon_speech_balloon_square_2_svg_default = meta726;
  }
});

// lib/meta/icon_speech-balloon-square copy.svg.ts
var icon_speech_balloon_square_copy_svg_exports = {};
__export(icon_speech_balloon_square_copy_svg_exports, {
  default: () => icon_speech_balloon_square_copy_svg_default,
  meta: () => meta727
});
var meta727, icon_speech_balloon_square_copy_svg_default;
var init_icon_speech_balloon_square_copy_svg = __esm({
  "lib/meta/icon_speech-balloon-square copy.svg.ts"() {
    meta727 = {
      "description": "This icon depicts a square speech balloon, commonly used to represent dialogue or comments in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "communication",
        "conversation",
        "dialogue",
        "chat",
        "bubble",
        "comments",
        "messaging",
        "speech",
        "talk",
        "interact"
      ],
      "title": "Speech Balloon Square Copy"
    };
    icon_speech_balloon_square_copy_svg_default = meta727;
  }
});

// lib/meta/icon_speech-balloon-square-text.svg.ts
var icon_speech_balloon_square_text_svg_exports = {};
__export(icon_speech_balloon_square_text_svg_exports, {
  default: () => icon_speech_balloon_square_text_svg_default,
  meta: () => meta728
});
var meta728, icon_speech_balloon_square_text_svg_default;
var init_icon_speech_balloon_square_text_svg = __esm({
  "lib/meta/icon_speech-balloon-square-text.svg.ts"() {
    meta728 = {
      "description": "The speech balloon square text icon is a graphical representation of a square-shaped speech bubble commonly used to display short snippets of text in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "communication",
        "message",
        "chat",
        "dialogue",
        "text bubble",
        "speech",
        "conversation",
        "notification",
        "talk",
        "messaging"
      ],
      "title": "Speech Balloon Square Text"
    };
    icon_speech_balloon_square_text_svg_default = meta728;
  }
});

// lib/meta/icon_speech-balloon-square.svg.ts
var icon_speech_balloon_square_svg_exports = {};
__export(icon_speech_balloon_square_svg_exports, {
  default: () => icon_speech_balloon_square_svg_default,
  meta: () => meta729
});
var meta729, icon_speech_balloon_square_svg_default;
var init_icon_speech_balloon_square_svg = __esm({
  "lib/meta/icon_speech-balloon-square.svg.ts"() {
    meta729 = {
      "description": "The speech-balloon-square icon is a square-shaped speech balloon commonly used in user interface designs to represent messages or chat conversations.",
      "category": [
        "Interface"
      ],
      "tag": [
        "speech balloon",
        "chat",
        "conversation",
        "user interface",
        "communication",
        "messaging",
        "notification",
        "dialogue",
        "talk",
        "texting"
      ],
      "title": "Speech Balloon Square"
    };
    icon_speech_balloon_square_svg_default = meta729;
  }
});

// lib/meta/icon_speech-balloon.svg.ts
var icon_speech_balloon_svg_exports = {};
__export(icon_speech_balloon_svg_exports, {
  default: () => icon_speech_balloon_svg_default,
  meta: () => meta730
});
var meta730, icon_speech_balloon_svg_default;
var init_icon_speech_balloon_svg = __esm({
  "lib/meta/icon_speech-balloon.svg.ts"() {
    meta730 = {
      "description": "A speech balloon icon commonly used to represent communication, chatting, messaging, or commenting in user interface designs.",
      "category": [
        "Interface"
      ],
      "tag": [
        "communication",
        "chatting",
        "messaging",
        "commenting",
        "dialogue",
        "conversation",
        "talk",
        "bubble",
        "texting",
        "interaction"
      ],
      "title": "Speech Balloon"
    };
    icon_speech_balloon_svg_default = meta730;
  }
});

// lib/meta/icon_speech-balloons.svg.ts
var icon_speech_balloons_svg_exports = {};
__export(icon_speech_balloons_svg_exports, {
  default: () => icon_speech_balloons_svg_default,
  meta: () => meta731
});
var meta731, icon_speech_balloons_svg_default;
var init_icon_speech_balloons_svg = __esm({
  "lib/meta/icon_speech-balloons.svg.ts"() {
    meta731 = {
      "description": "The speech balloons icon is commonly used in user interfaces to represent conversations, dialogues or messaging systems. It typically symbolizes communication and interactions between users.",
      "category": [
        "Interface"
      ],
      "tag": [
        "communication",
        "conversations",
        "dialogue",
        "messages",
        "chat",
        "conversation bubbles",
        "talk",
        "speech",
        "user interface",
        "messaging"
      ],
      "title": "Speech Balloons"
    };
    icon_speech_balloons_svg_default = meta731;
  }
});

// lib/meta/icon_squared-add.svg.ts
var icon_squared_add_svg_exports = {};
__export(icon_squared_add_svg_exports, {
  default: () => icon_squared_add_svg_default,
  meta: () => meta732
});
var meta732, icon_squared_add_svg_default;
var init_icon_squared_add_svg = __esm({
  "lib/meta/icon_squared-add.svg.ts"() {
    meta732 = {
      "description": "Squared add icon is a symbol representing the action of adding or creating something new. It typically features a square shape with a plus sign in the center.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "addition",
        "creation",
        "plus sign",
        "new",
        "UI",
        "button",
        "interface",
        "square",
        "icon",
        "symbol"
      ],
      "title": "Squared Add"
    };
    icon_squared_add_svg_default = meta732;
  }
});

// lib/meta/icon_squared-broken-heart.svg.ts
var icon_squared_broken_heart_svg_exports = {};
__export(icon_squared_broken_heart_svg_exports, {
  default: () => icon_squared_broken_heart_svg_default,
  meta: () => meta733
});
var meta733, icon_squared_broken_heart_svg_default;
var init_icon_squared_broken_heart_svg = __esm({
  "lib/meta/icon_squared-broken-heart.svg.ts"() {
    meta733 = {
      "description": "An icon depicting a heart that is broken into two pieces, symbolizing heartbreak or sadness. This icon is commonly used in user interfaces to convey emotions related to love and relationships.",
      "category": [
        "UI"
      ],
      "tag": [
        "heartbreak",
        "love",
        "relationships",
        "emotions",
        "sadness",
        "unhappy",
        "broken heart",
        "symbol",
        "UI",
        "icon"
      ],
      "title": "Squared Broken Heart"
    };
    icon_squared_broken_heart_svg_default = meta733;
  }
});

// lib/meta/icon_squared-check.svg.ts
var icon_squared_check_svg_exports = {};
__export(icon_squared_check_svg_exports, {
  default: () => icon_squared_check_svg_default,
  meta: () => meta734
});
var meta734, icon_squared_check_svg_default;
var init_icon_squared_check_svg = __esm({
  "lib/meta/icon_squared-check.svg.ts"() {
    meta734 = {
      "description": "The squared check icon represents a checkbox or confirmation. It is commonly used in user interfaces to indicate a successful action or the selection of an option.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "checkbox",
        "confirmation",
        "success",
        "done",
        "completed",
        "selected",
        "tick",
        "verified",
        "approved",
        "acknowledged"
      ],
      "title": "Squared Check"
    };
    icon_squared_check_svg_default = meta734;
  }
});

// lib/meta/icon_squared-edit.svg.ts
var icon_squared_edit_svg_exports = {};
__export(icon_squared_edit_svg_exports, {
  default: () => icon_squared_edit_svg_default,
  meta: () => meta735
});
var meta735, icon_squared_edit_svg_default;
var init_icon_squared_edit_svg = __esm({
  "lib/meta/icon_squared-edit.svg.ts"() {
    meta735 = {
      "description": "The squared-edit icon represents an edit feature in a graphical user interface. It typically signifies the ability to modify or update content within an application or software.",
      "category": [
        "Interface"
      ],
      "tag": [
        "edit",
        "update",
        "modify",
        "interface",
        "application",
        "software",
        "tool",
        "design",
        "symbol"
      ],
      "title": "Squared Edit"
    };
    icon_squared_edit_svg_default = meta735;
  }
});

// lib/meta/icon_squared-exclamation-mark.svg.ts
var icon_squared_exclamation_mark_svg_exports = {};
__export(icon_squared_exclamation_mark_svg_exports, {
  default: () => icon_squared_exclamation_mark_svg_default,
  meta: () => meta736
});
var meta736, icon_squared_exclamation_mark_svg_default;
var init_icon_squared_exclamation_mark_svg = __esm({
  "lib/meta/icon_squared-exclamation-mark.svg.ts"() {
    meta736 = {
      "description": "A squared exclamation mark icon, used in user interfaces to indicate a warning or important message.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "alert",
        "notice",
        "important",
        "caution",
        "notification",
        "information",
        "attention",
        "ui",
        "warning",
        "exclamation mark"
      ],
      "title": "Squared Exclamation Mark"
    };
    icon_squared_exclamation_mark_svg_default = meta736;
  }
});

// lib/meta/icon_squared-heart.svg.ts
var icon_squared_heart_svg_exports = {};
__export(icon_squared_heart_svg_exports, {
  default: () => icon_squared_heart_svg_default,
  meta: () => meta737
});
var meta737, icon_squared_heart_svg_default;
var init_icon_squared_heart_svg = __esm({
  "lib/meta/icon_squared-heart.svg.ts"() {
    meta737 = {
      "description": "The squared-heart icon is a symbol commonly used to represent love or affection. It features a heart shape enclosed within a square outline.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "love",
        "affection",
        "Valentine's Day",
        "emotion",
        "romance",
        "symbol",
        "relationship",
        "heart",
        "square",
        "icon"
      ],
      "title": "Squared Heart"
    };
    icon_squared_heart_svg_default = meta737;
  }
});

// lib/meta/icon_squared-info.svg.ts
var icon_squared_info_svg_exports = {};
__export(icon_squared_info_svg_exports, {
  default: () => icon_squared_info_svg_default,
  meta: () => meta738
});
var meta738, icon_squared_info_svg_default;
var init_icon_squared_info_svg = __esm({
  "lib/meta/icon_squared-info.svg.ts"() {
    meta738 = {
      "description": "A squared information icon typically used to indicate additional information or details. This icon is commonly used in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "information",
        "details",
        "UI",
        "additional",
        "square",
        "iconography",
        "user interface",
        "notification"
      ],
      "title": "Squared Info"
    };
    icon_squared_info_svg_default = meta738;
  }
});

// lib/meta/icon_squared-invisible.svg.ts
var icon_squared_invisible_svg_exports = {};
__export(icon_squared_invisible_svg_exports, {
  default: () => icon_squared_invisible_svg_default,
  meta: () => meta739
});
var meta739, icon_squared_invisible_svg_default;
var init_icon_squared_invisible_svg = __esm({
  "lib/meta/icon_squared-invisible.svg.ts"() {
    meta739 = {
      "description": "The squared invisible icon represents an invisible or hidden element in a user interface, often used for toggling visibility or hiding content. It can also convey concepts like stealth, secrecy, or transparency.",
      "category": [
        "Interface"
      ],
      "tag": [
        "invisible",
        "hidden",
        "toggle",
        "visibility",
        "stealth",
        "secrecy",
        "transparency",
        "conceal",
        "mask",
        "disguise"
      ],
      "title": "Squared Invisible"
    };
    icon_squared_invisible_svg_default = meta739;
  }
});

// lib/meta/icon_squared-multiply.svg.ts
var icon_squared_multiply_svg_exports = {};
__export(icon_squared_multiply_svg_exports, {
  default: () => icon_squared_multiply_svg_default,
  meta: () => meta740
});
var meta740, icon_squared_multiply_svg_default;
var init_icon_squared_multiply_svg = __esm({
  "lib/meta/icon_squared-multiply.svg.ts"() {
    meta740 = {
      "description": "The 'squared-multiply' icon represents a multiplication symbol enclosed within a square shape. It is commonly used in user interfaces to indicate a close or delete action.",
      "category": [
        "Interface"
      ],
      "tag": [
        "math",
        "multiplication",
        "close",
        "delete",
        "user interface",
        "symbol",
        "button",
        "action",
        "operation"
      ],
      "title": "Squared Multiply"
    };
    icon_squared_multiply_svg_default = meta740;
  }
});

// lib/meta/icon_squared-question-mark.svg.ts
var icon_squared_question_mark_svg_exports = {};
__export(icon_squared_question_mark_svg_exports, {
  default: () => icon_squared_question_mark_svg_default,
  meta: () => meta741
});
var meta741, icon_squared_question_mark_svg_default;
var init_icon_squared_question_mark_svg = __esm({
  "lib/meta/icon_squared-question-mark.svg.ts"() {
    meta741 = {
      "description": "A squared question mark icon commonly used in user interfaces to represent help, queries, and questions.",
      "category": [
        "Interface"
      ],
      "tag": [
        "UI",
        "Question mark",
        "Help",
        "Query",
        "Question",
        "Information",
        "Support",
        "Inquiry",
        "Symbol",
        "Sign"
      ],
      "title": "Squared Question Mark"
    };
    icon_squared_question_mark_svg_default = meta741;
  }
});

// lib/meta/icon_squared-search.svg.ts
var icon_squared_search_svg_exports = {};
__export(icon_squared_search_svg_exports, {
  default: () => icon_squared_search_svg_default,
  meta: () => meta742
});
var meta742, icon_squared_search_svg_default;
var init_icon_squared_search_svg = __esm({
  "lib/meta/icon_squared-search.svg.ts"() {
    meta742 = {
      "description": "The squared-search icon represents a search functionality in a squared design, suitable for use in user interface designs.",
      "category": [
        "Interface"
      ],
      "tag": [
        "search",
        "find",
        "query",
        "lookup",
        "squared",
        "UI",
        "user interface",
        "application",
        "website",
        "functionality"
      ],
      "title": "Squared Search"
    };
    icon_squared_search_svg_default = meta742;
  }
});

// lib/meta/icon_squared-star.svg.ts
var icon_squared_star_svg_exports = {};
__export(icon_squared_star_svg_exports, {
  default: () => icon_squared_star_svg_default,
  meta: () => meta743
});
var meta743, icon_squared_star_svg_default;
var init_icon_squared_star_svg = __esm({
  "lib/meta/icon_squared-star.svg.ts"() {
    meta743 = {
      "description": "The squared-star icon is a symbol featuring a star enclosed in a square shape. It represents creativity, achievement, or can be used to highlight important information in a user interface design.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "creative",
        "achievement",
        "highlight",
        "important",
        "shape",
        "star",
        "square",
        "symbol",
        "ui",
        "design"
      ],
      "title": "Squared Star"
    };
    icon_squared_star_svg_default = meta743;
  }
});

// lib/meta/icon_squared-subtract.svg.ts
var icon_squared_subtract_svg_exports = {};
__export(icon_squared_subtract_svg_exports, {
  default: () => icon_squared_subtract_svg_default,
  meta: () => meta744
});
var meta744, icon_squared_subtract_svg_default;
var init_icon_squared_subtract_svg = __esm({
  "lib/meta/icon_squared-subtract.svg.ts"() {
    meta744 = {
      "description": "An icon representing the action of subtracting or removing something in a squared design, commonly used in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "calculate",
        "operation",
        "math",
        "delete",
        "remove",
        "minus",
        "symbol",
        "button",
        "action"
      ],
      "title": "Squared Subtract"
    };
    icon_squared_subtract_svg_default = meta744;
  }
});

// lib/meta/icon_squared-visible.svg.ts
var icon_squared_visible_svg_exports = {};
__export(icon_squared_visible_svg_exports, {
  default: () => icon_squared_visible_svg_default,
  meta: () => meta745
});
var meta745, icon_squared_visible_svg_default;
var init_icon_squared_visible_svg = __esm({
  "lib/meta/icon_squared-visible.svg.ts"() {
    meta745 = {
      "description": "The icon represents a squared shape with a visible indication, often used to denote visibility or availability. It can be used in user interface designs to show that an option or feature is accessible or active.",
      "category": [
        "Interface",
        "Shapes"
      ],
      "tag": [
        "visible",
        "accessibility",
        "availability",
        "indicator",
        "active",
        "visible option",
        "user interface",
        "enabled",
        "eye",
        "show"
      ],
      "title": "Squared Visible"
    };
    icon_squared_visible_svg_default = meta745;
  }
});

// lib/meta/icon_squared.svg.ts
var icon_squared_svg_exports = {};
__export(icon_squared_svg_exports, {
  default: () => icon_squared_svg_default,
  meta: () => meta746
});
var meta746, icon_squared_svg_default;
var init_icon_squared_svg = __esm({
  "lib/meta/icon_squared.svg.ts"() {
    meta746 = {
      "description": "The squared icon represents a shape that is in the form of a square with equal sides. It is commonly used in user interface designs to indicate selections, checkboxes, or as a placeholder for icons.",
      "category": [
        "Shapes",
        "Interface"
      ],
      "tag": [
        "square",
        "geometry",
        "equal sides",
        "form",
        "user interface",
        "design",
        "selection",
        "checkbox",
        "placeholder"
      ],
      "title": "Squared"
    };
    icon_squared_svg_default = meta746;
  }
});

// lib/meta/icon_stamp.svg.ts
var icon_stamp_svg_exports = {};
__export(icon_stamp_svg_exports, {
  default: () => icon_stamp_svg_default,
  meta: () => meta747
});
var meta747, icon_stamp_svg_default;
var init_icon_stamp_svg = __esm({
  "lib/meta/icon_stamp.svg.ts"() {
    meta747 = {
      "description": "The stamp icon represents an official mark or seal that is used to certify documents, paperwork, or packages. It is often used in user interfaces to indicate approval, authentication, or completion.",
      "category": [
        "Interface",
        "Document"
      ],
      "tag": [
        "certification",
        "seal",
        "official",
        "approval",
        "verification",
        "authentication",
        "document",
        "paperwork",
        "package",
        "ui"
      ],
      "title": "Stamp"
    };
    icon_stamp_svg_default = meta747;
  }
});

// lib/meta/icon_star-fat.svg.ts
var icon_star_fat_svg_exports = {};
__export(icon_star_fat_svg_exports, {
  default: () => icon_star_fat_svg_default,
  meta: () => meta748
});
var meta748, icon_star_fat_svg_default;
var init_icon_star_fat_svg = __esm({
  "lib/meta/icon_star-fat.svg.ts"() {
    meta748 = {
      "description": "A fat star icon commonly used to represent favorites or ratings in user interfaces.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "favorite",
        "rating",
        "ui design",
        "web design",
        "fat icon",
        "star icon",
        "user interface",
        "favorite icon",
        "rating icon"
      ],
      "title": "Star Fat"
    };
    icon_star_fat_svg_default = meta748;
  }
});

// lib/meta/icon_star-l.svg.ts
var icon_star_l_svg_exports = {};
__export(icon_star_l_svg_exports, {
  default: () => icon_star_l_svg_default,
  meta: () => meta749
});
var meta749, icon_star_l_svg_default;
var init_icon_star_l_svg = __esm({
  "lib/meta/icon_star-l.svg.ts"() {
    meta749 = {
      "description": "A simple star icon representing a favorite or highly rated item. Can be used in user interfaces for rating systems or to indicate popular items.",
      "category": [
        "UI"
      ],
      "tag": [
        "favorite",
        "star",
        "rating",
        "popular",
        "UI",
        "favorite icon",
        "rating system",
        "user interface",
        "highlight"
      ],
      "title": "Star Large"
    };
    icon_star_l_svg_default = meta749;
  }
});

// lib/meta/icon_star-m.svg.ts
var icon_star_m_svg_exports = {};
__export(icon_star_m_svg_exports, {
  default: () => icon_star_m_svg_default,
  meta: () => meta750
});
var meta750, icon_star_m_svg_default;
var init_icon_star_m_svg = __esm({
  "lib/meta/icon_star-m.svg.ts"() {
    meta750 = {
      "description": "The star-m icon is a symbol of a star outlined with the letter 'm' at its center. This icon is commonly used in UI design to represent favorited or starred items.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "favorite",
        "star",
        "UI design",
        "rating",
        "outlined",
        "letter m",
        "favorite button",
        "rating system",
        "star icon",
        "user interface"
      ],
      "title": "Star with M Icon"
    };
    icon_star_m_svg_default = meta750;
  }
});

// lib/meta/icon_star-small.svg.ts
var icon_star_small_svg_exports = {};
__export(icon_star_small_svg_exports, {
  default: () => icon_star_small_svg_default,
  meta: () => meta751
});
var meta751, icon_star_small_svg_default;
var init_icon_star_small_svg = __esm({
  "lib/meta/icon_star-small.svg.ts"() {
    meta751 = {
      "description": "A small star icon commonly used to represent ratings and favorites in user interfaces.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "star",
        "favorite",
        "rating",
        "user interface",
        "ui",
        "small",
        "icon",
        "graphic",
        "design",
        "symbol"
      ],
      "title": "Star Small"
    };
    icon_star_small_svg_default = meta751;
  }
});

// lib/meta/icon_sticker.svg.ts
var icon_sticker_svg_exports = {};
__export(icon_sticker_svg_exports, {
  default: () => icon_sticker_svg_default,
  meta: () => meta752
});
var meta752, icon_sticker_svg_default;
var init_icon_sticker_svg = __esm({
  "lib/meta/icon_sticker.svg.ts"() {
    meta752 = {
      "description": "A sticker icon typically used in user interfaces to represent an interactive graphic or label that can be added to a digital image or conversation.",
      "category": [
        "UI",
        "Interface"
      ],
      "tag": [
        "label",
        "graphic",
        "add",
        "digital",
        "interactive",
        "image",
        "conversation",
        "design",
        "element",
        "sticker"
      ],
      "title": "Sticker"
    };
    icon_sticker_svg_default = meta752;
  }
});

// lib/meta/icon_stopwatch.svg.ts
var icon_stopwatch_svg_exports = {};
__export(icon_stopwatch_svg_exports, {
  default: () => icon_stopwatch_svg_default,
  meta: () => meta753
});
var meta753, icon_stopwatch_svg_default;
var init_icon_stopwatch_svg = __esm({
  "lib/meta/icon_stopwatch.svg.ts"() {
    meta753 = {
      "description": "A stopwatch icon representing a timer or countdown functionality typically used in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "timer",
        "countdown",
        "clock",
        "measurement",
        "time",
        "ui",
        "stopwatch",
        "watch",
        "deadline",
        "schedule"
      ],
      "title": "Stopwatch"
    };
    icon_stopwatch_svg_default = meta753;
  }
});

// lib/meta/icon_subtract-fat.svg.ts
var icon_subtract_fat_svg_exports = {};
__export(icon_subtract_fat_svg_exports, {
  default: () => icon_subtract_fat_svg_default,
  meta: () => meta754
});
var meta754, icon_subtract_fat_svg_default;
var init_icon_subtract_fat_svg = __esm({
  "lib/meta/icon_subtract-fat.svg.ts"() {
    meta754 = {
      "description": "The subtract-fat icon is used to represent a subtraction operation or action in a bold and clear way. It can be used in user interfaces to indicate removing or deducting something.",
      "category": [
        "Interface"
      ],
      "tag": [
        "subtract",
        "minus",
        "math",
        "operation",
        "remove",
        "deduct",
        "UI",
        "bold",
        "clear",
        "action"
      ],
      "title": "Subtract Fat"
    };
    icon_subtract_fat_svg_default = meta754;
  }
});

// lib/meta/icon_subtract-l.svg.ts
var icon_subtract_l_svg_exports = {};
__export(icon_subtract_l_svg_exports, {
  default: () => icon_subtract_l_svg_default,
  meta: () => meta755
});
var meta755, icon_subtract_l_svg_default;
var init_icon_subtract_l_svg = __esm({
  "lib/meta/icon_subtract-l.svg.ts"() {
    meta755 = {
      "description": "A subtraction or remove icon often used in user interfaces to indicate the action of subtracting or deleting. The icon features a horizontal line with a minus sign on top to represent subtraction.",
      "category": [
        "Interface"
      ],
      "tag": [
        "subtract",
        "remove",
        "minus",
        "delete",
        "math",
        "operation",
        "user interface",
        "symbol",
        "action"
      ],
      "title": "Subtract L"
    };
    icon_subtract_l_svg_default = meta755;
  }
});

// lib/meta/icon_subtract-m.svg.ts
var icon_subtract_m_svg_exports = {};
__export(icon_subtract_m_svg_exports, {
  default: () => icon_subtract_m_svg_default,
  meta: () => meta756
});
var meta756, icon_subtract_m_svg_default;
var init_icon_subtract_m_svg = __esm({
  "lib/meta/icon_subtract-m.svg.ts"() {
    meta756 = {
      "description": "The subtract-m icon is used to represent a subtraction or removal action in user interfaces. It typically symbolizes subtracting or reducing a quantity or an element from a given set.",
      "category": [
        "Interface"
      ],
      "tag": [
        "math",
        "calculation",
        "operation",
        "minus",
        "remove",
        "reduce",
        "quantity",
        "element",
        "action"
      ],
      "title": "Subtract M"
    };
    icon_subtract_m_svg_default = meta756;
  }
});

// lib/meta/icon_subtract-s.svg.ts
var icon_subtract_s_svg_exports = {};
__export(icon_subtract_s_svg_exports, {
  default: () => icon_subtract_s_svg_default,
  meta: () => meta757
});
var meta757, icon_subtract_s_svg_default;
var init_icon_subtract_s_svg = __esm({
  "lib/meta/icon_subtract-s.svg.ts"() {
    meta757 = {
      "description": "The subtract-s icon represents a symbol used to indicate the subtraction operation in user interfaces. It is commonly used in calculators, mathematics applications, and design software.",
      "category": [
        "Interface"
      ],
      "tag": [
        "subtraction",
        "mathematics",
        "calculation",
        "minus",
        "operation",
        "symbol",
        "user interface",
        "calculation",
        "icon"
      ],
      "title": "Subtract S"
    };
    icon_subtract_s_svg_default = meta757;
  }
});

// lib/meta/icon_tables.svg.ts
var icon_tables_svg_exports = {};
__export(icon_tables_svg_exports, {
  default: () => icon_tables_svg_default,
  meta: () => meta758
});
var meta758, icon_tables_svg_default;
var init_icon_tables_svg = __esm({
  "lib/meta/icon_tables.svg.ts"() {
    meta758 = {
      "description": "An icon representing tables, often used in user interfaces to symbolize data presentation and organization.",
      "category": [
        "Interface"
      ],
      "tag": [
        "data",
        "organization",
        "presentation",
        "structure",
        "information",
        "UI design",
        "dashboard",
        "spreadsheet",
        "grid",
        "table"
      ],
      "title": "Tables"
    };
    icon_tables_svg_default = meta758;
  }
});

// lib/meta/icon_talk-add.svg.ts
var icon_talk_add_svg_exports = {};
__export(icon_talk_add_svg_exports, {
  default: () => icon_talk_add_svg_default,
  meta: () => meta759
});
var meta759, icon_talk_add_svg_default;
var init_icon_talk_add_svg = __esm({
  "lib/meta/icon_talk-add.svg.ts"() {
    meta759 = {
      "description": "An icon of a speech bubble with a plus sign, indicating adding or creating a new conversation or message. It is commonly used in chat interfaces and messaging applications.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "talk",
        "bubble",
        "conversation",
        "chat",
        "add",
        "message",
        "communication",
        "interface",
        "dialogue",
        "new"
      ],
      "title": "Talk Add"
    };
    icon_talk_add_svg_default = meta759;
  }
});

// lib/meta/icon_talk-check.svg.ts
var icon_talk_check_svg_exports = {};
__export(icon_talk_check_svg_exports, {
  default: () => icon_talk_check_svg_default,
  meta: () => meta760
});
var meta760, icon_talk_check_svg_default;
var init_icon_talk_check_svg = __esm({
  "lib/meta/icon_talk-check.svg.ts"() {
    meta760 = {
      "description": "The Talk Check icon is a visual representation of a conversation with a checkmark, symbolizing confirmation or completion. It can be used in user interfaces to indicate successful communication or verification.",
      "category": [
        "Interface"
      ],
      "tag": [
        "conversation",
        "communication",
        "dialogue",
        "confirmation",
        "completion",
        "chat",
        "message",
        "approve",
        "validate"
      ],
      "title": "Talk Check"
    };
    icon_talk_check_svg_default = meta760;
  }
});

// lib/meta/icon_talk-delete.svg.ts
var icon_talk_delete_svg_exports = {};
__export(icon_talk_delete_svg_exports, {
  default: () => icon_talk_delete_svg_default,
  meta: () => meta761
});
var meta761, icon_talk_delete_svg_default;
var init_icon_talk_delete_svg = __esm({
  "lib/meta/icon_talk-delete.svg.ts"() {
    meta761 = {
      "description": "The talk-delete icon is used in user interfaces to indicate a chat or conversation deletion option. It typically consists of a speech bubble symbol combined with a delete or remove symbol.",
      "category": [
        "Interface"
      ],
      "tag": [
        "chat",
        "conversation",
        "delete",
        "remove",
        "communication",
        "interface design",
        "messaging",
        "user interface",
        "UI",
        "conversation deletion"
      ],
      "title": "Talk Delete"
    };
    icon_talk_delete_svg_default = meta761;
  }
});

// lib/meta/icon_talk-edit.svg.ts
var icon_talk_edit_svg_exports = {};
__export(icon_talk_edit_svg_exports, {
  default: () => icon_talk_edit_svg_default,
  meta: () => meta762
});
var meta762, icon_talk_edit_svg_default;
var init_icon_talk_edit_svg = __esm({
  "lib/meta/icon_talk-edit.svg.ts"() {
    meta762 = {
      "description": "An icon of a talking bubble with a pencil inside, symbolizing the ability to edit text within a dialogue or conversation. This icon is commonly used in user interfaces for editing comments or messages.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "conversation",
        "edit",
        "communication",
        "dialogue",
        "text",
        "bubble",
        "interface design",
        "user interface",
        "messaging",
        "comment"
      ],
      "title": "Talk Edit"
    };
    icon_talk_edit_svg_default = meta762;
  }
});

// lib/meta/icon_talk-exclamation-mark.svg.ts
var icon_talk_exclamation_mark_svg_exports = {};
__export(icon_talk_exclamation_mark_svg_exports, {
  default: () => icon_talk_exclamation_mark_svg_default,
  meta: () => meta763
});
var meta763, icon_talk_exclamation_mark_svg_default;
var init_icon_talk_exclamation_mark_svg = __esm({
  "lib/meta/icon_talk-exclamation-mark.svg.ts"() {
    meta763 = {
      "description": "An icon of a speech bubble with an exclamation mark to indicate important or urgent information. It is commonly used in user interfaces to draw attention to alerts or notifications.",
      "category": [
        "Interface"
      ],
      "tag": [
        "speech bubble",
        "exclamation mark",
        "alert",
        "notification",
        "message",
        "warning",
        "important",
        "urgent",
        "communication",
        "dialogue"
      ],
      "title": "Talk Exclamation Mark"
    };
    icon_talk_exclamation_mark_svg_default = meta763;
  }
});

// lib/meta/icon_talk-heart-broken.svg.ts
var icon_talk_heart_broken_svg_exports = {};
__export(icon_talk_heart_broken_svg_exports, {
  default: () => icon_talk_heart_broken_svg_default,
  meta: () => meta764
});
var meta764, icon_talk_heart_broken_svg_default;
var init_icon_talk_heart_broken_svg = __esm({
  "lib/meta/icon_talk-heart-broken.svg.ts"() {
    meta764 = {
      "description": "A sad or disappointed emoticon in the shape of a heart, representing brokenheartedness or a sense of loss. This icon is commonly used in communication platforms to express feelings of heartbreak.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "emoticon",
        "communication",
        "sad",
        "disappointed",
        "heart",
        "brokenhearted",
        "loss",
        "emotions",
        "social media",
        "chat"
      ],
      "title": "Talk Heart Broken"
    };
    icon_talk_heart_broken_svg_default = meta764;
  }
});

// lib/meta/icon_talk-heart.svg.ts
var icon_talk_heart_svg_exports = {};
__export(icon_talk_heart_svg_exports, {
  default: () => icon_talk_heart_svg_default,
  meta: () => meta765
});
var meta765, icon_talk_heart_svg_default;
var init_icon_talk_heart_svg = __esm({
  "lib/meta/icon_talk-heart.svg.ts"() {
    meta765 = {
      "description": "The talk-heart icon is a symbol representing communication or messaging with love or affection. It features a speech bubble in the shape of a heart, conveying warmth and positivity.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "communication",
        "messaging",
        "love",
        "affection",
        "chat",
        "conversation",
        "heart",
        "speech bubble",
        "emotion",
        "interaction"
      ],
      "title": "Talk Heart"
    };
    icon_talk_heart_svg_default = meta765;
  }
});

// lib/meta/icon_talk-info.svg.ts
var icon_talk_info_svg_exports = {};
__export(icon_talk_info_svg_exports, {
  default: () => icon_talk_info_svg_default,
  meta: () => meta766
});
var meta766, icon_talk_info_svg_default;
var init_icon_talk_info_svg = __esm({
  "lib/meta/icon_talk-info.svg.ts"() {
    meta766 = {
      "description": "The 'talk-info' icon represents receiving information through a conversation or discussion. It is typically used to indicate that important details or facts are being communicated.",
      "category": [
        "Interface"
      ],
      "tag": [
        "communication",
        "conversation",
        "information",
        "discussion",
        "chat",
        "notification",
        "speech bubble",
        "dialogue",
        "alert"
      ],
      "title": "Talk Info"
    };
    icon_talk_info_svg_default = meta766;
  }
});

// lib/meta/icon_talk-invisible.svg.ts
var icon_talk_invisible_svg_exports = {};
__export(icon_talk_invisible_svg_exports, {
  default: () => icon_talk_invisible_svg_default,
  meta: () => meta767
});
var meta767, icon_talk_invisible_svg_default;
var init_icon_talk_invisible_svg = __esm({
  "lib/meta/icon_talk-invisible.svg.ts"() {
    meta767 = {
      "description": "An icon representing invisible conversation or hidden discussion. It indicates communication or speech happening discreetly or behind the scenes.",
      "category": [
        "Interface"
      ],
      "tag": [
        "communication",
        "speech",
        "conversation",
        "hidden",
        "discreet",
        "messaging",
        "chat",
        "private",
        "talk",
        "silence"
      ],
      "title": "Talk Invisible"
    };
    icon_talk_invisible_svg_default = meta767;
  }
});

// lib/meta/icon_talk-question-mark.svg.ts
var icon_talk_question_mark_svg_exports = {};
__export(icon_talk_question_mark_svg_exports, {
  default: () => icon_talk_question_mark_svg_default,
  meta: () => meta768
});
var meta768, icon_talk_question_mark_svg_default;
var init_icon_talk_question_mark_svg = __esm({
  "lib/meta/icon_talk-question-mark.svg.ts"() {
    meta768 = {
      "description": "The talk-question-mark icon is used to represent a question or inquiry within a communication context. It typically indicates the presence of a question or a need for further clarification or explanation.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "question mark",
        "speech bubble",
        "discussion",
        "conversation",
        "query",
        "help",
        "support",
        "dialogue",
        "interrogation",
        "communication"
      ],
      "title": "Talk Question Mark"
    };
    icon_talk_question_mark_svg_default = meta768;
  }
});

// lib/meta/icon_talk-search.svg.ts
var icon_talk_search_svg_exports = {};
__export(icon_talk_search_svg_exports, {
  default: () => icon_talk_search_svg_default,
  meta: () => meta769
});
var meta769, icon_talk_search_svg_default;
var init_icon_talk_search_svg = __esm({
  "lib/meta/icon_talk-search.svg.ts"() {
    meta769 = {
      "description": "The talk-search icon depicts a speech bubble with a magnifying glass, symbolizing a search function within a messaging or communication platform.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "conversation",
        "chat",
        "search",
        "find",
        "communication",
        "messaging",
        "lookup",
        "speech bubble",
        "magnifying glass",
        "online"
      ],
      "title": "Talk Search"
    };
    icon_talk_search_svg_default = meta769;
  }
});

// lib/meta/icon_talk-star.svg.ts
var icon_talk_star_svg_exports = {};
__export(icon_talk_star_svg_exports, {
  default: () => icon_talk_star_svg_default,
  meta: () => meta770
});
var meta770, icon_talk_star_svg_default;
var init_icon_talk_star_svg = __esm({
  "lib/meta/icon_talk-star.svg.ts"() {
    meta770 = {
      "description": "A star icon designed with a speech bubble, indicating communication or conversation. Can be used to represent messages or notifications.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "communication",
        "conversation",
        "message",
        "notification",
        "chat",
        "talk",
        "star",
        "speech bubble",
        "dialogue",
        "interaction"
      ],
      "title": "Talk Star"
    };
    icon_talk_star_svg_default = meta770;
  }
});

// lib/meta/icon_talk-subtract.svg.ts
var icon_talk_subtract_svg_exports = {};
__export(icon_talk_subtract_svg_exports, {
  default: () => icon_talk_subtract_svg_default,
  meta: () => meta771
});
var meta771, icon_talk_subtract_svg_default;
var init_icon_talk_subtract_svg = __esm({
  "lib/meta/icon_talk-subtract.svg.ts"() {
    meta771 = {
      "description": "An icon representing the action of talking while subtracting, usually used in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "communication",
        "conversation",
        "dialogue",
        "subtract",
        "remove",
        "speech",
        "chat",
        "interface",
        "messaging",
        "interaction"
      ],
      "title": "Talk Subtract"
    };
    icon_talk_subtract_svg_default = meta771;
  }
});

// lib/meta/icon_talk-visible.svg.ts
var icon_talk_visible_svg_exports = {};
__export(icon_talk_visible_svg_exports, {
  default: () => icon_talk_visible_svg_default,
  meta: () => meta772
});
var meta772, icon_talk_visible_svg_default;
var init_icon_talk_visible_svg = __esm({
  "lib/meta/icon_talk-visible.svg.ts"() {
    meta772 = {
      "description": "A visible speech bubble icon typically representing communication or conversation being actively displayed or shown. This icon is commonly used in user interfaces to indicate that messages or chat are visible and active within an application or website.",
      "category": [
        "Interface"
      ],
      "tag": [
        "communication",
        "conversation",
        "chat",
        "message",
        "talk",
        "bubble",
        "speech",
        "visible",
        "user interface",
        "active"
      ],
      "title": "Talk Visible"
    };
    icon_talk_visible_svg_default = meta772;
  }
});

// lib/meta/icon_talk.svg.ts
var icon_talk_svg_exports = {};
__export(icon_talk_svg_exports, {
  default: () => icon_talk_svg_default,
  meta: () => meta773
});
var meta773, icon_talk_svg_default;
var init_icon_talk_svg = __esm({
  "lib/meta/icon_talk.svg.ts"() {
    meta773 = {
      "description": "The talk icon is typically used to represent communication, conversation, chat, or messaging in user interfaces. It can be used to indicate where users can interact with others through text or voice communication.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "communication",
        "conversation",
        "chat",
        "messaging",
        "speech",
        "bubble",
        "dialogue",
        "conversation",
        "talk"
      ],
      "title": "Talk"
    };
    icon_talk_svg_default = meta773;
  }
});

// lib/meta/icon_target.svg.ts
var icon_target_svg_exports = {};
__export(icon_target_svg_exports, {
  default: () => icon_target_svg_default,
  meta: () => meta774
});
var meta774, icon_target_svg_default;
var init_icon_target_svg = __esm({
  "lib/meta/icon_target.svg.ts"() {
    meta774 = {
      "description": "The target icon represents a symbol often used to indicate a point of focus or to aim at a particular goal. It typically consists of concentric circles with a center point. This icon is commonly used in UI design for targetting, precision, accuracy, or goal-related concepts.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "precision",
        "focus",
        "aiming",
        "goal",
        "accuracy",
        "mark",
        "center",
        "bullseye",
        "concentric circles",
        "ui design"
      ],
      "title": "Target"
    };
    icon_target_svg_default = meta774;
  }
});

// lib/meta/icon_text-align-center.svg.ts
var icon_text_align_center_svg_exports = {};
__export(icon_text_align_center_svg_exports, {
  default: () => icon_text_align_center_svg_default,
  meta: () => meta775
});
var meta775, icon_text_align_center_svg_default;
var init_icon_text_align_center_svg = __esm({
  "lib/meta/icon_text-align-center.svg.ts"() {
    meta775 = {
      "description": "The text-align-center icon represents formatting text to be centered within a document or interface. It is commonly used in text editing software or websites to align text centrally.",
      "category": [
        "Interface",
        "Text"
      ],
      "tag": [
        "alignment",
        "center",
        "text editing",
        "formatting",
        "editor",
        "word processing",
        "alignment tool",
        "writing",
        "typography",
        "layout"
      ],
      "title": "Text Align Center"
    };
    icon_text_align_center_svg_default = meta775;
  }
});

// lib/meta/icon_text-align-justify-centered.svg.ts
var icon_text_align_justify_centered_svg_exports = {};
__export(icon_text_align_justify_centered_svg_exports, {
  default: () => icon_text_align_justify_centered_svg_default,
  meta: () => meta776
});
var meta776, icon_text_align_justify_centered_svg_default;
var init_icon_text_align_justify_centered_svg = __esm({
  "lib/meta/icon_text-align-justify-centered.svg.ts"() {
    meta776 = {
      "description": "The text-align-justify-centered icon is a user interface (UI) element that represents centered text alignment with justified spacing. This icon is commonly used in text editing applications to align paragraphs in a visually appealing manner.",
      "category": [
        "Interface",
        "Text"
      ],
      "tag": [
        "align",
        "centered",
        "paragraph",
        "spacing",
        "text editing",
        "formatting",
        "document",
        "writing",
        "design"
      ],
      "title": "Text Align Justify Centered"
    };
    icon_text_align_justify_centered_svg_default = meta776;
  }
});

// lib/meta/icon_text-align-justify-left.svg.ts
var icon_text_align_justify_left_svg_exports = {};
__export(icon_text_align_justify_left_svg_exports, {
  default: () => icon_text_align_justify_left_svg_default,
  meta: () => meta777
});
var meta777, icon_text_align_justify_left_svg_default;
var init_icon_text_align_justify_left_svg = __esm({
  "lib/meta/icon_text-align-justify-left.svg.ts"() {
    meta777 = {
      "description": "The text-align-justify-left icon is used to represent left alignment or justification of text in user interfaces. It typically indicates that text should be aligned to the left side of a text box or container in a document or application.",
      "category": [
        "Interface",
        "Text"
      ],
      "tag": [
        "alignment",
        "layout",
        "typography",
        "editor",
        "design",
        "text box",
        "application",
        "user interface",
        "content"
      ],
      "title": "Text Align Justify Left"
    };
    icon_text_align_justify_left_svg_default = meta777;
  }
});

// lib/meta/icon_text-align-justify-right.svg.ts
var icon_text_align_justify_right_svg_exports = {};
__export(icon_text_align_justify_right_svg_exports, {
  default: () => icon_text_align_justify_right_svg_default,
  meta: () => meta778
});
var meta778, icon_text_align_justify_right_svg_default;
var init_icon_text_align_justify_right_svg = __esm({
  "lib/meta/icon_text-align-justify-right.svg.ts"() {
    meta778 = {
      "description": "The text-align-justify-right icon represents right alignment for justified text. It is commonly used in design software and text editing applications to format text alignment.",
      "category": [
        "Interface",
        "Text"
      ],
      "tag": [
        "alignment",
        "text",
        "justify",
        "right",
        "editing",
        "format",
        "design",
        "software",
        "interface",
        "text-align"
      ],
      "title": "Text Align Justify Right"
    };
    icon_text_align_justify_right_svg_default = meta778;
  }
});

// lib/meta/icon_text-align-justify.svg.ts
var icon_text_align_justify_svg_exports = {};
__export(icon_text_align_justify_svg_exports, {
  default: () => icon_text_align_justify_svg_default,
  meta: () => meta779
});
var meta779, icon_text_align_justify_svg_default;
var init_icon_text_align_justify_svg = __esm({
  "lib/meta/icon_text-align-justify.svg.ts"() {
    meta779 = {
      "description": "The text-align-justify icon represents a tool for aligning text in a justified manner, evenly spacing it across the width of the container. This icon is commonly used in text editing applications and design software.",
      "category": [
        "Interface",
        "Text"
      ],
      "tag": [
        "alignment",
        "justification",
        "spacing",
        "text editing",
        "design tool",
        "text formatting",
        "layout",
        "typography",
        "editor",
        "UI"
      ],
      "title": "Text Align Justify"
    };
    icon_text_align_justify_svg_default = meta779;
  }
});

// lib/meta/icon_text-align-left.svg.ts
var icon_text_align_left_svg_exports = {};
__export(icon_text_align_left_svg_exports, {
  default: () => icon_text_align_left_svg_default,
  meta: () => meta780
});
var meta780, icon_text_align_left_svg_default;
var init_icon_text_align_left_svg = __esm({
  "lib/meta/icon_text-align-left.svg.ts"() {
    meta780 = {
      "description": "The text-align-left icon represents aligning text to the left. This icon is commonly used in text editing tools to adjust the alignment of text within a document or design.",
      "category": [
        "Interface",
        "Text"
      ],
      "tag": [
        "align",
        "left",
        "text",
        "editor",
        "writing",
        "design",
        "tool",
        "adjustment",
        "typography",
        "formatting"
      ],
      "title": "Text Align Left"
    };
    icon_text_align_left_svg_default = meta780;
  }
});

// lib/meta/icon_text-align-right-order-desc.svg.ts
var icon_text_align_right_order_desc_svg_exports = {};
__export(icon_text_align_right_order_desc_svg_exports, {
  default: () => icon_text_align_right_order_desc_svg_default,
  meta: () => meta781
});
var meta781, icon_text_align_right_order_desc_svg_default;
var init_icon_text_align_right_order_desc_svg = __esm({
  "lib/meta/icon_text-align-right-order-desc.svg.ts"() {
    meta781 = {
      "description": "The text-align-right-order-desc icon is used to indicate right-aligned text with descending order. It is commonly used in user interfaces to align text to the right while displaying content in a descending order.",
      "category": [
        "Interface",
        "Text"
      ],
      "tag": [
        "align",
        "right",
        "order",
        "desc",
        "text",
        "UI",
        "user interface",
        "descending",
        "content",
        "alignment"
      ],
      "title": "Text Align Right Order Desc"
    };
    icon_text_align_right_order_desc_svg_default = meta781;
  }
});

// lib/meta/icon_text-align-right.svg.ts
var icon_text_align_right_svg_exports = {};
__export(icon_text_align_right_svg_exports, {
  default: () => icon_text_align_right_svg_default,
  meta: () => meta782
});
var meta782, icon_text_align_right_svg_default;
var init_icon_text_align_right_svg = __esm({
  "lib/meta/icon_text-align-right.svg.ts"() {
    meta782 = {
      "description": "The text-align-right icon is used to indicate aligning text to the right side of a document or element. This icon is commonly found in text editing or formatting tools.",
      "category": [
        "Interface",
        "Text"
      ],
      "tag": [
        "text align",
        "right",
        "alignment",
        "typography",
        "editor",
        "formatting",
        "document",
        "interface",
        "tool",
        "writing"
      ],
      "title": "Text Align Right"
    };
    icon_text_align_right_svg_default = meta782;
  }
});

// lib/meta/icon_text-bold.svg.ts
var icon_text_bold_svg_exports = {};
__export(icon_text_bold_svg_exports, {
  default: () => icon_text_bold_svg_default,
  meta: () => meta783
});
var meta783, icon_text_bold_svg_default;
var init_icon_text_bold_svg = __esm({
  "lib/meta/icon_text-bold.svg.ts"() {
    meta783 = {
      "description": "The text-bold icon is used to indicate bold text formatting within a user interface. It is commonly found in text editing or word processing applications.",
      "category": [
        "Text",
        "Interface"
      ],
      "tag": [
        "bold",
        "formatting",
        "typography",
        "editor",
        "design",
        "style",
        "emphasis",
        "highlight",
        "word processing"
      ],
      "title": "Text Bold"
    };
    icon_text_bold_svg_default = meta783;
  }
});

// lib/meta/icon_text-detail-list.svg.ts
var icon_text_detail_list_svg_exports = {};
__export(icon_text_detail_list_svg_exports, {
  default: () => icon_text_detail_list_svg_default,
  meta: () => meta784
});
var meta784, icon_text_detail_list_svg_default;
var init_icon_text_detail_list_svg = __esm({
  "lib/meta/icon_text-detail-list.svg.ts"() {
    meta784 = {
      "description": "The text-detail-list icon is a visual representation of a list with detailed text information. It may be used to represent a detailed list or a text-based menu in user interfaces.",
      "category": [
        "Interface",
        "Text"
      ],
      "tag": [
        "details",
        "information",
        "list",
        "text",
        "menu",
        "UI",
        "content",
        "items",
        "options",
        "data"
      ],
      "title": "Text Detail List"
    };
    icon_text_detail_list_svg_default = meta784;
  }
});

// lib/meta/icon_text-indent.svg.ts
var icon_text_indent_svg_exports = {};
__export(icon_text_indent_svg_exports, {
  default: () => icon_text_indent_svg_default,
  meta: () => meta785
});
var meta785, icon_text_indent_svg_default;
var init_icon_text_indent_svg = __esm({
  "lib/meta/icon_text-indent.svg.ts"() {
    meta785 = {
      "description": "The text-indent icon is used to indicate a predefined space at the beginning of a paragraph or block of text. It is commonly used in typography and CSS to improve the readability and overall layout of text content.",
      "category": [
        "Interface",
        "Text"
      ],
      "tag": [
        "indentation",
        "typography",
        "CSS",
        "paragraph",
        "spacing",
        "layout",
        "text content",
        "indent",
        "alignment",
        "web design"
      ],
      "title": "Text Indent"
    };
    icon_text_indent_svg_default = meta785;
  }
});

// lib/meta/icon_text-italic.svg.ts
var icon_text_italic_svg_exports = {};
__export(icon_text_italic_svg_exports, {
  default: () => icon_text_italic_svg_default,
  meta: () => meta786
});
var meta786, icon_text_italic_svg_default;
var init_icon_text_italic_svg = __esm({
  "lib/meta/icon_text-italic.svg.ts"() {
    meta786 = {
      "description": "The text-italic icon is used to indicate that the text should be displayed in italic style. This icon is commonly used in text editing applications or word processors.",
      "category": [
        "Text",
        "Interface"
      ],
      "tag": [
        "formatting",
        "style",
        "editor",
        "font",
        "writing",
        "italic",
        "text"
      ],
      "title": "Text Italic"
    };
    icon_text_italic_svg_default = meta786;
  }
});

// lib/meta/icon_text-line-through.svg.ts
var icon_text_line_through_svg_exports = {};
__export(icon_text_line_through_svg_exports, {
  default: () => icon_text_line_through_svg_default,
  meta: () => meta787
});
var meta787, icon_text_line_through_svg_default;
var init_icon_text_line_through_svg = __esm({
  "lib/meta/icon_text-line-through.svg.ts"() {
    meta787 = {
      "description": "A line that crosses through a block of text, indicating the text has been struck through or deleted",
      "category": [
        "Text",
        "Interface"
      ],
      "tag": [
        "line",
        "text",
        "strike",
        "delete",
        "style",
        "format",
        "annotation",
        "editing",
        "typography"
      ],
      "title": "Text Line Through"
    };
    icon_text_line_through_svg_default = meta787;
  }
});

// lib/meta/icon_text-order-asc-114.svg.ts
var icon_text_order_asc_114_svg_exports = {};
__export(icon_text_order_asc_114_svg_exports, {
  default: () => icon_text_order_asc_114_svg_default,
  meta: () => meta788
});
var meta788, icon_text_order_asc_114_svg_default;
var init_icon_text_order_asc_114_svg = __esm({
  "lib/meta/icon_text-order-asc-114.svg.ts"() {
    meta788 = {
      description: "An icon representing text order in ascending order, with the number 114 displayed prominently. This icon is commonly used in user interfaces to indicate sorting text data in ascending order.",
      category: ["Interface", "Text"],
      tag: ["ascending", "order", "text", "sorting", "data", "numbers", "alphabetic", "alphabetical", "user interface", "label"],
      title: "Text Order Ascending 114"
    };
    icon_text_order_asc_114_svg_default = meta788;
  }
});

// lib/meta/icon_text-order-asc-118.svg.ts
var icon_text_order_asc_118_svg_exports = {};
__export(icon_text_order_asc_118_svg_exports, {
  default: () => icon_text_order_asc_118_svg_default,
  meta: () => meta789
});
var meta789, icon_text_order_asc_118_svg_default;
var init_icon_text_order_asc_118_svg = __esm({
  "lib/meta/icon_text-order-asc-118.svg.ts"() {
    meta789 = {
      description: "The 'Text Order Asc' icon is used to indicate sorting text data in ascending order. It features an arrow pointing upwards to show the increasing order.",
      category: ["Interface", "Arrows"],
      tag: ["sort", "ascending", "order", "alphabet", "text data", "ascending order", "direction", "upwards", "arrow", "text"],
      title: "Text Order Asc 118"
    };
    icon_text_order_asc_118_svg_default = meta789;
  }
});

// lib/meta/icon_text-order-desc copy 2.svg.ts
var icon_text_order_desc_copy_2_svg_exports = {};
__export(icon_text_order_desc_copy_2_svg_exports, {
  default: () => icon_text_order_desc_copy_2_svg_default,
  meta: () => meta790
});
var meta790, icon_text_order_desc_copy_2_svg_default;
var init_icon_text_order_desc_copy_2_svg = __esm({
  "lib/meta/icon_text-order-desc copy 2.svg.ts"() {
    meta790 = {
      "description": "An icon representing a descending order of text or data. This icon is commonly used in user interfaces to indicate sorting in a descending order.",
      "category": [
        "Interface",
        "Text"
      ],
      "tag": [
        "alphabetical",
        "sorting",
        "order",
        "descending",
        "list",
        "data",
        "information",
        "user interface",
        "UI",
        "text"
      ],
      "title": "Text Order Descending"
    };
    icon_text_order_desc_copy_2_svg_default = meta790;
  }
});

// lib/meta/icon_text-order-desc copy 3.svg.ts
var icon_text_order_desc_copy_3_svg_exports = {};
__export(icon_text_order_desc_copy_3_svg_exports, {
  default: () => icon_text_order_desc_copy_3_svg_default,
  meta: () => meta791
});
var meta791, icon_text_order_desc_copy_3_svg_default;
var init_icon_text_order_desc_copy_3_svg = __esm({
  "lib/meta/icon_text-order-desc copy 3.svg.ts"() {
    meta791 = {
      "description": "An icon representing sorting text in descending order. This icon can be used in user interfaces to indicate arranging text in decreasing order.",
      "category": [
        "Interface",
        "Text"
      ],
      "tag": [
        "Sort",
        "Descending order",
        "Alphabetical",
        "List",
        "Table",
        "Data",
        "Organization",
        "Arrangement",
        "UI design",
        "User interface"
      ],
      "title": "Text Order Descending"
    };
    icon_text_order_desc_copy_3_svg_default = meta791;
  }
});

// lib/meta/icon_text-order-desc copy.svg.ts
var icon_text_order_desc_copy_svg_exports = {};
__export(icon_text_order_desc_copy_svg_exports, {
  default: () => icon_text_order_desc_copy_svg_default,
  meta: () => meta792
});
var meta792, icon_text_order_desc_copy_svg_default;
var init_icon_text_order_desc_copy_svg = __esm({
  "lib/meta/icon_text-order-desc copy.svg.ts"() {
    meta792 = {
      "description": "An icon indicating text in descending order, typically used for sorting text data alphabetically or numerically from Z to A or large to small. This icon is represented as an arrow pointing downwards.",
      "category": [
        "Interface",
        "Text",
        "Arrows"
      ],
      "tag": [
        "descending order",
        "sort",
        "alphabetically",
        "numerically",
        "Z to A",
        "large to small",
        "arrow",
        "interface",
        "text"
      ],
      "title": "Text Order Descending Copy"
    };
    icon_text_order_desc_copy_svg_default = meta792;
  }
});

// lib/meta/icon_text-order-desc.svg.ts
var icon_text_order_desc_svg_exports = {};
__export(icon_text_order_desc_svg_exports, {
  default: () => icon_text_order_desc_svg_default,
  meta: () => meta793
});
var meta793, icon_text_order_desc_svg_default;
var init_icon_text_order_desc_svg = __esm({
  "lib/meta/icon_text-order-desc.svg.ts"() {
    meta793 = {
      "description": "The text-order-desc icon represents descending order of text or content. It is used as a visual indicator to show that the text is sorted in descending order.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "sort",
        "order",
        "descending",
        "text",
        "alphabetical",
        "content",
        "ascend",
        "descending order",
        "filter",
        "arrange"
      ],
      "title": "Text Order Desc"
    };
    icon_text_order_desc_svg_default = meta793;
  }
});

// lib/meta/icon_text-outdent.svg.ts
var icon_text_outdent_svg_exports = {};
__export(icon_text_outdent_svg_exports, {
  default: () => icon_text_outdent_svg_default,
  meta: () => meta794
});
var meta794, icon_text_outdent_svg_default;
var init_icon_text_outdent_svg = __esm({
  "lib/meta/icon_text-outdent.svg.ts"() {
    meta794 = {
      "description": "The text-outdent icon is used to decrease the indentation of a block of text in a document or text editor. It is commonly used in word processing software and formatting tools.",
      "category": [
        "Text",
        "Interface"
      ],
      "tag": [
        "indentation",
        "formatting",
        "adjustment",
        "writing",
        "editor",
        "block",
        "alignment",
        "text manipulation",
        "paragraphs",
        "documents"
      ],
      "title": "Text Outdent"
    };
    icon_text_outdent_svg_default = meta794;
  }
});

// lib/meta/icon_text-underline.svg.ts
var icon_text_underline_svg_exports = {};
__export(icon_text_underline_svg_exports, {
  default: () => icon_text_underline_svg_default,
  meta: () => meta795
});
var meta795, icon_text_underline_svg_default;
var init_icon_text_underline_svg = __esm({
  "lib/meta/icon_text-underline.svg.ts"() {
    meta795 = {
      "description": "The text-underline icon is used to indicate text that is underlined. It is commonly used in text editing applications or word processing software.",
      "category": [
        "Interface",
        "Text"
      ],
      "tag": [
        "underline",
        "format",
        "editor",
        "highlight",
        "word processing",
        "text editing",
        "writing",
        "font style",
        "typography",
        "emphasis"
      ],
      "title": "Text Underline"
    };
    icon_text_underline_svg_default = meta795;
  }
});

// lib/meta/icon_timer.svg.ts
var icon_timer_svg_exports = {};
__export(icon_timer_svg_exports, {
  default: () => icon_timer_svg_default,
  meta: () => meta796
});
var meta796, icon_timer_svg_default;
var init_icon_timer_svg = __esm({
  "lib/meta/icon_timer.svg.ts"() {
    meta796 = {
      "description": "The timer icon represents a clock with a running stopwatch to indicate the measurement of time. It is commonly used in UI designs to signify timing, countdowns, or alarm features.",
      "category": [
        "Interface"
      ],
      "tag": [
        "clock",
        "stopwatch",
        "time management",
        "countdown",
        "alarm",
        "watch",
        "time tracking",
        "schedule",
        "deadline",
        "reminder"
      ],
      "title": "Timer"
    };
    icon_timer_svg_default = meta796;
  }
});

// lib/meta/icon_trash-2.svg.ts
var icon_trash_2_svg_exports = {};
__export(icon_trash_2_svg_exports, {
  default: () => icon_trash_2_svg_default,
  meta: () => meta797
});
var meta797, icon_trash_2_svg_default;
var init_icon_trash_2_svg = __esm({
  "lib/meta/icon_trash-2.svg.ts"() {
    meta797 = {
      "description": "The trash-2 icon is commonly used in user interfaces to represent the action of deleting or removing an item. It typically features an image of a trash bin or garbage can with the number 2 to indicate a more specific variation of the trash icon.",
      "category": [
        "Interface"
      ],
      "tag": [
        "delete",
        "remove",
        "discard",
        "bin",
        "garbage",
        "waste",
        "dispose",
        "eliminate",
        "UI",
        "trash"
      ],
      "title": "Trash 2"
    };
    icon_trash_2_svg_default = meta797;
  }
});

// lib/meta/icon_trash.svg.ts
var icon_trash_svg_exports = {};
__export(icon_trash_svg_exports, {
  default: () => icon_trash_svg_default,
  meta: () => meta798
});
var meta798, icon_trash_svg_default;
var init_icon_trash_svg = __esm({
  "lib/meta/icon_trash.svg.ts"() {
    meta798 = {
      "description": "The trash icon typically represents the delete action or removing something. It is commonly used in user interfaces for discarding or deleting unwanted items or content.",
      "category": [
        "UI"
      ],
      "tag": [
        "delete",
        "remove",
        "discard",
        "bin",
        "waste",
        "eliminate",
        "garbage",
        "cleanup",
        "clear",
        "trash can"
      ],
      "title": "Trash"
    };
    icon_trash_svg_default = meta798;
  }
});

// lib/meta/icon_triangled-exclamation-mark.svg.ts
var icon_triangled_exclamation_mark_svg_exports = {};
__export(icon_triangled_exclamation_mark_svg_exports, {
  default: () => icon_triangled_exclamation_mark_svg_default,
  meta: () => meta799
});
var meta799, icon_triangled_exclamation_mark_svg_default;
var init_icon_triangled_exclamation_mark_svg = __esm({
  "lib/meta/icon_triangled-exclamation-mark.svg.ts"() {
    meta799 = {
      "description": "A triangular exclamation mark icon commonly used in user interfaces to indicate warnings or alerts.",
      "category": [
        "Interface"
      ],
      "tag": [
        "triangle",
        "exclamation mark",
        "warning",
        "alert",
        "notification",
        "attention",
        "caution",
        "ui",
        "user interface"
      ],
      "title": "Triangled Exclamation Mark"
    };
    icon_triangled_exclamation_mark_svg_default = meta799;
  }
});

// lib/meta/icon_triangled-info.svg.ts
var icon_triangled_info_svg_exports = {};
__export(icon_triangled_info_svg_exports, {
  default: () => icon_triangled_info_svg_default,
  meta: () => meta800
});
var meta800, icon_triangled_info_svg_default;
var init_icon_triangled_info_svg = __esm({
  "lib/meta/icon_triangled-info.svg.ts"() {
    meta800 = {
      "description": "An icon of an informational triangle symbol, often used to indicate additional information or tips.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "information",
        "triangle",
        "tips",
        "help",
        "tooltip",
        "guidance",
        "explanation",
        "details",
        "info icon"
      ],
      "title": "Triangled Info"
    };
    icon_triangled_info_svg_default = meta800;
  }
});

// lib/meta/icon_triangled-question-mark.svg.ts
var icon_triangled_question_mark_svg_exports = {};
__export(icon_triangled_question_mark_svg_exports, {
  default: () => icon_triangled_question_mark_svg_default,
  meta: () => meta801
});
var meta801, icon_triangled_question_mark_svg_default;
var init_icon_triangled_question_mark_svg = __esm({
  "lib/meta/icon_triangled-question-mark.svg.ts"() {
    meta801 = {
      "description": "An icon of a triangle with a question mark in the center, typically used to indicate a query or uncertainty in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "triangle",
        "question mark",
        "query",
        "uncertainty",
        "help",
        "information",
        "interface",
        "symbol",
        "ui"
      ],
      "title": "Triangled Question Mark"
    };
    icon_triangled_question_mark_svg_default = meta801;
  }
});

// lib/meta/icon_triangled.svg.ts
var icon_triangled_svg_exports = {};
__export(icon_triangled_svg_exports, {
  default: () => icon_triangled_svg_default,
  meta: () => meta802
});
var meta802, icon_triangled_svg_default;
var init_icon_triangled_svg = __esm({
  "lib/meta/icon_triangled.svg.ts"() {
    meta802 = {
      "description": "A simple triangle shaped icon usually representing a dropdown or play button in user interface designs.",
      "category": [
        "Interface",
        "Shapes"
      ],
      "tag": [
        "triangle",
        "dropdown",
        "play button",
        "navigation",
        "graphic",
        "symbol",
        "geometric",
        "pointer",
        "arrow",
        "button"
      ],
      "title": "Triangled"
    };
    icon_triangled_svg_default = meta802;
  }
});

// lib/meta/icon_user-add.svg.ts
var icon_user_add_svg_exports = {};
__export(icon_user_add_svg_exports, {
  default: () => icon_user_add_svg_default,
  meta: () => meta803
});
var meta803, icon_user_add_svg_default;
var init_icon_user_add_svg = __esm({
  "lib/meta/icon_user-add.svg.ts"() {
    meta803 = {
      "description": "The user-add icon represents the action of adding a new user or creating a new account. It typically signifies the functionality to register or include a new member to a platform or system.",
      "category": [
        "Interface"
      ],
      "tag": [
        "user",
        "add",
        "create",
        "register",
        "sign up",
        "member",
        "profile",
        "account",
        "new user",
        "join"
      ],
      "title": "User Add"
    };
    icon_user_add_svg_default = meta803;
  }
});

// lib/meta/icon_user-delete.svg.ts
var icon_user_delete_svg_exports = {};
__export(icon_user_delete_svg_exports, {
  default: () => icon_user_delete_svg_default,
  meta: () => meta804
});
var meta804, icon_user_delete_svg_default;
var init_icon_user_delete_svg = __esm({
  "lib/meta/icon_user-delete.svg.ts"() {
    meta804 = {
      "description": "The user-delete icon represents the action of removing or deleting a user account or profile. It can be used in applications or websites to indicate the option to delete a user from the system.",
      "category": [
        "Interface"
      ],
      "tag": [
        "user",
        "profile",
        "account",
        "remove",
        "delete",
        "admin",
        "management",
        "access",
        "permission",
        "system"
      ],
      "title": "User Delete"
    };
    icon_user_delete_svg_default = meta804;
  }
});

// lib/meta/icon_user-group.svg.ts
var icon_user_group_svg_exports = {};
__export(icon_user_group_svg_exports, {
  default: () => icon_user_group_svg_default,
  meta: () => meta805
});
var meta805, icon_user_group_svg_default;
var init_icon_user_group_svg = __esm({
  "lib/meta/icon_user-group.svg.ts"() {
    meta805 = {
      "description": "The user-group icon represents a group of users or a team. It is commonly used to indicate a group discussion, collaboration, or teamwork.",
      "category": [
        "Interface"
      ],
      "tag": [
        "users",
        "team",
        "collaboration",
        "group",
        "discussion",
        "work",
        "project",
        "social",
        "community",
        "avatar"
      ],
      "title": "User Group"
    };
    icon_user_group_svg_default = meta805;
  }
});

// lib/meta/icon_user.svg.ts
var icon_user_svg_exports = {};
__export(icon_user_svg_exports, {
  default: () => icon_user_svg_default,
  meta: () => meta806
});
var meta806, icon_user_svg_default;
var init_icon_user_svg = __esm({
  "lib/meta/icon_user.svg.ts"() {
    meta806 = {
      "description": "The user icon represents a generic person or profile. It is commonly used in user interfaces to indicate where a user can interact or access personalized information.",
      "category": [
        "Interface"
      ],
      "tag": [
        "person",
        "profile",
        "avatar",
        "account",
        "member",
        "customer",
        "login",
        "user interface",
        "personality",
        "individual"
      ],
      "title": "User"
    };
    icon_user_svg_default = meta806;
  }
});

// lib/meta/icon_users.svg.ts
var icon_users_svg_exports = {};
__export(icon_users_svg_exports, {
  default: () => icon_users_svg_default,
  meta: () => meta807
});
var meta807, icon_users_svg_default;
var init_icon_users_svg = __esm({
  "lib/meta/icon_users.svg.ts"() {
    meta807 = {
      "description": "The 'users' icon represents multiple people or users. It is commonly used in user interfaces to signify a group of users or a user directory.",
      "category": [
        "Interface"
      ],
      "tag": [
        "people",
        "group",
        "members",
        "team",
        "avatar",
        "profile",
        "community",
        "social",
        "network"
      ],
      "title": "Users"
    };
    icon_users_svg_default = meta807;
  }
});

// lib/meta/icon_visible-fat.svg.ts
var icon_visible_fat_svg_exports = {};
__export(icon_visible_fat_svg_exports, {
  default: () => icon_visible_fat_svg_default,
  meta: () => meta808
});
var meta808, icon_visible_fat_svg_default;
var init_icon_visible_fat_svg = __esm({
  "lib/meta/icon_visible-fat.svg.ts"() {
    meta808 = {
      "description": "An icon depicting a bold and visible eye, representing a feature that is easy to see or prominent. This icon is commonly used to indicate visibility or clarity.",
      "category": [
        "Interface"
      ],
      "tag": [
        "eye",
        "visible",
        "fat",
        "bold",
        "noticeable",
        "prominent",
        "clear",
        "view",
        "watch",
        "seeing"
      ],
      "title": "Visible Fat"
    };
    icon_visible_fat_svg_default = meta808;
  }
});

// lib/meta/icon_visible-l.svg.ts
var icon_visible_l_svg_exports = {};
__export(icon_visible_l_svg_exports, {
  default: () => icon_visible_l_svg_default,
  meta: () => meta809
});
var meta809, icon_visible_l_svg_default;
var init_icon_visible_l_svg = __esm({
  "lib/meta/icon_visible-l.svg.ts"() {
    meta809 = {
      "description": "An icon representing visibility or being visible. This icon is often used to toggle between displaying or hiding content.",
      "category": [
        "Interface"
      ],
      "tag": [
        "eye",
        "show",
        "hide",
        "reveal",
        "view",
        "toggle",
        "visible",
        "see",
        "insight",
        "expose"
      ],
      "title": "Visible"
    };
    icon_visible_l_svg_default = meta809;
  }
});

// lib/meta/icon_visible-m.svg.ts
var icon_visible_m_svg_exports = {};
__export(icon_visible_m_svg_exports, {
  default: () => icon_visible_m_svg_default,
  meta: () => meta810
});
var meta810, icon_visible_m_svg_default;
var init_icon_visible_m_svg = __esm({
  "lib/meta/icon_visible-m.svg.ts"() {
    meta810 = {
      "description": "An icon representing visibility with an open eye, indicating something is visible or not hidden.",
      "category": [
        "Interface"
      ],
      "tag": [
        "visibility",
        "eye",
        "view",
        "show",
        "magnify",
        "observe",
        "reveal",
        "watch",
        "sight"
      ],
      "title": "Visible M"
    };
    icon_visible_m_svg_default = meta810;
  }
});

// lib/meta/icon_visible-s.svg.ts
var icon_visible_s_svg_exports = {};
__export(icon_visible_s_svg_exports, {
  default: () => icon_visible_s_svg_default,
  meta: () => meta811
});
var meta811, icon_visible_s_svg_default;
var init_icon_visible_s_svg = __esm({
  "lib/meta/icon_visible-s.svg.ts"() {
    meta811 = {
      "description": "An icon representing visibility or the concept of being visible. This icon is typically used to toggle visibility on or off in user interfaces.",
      "category": [
        "Interface"
      ],
      "tag": [
        "eye",
        "show",
        "hide",
        "toggle",
        "view",
        "reveal",
        "conceal",
        "see",
        "screen",
        "visibility"
      ],
      "title": "Visible Switch"
    };
    icon_visible_s_svg_default = meta811;
  }
});

// lib/meta/icon_wheelchair-action.svg.ts
var icon_wheelchair_action_svg_exports = {};
__export(icon_wheelchair_action_svg_exports, {
  default: () => icon_wheelchair_action_svg_default,
  meta: () => meta812
});
var meta812, icon_wheelchair_action_svg_default;
var init_icon_wheelchair_action_svg = __esm({
  "lib/meta/icon_wheelchair-action.svg.ts"() {
    meta812 = {
      "description": "This icon depicts a symbol of a wheelchair in motion, representing accessibility or disability rights. It can be used in user interface designs to indicate wheelchair-accessible features or services.",
      "category": [
        "Accessibility",
        "Interface"
      ],
      "tag": [
        "wheelchair",
        "action",
        "mobility",
        "disability",
        "accessibility",
        "movement",
        "inclusion",
        "healthcare",
        "assistive technology",
        "diversity"
      ],
      "title": "Wheelchair Action"
    };
    icon_wheelchair_action_svg_default = meta812;
  }
});

// lib/meta/icon_wheelchair.svg.ts
var icon_wheelchair_svg_exports = {};
__export(icon_wheelchair_svg_exports, {
  default: () => icon_wheelchair_svg_default,
  meta: () => meta813
});
var meta813, icon_wheelchair_svg_default;
var init_icon_wheelchair_svg = __esm({
  "lib/meta/icon_wheelchair.svg.ts"() {
    meta813 = {
      "description": "An icon depicting a stylized wheelchair, commonly used to represent accessibility or disability-related features in user interfaces.",
      "category": [
        "Accessibility",
        "Interface"
      ],
      "tag": [
        "disabled",
        "mobility",
        "accessibility",
        "wheelchair",
        "assistive technology",
        "inclusivity",
        "medical",
        "healthcare",
        "special needs",
        "handicap"
      ],
      "title": "Wheelchair"
    };
    icon_wheelchair_svg_default = meta813;
  }
});

// lib/meta/icon_airplane-arrivals.svg.ts
var icon_airplane_arrivals_svg_exports = {};
__export(icon_airplane_arrivals_svg_exports, {
  default: () => icon_airplane_arrivals_svg_default,
  meta: () => meta814
});
var meta814, icon_airplane_arrivals_svg_default;
var init_icon_airplane_arrivals_svg = __esm({
  "lib/meta/icon_airplane-arrivals.svg.ts"() {
    meta814 = {
      "description": "The icon 'Airplane Arrivals' depicts an airplane landing, symbolizing arrivals at the airport. This icon is commonly used for wayfinding purposes to indicate the arrivals area.",
      "category": [
        "Transport",
        "Wayfinding"
      ],
      "tag": [
        "airport",
        "arrival",
        "airplane",
        "travel",
        "terminal",
        "landing",
        "wayfinding",
        "transportation",
        "flight",
        "visitor"
      ],
      "title": "Airplane Arrivals"
    };
    icon_airplane_arrivals_svg_default = meta814;
  }
});

// lib/meta/icon_airplane-departures.svg.ts
var icon_airplane_departures_svg_exports = {};
__export(icon_airplane_departures_svg_exports, {
  default: () => icon_airplane_departures_svg_default,
  meta: () => meta815
});
var meta815, icon_airplane_departures_svg_default;
var init_icon_airplane_departures_svg = __esm({
  "lib/meta/icon_airplane-departures.svg.ts"() {
    meta815 = {
      "description": "An icon representing airplane departures, typically used to indicate the location or direction of departures for flights in an airport or transportation hub.",
      "category": [
        "Transport",
        "Wayfinding"
      ],
      "tag": [
        "airplane",
        "departures",
        "airport",
        "flights",
        "travel",
        "direction",
        "icon",
        "signage",
        "navigation",
        "transportation"
      ],
      "title": "Airplane Departures"
    };
    icon_airplane_departures_svg_default = meta815;
  }
});

// lib/meta/icon_airplane.svg.ts
var icon_airplane_svg_exports = {};
__export(icon_airplane_svg_exports, {
  default: () => icon_airplane_svg_default,
  meta: () => meta816
});
var meta816, icon_airplane_svg_default;
var init_icon_airplane_svg = __esm({
  "lib/meta/icon_airplane.svg.ts"() {
    meta816 = {
      "description": "The airplane icon represents air travel and can be used to indicate the location of an airport or a travel-related service.",
      "category": [
        "Transport"
      ],
      "tag": [
        "airplane",
        "aircraft",
        "flight",
        "travel",
        "tourism",
        "navigation",
        "vacation",
        "journey",
        "destination",
        "departure"
      ],
      "title": "Airplane"
    };
    icon_airplane_svg_default = meta816;
  }
});

// lib/meta/icon_airport-connect-flights.svg.ts
var icon_airport_connect_flights_svg_exports = {};
__export(icon_airport_connect_flights_svg_exports, {
  default: () => icon_airport_connect_flights_svg_default,
  meta: () => meta817
});
var meta817, icon_airport_connect_flights_svg_default;
var init_icon_airport_connect_flights_svg = __esm({
  "lib/meta/icon_airport-connect-flights.svg.ts"() {
    meta817 = {
      "description": "An icon representing the connection between different flights in an airport, helping passengers navigate their way to connecting flights easily.",
      "category": [
        "Transport",
        "Wayfinding"
      ],
      "tag": [
        "airport",
        "flight",
        "connection",
        "travel",
        "navigation",
        "directions",
        "airline",
        "terminal",
        "boarding",
        "transfer"
      ],
      "title": "Airport Connect Flights"
    };
    icon_airport_connect_flights_svg_default = meta817;
  }
});

// lib/meta/icon_airport-transfer 2.svg.ts
var icon_airport_transfer_2_svg_exports = {};
__export(icon_airport_transfer_2_svg_exports, {
  default: () => icon_airport_transfer_2_svg_default,
  meta: () => meta818
});
var meta818, icon_airport_transfer_2_svg_default;
var init_icon_airport_transfer_2_svg = __esm({
  "lib/meta/icon_airport-transfer 2.svg.ts"() {
    meta818 = {
      "description": "An icon representing the transfer service at an airport, indicating the location to go for transportation between terminals or to/from the airport.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "Airport",
        "Transfer",
        "Terminal",
        "Service",
        "Transportation",
        "Travel",
        "Sign",
        "Direction",
        "Navigation",
        "Wayfinding"
      ],
      "title": "Airport Transfer 2"
    };
    icon_airport_transfer_2_svg_default = meta818;
  }
});

// lib/meta/icon_airport-transfer.svg.ts
var icon_airport_transfer_svg_exports = {};
__export(icon_airport_transfer_svg_exports, {
  default: () => icon_airport_transfer_svg_default,
  meta: () => meta819
});
var meta819, icon_airport_transfer_svg_default;
var init_icon_airport_transfer_svg = __esm({
  "lib/meta/icon_airport-transfer.svg.ts"() {
    meta819 = {
      "description": "An icon representing airport transfer services, typically used for indicating shuttle services or transportation between terminals at an airport.",
      "category": [
        "Transport"
      ],
      "tag": [
        "airport transfer",
        "shuttle",
        "airport shuttle",
        "transportation",
        "terminal",
        "wayfinding",
        "transfer service",
        "travel",
        "transit",
        "pickup"
      ],
      "title": "Airport Transfer"
    };
    icon_airport_transfer_svg_default = meta819;
  }
});

// lib/meta/icon_anchor.svg.ts
var icon_anchor_svg_exports = {};
__export(icon_anchor_svg_exports, {
  default: () => icon_anchor_svg_default,
  meta: () => meta820
});
var meta820, icon_anchor_svg_default;
var init_icon_anchor_svg = __esm({
  "lib/meta/icon_anchor.svg.ts"() {
    meta820 = {
      "description": "An icon of an anchor, used in wayfinding to indicate a location or point of interest near a body of water. The anchor is a symbol often associated with maritime themes and navigation.",
      "category": [
        "Wayfinding",
        "Symbol"
      ],
      "tag": [
        "Navigation",
        "Water",
        "Maritime",
        "Direction",
        "Point of interest",
        "Location",
        "Sea",
        "Ocean",
        "Sailor",
        "Boat"
      ],
      "title": "Anchor"
    };
    icon_anchor_svg_default = meta820;
  }
});

// lib/meta/icon_bicycle-surfboard.svg.ts
var icon_bicycle_surfboard_svg_exports = {};
__export(icon_bicycle_surfboard_svg_exports, {
  default: () => icon_bicycle_surfboard_svg_default,
  meta: () => meta821
});
var meta821, icon_bicycle_surfboard_svg_default;
var init_icon_bicycle_surfboard_svg = __esm({
  "lib/meta/icon_bicycle-surfboard.svg.ts"() {
    meta821 = {
      "description": "The bicycle-surfboard icon is a wayfinding symbol that indicates the presence of a bicycle rental station that provides specialized bicycles equipped with surfboard racks.",
      "category": [
        "Wayfinding",
        "Transport"
      ],
      "tag": [
        "Bicycle",
        "Surfboard",
        "Rental",
        "Station",
        "Tourism",
        "Beach",
        "Outdoor",
        "Adventure",
        "Recreation"
      ],
      "title": "Bicycle Surfboard"
    };
    icon_bicycle_surfboard_svg_default = meta821;
  }
});

// lib/meta/icon_bicycle.svg.ts
var icon_bicycle_svg_exports = {};
__export(icon_bicycle_svg_exports, {
  default: () => icon_bicycle_svg_default,
  meta: () => meta822
});
var meta822, icon_bicycle_svg_default;
var init_icon_bicycle_svg = __esm({
  "lib/meta/icon_bicycle.svg.ts"() {
    meta822 = {
      "description": "The bicycle icon is used to indicate a bicycle route or path for cyclists. It is commonly used in wayfinding systems to guide users to bike-friendly paths.",
      "category": [
        "Wayfinding",
        "Transport"
      ],
      "tag": [
        "bike",
        "cycling",
        "route",
        "path",
        "navigation",
        "outdoor",
        "exercise",
        "recreation",
        "direction",
        "signage"
      ],
      "title": "Bicycle"
    };
    icon_bicycle_svg_default = meta822;
  }
});

// lib/meta/icon_briefcase-cross.svg.ts
var icon_briefcase_cross_svg_exports = {};
__export(icon_briefcase_cross_svg_exports, {
  default: () => icon_briefcase_cross_svg_default,
  meta: () => meta823
});
var meta823, icon_briefcase_cross_svg_default;
var init_icon_briefcase_cross_svg = __esm({
  "lib/meta/icon_briefcase-cross.svg.ts"() {
    meta823 = {
      "description": "The briefcase-cross icon is a symbol representing a briefcase with a red cross over it, typically used to indicate that the location or service related to business or work is closed or unavailable.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "briefcase",
        "cross",
        "closed",
        "unavailable",
        "business",
        "work",
        "location",
        "service",
        "icon"
      ],
      "title": "Briefcase Cross"
    };
    icon_briefcase_cross_svg_default = meta823;
  }
});

// lib/meta/icon_car-parking-indoor.svg.ts
var icon_car_parking_indoor_svg_exports = {};
__export(icon_car_parking_indoor_svg_exports, {
  default: () => icon_car_parking_indoor_svg_default,
  meta: () => meta824
});
var meta824, icon_car_parking_indoor_svg_default;
var init_icon_car_parking_indoor_svg = __esm({
  "lib/meta/icon_car-parking-indoor.svg.ts"() {
    meta824 = {
      description: "The indoor car parking icon is used to provide directions and guidance for locating indoor parking spaces for vehicles.",
      category: ["Wayfinding", "Transport"],
      tag: ["Indoor", "Parking", "Car", "Vehicles", "Navigation", "Directions", "Guidance", "Automobiles", "Garage"],
      title: "Indoor Car Parking"
    };
    icon_car_parking_indoor_svg_default = meta824;
  }
});

// lib/meta/icon_car-parking-outside.svg.ts
var icon_car_parking_outside_svg_exports = {};
__export(icon_car_parking_outside_svg_exports, {
  default: () => icon_car_parking_outside_svg_default,
  meta: () => meta825
});
var meta825, icon_car_parking_outside_svg_default;
var init_icon_car_parking_outside_svg = __esm({
  "lib/meta/icon_car-parking-outside.svg.ts"() {
    meta825 = {
      description: "An icon depicting a car parked outside, usually used as a wayfinding symbol to indicate outdoor parking areas.",
      category: ["Transport", "Wayfinding"],
      tag: ["car", "parking", "outdoor", "vehicle", "direction", "navigation", "parking lot", "street", "road", "wayfinding"],
      title: "Car Parking Outside"
    };
    icon_car_parking_outside_svg_default = meta825;
  }
});

// lib/meta/icon_car-parking.svg.ts
var icon_car_parking_svg_exports = {};
__export(icon_car_parking_svg_exports, {
  default: () => icon_car_parking_svg_default,
  meta: () => meta826
});
var meta826, icon_car_parking_svg_default;
var init_icon_car_parking_svg = __esm({
  "lib/meta/icon_car-parking.svg.ts"() {
    meta826 = {
      description: "The icon depicts a car parking area, typically used to indicate the location of a parking lot or parking space. It can help users navigate and find parking easily.",
      category: ["Wayfinding", "Transport"],
      tag: ["car", "parking", "navigation", "find", "location", "lot", "space", "vehicle", "street", "park"],
      title: "Car Parking"
    };
    icon_car_parking_svg_default = meta826;
  }
});

// lib/meta/icon_car.svg.ts
var icon_car_svg_exports = {};
__export(icon_car_svg_exports, {
  default: () => icon_car_svg_default,
  meta: () => meta827
});
var meta827, icon_car_svg_default;
var init_icon_car_svg = __esm({
  "lib/meta/icon_car.svg.ts"() {
    meta827 = {
      "description": "An icon representing a car, often used to indicate directions, parking areas or transportation facilities.",
      "category": [
        "Wayfinding",
        "Transport"
      ],
      "tag": [
        "Vehicle",
        "Automobile",
        "Road",
        "Navigation",
        "Driving",
        "Transportation",
        "Car park",
        "Travel",
        "Traffic",
        "Route"
      ],
      "title": "Car"
    };
    icon_car_svg_default = meta827;
  }
});

// lib/meta/icon_changing-area.svg.ts
var icon_changing_area_svg_exports = {};
__export(icon_changing_area_svg_exports, {
  default: () => icon_changing_area_svg_default,
  meta: () => meta828
});
var meta828, icon_changing_area_svg_default;
var init_icon_changing_area_svg = __esm({
  "lib/meta/icon_changing-area.svg.ts"() {
    meta828 = {
      description: "The changing area icon represents a location or facility where individuals can change their clothes or attire. It is commonly found in areas such as dressing rooms, locker rooms, or restrooms.",
      category: ["Wayfinding"],
      tag: ["changing area", "facility", "clothes", "attire", "dressing room", "locker room", "restroom", "changing room", "personal space", "privacy"],
      title: "Changing Area"
    };
    icon_changing_area_svg_default = meta828;
  }
});

// lib/meta/icon_check in.svg.ts
var icon_check_in_svg_exports = {};
__export(icon_check_in_svg_exports, {
  default: () => icon_check_in_svg_default,
  meta: () => meta829
});
var meta829, icon_check_in_svg_default;
var init_icon_check_in_svg = __esm({
  "lib/meta/icon_check in.svg.ts"() {
    meta829 = {
      description: "The check in icon is used in wayfinding to indicate a location where individuals can register their presence or receive services.",
      category: ["Wayfinding"],
      tag: ["Check in", "Location", "Registration", "Service", "Navigation", "Point of interest", "Marker", "Information", "Guide", "Direction"],
      title: "Check In"
    };
    icon_check_in_svg_default = meta829;
  }
});

// lib/meta/icon_city-bus.svg.ts
var icon_city_bus_svg_exports = {};
__export(icon_city_bus_svg_exports, {
  default: () => icon_city_bus_svg_default,
  meta: () => meta830
});
var meta830, icon_city_bus_svg_default;
var init_icon_city_bus_svg = __esm({
  "lib/meta/icon_city-bus.svg.ts"() {
    meta830 = {
      description: "City bus icon for wayfinding purposes, commonly used to indicate bus stops or public transportation locations in urban areas.",
      category: ["Transport", "Wayfinding"],
      tag: ["City bus", "Public transportation", "Urban", "Bus stop", "Travel", "Transit system", "Icon", "Symbol", "Navigation", "Transportation"],
      title: "City Bus"
    };
    icon_city_bus_svg_default = meta830;
  }
});

// lib/meta/icon_cross-circled.svg.ts
var icon_cross_circled_svg_exports = {};
__export(icon_cross_circled_svg_exports, {
  default: () => icon_cross_circled_svg_default,
  meta: () => meta831
});
var meta831, icon_cross_circled_svg_default;
var init_icon_cross_circled_svg = __esm({
  "lib/meta/icon_cross-circled.svg.ts"() {
    meta831 = {
      "description": "The cross-circled icon typically represents locations where points of interest have been crossed out or canceled. It is commonly used in wayfinding systems to indicate places that are unavailable or no longer accessible.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "Crossed out",
        "Canceled",
        "Unavailable",
        "Not accessible",
        "Navigation",
        "Map",
        "Location",
        "Indicator",
        "Symbol"
      ],
      "title": "Cross Circled"
    };
    icon_cross_circled_svg_default = meta831;
  }
});

// lib/meta/icon_cross.svg.ts
var icon_cross_svg_exports = {};
__export(icon_cross_svg_exports, {
  default: () => icon_cross_svg_default,
  meta: () => meta832
});
var meta832, icon_cross_svg_default;
var init_icon_cross_svg = __esm({
  "lib/meta/icon_cross.svg.ts"() {
    meta832 = {
      "description": "The icon 'cross' typically represents a point of interest or a location on a map. It is commonly used in wayfinding signage to indicate a specific destination or area.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "Navigation",
        "Map",
        "Location",
        "Destination",
        "Signage",
        "Symbol",
        "Marker",
        "Point of interest",
        "Direction",
        "Guide"
      ],
      "title": "Cross"
    };
    icon_cross_svg_default = meta832;
  }
});

// lib/meta/icon_cruiseship.svg.ts
var icon_cruiseship_svg_exports = {};
__export(icon_cruiseship_svg_exports, {
  default: () => icon_cruiseship_svg_default,
  meta: () => meta833
});
var meta833, icon_cruiseship_svg_default;
var init_icon_cruiseship_svg = __esm({
  "lib/meta/icon_cruiseship.svg.ts"() {
    meta833 = {
      "description": "The cruiseship icon is a representation of a large passenger ship designed for leisure voyages. Often seen in travel brochures or on signage to indicate the location of a cruise dock or terminal.",
      "category": [
        "Transport"
      ],
      "tag": [
        "cruise",
        "ship",
        "boat",
        "ocean",
        "vacation",
        "travel",
        "tourism",
        "nautical",
        "passenger",
        "leisure"
      ],
      "title": "Cruise Ship"
    };
    icon_cruiseship_svg_default = meta833;
  }
});

// lib/meta/icon_elevator 1.svg.ts
var icon_elevator_1_svg_exports = {};
__export(icon_elevator_1_svg_exports, {
  default: () => icon_elevator_1_svg_default,
  meta: () => meta834
});
var meta834, icon_elevator_1_svg_default;
var init_icon_elevator_1_svg = __esm({
  "lib/meta/icon_elevator 1.svg.ts"() {
    meta834 = {
      "description": "A simple icon representing an elevator, typically used for wayfinding purposes in buildings. The icon features a square shape with a door-like design at the bottom.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "Elevator",
        "Building",
        "Indoor",
        "Direction",
        "Navigation",
        "Vertical",
        "Transportation",
        "Floor",
        "Lift",
        "Accessibility"
      ],
      "title": "Elevator 1"
    };
    icon_elevator_1_svg_default = meta834;
  }
});

// lib/meta/icon_elevator 2.svg.ts
var icon_elevator_2_svg_exports = {};
__export(icon_elevator_2_svg_exports, {
  default: () => icon_elevator_2_svg_default,
  meta: () => meta835
});
var meta835, icon_elevator_2_svg_default;
var init_icon_elevator_2_svg = __esm({
  "lib/meta/icon_elevator 2.svg.ts"() {
    meta835 = {
      "description": "Elevator 2 icon for indicating the location of a second elevator in a building. Perfect for use in wayfinding signage or maps.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "Elevator 2",
        "Location",
        "Indication",
        "Building",
        "Wayfinding",
        "Signage",
        "Maps",
        "Direction",
        "Navigation",
        "Facility"
      ],
      "title": "Elevator 2"
    };
    icon_elevator_2_svg_default = meta835;
  }
});

// lib/meta/icon_elevator 3.svg.ts
var icon_elevator_3_svg_exports = {};
__export(icon_elevator_3_svg_exports, {
  default: () => icon_elevator_3_svg_default,
  meta: () => meta836
});
var meta836, icon_elevator_3_svg_default;
var init_icon_elevator_3_svg = __esm({
  "lib/meta/icon_elevator 3.svg.ts"() {
    meta836 = {
      "description": "Elevator icon for wayfinding purposes, showing a stylized representation of an elevator with number 3 displayed prominently.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "Elevator",
        "Navigation",
        "Number",
        "Floor",
        "Indoor",
        "Building",
        "Transportation",
        "Vertical",
        "Direction",
        "Signage"
      ],
      "title": "Elevator 3"
    };
    icon_elevator_3_svg_default = meta836;
  }
});

// lib/meta/icon_elevator 4.svg.ts
var icon_elevator_4_svg_exports = {};
__export(icon_elevator_4_svg_exports, {
  default: () => icon_elevator_4_svg_default,
  meta: () => meta837
});
var meta837, icon_elevator_4_svg_default;
var init_icon_elevator_4_svg = __esm({
  "lib/meta/icon_elevator 4.svg.ts"() {
    meta837 = {
      "description": "Elevator icon that represents wayfinding and navigation to floor 4 in a building or facility.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "Elevator",
        "Navigation",
        "Floor",
        "Building",
        "Facility",
        "Direction",
        "Indoor",
        "Transportation",
        "Vertical",
        "Levels"
      ],
      "title": "Elevator 4"
    };
    icon_elevator_4_svg_default = meta837;
  }
});

// lib/meta/icon_escalator-down.svg.ts
var icon_escalator_down_svg_exports = {};
__export(icon_escalator_down_svg_exports, {
  default: () => icon_escalator_down_svg_default,
  meta: () => meta838
});
var meta838, icon_escalator_down_svg_default;
var init_icon_escalator_down_svg = __esm({
  "lib/meta/icon_escalator-down.svg.ts"() {
    meta838 = {
      "description": "An icon representing a downward escalator, often used for wayfinding to indicate the location of the escalator going down.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "Escalator",
        "Down",
        "Transportation",
        "Stairs",
        "Direction",
        "Navigation",
        "Building",
        "Indoor",
        "Public",
        "Facility"
      ],
      "title": "Escalator Down"
    };
    icon_escalator_down_svg_default = meta838;
  }
});

// lib/meta/icon_escalator-up.svg.ts
var icon_escalator_up_svg_exports = {};
__export(icon_escalator_up_svg_exports, {
  default: () => icon_escalator_up_svg_default,
  meta: () => meta839
});
var meta839, icon_escalator_up_svg_default;
var init_icon_escalator_up_svg = __esm({
  "lib/meta/icon_escalator-up.svg.ts"() {
    meta839 = {
      "description": "An icon indicating the direction for going up on an escalator, commonly used for wayfinding purposes in public spaces such as airports, train stations, and shopping malls.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "Escalator",
        "Direction",
        "Stairs",
        "Indication",
        "Navigation",
        "Public spaces",
        "Transportation",
        "Building",
        "Architecture",
        "Interior design"
      ],
      "title": "Escalator Up"
    };
    icon_escalator_up_svg_default = meta839;
  }
});

// lib/meta/icon_escalator.svg.ts
var icon_escalator_svg_exports = {};
__export(icon_escalator_svg_exports, {
  default: () => icon_escalator_svg_default,
  meta: () => meta840
});
var meta840, icon_escalator_svg_default;
var init_icon_escalator_svg = __esm({
  "lib/meta/icon_escalator.svg.ts"() {
    meta840 = {
      "description": "An escalator icon typically represents a moving staircase used for transporting people between different levels of a building. It is commonly used in signage and wayfinding systems to indicate the location of escalators.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "Escalator",
        "Stairs",
        "Transportation",
        "Signage",
        "Directional",
        "Navigation",
        "Urban",
        "Facility",
        "Public",
        "Interior"
      ],
      "title": "Escalator"
    };
    icon_escalator_svg_default = meta840;
  }
});

// lib/meta/icon_family.svg.ts
var icon_family_svg_exports = {};
__export(icon_family_svg_exports, {
  default: () => icon_family_svg_default,
  meta: () => meta841
});
var meta841, icon_family_svg_default;
var init_icon_family_svg = __esm({
  "lib/meta/icon_family.svg.ts"() {
    meta841 = {
      description: "The family icon is a symbol representing unity and togetherness. It typically features two adults and a child, symbolizing a nuclear family. This icon is often used in wayfinding signs to indicate the location of family-friendly areas or facilities.",
      category: ["Wayfinding", "Symbol"],
      tag: ["Unity", "Togetherness", "Community", "Parents", "Children", "Safety", "Love", "Nuclear family", "Wayfinding"],
      title: "Family"
    };
    icon_family_svg_default = meta841;
  }
});

// lib/meta/icon_ferry.svg.ts
var icon_ferry_svg_exports = {};
__export(icon_ferry_svg_exports, {
  default: () => icon_ferry_svg_default,
  meta: () => meta842
});
var meta842, icon_ferry_svg_default;
var init_icon_ferry_svg = __esm({
  "lib/meta/icon_ferry.svg.ts"() {
    meta842 = {
      "description": "A ferry icon typically represents a mode of transportation that travels over bodies of water, often used for commuting or tourism purposes.",
      "category": [
        "Transport"
      ],
      "tag": [
        "water",
        "boat",
        "sail",
        "ocean",
        "travel",
        "navigation",
        "marine",
        "vessel",
        "ship",
        "passenger"
      ],
      "title": "Ferry"
    };
    icon_ferry_svg_default = meta842;
  }
});

// lib/meta/icon_fire-extinguisher.svg.ts
var icon_fire_extinguisher_svg_exports = {};
__export(icon_fire_extinguisher_svg_exports, {
  default: () => icon_fire_extinguisher_svg_default,
  meta: () => meta843
});
var meta843, icon_fire_extinguisher_svg_default;
var init_icon_fire_extinguisher_svg = __esm({
  "lib/meta/icon_fire-extinguisher.svg.ts"() {
    meta843 = {
      "description": "A symbol representing a fire extinguisher, commonly used for wayfinding in case of emergencies.",
      "category": [
        "Wayfinding",
        "Symbol"
      ],
      "tag": [
        "Emergency",
        "Safety",
        "Equipment",
        "Extinguish",
        "Protection",
        "Fire Safety",
        "Emergency Procedure",
        "Fire Prevention",
        "First Aid"
      ],
      "title": "Fire Extinguisher"
    };
    icon_fire_extinguisher_svg_default = meta843;
  }
});

// lib/meta/icon_fire-flame.svg.ts
var icon_fire_flame_svg_exports = {};
__export(icon_fire_flame_svg_exports, {
  default: () => icon_fire_flame_svg_default,
  meta: () => meta844
});
var meta844, icon_fire_flame_svg_default;
var init_icon_fire_flame_svg = __esm({
  "lib/meta/icon_fire-flame.svg.ts"() {
    meta844 = {
      description: "A simple icon representing a fire flame, often used to indicate fire, heat, danger, or energy in wayfinding systems or maps.",
      category: ["Symbol", "Wayfinding"],
      tag: ["heat", "danger", "energy", "burning", "hot", "flame", "inferno", "warning", "campfire", "emergency"],
      title: "Fire Flame"
    };
    icon_fire_flame_svg_default = meta844;
  }
});

// lib/meta/icon_fire-hose.svg.ts
var icon_fire_hose_svg_exports = {};
__export(icon_fire_hose_svg_exports, {
  default: () => icon_fire_hose_svg_default,
  meta: () => meta845
});
var meta845, icon_fire_hose_svg_default;
var init_icon_fire_hose_svg = __esm({
  "lib/meta/icon_fire-hose.svg.ts"() {
    meta845 = {
      "description": "An icon of a fire hose, typically used for emergency situations to extinguish fires. The fire hose is depicted with a nozzle and water flowing out of it.",
      "category": [
        "Wayfinding",
        "Emergency"
      ],
      "tag": [
        "Fire",
        "Emergency",
        "Hose",
        "Extinguish",
        "Safety",
        "Spray",
        "Flowing",
        "Water",
        "Rescue",
        "Firefighting"
      ],
      "title": "Fire Hose"
    };
    icon_fire_hose_svg_default = meta845;
  }
});

// lib/meta/icon_gravestone 2.svg.ts
var icon_gravestone_2_svg_exports = {};
__export(icon_gravestone_2_svg_exports, {
  default: () => icon_gravestone_2_svg_default,
  meta: () => meta846
});
var meta846, icon_gravestone_2_svg_default;
var init_icon_gravestone_2_svg = __esm({
  "lib/meta/icon_gravestone 2.svg.ts"() {
    meta846 = {
      "description": "Icon of a gravestone, commonly used in wayfinding signage to indicate a cemetery or burial ground.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "Gravestone",
        "Cemetery",
        "Burial ground",
        "Memorial",
        "Death",
        "Tombstone",
        "Old",
        "Vintage",
        "Marker",
        "Rest in peace"
      ],
      "title": "Gravestone 2"
    };
    icon_gravestone_2_svg_default = meta846;
  }
});

// lib/meta/icon_gravestone 3.svg.ts
var icon_gravestone_3_svg_exports = {};
__export(icon_gravestone_3_svg_exports, {
  default: () => icon_gravestone_3_svg_default,
  meta: () => meta847
});
var meta847, icon_gravestone_3_svg_default;
var init_icon_gravestone_3_svg = __esm({
  "lib/meta/icon_gravestone 3.svg.ts"() {
    meta847 = {
      "description": "Gravestone icon typically represents a cemetery or a burial site. It can be used in wayfinding signs or maps to indicate the location of a cemetery.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "Gravestone",
        "Tombstone",
        "Memorial",
        "Death",
        "Burial",
        "Cemetery",
        "Rest in peace",
        "Funeral",
        "Headstone",
        "RIP"
      ],
      "title": "Gravestone 3"
    };
    icon_gravestone_3_svg_default = meta847;
  }
});

// lib/meta/icon_gravestone.svg.ts
var icon_gravestone_svg_exports = {};
__export(icon_gravestone_svg_exports, {
  default: () => icon_gravestone_svg_default,
  meta: () => meta848
});
var meta848, icon_gravestone_svg_default;
var init_icon_gravestone_svg = __esm({
  "lib/meta/icon_gravestone.svg.ts"() {
    meta848 = {
      "description": "The gravestone icon is a symbol commonly used in wayfinding systems to indicate a cemetery or burial ground. It typically represents a marker for a deceased person's final resting place.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "grave",
        "tombstone",
        "memorial",
        "death",
        "burial",
        "funeral",
        "cemetery",
        "remembrance",
        "mourning",
        "headstone"
      ],
      "title": "Gravestone"
    };
    icon_gravestone_svg_default = meta848;
  }
});

// lib/meta/icon_hello-goodbye.svg.ts
var icon_hello_goodbye_svg_exports = {};
__export(icon_hello_goodbye_svg_exports, {
  default: () => icon_hello_goodbye_svg_default,
  meta: () => meta849
});
var meta849, icon_hello_goodbye_svg_default;
var init_icon_hello_goodbye_svg = __esm({
  "lib/meta/icon_hello-goodbye.svg.ts"() {
    meta849 = {
      description: "An icon representing a wayfinding sign with 'hello' text on one side and 'goodbye' text on the other side. This icon can be used to indicate directions or locations for greeting and departing.",
      category: ["Wayfinding"],
      tag: ["signage", "direction", "greeting", "farewell", "communication", "roadmap", "navigation", "symbol", "welcome", "exit"],
      title: "Hello Goodbye"
    };
    icon_hello_goodbye_svg_default = meta849;
  }
});

// lib/meta/icon_location-marker.svg.ts
var icon_location_marker_svg_exports = {};
__export(icon_location_marker_svg_exports, {
  default: () => icon_location_marker_svg_default,
  meta: () => meta850
});
var meta850, icon_location_marker_svg_default;
var init_icon_location_marker_svg = __esm({
  "lib/meta/icon_location-marker.svg.ts"() {
    meta850 = {
      "description": "Location marker icon that signifies a specific spot on a map or location. Used commonly in various applications for indicating places of interest or directions.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "navigation",
        "map",
        "pin",
        "place",
        "guide",
        "direction",
        "destination",
        "marker",
        "destination",
        "location"
      ],
      "title": "Location Marker"
    };
    icon_location_marker_svg_default = meta850;
  }
});

// lib/meta/icon_location-path 2.svg.ts
var icon_location_path_2_svg_exports = {};
__export(icon_location_path_2_svg_exports, {
  default: () => icon_location_path_2_svg_default,
  meta: () => meta851
});
var meta851, icon_location_path_2_svg_default;
var init_icon_location_path_2_svg = __esm({
  "lib/meta/icon_location-path 2.svg.ts"() {
    meta851 = {
      description: "The icon 'location-path 2' represents a visual wayfinding element showing a path or route to a location. It can be used to indicate navigation, directions, or a travel route on maps or in any wayfinding context.",
      category: ["Wayfinding"],
      tag: ["Location", "Directions", "Route", "Navigation", "Maps", "Travel", "Wayfinding", "Path", "Guide", "Journey"],
      title: "Location Path 2"
    };
    icon_location_path_2_svg_default = meta851;
  }
});

// lib/meta/icon_location-path.svg.ts
var icon_location_path_svg_exports = {};
__export(icon_location_path_svg_exports, {
  default: () => icon_location_path_svg_default,
  meta: () => meta852
});
var meta852, icon_location_path_svg_default;
var init_icon_location_path_svg = __esm({
  "lib/meta/icon_location-path.svg.ts"() {
    meta852 = {
      description: "An icon indicating a path or route to a specific location, commonly used for navigation purposes.",
      category: ["Wayfinding"],
      tag: ["Location", "Path", "Route", "Navigation", "Direction", "Map", "GPS", "Travel", "Explore", "Journey"],
      title: "Location Path"
    };
    icon_location_path_svg_default = meta852;
  }
});

// lib/meta/icon_location-pin.svg.ts
var icon_location_pin_svg_exports = {};
__export(icon_location_pin_svg_exports, {
  default: () => icon_location_pin_svg_default,
  meta: () => meta853
});
var meta853, icon_location_pin_svg_default;
var init_icon_location_pin_svg = __esm({
  "lib/meta/icon_location-pin.svg.ts"() {
    meta853 = {
      "description": "Location pin icon is used to indicate a specific geographic location or point of interest on a map.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "map",
        "navigation",
        "pointer",
        "GPS",
        "marker",
        "geolocation",
        "direction",
        "destination",
        "location"
      ],
      "title": "Location Pin"
    };
    icon_location_pin_svg_default = meta853;
  }
});

// lib/meta/icon_lounge.svg.ts
var icon_lounge_svg_exports = {};
__export(icon_lounge_svg_exports, {
  default: () => icon_lounge_svg_default,
  meta: () => meta854
});
var meta854, icon_lounge_svg_default;
var init_icon_lounge_svg = __esm({
  "lib/meta/icon_lounge.svg.ts"() {
    meta854 = {
      description: "The lounge icon represents a designated area for relaxation and socialization. It is commonly used in wayfinding systems to guide people towards lounges or resting areas.",
      category: ["Wayfinding", "Interface"],
      tag: ["rest", "relaxation", "socialization", "seating", "waiting area", "interior design", "public space", "navigation", "hospitality", "travel"],
      title: "Lounge"
    };
    icon_lounge_svg_default = meta854;
  }
});

// lib/meta/icon_luggage-belt.svg.ts
var icon_luggage_belt_svg_exports = {};
__export(icon_luggage_belt_svg_exports, {
  default: () => icon_luggage_belt_svg_default,
  meta: () => meta855
});
var meta855, icon_luggage_belt_svg_default;
var init_icon_luggage_belt_svg = __esm({
  "lib/meta/icon_luggage-belt.svg.ts"() {
    meta855 = {
      "description": "The luggage belt icon is commonly used in airports and transportation hubs to indicate where travelers can collect their baggage. It features a moving conveyor belt with suitcases on it.",
      "category": [
        "Wayfinding",
        "Transport"
      ],
      "tag": [
        "luggage belt",
        "baggage claim",
        "airport",
        "travel",
        "suitcase",
        "conveyor belt",
        "transportation",
        "navigation",
        "destination",
        "journey"
      ],
      "title": "Luggage Belt"
    };
    icon_luggage_belt_svg_default = meta855;
  }
});

// lib/meta/icon_luggage-locker.svg.ts
var icon_luggage_locker_svg_exports = {};
__export(icon_luggage_locker_svg_exports, {
  default: () => icon_luggage_locker_svg_default,
  meta: () => meta856
});
var meta856, icon_luggage_locker_svg_default;
var init_icon_luggage_locker_svg = __esm({
  "lib/meta/icon_luggage-locker.svg.ts"() {
    meta856 = {
      "description": "The luggage locker icon represents a designated area where travelers can securely store their luggage for a certain period of time. These lockers are often found in transportation hubs such as airports, train stations, and bus stations.",
      "category": [
        "Wayfinding",
        "Transport"
      ],
      "tag": [
        "Luggage",
        "Locker",
        "Storage",
        "Travel",
        "Baggage",
        "Security",
        "Station",
        "Airport",
        "Railway",
        "Public"
      ],
      "title": "Luggage Locker"
    };
    icon_luggage_locker_svg_default = meta856;
  }
});

// lib/meta/icon_luggage-trolley.svg.ts
var icon_luggage_trolley_svg_exports = {};
__export(icon_luggage_trolley_svg_exports, {
  default: () => icon_luggage_trolley_svg_default,
  meta: () => meta857
});
var meta857, icon_luggage_trolley_svg_default;
var init_icon_luggage_trolley_svg = __esm({
  "lib/meta/icon_luggage-trolley.svg.ts"() {
    meta857 = {
      "description": "The luggage trolley icon is typically used to indicate the location of baggage carts or trolleys in airports, train stations, or other transportation hubs. It helps travelers easily identify where they can find carts to transport their luggage.",
      "category": [
        "Wayfinding",
        "Transport"
      ],
      "tag": [
        "Luggage",
        "Trolley",
        "Baggage",
        "Travel",
        "Transportation",
        "Airport",
        "Train station",
        "Cart",
        "Navigation",
        "Signage"
      ],
      "title": "Luggage Trolley"
    };
    icon_luggage_trolley_svg_default = meta857;
  }
});

// lib/meta/icon_luggage.svg.ts
var icon_luggage_svg_exports = {};
__export(icon_luggage_svg_exports, {
  default: () => icon_luggage_svg_default,
  meta: () => meta858
});
var meta858, icon_luggage_svg_default;
var init_icon_luggage_svg = __esm({
  "lib/meta/icon_luggage.svg.ts"() {
    meta858 = {
      "description": "The luggage icon represents luggage or baggage, often used in signs to indicate the location of baggage drop-off or pick-up areas in airports, train stations, and other transportation terminals.",
      "category": [
        "Wayfinding",
        "Transport"
      ],
      "tag": [
        "travel",
        "baggage",
        "suitcase",
        "airport",
        "navigation",
        "vacation",
        "trip",
        "journey",
        "storage",
        "transportation"
      ],
      "title": "Luggage"
    };
    icon_luggage_svg_default = meta858;
  }
});

// lib/meta/icon_map.svg.ts
var icon_map_svg_exports = {};
__export(icon_map_svg_exports, {
  default: () => icon_map_svg_default,
  meta: () => meta859
});
var meta859, icon_map_svg_default;
var init_icon_map_svg = __esm({
  "lib/meta/icon_map.svg.ts"() {
    meta859 = {
      description: "The map icon represents a graphic symbol used to represent locations, provide directions or show geographic information.",
      category: ["Wayfinding"],
      tag: ["Navigation", "Location", "Pinpoint", "Travel", "Exploration", "Guide", "Cartography", "Destination", "Journey", "Direction"],
      title: "Map"
    };
    icon_map_svg_default = meta859;
  }
});

// lib/meta/icon_map2.svg.ts
var icon_map2_svg_exports = {};
__export(icon_map2_svg_exports, {
  default: () => icon_map2_svg_default,
  meta: () => meta860
});
var meta860, icon_map2_svg_default;
var init_icon_map2_svg = __esm({
  "lib/meta/icon_map2.svg.ts"() {
    meta860 = {
      description: "The map2 icon is an illustration representing a map with various landmarks, roads, and geographical details. It is commonly used in digital interfaces for wayfinding purposes, such as displaying locations, directions, and points of interest.",
      category: ["Wayfinding", "Interface"],
      tag: ["Map", "Landmarks", "Geographical", "Roads", "Directions", "Travel", "Navigation", "Points of Interest", "Location", "Explore"],
      title: "Map 2"
    };
    icon_map2_svg_default = meta860;
  }
});

// lib/meta/icon_map3.svg.ts
var icon_map3_svg_exports = {};
__export(icon_map3_svg_exports, {
  default: () => icon_map3_svg_default,
  meta: () => meta861
});
var meta861, icon_map3_svg_default;
var init_icon_map3_svg = __esm({
  "lib/meta/icon_map3.svg.ts"() {
    meta861 = {
      description: "The map3 icon represents a wayfinding tool that helps users navigate through locations with ease. It is designed to provide detailed maps and directions for better orientation and travel planning.",
      category: ["Wayfinding", "Interface"],
      tag: ["navigation", "travel", "directions", "location", "exploration", "GPS", "routes", "pathfinding", "destination", "orientation"],
      title: "Map 3"
    };
    icon_map3_svg_default = meta861;
  }
});

// lib/meta/icon_metro 2.svg.ts
var icon_metro_2_svg_exports = {};
__export(icon_metro_2_svg_exports, {
  default: () => icon_metro_2_svg_default,
  meta: () => meta862
});
var meta862, icon_metro_2_svg_default;
var init_icon_metro_2_svg = __esm({
  "lib/meta/icon_metro 2.svg.ts"() {
    meta862 = {
      "description": "Metro 2 wayfinding icon is a simple and modern symbol representing a metro or subway station. It can be used in various design projects related to transportation, maps, and navigation.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "Transportation",
        "Metro",
        "Subway",
        "Station",
        "Signage",
        "Map",
        "Navigation",
        "Symbol",
        "Public Transport",
        "Urban"
      ],
      "title": "Metro 2"
    };
    icon_metro_2_svg_default = meta862;
  }
});

// lib/meta/icon_metro.svg.ts
var icon_metro_svg_exports = {};
__export(icon_metro_svg_exports, {
  default: () => icon_metro_svg_default,
  meta: () => meta863
});
var meta863, icon_metro_svg_default;
var init_icon_metro_svg = __esm({
  "lib/meta/icon_metro.svg.ts"() {
    meta863 = {
      "description": "The metro icon is commonly used in wayfinding systems to indicate or represent a subway or underground train station. It can be used in maps, signage, or digital interfaces to guide users towards public transportation options.",
      "category": [
        "Wayfinding",
        "Transport"
      ],
      "tag": [
        "Metro",
        "Subway",
        "Underground",
        "Train station",
        "Public transportation",
        "Map",
        "Signage",
        "Transportation symbol",
        "Digital interface",
        "Wayfinding system"
      ],
      "title": "Metro"
    };
    icon_metro_svg_default = meta863;
  }
});

// lib/meta/icon_no-smoking-circled.svg.ts
var icon_no_smoking_circled_svg_exports = {};
__export(icon_no_smoking_circled_svg_exports, {
  default: () => icon_no_smoking_circled_svg_default,
  meta: () => meta864
});
var meta864, icon_no_smoking_circled_svg_default;
var init_icon_no_smoking_circled_svg = __esm({
  "lib/meta/icon_no-smoking-circled.svg.ts"() {
    meta864 = {
      "description": "A circular icon depicting a crossed-out cigarette, symbolizing a no-smoking area or policy.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "no smoking",
        "no smoking sign",
        "cigarette free",
        "smoking ban",
        "health",
        "public area",
        "prohibition",
        "circle",
        "symbol"
      ],
      "title": "No Smoking Circled"
    };
    icon_no_smoking_circled_svg_default = meta864;
  }
});

// lib/meta/icon_no-smoking.svg.ts
var icon_no_smoking_svg_exports = {};
__export(icon_no_smoking_svg_exports, {
  default: () => icon_no_smoking_svg_default,
  meta: () => meta865
});
var meta865, icon_no_smoking_svg_default;
var init_icon_no_smoking_svg = __esm({
  "lib/meta/icon_no-smoking.svg.ts"() {
    meta865 = {
      "description": "An icon depicting a cigarette surrounded by a red circle with a line through it, symbolizing a 'no-smoking' area or policy.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "Cigarette",
        "Prohibition",
        "Health",
        "Warning",
        "Signage",
        "Rule",
        "Forbidden",
        "Smoking Ban",
        "Policy",
        "Anti-smoking"
      ],
      "title": "No Smoking"
    };
    icon_no_smoking_svg_default = meta865;
  }
});

// lib/meta/icon_office-space.svg.ts
var icon_office_space_svg_exports = {};
__export(icon_office_space_svg_exports, {
  default: () => icon_office_space_svg_default,
  meta: () => meta866
});
var meta866, icon_office_space_svg_default;
var init_icon_office_space_svg = __esm({
  "lib/meta/icon_office-space.svg.ts"() {
    meta866 = {
      description: "The office-space icon is designed to represent a designated or common office area within a building. It can be used for wayfinding purposes to indicate the direction to office spaces, conference rooms, or workstations.",
      category: ["Wayfinding"],
      tag: ["office", "space", "building", "corporate", "workplace", "direction", "business", "interior", "facility", "room"],
      title: "Office Space"
    };
    icon_office_space_svg_default = meta866;
  }
});

// lib/meta/icon_palmtree-island-wave.svg.ts
var icon_palmtree_island_wave_svg_exports = {};
__export(icon_palmtree_island_wave_svg_exports, {
  default: () => icon_palmtree_island_wave_svg_default,
  meta: () => meta867
});
var meta867, icon_palmtree_island_wave_svg_default;
var init_icon_palmtree_island_wave_svg = __esm({
  "lib/meta/icon_palmtree-island-wave.svg.ts"() {
    meta867 = {
      "description": "The icon depicts a tropical palm tree on an island with waves below, symbolizing a picturesque beach destination. It can be used for wayfinding purposes to indicate beach locations or tropical getaways.",
      "category": [
        "Wayfinding",
        "Nature"
      ],
      "tag": [
        "palm tree",
        "island",
        "wave",
        "tropical",
        "beach",
        "destination",
        "vacation",
        "summer",
        "travel",
        "seaside"
      ],
      "title": "Palm Tree Island Wave"
    };
    icon_palmtree_island_wave_svg_default = meta867;
  }
});

// lib/meta/icon_palmtree-island.svg.ts
var icon_palmtree_island_svg_exports = {};
__export(icon_palmtree_island_svg_exports, {
  default: () => icon_palmtree_island_svg_default,
  meta: () => meta868
});
var meta868, icon_palmtree_island_svg_default;
var init_icon_palmtree_island_svg = __esm({
  "lib/meta/icon_palmtree-island.svg.ts"() {
    meta868 = {
      "description": "This icon depicts a tropical island with a single palm tree, often used as a symbol for island destinations or tropical getaways.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "palm tree",
        "island",
        "tropical",
        "vacation",
        "destination",
        "beach",
        "summer",
        "travel",
        "nature",
        "ocean"
      ],
      "title": "Palmtree Island"
    };
    icon_palmtree_island_svg_default = meta868;
  }
});

// lib/meta/icon_palmtree.svg.ts
var icon_palmtree_svg_exports = {};
__export(icon_palmtree_svg_exports, {
  default: () => icon_palmtree_svg_default,
  meta: () => meta869
});
var meta869, icon_palmtree_svg_default;
var init_icon_palmtree_svg = __esm({
  "lib/meta/icon_palmtree.svg.ts"() {
    meta869 = {
      "description": "The palmtree icon is a symbol commonly used for indicating tropical or exotic locations. It is often used in wayfinding signage to represent beaches, resorts, or vacation spots.",
      "category": [
        "Wayfinding",
        "Symbol"
      ],
      "tag": [
        "Nature",
        "Vacation",
        "Tropical",
        "Exotic",
        "Destination",
        "Travel",
        "Beach",
        "Resort",
        "Direction",
        "Signage"
      ],
      "title": "Palm Tree"
    };
    icon_palmtree_svg_default = meta869;
  }
});

// lib/meta/icon_parasol-island-wave.svg.ts
var icon_parasol_island_wave_svg_exports = {};
__export(icon_parasol_island_wave_svg_exports, {
  default: () => icon_parasol_island_wave_svg_default,
  meta: () => meta870
});
var meta870, icon_parasol_island_wave_svg_default;
var init_icon_parasol_island_wave_svg = __esm({
  "lib/meta/icon_parasol-island-wave.svg.ts"() {
    meta870 = {
      "description": "An icon of a parasol on an island with a wave in the background, representing a scenic wayfinding symbol for beaches or vacation spots.",
      "category": [
        "Wayfinding",
        "Nature"
      ],
      "tag": [
        "Parasol",
        "Island",
        "Wave",
        "Scenic",
        "Beach",
        "Vacation",
        "Travel",
        "Destination",
        "Nature",
        "Tourism"
      ],
      "title": "Parasol Island Wave"
    };
    icon_parasol_island_wave_svg_default = meta870;
  }
});

// lib/meta/icon_parasol-island.svg.ts
var icon_parasol_island_svg_exports = {};
__export(icon_parasol_island_svg_exports, {
  default: () => icon_parasol_island_svg_default,
  meta: () => meta871
});
var meta871, icon_parasol_island_svg_default;
var init_icon_parasol_island_svg = __esm({
  "lib/meta/icon_parasol-island.svg.ts"() {
    meta871 = {
      "description": "A colorful parasol on a sunny island symbolizing a relaxing and tropical destination for wayfinding purposes.",
      "category": [
        "Wayfinding",
        "Symbol"
      ],
      "tag": [
        "parasol",
        "island",
        "tropical",
        "destination",
        "wayfinding",
        "vacation",
        "travel",
        "beach",
        "summer",
        "sun"
      ],
      "title": "Parasol Island"
    };
    icon_parasol_island_svg_default = meta871;
  }
});

// lib/meta/icon_parasol.svg.ts
var icon_parasol_svg_exports = {};
__export(icon_parasol_svg_exports, {
  default: () => icon_parasol_svg_default,
  meta: () => meta872
});
var meta872, icon_parasol_svg_default;
var init_icon_parasol_svg = __esm({
  "lib/meta/icon_parasol.svg.ts"() {
    meta872 = {
      "description": "A parasol icon typically represents shade from the sun or protection from light rain. It is commonly used in navigation and wayfinding applications to indicate an area where parasols are available.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "umbrella",
        "shelter",
        "sun protection",
        "outdoor",
        "beach",
        "summer",
        "navigation",
        "map",
        "direction",
        "guide"
      ],
      "title": "Parasol"
    };
    icon_parasol_svg_default = meta872;
  }
});

// lib/meta/icon_plaster.svg.ts
var icon_plaster_svg_exports = {};
__export(icon_plaster_svg_exports, {
  default: () => icon_plaster_svg_default,
  meta: () => meta873
});
var meta873, icon_plaster_svg_default;
var init_icon_plaster_svg = __esm({
  "lib/meta/icon_plaster.svg.ts"() {
    meta873 = {
      "description": "A plaster icon typically represents first aid or medical facilities in a wayfinding system. It can also symbolize healing and care.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "plaster",
        "first aid",
        "medical",
        "healing",
        "healthcare",
        "injury",
        "treatment",
        "bandage",
        "care",
        "hospital"
      ],
      "title": "Plaster"
    };
    icon_plaster_svg_default = meta873;
  }
});

// lib/meta/icon_plasters.svg.ts
var icon_plasters_svg_exports = {};
__export(icon_plasters_svg_exports, {
  default: () => icon_plasters_svg_default,
  meta: () => meta874
});
var meta874, icon_plasters_svg_default;
var init_icon_plasters_svg = __esm({
  "lib/meta/icon_plasters.svg.ts"() {
    meta874 = {
      "description": "The icon depicts plasters or bandages, typically used for first aid purposes. It can be used to indicate locations of first aid stations, medical facilities, or areas where first aid supplies are available.",
      "category": [
        "Wayfinding",
        "Medical"
      ],
      "tag": [
        "Health",
        "First aid",
        "Injury",
        "Medical supplies",
        "Emergency",
        "Treatment",
        "Safety",
        "Healthcare",
        "Medical facilities"
      ],
      "title": "Plasters"
    };
    icon_plasters_svg_default = meta874;
  }
});

// lib/meta/icon_pointer-target.svg.ts
var icon_pointer_target_svg_exports = {};
__export(icon_pointer_target_svg_exports, {
  default: () => icon_pointer_target_svg_default,
  meta: () => meta875
});
var meta875, icon_pointer_target_svg_default;
var init_icon_pointer_target_svg = __esm({
  "lib/meta/icon_pointer-target.svg.ts"() {
    meta875 = {
      "description": "A pointer targeting an object, indicating selection or interaction. Used in user interfaces to highlight specific items for user actions.",
      "category": [
        "Interface"
      ],
      "tag": [
        "selection",
        "targeting",
        "click",
        "interaction",
        "user interface",
        "mouse pointer",
        "focus",
        "navigation",
        "cursor",
        "element"
      ],
      "title": "Pointer Target"
    };
    icon_pointer_target_svg_default = meta875;
  }
});

// lib/meta/icon_rental-car.svg.ts
var icon_rental_car_svg_exports = {};
__export(icon_rental_car_svg_exports, {
  default: () => icon_rental_car_svg_default,
  meta: () => meta876
});
var meta876, icon_rental_car_svg_default;
var init_icon_rental_car_svg = __esm({
  "lib/meta/icon_rental-car.svg.ts"() {
    meta876 = {
      "description": "The rental-car icon represents a means of transportation that can be hired temporarily for use by individuals or groups. It is commonly used to indicate car rental services or locations.",
      "category": [
        "Transport"
      ],
      "tag": [
        "car",
        "rental",
        "vehicle",
        "hire",
        "travel",
        "service",
        "transportation",
        "wayfinding",
        "temporary"
      ],
      "title": "Rental Car"
    };
    icon_rental_car_svg_default = meta876;
  }
});

// lib/meta/icon_restroom.svg.ts
var icon_restroom_svg_exports = {};
__export(icon_restroom_svg_exports, {
  default: () => icon_restroom_svg_default,
  meta: () => meta877
});
var meta877, icon_restroom_svg_default;
var init_icon_restroom_svg = __esm({
  "lib/meta/icon_restroom.svg.ts"() {
    meta877 = {
      description: "The restroom icon is commonly used for indicating the location of bathrooms or toilets. It features a universal symbol of a human figure with legs standing in front of a toilet bowl.",
      category: ["Wayfinding"],
      tag: ["Bathroom", "Toilet", "Washroom", "Restroom sign", "Public facility", "Navigation", "Hygiene", "Sanitation", "Gender-neutral restroom", "Restroom icon"],
      title: "Restroom"
    };
    icon_restroom_svg_default = meta877;
  }
});

// lib/meta/icon_security camera 2.svg.ts
var icon_security_camera_2_svg_exports = {};
__export(icon_security_camera_2_svg_exports, {
  default: () => icon_security_camera_2_svg_default,
  meta: () => meta878
});
var meta878, icon_security_camera_2_svg_default;
var init_icon_security_camera_2_svg = __esm({
  "lib/meta/icon_security camera 2.svg.ts"() {
    meta878 = {
      "description": "This icon represents a security camera used for surveillance purposes. It can be used in signs or maps to indicate the location of security cameras.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "security",
        "camera",
        "surveillance",
        "monitoring",
        "safety",
        "protection",
        "privacy",
        "CCTV",
        "watch",
        "observe"
      ],
      "title": "Security Camera 2"
    };
    icon_security_camera_2_svg_default = meta878;
  }
});

// lib/meta/icon_security camera 3.svg.ts
var icon_security_camera_3_svg_exports = {};
__export(icon_security_camera_3_svg_exports, {
  default: () => icon_security_camera_3_svg_default,
  meta: () => meta879
});
var meta879, icon_security_camera_3_svg_default;
var init_icon_security_camera_3_svg = __esm({
  "lib/meta/icon_security camera 3.svg.ts"() {
    meta879 = {
      "description": "The security camera 3 icon is a symbol commonly used for indicating the presence of a surveillance camera in a specific location. It is often used in wayfinding systems to help guide individuals towards areas monitored by security cameras.",
      "category": [
        "Symbol"
      ],
      "tag": [
        "security",
        "camera",
        "surveillance",
        "monitoring",
        "protection",
        "safety",
        "wayfinding",
        "security system",
        "CCTV",
        "watching"
      ],
      "title": "Security Camera 3"
    };
    icon_security_camera_3_svg_default = meta879;
  }
});

// lib/meta/icon_security camera.svg.ts
var icon_security_camera_svg_exports = {};
__export(icon_security_camera_svg_exports, {
  default: () => icon_security_camera_svg_default,
  meta: () => meta880
});
var meta880, icon_security_camera_svg_default;
var init_icon_security_camera_svg = __esm({
  "lib/meta/icon_security camera.svg.ts"() {
    meta880 = {
      "description": "A security camera icon typically represents surveillance and monitoring. It is commonly used in signage to indicate the presence of CCTV cameras for security purposes.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "security",
        "camera",
        "surveillance",
        "monitoring",
        "CCTV",
        "technology",
        "safety",
        "protection",
        "privacy",
        "watchful"
      ],
      "title": "Security Camera"
    };
    icon_security_camera_svg_default = meta880;
  }
});

// lib/meta/icon_security-check.svg.ts
var icon_security_check_svg_exports = {};
__export(icon_security_check_svg_exports, {
  default: () => icon_security_check_svg_default,
  meta: () => meta881
});
var meta881, icon_security_check_svg_default;
var init_icon_security_check_svg = __esm({
  "lib/meta/icon_security-check.svg.ts"() {
    meta881 = {
      description: "The security-check icon is typically used to indicate a checkpoint or verification process for security purposes. It is commonly used in navigation systems to guide users to a secure area or to alert them about security measures in place.",
      category: ["Wayfinding"],
      tag: ["checkpoint", "verification", "security measures", "access control", "authorization", "identification", "secure area", "validation", "entry point", "approval"],
      title: "Security Check"
    };
    icon_security_check_svg_default = meta881;
  }
});

// lib/meta/icon_ship.svg.ts
var icon_ship_svg_exports = {};
__export(icon_ship_svg_exports, {
  default: () => icon_ship_svg_default,
  meta: () => meta882
});
var meta882, icon_ship_svg_default;
var init_icon_ship_svg = __esm({
  "lib/meta/icon_ship.svg.ts"() {
    meta882 = {
      "description": "An icon of a ship, typically used to represent transportation by sea or waterway. It can also symbolize travel, exploration, and adventure.",
      "category": [
        "Transport"
      ],
      "tag": [
        "boat",
        "vessel",
        "navigation",
        "marine",
        "nautical",
        "travel",
        "explore",
        "sea",
        "ocean",
        "adventure"
      ],
      "title": "Ship"
    };
    icon_ship_svg_default = meta882;
  }
});

// lib/meta/icon_signpost-2.svg.ts
var icon_signpost_2_svg_exports = {};
__export(icon_signpost_2_svg_exports, {
  default: () => icon_signpost_2_svg_default,
  meta: () => meta883
});
var meta883, icon_signpost_2_svg_default;
var init_icon_signpost_2_svg = __esm({
  "lib/meta/icon_signpost-2.svg.ts"() {
    meta883 = {
      "description": "A signpost icon designed to help users navigate and find directions in a physical space. It typically includes multiple arrows pointing towards different destinations or areas.",
      "category": [
        "Wayfinding",
        "Arrows"
      ],
      "tag": [
        "Directional",
        "Navigation",
        "Guide",
        "Pointer",
        "Map",
        "Location",
        "Pathfinding",
        "Information",
        "Indicator",
        "Destination"
      ],
      "title": "Signpost 2"
    };
    icon_signpost_2_svg_default = meta883;
  }
});

// lib/meta/icon_signpost.svg.ts
var icon_signpost_svg_exports = {};
__export(icon_signpost_svg_exports, {
  default: () => icon_signpost_svg_default,
  meta: () => meta884
});
var meta884, icon_signpost_svg_default;
var init_icon_signpost_svg = __esm({
  "lib/meta/icon_signpost.svg.ts"() {
    meta884 = {
      "description": "A signpost icon typically includes a tall post with multiple rectangular or arrow-shaped signs attached, pointing in different directions. It is commonly used to provide directions or information about nearby locations.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "Direction",
        "Guidance",
        "Navigation",
        "Travel",
        "Orientation",
        "Information",
        "Destination",
        "Map",
        "Location",
        "Arrow"
      ],
      "title": "Signpost"
    };
    icon_signpost_svg_default = meta884;
  }
});

// lib/meta/icon_smoking.svg.ts
var icon_smoking_svg_exports = {};
__export(icon_smoking_svg_exports, {
  default: () => icon_smoking_svg_default,
  meta: () => meta885
});
var meta885, icon_smoking_svg_default;
var init_icon_smoking_svg = __esm({
  "lib/meta/icon_smoking.svg.ts"() {
    meta885 = {
      "description": "An icon representing a designated smoking area, typically used in public spaces to help people locate where smoking is allowed.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "smoking",
        "designated area",
        "public spaces",
        "cigarette",
        "allowed",
        "signage",
        "navigation",
        "warning",
        "health"
      ],
      "title": "Smoking"
    };
    icon_smoking_svg_default = meta885;
  }
});

// lib/meta/icon_stairs-down.svg.ts
var icon_stairs_down_svg_exports = {};
__export(icon_stairs_down_svg_exports, {
  default: () => icon_stairs_down_svg_default,
  meta: () => meta886
});
var meta886, icon_stairs_down_svg_default;
var init_icon_stairs_down_svg = __esm({
  "lib/meta/icon_stairs-down.svg.ts"() {
    meta886 = {
      "description": "An icon representing a set of stairs going downward, commonly used for wayfinding purposes to indicate a lower floor or basement level.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "stairs",
        "down",
        "navigation",
        "direction",
        "lower level",
        "basement",
        "arrow",
        "exit",
        "architecture",
        "building"
      ],
      "title": "Stairs Down"
    };
    icon_stairs_down_svg_default = meta886;
  }
});

// lib/meta/icon_stairs-up.svg.ts
var icon_stairs_up_svg_exports = {};
__export(icon_stairs_up_svg_exports, {
  default: () => icon_stairs_up_svg_default,
  meta: () => meta887
});
var meta887, icon_stairs_up_svg_default;
var init_icon_stairs_up_svg = __esm({
  "lib/meta/icon_stairs-up.svg.ts"() {
    meta887 = {
      "description": "This icon represents a set of stairs going upwards. It is commonly used in wayfinding systems to indicate the direction of ascending stairs or a staircase leading to a higher level.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "stairs",
        "up",
        "directional signage",
        "navigation",
        "levels",
        "architecture",
        "building",
        "indoor navigation",
        "steps",
        "ascending"
      ],
      "title": "Stairs Up"
    };
    icon_stairs_up_svg_default = meta887;
  }
});

// lib/meta/icon_stairs.svg.ts
var icon_stairs_svg_exports = {};
__export(icon_stairs_svg_exports, {
  default: () => icon_stairs_svg_default,
  meta: () => meta888
});
var meta888, icon_stairs_svg_default;
var init_icon_stairs_svg = __esm({
  "lib/meta/icon_stairs.svg.ts"() {
    meta888 = {
      "description": "The icon depicting a set of stairs, commonly used for wayfinding purposes to indicate the presence of stairs or a staircase in a building or public space.",
      "category": [
        "Wayfinding"
      ],
      "tag": [
        "stairs",
        "steps",
        "escalator",
        "navigation",
        "direction",
        "vertical",
        "up",
        "down",
        "architecture",
        "building"
      ],
      "title": "Stairs"
    };
    icon_stairs_svg_default = meta888;
  }
});

// lib/meta/icon_taxi-stop.svg.ts
var icon_taxi_stop_svg_exports = {};
__export(icon_taxi_stop_svg_exports, {
  default: () => icon_taxi_stop_svg_default,
  meta: () => meta889
});
var meta889, icon_taxi_stop_svg_default;
var init_icon_taxi_stop_svg = __esm({
  "lib/meta/icon_taxi-stop.svg.ts"() {
    meta889 = {
      description: "The icon depicts a designated stop area for taxis. It is commonly used in signage or maps to indicate where taxis can pick up or drop off passengers.",
      category: ["Wayfinding", "Transport"],
      tag: ["taxi stop", "transportation", "pick up point", "public transportation", "traffic", "navigation", "signage", "map icon", "urban travel", "city life"],
      title: "Taxi Stop"
    };
    icon_taxi_stop_svg_default = meta889;
  }
});

// lib/meta/icon_taxi.svg.ts
var icon_taxi_svg_exports = {};
__export(icon_taxi_svg_exports, {
  default: () => icon_taxi_svg_default,
  meta: () => meta890
});
var meta890, icon_taxi_svg_default;
var init_icon_taxi_svg = __esm({
  "lib/meta/icon_taxi.svg.ts"() {
    meta890 = {
      "description": "The taxi icon represents transportation services where customers can hire a vehicle to travel from one location to another. It is commonly used to indicate the presence of a taxi stand or service in the area.",
      "category": [
        "Transport",
        "Wayfinding"
      ],
      "tag": [
        "taxi",
        "transportation",
        "car",
        "service",
        "travel",
        "vehicle",
        "ride",
        "cab",
        "urban",
        "public"
      ],
      "title": "Taxi"
    };
    icon_taxi_svg_default = meta890;
  }
});

// lib/meta/icon_train-track.svg.ts
var icon_train_track_svg_exports = {};
__export(icon_train_track_svg_exports, {
  default: () => icon_train_track_svg_default,
  meta: () => meta891
});
var meta891, icon_train_track_svg_default;
var init_icon_train_track_svg = __esm({
  "lib/meta/icon_train-track.svg.ts"() {
    meta891 = {
      "description": "The train-track icon is a wayfinding symbol that represents a railway track for trains. It is commonly used in signage and maps to indicate the presence of a railroad or train route.",
      "category": [
        "Wayfinding",
        "Transport"
      ],
      "tag": [
        "Train",
        "Track",
        "Railway",
        "Direction",
        "Route",
        "Travel",
        "Navigation",
        "Signage",
        "Map",
        "Public transport"
      ],
      "title": "Train Track"
    };
    icon_train_track_svg_default = meta891;
  }
});

// lib/meta/icon_train.svg.ts
var icon_train_svg_exports = {};
__export(icon_train_svg_exports, {
  default: () => icon_train_svg_default,
  meta: () => meta892
});
var meta892, icon_train_svg_default;
var init_icon_train_svg = __esm({
  "lib/meta/icon_train.svg.ts"() {
    meta892 = {
      "description": "A symbolic representation of a train, typically used in signage for indicating directions to a train station or platform.",
      "category": [
        "Wayfinding",
        "Transport"
      ],
      "tag": [
        "public transport",
        "railway",
        "directional",
        "station",
        "travel",
        "transportation",
        "public transit",
        "signage",
        "platform",
        "departure"
      ],
      "title": "Train"
    };
    icon_train_svg_default = meta892;
  }
});

// lib/meta/icon_walking 2.svg.ts
var icon_walking_2_svg_exports = {};
__export(icon_walking_2_svg_exports, {
  default: () => icon_walking_2_svg_default,
  meta: () => meta893
});
var meta893, icon_walking_2_svg_default;
var init_icon_walking_2_svg = __esm({
  "lib/meta/icon_walking 2.svg.ts"() {
    meta893 = {
      description: "A walking person icon designed to indicate a wayfinding or pedestrian activity. The icon features a figure of a person in motion, representing walking or moving forward.",
      category: ["Wayfinding"],
      tag: ["Walking", "Hiking", "Pedestrian", "Direction", "Movement", "Travel", "People", "Navigation", "Path", "Journey"],
      title: "Walking 2"
    };
    icon_walking_2_svg_default = meta893;
  }
});

// lib/meta/icon_walking.svg.ts
var icon_walking_svg_exports = {};
__export(icon_walking_svg_exports, {
  default: () => icon_walking_svg_default,
  meta: () => meta894
});
var meta894, icon_walking_svg_default;
var init_icon_walking_svg = __esm({
  "lib/meta/icon_walking.svg.ts"() {
    meta894 = {
      description: "The icon depicts a human figure walking, symbolizing the act of walking or wayfinding. It can be used to represent pedestrian routes, walking paths, or physical activity.",
      category: ["Transport", "Interface", "Symbol"],
      tag: ["walking", "pedestrian", "path", "wayfinding", "activity", "exercise", "direction", "navigation", "movement", "journey"],
      title: "Walking"
    };
    icon_walking_svg_default = meta894;
  }
});

// lib/meta/icon_cloud-lightning.svg.ts
var icon_cloud_lightning_svg_exports = {};
__export(icon_cloud_lightning_svg_exports, {
  default: () => icon_cloud_lightning_svg_default,
  meta: () => meta895
});
var meta895, icon_cloud_lightning_svg_default;
var init_icon_cloud_lightning_svg = __esm({
  "lib/meta/icon_cloud-lightning.svg.ts"() {
    meta895 = {
      "description": "The cloud-lightning icon represents a combination of a cloud and a lightning bolt, symbolizing a storm or thunderstorm. It is commonly used in weather-related interfaces or applications to indicate thunderstorms.",
      "category": [
        "Weather",
        "Interface"
      ],
      "tag": [
        "cloud",
        "lightning",
        "storm",
        "thunderstorm",
        "weather",
        "electricity",
        "energy",
        "forecast",
        "climate",
        "meteorology"
      ],
      "title": "Cloud Lightning"
    };
    icon_cloud_lightning_svg_default = meta895;
  }
});

// lib/meta/icon_cloud-rain 2.svg.ts
var icon_cloud_rain_2_svg_exports = {};
__export(icon_cloud_rain_2_svg_exports, {
  default: () => icon_cloud_rain_2_svg_default,
  meta: () => meta896
});
var meta896, icon_cloud_rain_2_svg_default;
var init_icon_cloud_rain_2_svg = __esm({
  "lib/meta/icon_cloud-rain 2.svg.ts"() {
    meta896 = {
      description: "Cloud with rain icon, representing rainy weather conditions. The raindrops falling from the cloud indicate precipitation.",
      category: ["Weather"],
      tag: ["cloud", "rain", "weather", "precipitation", "meteorology", "rainy day", "storm", "climate", "forecast", "nature"],
      title: "Cloud Rain 2"
    };
    icon_cloud_rain_2_svg_default = meta896;
  }
});

// lib/meta/icon_cloud-small-rain.svg.ts
var icon_cloud_small_rain_svg_exports = {};
__export(icon_cloud_small_rain_svg_exports, {
  default: () => icon_cloud_small_rain_svg_default,
  meta: () => meta897
});
var meta897, icon_cloud_small_rain_svg_default;
var init_icon_cloud_small_rain_svg = __esm({
  "lib/meta/icon_cloud-small-rain.svg.ts"() {
    meta897 = {
      "description": "A small cloud with rain droplets falling from it, indicating rainy weather. This icon is commonly used in user interfaces to represent rainy or cloudy conditions.",
      "category": [
        "Weather",
        "UI"
      ],
      "tag": [
        "cloud",
        "rain",
        "weather forecast",
        "sky",
        "precipitation",
        "storm",
        "nature",
        "climate",
        "meteorology",
        "season"
      ],
      "title": "Cloud Small Rain"
    };
    icon_cloud_small_rain_svg_default = meta897;
  }
});

// lib/meta/icon_cloud-sun.svg.ts
var icon_cloud_sun_svg_exports = {};
__export(icon_cloud_sun_svg_exports, {
  default: () => icon_cloud_sun_svg_default,
  meta: () => meta898
});
var meta898, icon_cloud_sun_svg_default;
var init_icon_cloud_sun_svg = __esm({
  "lib/meta/icon_cloud-sun.svg.ts"() {
    meta898 = {
      "description": "The cloud-sun icon represents a weather condition where the sun is partially covered by clouds. It is commonly used in weather forecast applications or interfaces to indicate partly cloudy conditions.",
      "category": [
        "Weather",
        "UI"
      ],
      "tag": [
        "cloud",
        "sun",
        "weather",
        "forecast",
        "partly cloudy",
        "sky",
        "sunshine",
        "meteorology",
        "UI design",
        "climate"
      ],
      "title": "Cloud Sun"
    };
    icon_cloud_sun_svg_default = meta898;
  }
});

// lib/meta/icon_cloud-thermometer.svg.ts
var icon_cloud_thermometer_svg_exports = {};
__export(icon_cloud_thermometer_svg_exports, {
  default: () => icon_cloud_thermometer_svg_default,
  meta: () => meta899
});
var meta899, icon_cloud_thermometer_svg_default;
var init_icon_cloud_thermometer_svg = __esm({
  "lib/meta/icon_cloud-thermometer.svg.ts"() {
    meta899 = {
      "description": "The cloud-thermometer icon is a symbol of weather indicating temperature. It combines a cloud and a thermometer, typically used to represent weather applications and forecasts.",
      "category": [
        "Weather",
        "Interface"
      ],
      "tag": [
        "cloud",
        "thermometer",
        "weather",
        "temperature",
        "forecast",
        "meteorology",
        "climate",
        "sky",
        "symbol",
        "measurement"
      ],
      "title": "Cloud Thermometer"
    };
    icon_cloud_thermometer_svg_default = meta899;
  }
});

// lib/meta/icon_cloud.svg.ts
var icon_cloud_svg_exports = {};
__export(icon_cloud_svg_exports, {
  default: () => icon_cloud_svg_default,
  meta: () => meta900
});
var meta900, icon_cloud_svg_default;
var init_icon_cloud_svg = __esm({
  "lib/meta/icon_cloud.svg.ts"() {
    meta900 = {
      "description": "A cloud icon typically seen representing cloud computing, internet, or weather-related concepts.",
      "category": [
        "Interface",
        "Weather"
      ],
      "tag": [
        "cloud",
        "computing",
        "data",
        "internet",
        "storage",
        "sky",
        "weather",
        "forecast",
        "technology",
        "ui"
      ],
      "title": "Cloud"
    };
    icon_cloud_svg_default = meta900;
  }
});

// lib/meta/icon_light-dark-mode-2.svg.ts
var icon_light_dark_mode_2_svg_exports = {};
__export(icon_light_dark_mode_2_svg_exports, {
  default: () => icon_light_dark_mode_2_svg_default,
  meta: () => meta901
});
var meta901, icon_light_dark_mode_2_svg_default;
var init_icon_light_dark_mode_2_svg = __esm({
  "lib/meta/icon_light-dark-mode-2.svg.ts"() {
    meta901 = {
      description: "The light-dark-mode-2 icon represents a switch or toggle button that allows users to switch between light mode and dark mode in weather-related applications or websites.",
      category: ["Interface", "Weather"],
      tag: ["light mode", "dark mode", "toggle", "switch", "design", "user interface", "weather app", "website", "weather"],
      title: "Light Dark Mode 2"
    };
    icon_light_dark_mode_2_svg_default = meta901;
  }
});

// lib/meta/icon_light-dark-mode-3.svg.ts
var icon_light_dark_mode_3_svg_exports = {};
__export(icon_light_dark_mode_3_svg_exports, {
  default: () => icon_light_dark_mode_3_svg_default,
  meta: () => meta902
});
var meta902, icon_light_dark_mode_3_svg_default;
var init_icon_light_dark_mode_3_svg = __esm({
  "lib/meta/icon_light-dark-mode-3.svg.ts"() {
    meta902 = {
      description: "A weather icon representing a light and dark mode option with three variations. The icon can be used to switch between different modes in a weather application or website.",
      category: ["Weather", "Interface"],
      tag: ["light", "dark", "mode", "switch", "variation", "weather app", "weather website", "UI", "user interface", "control"],
      title: "Light Dark Mode 3"
    };
    icon_light_dark_mode_3_svg_default = meta902;
  }
});

// lib/meta/icon_lightning-flash.svg.ts
var icon_lightning_flash_svg_exports = {};
__export(icon_lightning_flash_svg_exports, {
  default: () => icon_lightning_flash_svg_default,
  meta: () => meta903
});
var meta903, icon_lightning_flash_svg_default;
var init_icon_lightning_flash_svg = __esm({
  "lib/meta/icon_lightning-flash.svg.ts"() {
    meta903 = {
      "description": "A lightning flash icon representing quick action or high energy. Can be used in user interface design to indicate speed or power.",
      "category": [
        "Interface",
        "Symbol"
      ],
      "tag": [
        "lightning",
        "flash",
        "energy",
        "power",
        "speed",
        "quick",
        "electricity",
        "storm",
        "fast",
        "action"
      ],
      "title": "Lightning Flash"
    };
    icon_lightning_flash_svg_default = meta903;
  }
});

// lib/meta/icon_moon-01.svg.ts
var icon_moon_01_svg_exports = {};
__export(icon_moon_01_svg_exports, {
  default: () => icon_moon_01_svg_default,
  meta: () => meta904
});
var meta904, icon_moon_01_svg_default;
var init_icon_moon_01_svg = __esm({
  "lib/meta/icon_moon-01.svg.ts"() {
    meta904 = {
      description: "Icon of a crescent moon representing nighttime and the weather condition of clear skies. Can be used to symbolize nighttime, sleep, dreams, or weather forecasts.",
      category: ["Weather"],
      tag: ["moon", "nighttime", "clear skies", "sleep", "dreams", "weather forecast", "night", "crescent moon", "lunar", "astronomy"],
      title: "Moon 01"
    };
    icon_moon_01_svg_default = meta904;
  }
});

// lib/meta/icon_moon-19.svg.ts
var icon_moon_19_svg_exports = {};
__export(icon_moon_19_svg_exports, {
  default: () => icon_moon_19_svg_default,
  meta: () => meta905
});
var meta905, icon_moon_19_svg_default;
var init_icon_moon_19_svg = __esm({
  "lib/meta/icon_moon-19.svg.ts"() {
    meta905 = {
      description: "The icon represents a crescent moon, which is a common symbol used to indicate nighttime and the weather condition of clear skies. The moon-19 icon is part of a weather icon set.",
      category: ["Weather"],
      tag: ["nighttime", "sky", "clear", "weather", "moon", "crescent", "symbol", "forecast", "night", "lunar"],
      title: "Moon 19"
    };
    icon_moon_19_svg_default = meta905;
  }
});

// lib/meta/icon_moon-dark-mode.svg.ts
var icon_moon_dark_mode_svg_exports = {};
__export(icon_moon_dark_mode_svg_exports, {
  default: () => icon_moon_dark_mode_svg_default,
  meta: () => meta906
});
var meta906, icon_moon_dark_mode_svg_default;
var init_icon_moon_dark_mode_svg = __esm({
  "lib/meta/icon_moon-dark-mode.svg.ts"() {
    meta906 = {
      description: "The dark mode icon for moon represents nighttime weather conditions. This icon is commonly used in weather apps and websites to indicate that it is currently nighttime or the sky is clear at night.",
      category: ["Weather"],
      tag: ["moon", "night", "sky", "dark mode", "weather app", "nighttime", "clear sky", "astronomy", "forecast", "icon"],
      title: "Moon Dark Mode"
    };
    icon_moon_dark_mode_svg_default = meta906;
  }
});

// lib/meta/icon_simple-sun.svg.ts
var icon_simple_sun_svg_exports = {};
__export(icon_simple_sun_svg_exports, {
  default: () => icon_simple_sun_svg_default,
  meta: () => meta907
});
var meta907, icon_simple_sun_svg_default;
var init_icon_simple_sun_svg = __esm({
  "lib/meta/icon_simple-sun.svg.ts"() {
    meta907 = {
      "description": "The simple sun icon is a minimalist representation of a sun, featuring a circular shape with rays extending outwards. It is commonly used to indicate daylight, summer, warmth, and positivity.",
      "category": [
        "Weather",
        "Symbol",
        "Interface"
      ],
      "tag": [
        "sun",
        "minimalist",
        "daylight",
        "warmth",
        "positivity",
        "summer",
        "weather",
        "sunshine",
        "bright",
        "simple"
      ],
      "title": "Simple Sun"
    };
    icon_simple_sun_svg_default = meta907;
  }
});

// lib/meta/icon_sun 2.svg.ts
var icon_sun_2_svg_exports = {};
__export(icon_sun_2_svg_exports, {
  default: () => icon_sun_2_svg_default,
  meta: () => meta908
});
var meta908, icon_sun_2_svg_default;
var init_icon_sun_2_svg = __esm({
  "lib/meta/icon_sun 2.svg.ts"() {
    meta908 = {
      "description": "The icon 'Sun 2' depicts a stylized sun with rays emanating in all directions. This icon is commonly used to represent the sun, sunshine, weather, light, brightness, and energy in various design projects.",
      "category": [
        "Weather",
        "Symbol",
        "Interface"
      ],
      "tag": [
        "sun",
        "sunshine",
        "light",
        "weather",
        "bright",
        "energy",
        "day",
        "sky",
        "sunny",
        "heat"
      ],
      "title": "Sun 2"
    };
    icon_sun_2_svg_default = meta908;
  }
});

// lib/meta/icon_sun-light-mode.svg.ts
var icon_sun_light_mode_svg_exports = {};
__export(icon_sun_light_mode_svg_exports, {
  default: () => icon_sun_light_mode_svg_default,
  meta: () => meta909
});
var meta909, icon_sun_light_mode_svg_default;
var init_icon_sun_light_mode_svg = __esm({
  "lib/meta/icon_sun-light-mode.svg.ts"() {
    meta909 = {
      description: "A bright and sunny icon representing sunny weather conditions in light mode, perfect for weather forecast applications and websites.",
      category: ["Weather", "Symbol"],
      tag: ["Sun", "Light mode", "Sunny", "Weather forecast", "Brightness", "Clear sky", "Daytime", "Climate", "Meteorology"],
      title: "Sun Light Mode"
    };
    icon_sun_light_mode_svg_default = meta909;
  }
});

// lib/meta/icon_sun.svg.ts
var icon_sun_svg_exports = {};
__export(icon_sun_svg_exports, {
  default: () => icon_sun_svg_default,
  meta: () => meta910
});
var meta910, icon_sun_svg_default;
var init_icon_sun_svg = __esm({
  "lib/meta/icon_sun.svg.ts"() {
    meta910 = {
      "description": "The sun icon represents a bright, shining sun with rays radiating in all directions. It is often used to symbolize warmth, light, energy, or a sunny day.",
      "category": [
        "Weather",
        "Interface"
      ],
      "tag": [
        "sun",
        "sunny",
        "bright",
        "warmth",
        "light",
        "energy",
        "sunshine",
        "day",
        "weather",
        "summer"
      ],
      "title": "Sun"
    };
    icon_sun_svg_default = meta910;
  }
});

// lib/meta/icon_thermometer-cold.svg.ts
var icon_thermometer_cold_svg_exports = {};
__export(icon_thermometer_cold_svg_exports, {
  default: () => icon_thermometer_cold_svg_default,
  meta: () => meta911
});
var meta911, icon_thermometer_cold_svg_default;
var init_icon_thermometer_cold_svg = __esm({
  "lib/meta/icon_thermometer-cold.svg.ts"() {
    meta911 = {
      "description": "The 'Thermometer Cold' icon represents chilly weather or low temperature. It is typically used in user interfaces to indicate cold weather conditions.",
      "category": [
        "Interface",
        "Weather"
      ],
      "tag": [
        "cold",
        "temperature",
        "weather",
        "climate",
        "freezing",
        "meteorology",
        "winter",
        "forecast",
        "chilly",
        "indicator"
      ],
      "title": "Thermometer Cold"
    };
    icon_thermometer_cold_svg_default = meta911;
  }
});

// lib/meta/icon_thermometer-hot.svg.ts
var icon_thermometer_hot_svg_exports = {};
__export(icon_thermometer_hot_svg_exports, {
  default: () => icon_thermometer_hot_svg_default,
  meta: () => meta912
});
var meta912, icon_thermometer_hot_svg_default;
var init_icon_thermometer_hot_svg = __esm({
  "lib/meta/icon_thermometer-hot.svg.ts"() {
    meta912 = {
      "description": "An icon representing a hot thermometer, typically used to indicate high temperature or heat. It is commonly used in user interfaces to display weather information or climate settings.",
      "category": [
        "Interface",
        "Weather"
      ],
      "tag": [
        "temperature",
        "hot",
        "weather",
        "climate",
        "heat",
        "thermometer",
        "indicator",
        "measurement",
        "icon"
      ],
      "title": "Thermometer Hot"
    };
    icon_thermometer_hot_svg_default = meta912;
  }
});

// lib/meta/icon_thermometer.svg.ts
var icon_thermometer_svg_exports = {};
__export(icon_thermometer_svg_exports, {
  default: () => icon_thermometer_svg_default,
  meta: () => meta913
});
var meta913, icon_thermometer_svg_default;
var init_icon_thermometer_svg = __esm({
  "lib/meta/icon_thermometer.svg.ts"() {
    meta913 = {
      "description": "Thermometer icon typically represents temperature or weather related information. It is often used in user interfaces to indicate current temperature or weather conditions.",
      "category": [
        "Interface",
        "Weather"
      ],
      "tag": [
        "temperature",
        "weather",
        "measurement",
        "temperature gauge",
        "temperature icon",
        "meteorology",
        "hot",
        "cold",
        "climate",
        "forecast"
      ],
      "title": "Thermometer"
    };
    icon_thermometer_svg_default = meta913;
  }
});

// lib/index.ts
var lib_exports = {};
__export(lib_exports, {
  Aliasses: () => Aliasses,
  BaseIcons: () => BaseIcons,
  IconCategories: () => IconCategories,
  IconTags: () => IconTags,
  Icons: () => Icons,
  getIcon: () => getIcon,
  getMeta: () => getMeta,
  iconExists: () => iconExists,
  searchIcon: () => searchIcon
});
module.exports = __toCommonJS(lib_exports);

// lib/icons/types.ts
var BaseIcons = {
  ANIMAL_STEP: "animal-step",
  BUTTERFLY: "butterfly",
  CAT_HEAD: "cat-head",
  CAT_HEAD2: "cat-head2",
  CAT: "cat",
  CAT2: "cat2",
  CAT3: "cat3",
  FISH: "fish",
  FISH2: "fish2",
  JELLYFISH: "jellyfish",
  LOBSTER: "lobster",
  PUFFERFISH: "pufferfish",
  SEA_STAR: "sea-star",
  SQUID: "squid",
  STINGRAY: "stingray",
  TURTLE: "turtle",
  WHALE: "whale",
  ICON24: "icon24",
  ARROW_CORNER_DOWN: "arrow-corner-down",
  ARROW_CORNER_LEFT: "arrow-corner-left",
  ARROW_CORNER_RIGHT: "arrow-corner-right",
  ARROW_CORNER_UP: "arrow-corner-up",
  ARROW_DIAGONAL_BL_TR_STOP: "arrow-diagonal-bl-tr-stop",
  ARROW_DIAGONAL_BR_TL_STOP: "arrow-diagonal-br-tl-stop",
  ARROW_DIAGONAL_IN_LT_BR: "arrow-diagonal-in-lt-br",
  ARROW_DIAGONAL_IN_TR_BL: "arrow-diagonal-in-tr-bl",
  ARROW_DIAGONAL_TL_BR_SPLIT: "arrow-diagonal-tl-br-split",
  ARROW_DIAGONAL_TL_BR_STOP: "arrow-diagonal-tl-br-stop",
  ARROW_DIAGONAL_TL_BR: "arrow-diagonal-tl-br",
  ARROW_DIAGONAL_TR_BL_SPLIT: "arrow-diagonal-tr-bl-split",
  ARROW_DIAGONAL_TR_BL_STOP: "arrow-diagonal-tr-bl-stop",
  ARROW_DIAGONAL_TR_BL: "arrow-diagonal-tr-bl",
  ARROW_DOWN_COPY: "arrow-down-copy",
  ARROW_DOWN_LEFT: "arrow-down-left",
  ARROW_DOWN_RIGHT: "arrow-down-right",
  ARROW_DOWN: "arrow-down",
  ARROW_DOWNLOAD: "arrow-download",
  ARROW_HEADED_CORNER_DOWN: "arrow-headed-corner-down",
  ARROW_HEADED_CORNER_LEFT: "arrow-headed-corner-left",
  ARROW_HEADED_CORNER_RIGHT: "arrow-headed-corner-right",
  ARROW_HEADED_CORNER_UP: "arrow-headed-corner-up",
  ARROW_HEADED_DIAGONAL_BL_TR_STOP: "arrow-headed-diagonal-bl-tr-stop",
  ARROW_HEADED_DIAGONAL_BR_TL_STOP: "arrow-headed-diagonal-br-tl-stop",
  ARROW_HEADED_DIAGONAL_IN_LT_BR: "arrow-headed-diagonal-in-lt-br",
  ARROW_HEADED_DIAGONAL_IN_TR_BL: "arrow-headed-diagonal-in-tr-bl",
  ARROW_HEADED_DIAGONAL_TL_BR_SPLIT: "arrow-headed-diagonal-tl-br-split",
  ARROW_HEADED_DIAGONAL_TL_BR_STOP: "arrow-headed-diagonal-tl-br-stop",
  ARROW_HEADED_DIAGONAL_TL_BR: "arrow-headed-diagonal-tl-br",
  ARROW_HEADED_DIAGONAL_TR_BL_SPLIT: "arrow-headed-diagonal-tr-bl-split",
  ARROW_HEADED_DIAGONAL_TR_BL_STOP: "arrow-headed-diagonal-tr-bl-stop",
  ARROW_HEADED_DIAGONAL_TR_BL: "arrow-headed-diagonal-tr-bl",
  ARROW_HEADED_DOWN_LEFT: "arrow-headed-down-left",
  ARROW_HEADED_DOWN_RIGHT: "arrow-headed-down-right",
  ARROW_HEADED_DOWN_STOP: "arrow-headed-down-stop",
  ARROW_HEADED_DOWN: "arrow-headed-down",
  ARROW_HEADED_DOWNLOAD: "arrow-headed-download",
  ARROW_HEADED_IN_CENTER: "arrow-headed-in-center",
  ARROW_HEADED_IN_DIAGONAL: "arrow-headed-in-diagonal",
  ARROW_HEADED_IN: "arrow-headed-in",
  ARROW_HEADED_LEFT_RIGHT_SPLIT: "arrow-headed-left-right-split",
  ARROW_HEADED_LEFT_RIGHT_STOP: "arrow-headed-left-right-stop",
  ARROW_HEADED_LEFT_RIGHT: "arrow-headed-left-right",
  ARROW_HEADED_LEFT_STOP: "arrow-headed-left-stop",
  ARROW_HEADED_LEFT: "arrow-headed-left",
  ARROW_HEADED_OUT_CENTER: "arrow-headed-out-center",
  ARROW_HEADED_RELOAD_DOWN_UP: "arrow-headed-reload-down-up",
  ARROW_HEADED_RELOAD_LEFT_RIGHT: "arrow-headed-reload-left-right",
  ARROW_HEADED_RELOAD_RIGHT_LEFT: "arrow-headed-reload-right-left",
  ARROW_HEADED_RELOAD_UP_DOWN: "arrow-headed-reload-up-down",
  ARROW_HEADED_RETURN_DOWN: "arrow-headed-return-down",
  ARROW_HEADED_RETURN_LEFT: "arrow-headed-return-left",
  ARROW_HEADED_RETURN_RIGHT: "arrow-headed-return-right",
  ARROW_HEADED_RETURN_UP: "arrow-headed-return-up",
  ARROW_HEADED_RIGHT: "arrow-headed-right",
  ARROW_HEADED_ROTATE_BOTTOM_LEFT: "arrow-headed-rotate-bottom-left",
  ARROW_HEADED_ROTATE_BOTTOM_RIGHT: "arrow-headed-rotate-bottom-right",
  ARROW_HEADED_ROTATE_TOP_LEFT: "arrow-headed-rotate-top-left",
  ARROW_HEADED_ROTATE_TOP_RIGHT: "arrow-headed-rotate-top-right",
  ARROW_HEADED_ROUNDED_LEFT_UP: "arrow-headed-rounded-left-up",
  ARROW_HEADED_ROUNDED_RIGHT_DOWN: "arrow-headed-rounded-right-down",
  ARROW_HEADED_ROUNDED_RIGHT_UP: "arrow-headed-rounded-right-up",
  ARROW_HEADED_ROUNED_LEFT_DOWN: "arrow-headed-rouned-left-down",
  ARROW_HEADED_SHARE: "arrow-headed-share",
  ARROW_HEADED_SPREAD_SPLIT: "arrow-headed-spread-split",
  ARROW_HEADED_SPREAD: "arrow-headed-spread",
  ARROW_HEADED_TWOWAY_DIAGONAL_LR: "arrow-headed-twoway-diagonal-lr",
  ARROW_HEADED_TWOWAY_DIAGONAL_RL: "arrow-headed-twoway-diagonal-rl",
  ARROW_HEADED_TWOWAY_HORIZONTAL: "arrow-headed-twoway-horizontal",
  ARROW_HEADED_TWOWAY_VERTICAL: "arrow-headed-twoway-vertical",
  ARROW_HEADED_UP_DOWN_SPLIT: "arrow-headed-up-down-split",
  ARROW_HEADED_UP_DOWN_STOP: "arrow-headed-up-down-stop",
  ARROW_HEADED_UP_DOWN: "arrow-headed-up-down",
  ARROW_HEADED_UP_LEFT: "arrow-headed-up-left",
  ARROW_HEADED_UP_RIGHT: "arrow-headed-up-right",
  ARROW_HEADED_UP_STOP76: "arrow-headed-up-stop76",
  ARROW_HEADED_UP_STOP78: "arrow-headed-up-stop78",
  ARROW_HEADED_UP: "arrow-headed-up",
  ARROW_HEADED_UPLOAD: "arrow-headed-upload",
  ARROW_IN_CENTER: "arrow-in-center",
  ARROW_INVERT: "arrow-invert",
  ARROW_LEFT_RIGHT_SPLIT: "arrow-left-right-split",
  ARROW_LEFT_RIGHT_STOP: "arrow-left-right-stop",
  ARROW_LEFT_RIGHT: "arrow-left-right",
  ARROW_LEFT_STOP: "arrow-left-stop",
  ARROW_LEFT: "arrow-left",
  ARROW_OUT_CENTER: "arrow-out-center",
  ARROW_RELOAD_DOWN_UP: "arrow-reload-down-up",
  ARROW_RELOAD_LEFT_RIGHT: "arrow-reload-left-right",
  ARROW_RELOAD_RIGHT_LEFT: "arrow-reload-right-left",
  ARROW_RELOAD_UP_DOWN: "arrow-reload-up-down",
  ARROW_RETURN_DOWN: "arrow-return-down",
  ARROW_RETURN_LEFT: "arrow-return-left",
  ARROW_RETURN_RIGHT: "arrow-return-right",
  ARROW_RETURN_UP: "arrow-return-up",
  ARROW_RIGHT_STOP: "arrow-right-stop",
  ARROW_RIGHT: "arrow-right",
  ARROW_ROATE_BOTTOM_RIGHT: "arrow-roate-bottom-right",
  ARROW_ROTATE_BOTTOM_LEFT: "arrow-rotate-bottom-left",
  ARROW_ROTATE_TOP_LEFT: "arrow-rotate-top-left",
  ARROW_ROTATE_TOP_RIGHT: "arrow-rotate-top-right",
  ARROW_ROUNDED_LEFT_DOWN: "arrow-rounded-left-down",
  ARROW_ROUNDED_LEFT_UP: "arrow-rounded-left-up",
  ARROW_ROUNDED_RIGHT_DOWN: "arrow-rounded-right-down",
  ARROW_ROUNDED_RIGHT_UP: "arrow-rounded-right-up",
  ARROW_SHARE: "arrow-share",
  ARROW_SPREAD_SPLIT: "arrow-spread-split",
  ARROW_SPREAD: "arrow-spread",
  ARROW_THICK_BOTTOM_LEFT: "arrow-thick-bottom-left",
  ARROW_THICK_DOWN: "arrow-thick-down",
  ARROW_THICK_LEFT_TOP: "arrow-thick-left-top",
  ARROW_THICK_LEFT: "arrow-thick-left",
  ARROW_THICK_RIGHT_BOTTOM: "arrow-thick-right-bottom",
  ARROW_THICK_RIGHT: "arrow-thick-right",
  ARROW_THICK_TALL_BOTTOM_LEFT: "arrow-thick-tall-bottom-left",
  ARROW_THICK_TALL_DOWN: "arrow-thick-tall-down",
  ARROW_THICK_TALL_LEFT_TOP: "arrow-thick-tall-left-top",
  ARROW_THICK_TALL_LEFT: "arrow-thick-tall-left",
  ARROW_THICK_TALL_RIGHT_BOTTOM: "arrow-thick-tall-right-bottom",
  ARROW_THICK_TALL_RIGHT: "arrow-thick-tall-right",
  ARROW_THICK_TALL_TOP_RIGHT: "arrow-thick-tall-top-right",
  ARROW_THICK_TALL_UP: "arrow-thick-tall-up",
  ARROW_THICK_TOP_RIGHT: "arrow-thick-top-right",
  ARROW_THICK_UP: "arrow-thick-up",
  ARROW_THICK_WIDE_BOTTOM_LEFT: "arrow-thick-wide-bottom-left",
  ARROW_THICK_WIDE_DOWN: "arrow-thick-wide-down",
  ARROW_THICK_WIDE_LEFT_TOP: "arrow-thick-wide-left-top",
  ARROW_THICK_WIDE_LEFT: "arrow-thick-wide-left",
  ARROW_THICK_WIDE_RIGHT_BOTTOM: "arrow-thick-wide-right-bottom",
  ARROW_THICK_WIDE_RIGHT: "arrow-thick-wide-right",
  ARROW_THICK_WIDE_TOP_RIGHT: "arrow-thick-wide-top-right",
  ARROW_THICK_WIDE_UP: "arrow-thick-wide-up",
  ARROW_TRANSFER_BL_TR: "arrow-transfer-bl-tr",
  ARROW_TRANSFER_LEFT_RIGHT: "arrow-transfer-left-right",
  ARROW_TRANSFER_LT_BR: "arrow-transfer-lt-br",
  ARROW_TRANSFER_UP_DOWN: "arrow-transfer-up-down",
  ARROW_TWOWAY_DIAGONAL_LR: "arrow-twoway-diagonal-lr",
  ARROW_TWOWAY_DIAGONAL_RL: "arrow-twoway-diagonal-rl",
  ARROW_TWOWAY_HORIZONTAL: "arrow-twoway-horizontal",
  ARROW_TWOWAY_VERTICAL: "arrow-twoway-vertical",
  ARROW_UP_COPY: "arrow-up-copy",
  ARROW_UP_DOWN_SPLIT: "arrow-up-down-split",
  ARROW_UP_DOWN_STOP: "arrow-up-down-stop",
  ARROW_UP_DOWN: "arrow-up-down",
  ARROW_UP_LEFT: "arrow-up-left",
  ARROW_UP_RIGHT: "arrow-up-right",
  ARROW_UP: "arrow-up",
  ARROW_UPLOAD: "arrow-upload",
  CHEVRON_CONNECT2: "chevron-connect2",
  CHEVRON_CONNECT: "chevron-connect",
  CHEVRON_DISCONNECT2: "chevron-disconnect2",
  CHEVRON_DISCONNECT: "chevron-disconnect",
  CHEVRON_DOUBLE_DOWN: "chevron-double-down",
  CHEVRON_DOUBLE_LEFT: "chevron-double-left",
  CHEVRON_DOUBLE_RIGHT: "chevron-double-right",
  CHEVRON_DOUBLE_UP: "chevron-double-up",
  CHEVRON_DOWN: "chevron-down",
  CHEVRON_LEFT: "chevron-left",
  CHEVRON_RIGHT: "chevron-right",
  CHEVRON_UP: "chevron-up",
  ICON01: "icon01",
  BOTTLE: "bottle",
  BOTTLES: "bottles",
  BREAD_SLICE: "bread-slice",
  COFFEE_CUP: "coffee-cup",
  COFFEE_MACHINE: "coffee-machine",
  COFFEE_BEANS: "coffee-beans",
  COGNAC_GLASS: "cognac-glass",
  ESPRESS_MACHINE2: "espress-machine2",
  ESPRESSO_MACHINE_E61: "espresso-machine-e61",
  ESPRESSO_MACHINE: "espresso-machine",
  ESPRESSO_PISTOL: "espresso-pistol",
  HAMBURGER: "hamburger",
  PERCULATOR: "perculator",
  WINE_GLASS: "wine-glass",
  ALARM_BELL2: "alarm-bell2",
  ALARM_BELL3: "alarm-bell3",
  ALARM_BELL: "alarm-bell",
  ART_SUPPLIES: "art-supplies",
  AUDIO_WAVES: "audio-waves",
  BLUETOOTH: "bluetooth",
  CAMERA: "camera",
  CLIPBOARD: "clipboard",
  COLOR_PALLETTE: "color-pallette",
  COLOR_RGB: "color-rgb",
  COLOR_SWATCHES: "color-swatches",
  DESKTOP: "desktop",
  FILMROLL: "filmroll",
  GAMEPAD_CLASSIC: "gamepad-classic",
  GAMEPAD: "gamepad",
  HEADPHONES: "headphones",
  HIGHLIGHT: "highlight",
  IMAGE: "image",
  JOYSTICK: "joystick",
  LAPTOP: "laptop",
  MAIL_OPEN: "mail-open",
  MAIL: "mail",
  MEDIA: "media",
  MICROPHONE: "microphone",
  MUSIC_NOTE_SINGLE: "music-note-single",
  MUSIC_NOTE: "music-note",
  NES_CONTROLLER: "nes-controller",
  PACMAN: "pacman",
  PAINT_ROLLER: "paint-roller",
  PAPERPLANE: "paperplane",
  PLAYBACK_BACKWARD: "playback-backward",
  PLAYBACK_END: "playback-end",
  PLAYBACK_FORWARD: "playback-forward",
  PLAYBACK_NEXT: "playback-next",
  PLAYBACK_PAUSE: "playback-pause",
  PLAYBACK_PLAY: "playback-play",
  PLAYBACK_PREVIOUS: "playback-previous",
  PLAYBACK_START: "playback-start",
  PLAYBACK_STOP: "playback-stop",
  PRINTER: "printer",
  RECORD: "record",
  REELS: "reels",
  TABLET_LANDSCAPE: "tablet-landscape",
  TABLET: "tablet",
  TELEVISION: "television",
  TERMINAL: "terminal",
  VIDEO_CAMERA: "video-camera",
  VIDEOS: "videos",
  VOLUME_I: "volume-i",
  VOLUME_II: "volume-ii",
  VOLUME_III: "volume-iii",
  VOLUME_MUTE: "volume-mute",
  VOLUME_OFF: "volume-off",
  WEBSITE: "website",
  WIFI2: "wifi2",
  WIFI3: "wifi3",
  WIFI_ROUNDED: "wifi-rounded",
  WIFI: "wifi",
  AI_FACE: "ai-face",
  AI_LETTERS_BLOCKED: "ai-letters-blocked",
  AI_LETTERS_CIRCLED: "ai-letters-circled",
  AI_LETTERS: "ai-letters",
  AFRAME: "aframe",
  ARTWORK_FRAME: "artwork-frame",
  BARBECUE: "barbecue",
  BATHROOM_ESSENTIALS: "bathroom-essentials",
  BINOCULARS: "binoculars",
  BLENDER: "blender",
  BOOKCASE: "bookcase",
  BRAIN: "brain",
  BRANCH2: "branch2",
  BRANCH3: "branch3",
  BRANCH: "branch",
  BULB: "bulb",
  CACTUS: "cactus",
  CAMPER: "camper",
  CARAVAN: "caravan",
  CHIP: "chip",
  CLEANING_BUCKET: "cleaning-bucket",
  CLEANING_SPRAY: "cleaning-spray",
  CLOSET: "closet",
  COINS: "coins",
  COMPASS2: "compass2",
  COMPASS: "compass",
  CUBE3D: "cube3d",
  EDUCATION: "education",
  FACTORY_ARM: "factory-arm",
  FACTORY_BELT: "factory-belt",
  FACTORY: "factory",
  FINGERPRINT: "fingerprint",
  FIRE: "fire",
  FRIDGE: "fridge",
  FURNITURE_BED2: "furniture-bed2",
  FURNITURE_BED_KING2: "furniture-bed-king2",
  FURNITURE_BED_KING: "furniture-bed-king",
  FURNITURE_BED_SINGLE2: "furniture-bed-single2",
  FURNITURE_BED_SINGLE: "furniture-bed-single",
  FURNITURE_BED: "furniture-bed",
  FURNITURE_BEDSIDE_TABLE: "furniture-bedside-table",
  FURNITURE_CHAIR2: "furniture-chair2",
  FURNITURE_CHAIR3: "furniture-chair3",
  FURNITURE_CHAIR4: "furniture-chair4",
  FURNITURE_CHAIR: "furniture-chair",
  FURNITURE_COUCH2: "furniture-couch2",
  FURNITURE_COUCH3: "furniture-couch3",
  FURNITURE_COUCH4: "furniture-couch4",
  FURNITURE_COUCH: "furniture-couch",
  FURNITURE_DESK: "furniture-desk",
  FURNITURE_DRESSOIR: "furniture-dressoir",
  GRAPH_UP_ROUND: "graph-up-round",
  GRAPH_UP: "graph-up",
  HAIRDRYER: "hairdryer",
  HILL_LANDSCAPE: "hill-landscape",
  IDEA_FACTORY: "idea-factory",
  INDUSTRY3: "industry3",
  IRON: "iron",
  KITCHEN_CUTLERY: "kitchen-cutlery",
  KITCHEN_UTENSILS: "kitchen-utensils",
  LAKE_VIEW: "lake-view",
  LEAF2: "leaf2",
  LEAF3: "leaf3",
  LEAF: "leaf",
  LEAFS: "leafs",
  LIQUID_SOAP2: "liquid-soap2",
  LIQUID_SOAP: "liquid-soap",
  LUXE_VILLA: "luxe-villa",
  MANSION: "mansion",
  MICROWAVE: "microwave",
  MONEY: "money",
  MONEYBAG: "moneybag",
  MOUNTAIN_SCAPE: "mountain-scape",
  OVEN: "oven",
  PLANT: "plant",
  POLITICIAN2: "politician2",
  POLITICIAN: "politician",
  ROCKET: "rocket",
  ROOM_SHADE: "room-shade",
  SHIELD2_LINE: "shield2-line",
  SHIELD2: "shield2",
  SHIELD3_LINE: "shield3-line",
  SHIELD3: "shield3",
  SHIELD4_LINE: "shield4-line",
  SHIELD4: "shield4",
  SHIELD_LINE: "shield-line",
  SHIELD: "shield",
  STOVE: "stove",
  SURFBOARD: "surfboard",
  SWIMMING_POOL: "swimming-pool",
  TEMPLE2: "temple2",
  TEMPLE: "temple",
  TENT_CAMPING: "tent-camping",
  TENT: "tent",
  TOY_BLOCKS2: "toy-blocks2",
  TOY_BLOCKS3: "toy-blocks3",
  TOY_BLOCKS: "toy-blocks",
  TOY_HEAD: "toy-head",
  TREE2: "tree2",
  TREE3: "tree3",
  TREE: "tree",
  TREEHOUSE: "treehouse",
  TREES2: "trees2",
  TREES: "trees",
  TRUNK1: "trunk1",
  TRUNK2: "trunk2",
  UFO: "ufo",
  VOTE: "vote",
  WALLET: "wallet",
  WASHING_MACHINE: "washing-machine",
  WATERCOOKER: "watercooker",
  YURT: "yurt",
  BABY_STROLLER: "baby-stroller",
  CLOTHING_TSHIRT: "clothing-tshirt",
  COTTON: "cotton",
  HOME_GARDEN: "home-garden",
  HYPOALLERGENIC: "hypoallergenic",
  NO_LEAKS: "no-leaks",
  SUITCASE_JOBS: "suitcase-jobs",
  SHOPPING_BAG2: "shopping-bag2",
  SHOPPING_BAG3: "shopping-bag3",
  SHOPPING_BAG_DISCOUNT: "shopping-bag-discount",
  SHOPPING_BAG: "shopping-bag",
  SHOPPING_BASKET_ROUNDED: "shopping-basket-rounded",
  SHOPPING_BASKET: "shopping-basket",
  SHOPPING_CART_FAST: "shopping-cart-fast",
  SHOPPING_CART: "shopping-cart",
  SHOPPING_LABEL: "shopping-label",
  SHOPPING_LABELS: "shopping-labels",
  ICON43: "icon43",
  BAHT_SYMBOL: "baht-symbol",
  DICE1: "dice1",
  DICE2: "dice2",
  DICE3: "dice3",
  DICE4: "dice4",
  DICE5: "dice5",
  DICE6: "dice6",
  DICE7: "dice7",
  DICE8: "dice8",
  DICE9: "dice9",
  DIGIT_DIGITAL1: "digit-digital1",
  DIGIT_DIGITAL2: "digit-digital2",
  DIGIT_DIGITAL3: "digit-digital3",
  DIGIT_DIGITAL4: "digit-digital4",
  DIGIT_DIGITAL5: "digit-digital5",
  DIGIT_DIGITAL6: "digit-digital6",
  DIGIT_DIGITAL7: "digit-digital7",
  DIGIT_DIGITAL8: "digit-digital8",
  DIGIT_DIGITAL9: "digit-digital9",
  DIGIT_DIGTAL0: "digit-digtal0",
  DOLLAR: "dollar",
  EURO: "euro",
  PERCENTAGE: "percentage",
  POUND_SYMBOL: "pound-symbol",
  PROMILLE: "promille",
  RUBLES_SYMBOL: "rubles-symbol",
  RUPEE_SYMBOL_COPY: "rupee-symbol-copy",
  RUPEE_SYMBOL: "rupee-symbol",
  SYMBOL_FEMALE: "symbol-female",
  SYMBOL_MALE: "symbol-male",
  SYMBOL_UNISEX: "symbol-unisex",
  THREE_DOTS_DIAGONAL_MAJOR: "three-dots-diagonal-major",
  THREE_DOTS_DIAGONAL_MINOR: "three-dots-diagonal-minor",
  THREE_DOTS_HORIZONTAL: "three-dots-horizontal",
  THREE_DOTS_LINES: "three-dots-lines",
  THREE_DOTS_VERTICAL: "three-dots-vertical",
  TWO_DOTS_DIAGONAL_MAJOR: "two-dots-diagonal-major",
  TWO_DOTS_DIAGONAL_MINOR: "two-dots-diagonal-minor",
  TWO_DOTS_HORIZONTAL: "two-dots-horizontal",
  TWO_DOTS_LINES: "two-dots-lines",
  TWO_DOTS_VERTICAL: "two-dots-vertical",
  YEN: "yen",
  BALL_BASKETBALL: "ball-basketball",
  BALL_FOOTBALL: "ball-football",
  BALL_RUGBY: "ball-rugby",
  BALL_TENNIS: "ball-tennis",
  ACCESSIBILITY_PERSON_CIRCLED: "accessibility-person-circled",
  ACCESSIBILITY_PERSON: "accessibility-person",
  ADD_FAT: "add-fat",
  ADD_L: "add-l",
  ADD_LINES: "add-lines",
  ADD_M: "add-m",
  ADD_S: "add-s",
  AT_SIGN: "at-sign",
  BLOCK_PARTIALS: "block-partials",
  BOARD_ADD2: "board-add2",
  BOARD_MULTI2_HORIZONTAL: "board-multi2-horizontal",
  BOARD_MULTI2_VERTICAL: "board-multi2-vertical",
  BOARD_MULTI_DASHBOARD: "board-multi-dashboard",
  BOARD_MULTI_T_DOWN: "board-multi-t-down",
  BOARD_MULTI_T_LEFT: "board-multi-t-left",
  BOARD_MULTI_T_RIGHT: "board-multi-t-right",
  BOARD_MULTI_T_UP: "board-multi-t-up",
  BOARD_MULTI: "board-multi",
  BOARD_MULTIPLY2: "board-multiply2",
  BOARD_SPLIT13_HORIZONTAL: "board-split13-horizontal",
  BOARD_SPLIT13_VERTICAL: "board-split13-vertical",
  BOARD_SPLIT2_HORIZONTAL: "board-split2-horizontal",
  BOARD_SPLIT2_VERTICAL: "board-split2-vertical",
  BOARD_SPLIT31_HORIZONTAL: "board-split31-horizontal",
  BOARD_SPLIT31_VERTICAL: "board-split31-vertical",
  BOARD_SPLIT3_HORIZONTAL: "board-split3-horizontal",
  BOARD_SPLIT3_VERTICAL: "board-split3-vertical",
  BOARD_SPLIT4_HORIZONTAL: "board-split4-horizontal",
  BOARD_SPLIT4_VERTICAL: "board-split4-vertical",
  BOARD_SPLIT_T_DOWN: "board-split-t-down",
  BOARD_SPLIT_T_LEFT: "board-split-t-left",
  BOARD_SPLIT_T_RIGHT: "board-split-t-right",
  BOARD_SPLIT_T_UP: "board-split-t-up",
  BOARD_SUBTRACT2: "board-subtract2",
  BOARD: "board",
  BOX_IN: "box-in",
  BOX_OUT: "box-out",
  BOX: "box",
  BOY: "boy",
  BROKEN_HEART_F: "broken-heart-f",
  BROKEN_HEART_L: "broken-heart-l",
  BROKEN_HEART_M: "broken-heart-m",
  BUILDING_CHURCH: "building-church",
  BUILDING_HOUSE2: "building-house2",
  BUILDING_HOUSE: "building-house",
  BUILDING_SHOP: "building-shop",
  BUTTON_ADD: "button-add",
  BUTTON_BROKEN_HEART2: "button-broken-heart2",
  BUTTON_BROKEN_HEART: "button-broken-heart",
  BUTTON_CHECK2: "button-check2",
  BUTTON_CHECK: "button-check",
  BUTTON_EDIT2: "button-edit2",
  BUTTON_EDIT: "button-edit",
  BUTTON_EXCLAMATION_MARK2: "button-exclamation-mark2",
  BUTTON_EXCLAMATION_MARK: "button-exclamation-mark",
  BUTTON_HEART2: "button-heart2",
  BUTTON_HEART: "button-heart",
  BUTTON_INFO2: "button-info2",
  BUTTON_INFO: "button-info",
  BUTTON_INVISIBLE2: "button-invisible2",
  BUTTON_INVISIBLE: "button-invisible",
  BUTTON_MULTIPLY: "button-multiply",
  BUTTON_QUESTION_MARK2: "button-question-mark2",
  BUTTON_QUESTION_MARK: "button-question-mark",
  BUTTON_SEARCH2: "button-search2",
  BUTTON_SEARCH: "button-search",
  BUTTON_STAR2: "button-star2",
  BUTTON_STAR: "button-star",
  BUTTON_SUBTRACT: "button-subtract",
  BUTTON_VISIBLE2: "button-visible2",
  BUTTON_VISIBLE: "button-visible",
  BUTTON: "button",
  CALENDAR2: "calendar2",
  CALENDAR: "calendar",
  CHART_BARS_SQUARED: "chart-bars-squared",
  CHART_BUBBLES: "chart-bubbles",
  CHART_CANDLES: "chart-candles",
  CHART_HALF_CIRCLE: "chart-half-circle",
  CHART_LINE_SQUARED: "chart-line-squared",
  CHART_LINE: "chart-line",
  CHART_PIE: "chart-pie",
  CHECK_FAT: "check-fat",
  CHECK_L: "check-l",
  CHECK_LIST: "check-list",
  CHECK_M: "check-m",
  CHECK_S: "check-s",
  CIRCLE_INVISIBLE: "circle-invisible",
  CIRCLE_SUBTRACT: "circle-subtract",
  CIRCLED_ADD: "circled-add",
  CIRCLED_BROKEN_HEART: "circled-broken-heart",
  CIRCLED_CHECK: "circled-check",
  CIRCLED_EDIT: "circled-edit",
  CIRCLED_EXCLAMATION_MARK: "circled-exclamation-mark",
  CIRCLED_HEART: "circled-heart",
  CIRCLED_INFO: "circled-info",
  CIRCLED_MULTIPLY: "circled-multiply",
  CIRCLED_QUESTION_MARK: "circled-question-mark",
  CIRCLED_SEARCH: "circled-search",
  CIRCLED_STAR: "circled-star",
  CIRCLED_VISIBLE: "circled-visible",
  CIRCLED: "circled",
  CIRCULAR_LOADER: "circular-loader",
  CLOCK: "clock",
  CODE_BRACKETS_CIRCLED: "code-brackets-circled",
  CODE_BRACKETS: "code-brackets",
  CODE_CHEVRONS_CIRCLED: "code-chevrons-circled",
  CODE_CHEVRONS_OPEN_CIRCLED: "code-chevrons-open-circled",
  CODE_CHEVRONS_OPEN: "code-chevrons-open",
  CODE_CHEVRONS: "code-chevrons",
  COMPANY: "company",
  DISLIKE: "dislike",
  EDIT_FAT: "edit-fat",
  EDIT_L: "edit-l",
  EDIT_LINE_SWIRL: "edit-line-swirl",
  EDIT_LINE: "edit-line",
  EDIT_M: "edit-m",
  EDIT_S: "edit-s",
  EXCLAMATION_MARK_FAT: "exclamation-mark-fat",
  EXCLAMATION_MARK_L: "exclamation-mark-l",
  EXCLAMATION_MARK_M: "exclamation-mark-m",
  EXCLAMATION_MARK_S: "exclamation-mark-s",
  FEMALE_SIMPLIFIED: "female-simplified",
  FILE_ADD267: "file-add267",
  FILE_ADD269: "file-add269",
  FILE_ADD: "file-add",
  FILE_ARCHIVE: "file-archive",
  FILE_ARROW_UP: "file-arrow-up",
  FILE_BINARY: "file-binary",
  FILE_BROKEN_HEART2: "file-broken-heart2",
  FILE_BROKEN_HEART: "file-broken-heart",
  FILE_CHECK2: "file-check2",
  FILE_CHECK: "file-check",
  FILE_CLOUD: "file-cloud",
  FILE_CODE: "file-code",
  FILE_COLUMNS: "file-columns",
  FILE_EDIT2: "file-edit2",
  FILE_EDIT: "file-edit",
  FILE_EXCLAMATION_MARK2: "file-exclamation-mark2",
  FILE_EXCLAMATION_MARK: "file-exclamation-mark",
  FILE_GRAPHS: "file-graphs",
  FILE_HEART2: "file-heart2",
  FILE_HEART: "file-heart",
  FILE_INFO2: "file-info2",
  FILE_INFO: "file-info",
  FILE_INVISIBLE2: "file-invisible2",
  FILE_INVISIBLE: "file-invisible",
  FILE_MULTIPLY: "file-multiply",
  FILE_QUESTION_MARK2: "file-question-mark2",
  FILE_QUESTION_MARK: "file-question-mark",
  FILE_SEARCH2: "file-search2",
  FILE_SEARCH: "file-search",
  FILE_STAR2: "file-star2",
  FILE_STAR: "file-star",
  FILE_SUBTRACT2: "file-subtract2",
  FILE_SUBTRACT: "file-subtract",
  FILE_TEXT: "file-text",
  FILE_TRAY_STACK: "file-tray-stack",
  FILE_TRAY: "file-tray",
  FILE_VISIBLE2: "file-visible2",
  FILE_VISIBLE: "file-visible",
  FILE: "file",
  FOLDER_ADD2: "folder-add2",
  FOLDER_ADD: "folder-add",
  FOLDER_BROKEN_HEART2: "folder-broken-heart2",
  FOLDER_BROKEN_HEART: "folder-broken-heart",
  FOLDER_CHECK2: "folder-check2",
  FOLDER_CHECK: "folder-check",
  FOLDER_EDIT2: "folder-edit2",
  FOLDER_EDIT: "folder-edit",
  FOLDER_EXCLAMATION_MARK2: "folder-exclamation-mark2",
  FOLDER_EXCLAMATION_MARK: "folder-exclamation-mark",
  FOLDER_HEART2: "folder-heart2",
  FOLDER_HEART: "folder-heart",
  FOLDER_INFO2: "folder-info2",
  FOLDER_INFO: "folder-info",
  FOLDER_INVISIBLE2: "folder-invisible2",
  FOLDER_INVISIBLE: "folder-invisible",
  FOLDER_MULTIPLY2: "folder-multiply2",
  FOLDER_MULTIPLY: "folder-multiply",
  FOLDER_QUESTION_MARK2: "folder-question-mark2",
  FOLDER_QUESTION_MARK: "folder-question-mark",
  FOLDER_SEARCH2: "folder-search2",
  FOLDER_SEARCH: "folder-search",
  FOLDER_STAR2: "folder-star2",
  FOLDER_STAR: "folder-star",
  FOLDER_SUBTRACT2: "folder-subtract2",
  FOLDER_SUBTRACT: "folder-subtract",
  FOLDER_VISIBLE2: "folder-visible2",
  FOLDER_VISIBLE: "folder-visible",
  FOLDER: "folder",
  GIRL: "girl",
  GIT_BRANCH: "git-branch",
  GIT_COMPARE: "git-compare",
  GIT_MERGE_QUEUE: "git-merge-queue",
  GIT_MERGE: "git-merge",
  GIT_PULL_REQUEST_CLOSED: "git-pull-request-closed",
  GIT_PULL_REQUEST_DRAFT: "git-pull-request-draft",
  GIT_PULL_REQUEST: "git-pull-request",
  GIT_REPO_FORK: "git-repo-fork",
  HEART_BROKEN_SMALL: "heart-broken-small",
  HEART_FAT: "heart-fat",
  HEART_L: "heart-l",
  HEART_M: "heart-m",
  HEART_SMALL: "heart-small",
  INFO_FAT: "info-fat",
  INFO_L: "info-l",
  INFO_M: "info-m",
  INFO_S: "info-s",
  INVISIBLE_FAT: "invisible-fat",
  INVISIBLE_L: "invisible-l",
  INVISIBLE_M: "invisible-m",
  INVISIBLE_S: "invisible-s",
  KEY_BACKSPACE: "key-backspace",
  KEY_DELETE: "key-delete",
  KEY_DOWN: "key-down",
  KEY_EJECT: "key-eject",
  KEY_ENTER: "key-enter",
  KEY_FUNCTION: "key-function",
  KEY_MAC_COMMAND: "key-mac-command",
  KEY_OPTION: "key-option",
  KEY_PAGE_DOWN: "key-page-down",
  KEY_PAGE_NEXT: "key-page-next",
  KEY_PAGE_UP: "key-page-up",
  KEY_PREVIOUS_UP: "key-previous-up",
  KEY_SHIFT: "key-shift",
  KEY_TAB: "key-tab",
  KEY_UP: "key-up",
  LIKE: "like",
  LINK: "link",
  LOADER_DOTS2: "loader-dots2",
  LOADER_DOTS: "loader-dots",
  MALE_SIMPLIFIED: "male-simplified",
  MOVING_BLOCK: "moving-block",
  MULTIPLY_FAT: "multiply-fat",
  MULTIPLY_L: "multiply-l",
  MULTIPLY_M: "multiply-m",
  MULTIPLY_S: "multiply-s",
  NOTE_ADD2: "note-add2",
  NOTE_ADD: "note-add",
  NOTE_BROKEN_HEART2: "note-broken-heart2",
  NOTE_BROKEN_HEART: "note-broken-heart",
  NOTE_CHECK2: "note-check2",
  NOTE_CHECK: "note-check",
  NOTE_EDIT2: "note-edit2",
  NOTE_EDIT: "note-edit",
  NOTE_EXCLAMATION_MARK2: "note-exclamation-mark2",
  NOTE_EXCLAMATION_MARK: "note-exclamation-mark",
  NOTE_HEART2: "note-heart2",
  NOTE_HEART: "note-heart",
  NOTE_INFO2: "note-info2",
  NOTE_INFO: "note-info",
  NOTE_INVISIBLE2: "note-invisible2",
  NOTE_INVISIBLE: "note-invisible",
  NOTE_MULTIPLY2: "note-multiply2",
  NOTE_MULTIPLY: "note-multiply",
  NOTE_QUESTION_MARK2: "note-question-mark2",
  NOTE_QUESTION_MARK: "note-question-mark",
  NOTE_SEARCH2: "note-search2",
  NOTE_SEARCH: "note-search",
  NOTE_STAR2: "note-star2",
  NOTE_STAR: "note-star",
  NOTE_SUBTRACT2: "note-subtract2",
  NOTE_SUBTRACT: "note-subtract",
  NOTE_VISIBLE2: "note-visible2",
  NOTE_VISIBLE: "note-visible",
  NOTE: "note",
  ON_TARGET: "on-target",
  PARAGRAPH: "paragraph",
  PERFORMANCE2: "performance2",
  PERFORMANCE: "performance",
  PIN_TILTED: "pin-tilted",
  PIN: "pin",
  PLANNER: "planner",
  POINTER_ARROW_LINE: "pointer-arrow-line",
  POINTER_ARROW: "pointer-arrow",
  POINTER_CROSS: "pointer-cross",
  POINTER_HAND: "pointer-hand",
  POINTER_LEFT: "pointer-left",
  POINTER_MOUSE: "pointer-mouse",
  POINTER_PEN: "pointer-pen",
  POINTER_TEXT: "pointer-text",
  QUESTION_MARK_FAT: "question-mark-fat",
  QUESTION_MARK_L: "question-mark-l",
  QUESTION_MARK_M: "question-mark-m",
  QUESTION_MARK_S: "question-mark-s",
  REMOVE_LINES: "remove-lines",
  SEARCH_FAT: "search-fat",
  SEARCH_L: "search-l",
  SEARCH_M: "search-m",
  SEARCH_SMALL: "search-small",
  SECTION: "section",
  SETTINGS2: "settings2",
  SETTINGS3: "settings3",
  SETTINGS4: "settings4",
  SETTINGS5: "settings5",
  SETTINGS: "settings",
  SPEECH_BALLOON2: "speech-balloon2",
  SPEECH_BALLOON_SQUARE2: "speech-balloon-square2",
  SPEECH_BALLOON_SQUARE_COPY: "speech-balloon-square-copy",
  SPEECH_BALLOON_SQUARE_TEXT: "speech-balloon-square-text",
  SPEECH_BALLOON_SQUARE: "speech-balloon-square",
  SPEECH_BALLOON: "speech-balloon",
  SPEECH_BALLOONS: "speech-balloons",
  SQUARED_ADD: "squared-add",
  SQUARED_BROKEN_HEART: "squared-broken-heart",
  SQUARED_CHECK: "squared-check",
  SQUARED_EDIT: "squared-edit",
  SQUARED_EXCLAMATION_MARK: "squared-exclamation-mark",
  SQUARED_HEART: "squared-heart",
  SQUARED_INFO: "squared-info",
  SQUARED_INVISIBLE: "squared-invisible",
  SQUARED_MULTIPLY: "squared-multiply",
  SQUARED_QUESTION_MARK: "squared-question-mark",
  SQUARED_SEARCH: "squared-search",
  SQUARED_STAR: "squared-star",
  SQUARED_SUBTRACT: "squared-subtract",
  SQUARED_VISIBLE: "squared-visible",
  SQUARED: "squared",
  STAMP: "stamp",
  STAR_FAT: "star-fat",
  STAR_L: "star-l",
  STAR_M: "star-m",
  STAR_SMALL: "star-small",
  STICKER: "sticker",
  STOPWATCH: "stopwatch",
  SUBTRACT_FAT: "subtract-fat",
  SUBTRACT_L: "subtract-l",
  SUBTRACT_M: "subtract-m",
  SUBTRACT_S: "subtract-s",
  TABLES: "tables",
  TALK_ADD: "talk-add",
  TALK_CHECK: "talk-check",
  TALK_DELETE: "talk-delete",
  TALK_EDIT: "talk-edit",
  TALK_EXCLAMATION_MARK: "talk-exclamation-mark",
  TALK_HEART_BROKEN: "talk-heart-broken",
  TALK_HEART: "talk-heart",
  TALK_INFO: "talk-info",
  TALK_INVISIBLE: "talk-invisible",
  TALK_QUESTION_MARK: "talk-question-mark",
  TALK_SEARCH: "talk-search",
  TALK_STAR: "talk-star",
  TALK_SUBTRACT: "talk-subtract",
  TALK_VISIBLE: "talk-visible",
  TALK: "talk",
  TARGET: "target",
  TEXT_ALIGN_CENTER: "text-align-center",
  TEXT_ALIGN_JUSTIFY_CENTERED: "text-align-justify-centered",
  TEXT_ALIGN_JUSTIFY_LEFT: "text-align-justify-left",
  TEXT_ALIGN_JUSTIFY_RIGHT: "text-align-justify-right",
  TEXT_ALIGN_JUSTIFY: "text-align-justify",
  TEXT_ALIGN_LEFT: "text-align-left",
  TEXT_ALIGN_RIGHT_ORDER_DESC: "text-align-right-order-desc",
  TEXT_ALIGN_RIGHT: "text-align-right",
  TEXT_BOLD: "text-bold",
  TEXT_DETAIL_LIST: "text-detail-list",
  TEXT_INDENT: "text-indent",
  TEXT_ITALIC: "text-italic",
  TEXT_LINE_THROUGH: "text-line-through",
  TEXT_ORDER_ASC114: "text-order-asc114",
  TEXT_ORDER_ASC118: "text-order-asc118",
  TEXT_ORDER_DESC_COPY2: "text-order-desc-copy2",
  TEXT_ORDER_DESC_COPY3: "text-order-desc-copy3",
  TEXT_ORDER_DESC_COPY: "text-order-desc-copy",
  TEXT_ORDER_DESC: "text-order-desc",
  TEXT_OUTDENT: "text-outdent",
  TEXT_UNDERLINE: "text-underline",
  TIMER: "timer",
  TRASH2: "trash2",
  TRASH: "trash",
  TRIANGLED_EXCLAMATION_MARK: "triangled-exclamation-mark",
  TRIANGLED_INFO: "triangled-info",
  TRIANGLED_QUESTION_MARK: "triangled-question-mark",
  TRIANGLED: "triangled",
  USER_ADD: "user-add",
  USER_DELETE: "user-delete",
  USER_GROUP: "user-group",
  USER: "user",
  USERS: "users",
  VISIBLE_FAT: "visible-fat",
  VISIBLE_L: "visible-l",
  VISIBLE_M: "visible-m",
  VISIBLE_S: "visible-s",
  WHEELCHAIR_ACTION: "wheelchair-action",
  WHEELCHAIR: "wheelchair",
  AIRPLANE_ARRIVALS: "airplane-arrivals",
  AIRPLANE_DEPARTURES: "airplane-departures",
  AIRPLANE: "airplane",
  AIRPORT_CONNECT_FLIGHTS: "airport-connect-flights",
  AIRPORT_TRANSFER2: "airport-transfer2",
  AIRPORT_TRANSFER: "airport-transfer",
  ANCHOR: "anchor",
  BICYCLE_SURFBOARD: "bicycle-surfboard",
  BICYCLE: "bicycle",
  BRIEFCASE_CROSS: "briefcase-cross",
  CAR_PARKING_INDOOR: "car-parking-indoor",
  CAR_PARKING_OUTSIDE: "car-parking-outside",
  CAR_PARKING: "car-parking",
  CAR: "car",
  CHANGING_AREA: "changing-area",
  CHECK_IN: "check-in",
  CITY_BUS: "city-bus",
  CROSS_CIRCLED: "cross-circled",
  CROSS: "cross",
  CRUISESHIP: "cruiseship",
  ELEVATOR1: "elevator1",
  ELEVATOR2: "elevator2",
  ELEVATOR3: "elevator3",
  ELEVATOR4: "elevator4",
  ESCALATOR_DOWN: "escalator-down",
  ESCALATOR_UP: "escalator-up",
  ESCALATOR: "escalator",
  FAMILY: "family",
  FERRY: "ferry",
  FIRE_EXTINGUISHER: "fire-extinguisher",
  FIRE_FLAME: "fire-flame",
  FIRE_HOSE: "fire-hose",
  GRAVESTONE2: "gravestone2",
  GRAVESTONE3: "gravestone3",
  GRAVESTONE: "gravestone",
  HELLO_GOODBYE: "hello-goodbye",
  LOCATION_MARKER: "location-marker",
  LOCATION_PATH2: "location-path2",
  LOCATION_PATH: "location-path",
  LOCATION_PIN: "location-pin",
  LOUNGE: "lounge",
  LUGGAGE_BELT: "luggage-belt",
  LUGGAGE_LOCKER: "luggage-locker",
  LUGGAGE_TROLLEY: "luggage-trolley",
  LUGGAGE: "luggage",
  MAP: "map",
  MAP2: "map2",
  MAP3: "map3",
  METRO2: "metro2",
  METRO: "metro",
  NO_SMOKING_CIRCLED: "no-smoking-circled",
  NO_SMOKING: "no-smoking",
  OFFICE_SPACE: "office-space",
  PALMTREE_ISLAND_WAVE: "palmtree-island-wave",
  PALMTREE_ISLAND: "palmtree-island",
  PALMTREE: "palmtree",
  PARASOL_ISLAND_WAVE: "parasol-island-wave",
  PARASOL_ISLAND: "parasol-island",
  PARASOL: "parasol",
  PLASTER: "plaster",
  PLASTERS: "plasters",
  POINTER_TARGET: "pointer-target",
  RENTAL_CAR: "rental-car",
  RESTROOM: "restroom",
  SECURITY_CAMERA2: "security-camera2",
  SECURITY_CAMERA3: "security-camera3",
  SECURITY_CAMERA: "security-camera",
  SECURITY_CHECK: "security-check",
  SHIP: "ship",
  SIGNPOST2: "signpost2",
  SIGNPOST: "signpost",
  SMOKING: "smoking",
  STAIRS_DOWN: "stairs-down",
  STAIRS_UP: "stairs-up",
  STAIRS: "stairs",
  TAXI_STOP: "taxi-stop",
  TAXI: "taxi",
  TRAIN_TRACK: "train-track",
  TRAIN: "train",
  WALKING2: "walking2",
  WALKING: "walking",
  CLOUD_LIGHTNING: "cloud-lightning",
  CLOUD_RAIN2: "cloud-rain2",
  CLOUD_SMALL_RAIN: "cloud-small-rain",
  CLOUD_SUN: "cloud-sun",
  CLOUD_THERMOMETER: "cloud-thermometer",
  CLOUD: "cloud",
  LIGHT_DARK_MODE2: "light-dark-mode2",
  LIGHT_DARK_MODE3: "light-dark-mode3",
  LIGHTNING_FLASH: "lightning-flash",
  MOON01: "moon01",
  MOON19: "moon19",
  MOON_DARK_MODE: "moon-dark-mode",
  SIMPLE_SUN: "simple-sun",
  SUN2: "sun2",
  SUN_LIGHT_MODE: "sun-light-mode",
  SUN: "sun",
  THERMOMETER_COLD: "thermometer-cold",
  THERMOMETER_HOT: "thermometer-hot",
  THERMOMETER: "thermometer"
};
var Aliasses = {
  ADD: BaseIcons.ADD_M,
  PLUS: BaseIcons.ADD_M,
  MINUS: BaseIcons.SUBTRACT_M,
  MIN: BaseIcons.SUBTRACT_M,
  SUBTRACT: BaseIcons.SUBTRACT_M,
  MULTIPLY: BaseIcons.MULTIPLY_M,
  TIMES: BaseIcons.MULTIPLY_M,
  X: BaseIcons.MULTIPLY_M,
  CLOSE: BaseIcons.MULTIPLY_M,
  VISIBLE: BaseIcons.VISIBLE_M,
  EYE: BaseIcons.VISIBLE_M,
  SHOW: BaseIcons.VISIBLE_M,
  INVISIBLE: BaseIcons.INVISIBLE_M,
  EYE_SLASH: BaseIcons.INVISIBLE_M,
  HIDE: BaseIcons.INVISIBLE_M,
  HEART: BaseIcons.HEART_M,
  LOVE: BaseIcons.HEART_M
};
var Icons = {
  ...BaseIcons,
  ...Aliasses
};

// lib/icons/index.ts
var getIcon = async (icon) => {
  switch (icon) {
    case Icons.ANIMAL_STEP:
      return (await Promise.resolve().then(() => (init_animal_step(), animal_step_exports))).IconAnimalStep;
    case Icons.BUTTERFLY:
      return (await Promise.resolve().then(() => (init_butterfly(), butterfly_exports))).IconButterfly;
    case Icons.CAT_HEAD:
      return (await Promise.resolve().then(() => (init_cat_head(), cat_head_exports))).IconCatHead;
    case Icons.CAT_HEAD2:
      return (await Promise.resolve().then(() => (init_cat_head2(), cat_head2_exports))).IconCatHead2;
    case Icons.CAT:
      return (await Promise.resolve().then(() => (init_cat(), cat_exports))).IconCat;
    case Icons.CAT2:
      return (await Promise.resolve().then(() => (init_cat2(), cat2_exports))).IconCat2;
    case Icons.CAT3:
      return (await Promise.resolve().then(() => (init_cat3(), cat3_exports))).IconCat3;
    case Icons.FISH:
      return (await Promise.resolve().then(() => (init_fish(), fish_exports))).IconFish;
    case Icons.FISH2:
      return (await Promise.resolve().then(() => (init_fish2(), fish2_exports))).IconFish2;
    case Icons.JELLYFISH:
      return (await Promise.resolve().then(() => (init_jellyfish(), jellyfish_exports))).IconJellyfish;
    case Icons.LOBSTER:
      return (await Promise.resolve().then(() => (init_lobster(), lobster_exports))).IconLobster;
    case Icons.PUFFERFISH:
      return (await Promise.resolve().then(() => (init_pufferfish(), pufferfish_exports))).IconPufferfish;
    case Icons.SEA_STAR:
      return (await Promise.resolve().then(() => (init_sea_star(), sea_star_exports))).IconSeaStar;
    case Icons.SQUID:
      return (await Promise.resolve().then(() => (init_squid(), squid_exports))).IconSquid;
    case Icons.STINGRAY:
      return (await Promise.resolve().then(() => (init_stingray(), stingray_exports))).IconStingray;
    case Icons.TURTLE:
      return (await Promise.resolve().then(() => (init_turtle(), turtle_exports))).IconTurtle;
    case Icons.WHALE:
      return (await Promise.resolve().then(() => (init_whale(), whale_exports))).IconWhale;
    case Icons.ICON24:
      return (await Promise.resolve().then(() => (init_icon24(), icon24_exports))).IconIcon24;
    case Icons.ARROW_CORNER_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_corner_down(), arrow_corner_down_exports))).IconArrowCornerDown;
    case Icons.ARROW_CORNER_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_corner_left(), arrow_corner_left_exports))).IconArrowCornerLeft;
    case Icons.ARROW_CORNER_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_corner_right(), arrow_corner_right_exports))).IconArrowCornerRight;
    case Icons.ARROW_CORNER_UP:
      return (await Promise.resolve().then(() => (init_arrow_corner_up(), arrow_corner_up_exports))).IconArrowCornerUp;
    case Icons.ARROW_DIAGONAL_BL_TR_STOP:
      return (await Promise.resolve().then(() => (init_arrow_diagonal_bl_tr_stop(), arrow_diagonal_bl_tr_stop_exports))).IconArrowDiagonalBlTrStop;
    case Icons.ARROW_DIAGONAL_BR_TL_STOP:
      return (await Promise.resolve().then(() => (init_arrow_diagonal_br_tl_stop(), arrow_diagonal_br_tl_stop_exports))).IconArrowDiagonalBrTlStop;
    case Icons.ARROW_DIAGONAL_IN_LT_BR:
      return (await Promise.resolve().then(() => (init_arrow_diagonal_in_lt_br(), arrow_diagonal_in_lt_br_exports))).IconArrowDiagonalInLtBr;
    case Icons.ARROW_DIAGONAL_IN_TR_BL:
      return (await Promise.resolve().then(() => (init_arrow_diagonal_in_tr_bl(), arrow_diagonal_in_tr_bl_exports))).IconArrowDiagonalInTrBl;
    case Icons.ARROW_DIAGONAL_TL_BR_SPLIT:
      return (await Promise.resolve().then(() => (init_arrow_diagonal_tl_br_split(), arrow_diagonal_tl_br_split_exports))).IconArrowDiagonalTlBrSplit;
    case Icons.ARROW_DIAGONAL_TL_BR_STOP:
      return (await Promise.resolve().then(() => (init_arrow_diagonal_tl_br_stop(), arrow_diagonal_tl_br_stop_exports))).IconArrowDiagonalTlBrStop;
    case Icons.ARROW_DIAGONAL_TL_BR:
      return (await Promise.resolve().then(() => (init_arrow_diagonal_tl_br(), arrow_diagonal_tl_br_exports))).IconArrowDiagonalTlBr;
    case Icons.ARROW_DIAGONAL_TR_BL_SPLIT:
      return (await Promise.resolve().then(() => (init_arrow_diagonal_tr_bl_split(), arrow_diagonal_tr_bl_split_exports))).IconArrowDiagonalTrBlSplit;
    case Icons.ARROW_DIAGONAL_TR_BL_STOP:
      return (await Promise.resolve().then(() => (init_arrow_diagonal_tr_bl_stop(), arrow_diagonal_tr_bl_stop_exports))).IconArrowDiagonalTrBlStop;
    case Icons.ARROW_DIAGONAL_TR_BL:
      return (await Promise.resolve().then(() => (init_arrow_diagonal_tr_bl(), arrow_diagonal_tr_bl_exports))).IconArrowDiagonalTrBl;
    case Icons.ARROW_DOWN_COPY:
      return (await Promise.resolve().then(() => (init_arrow_down_copy(), arrow_down_copy_exports))).IconArrowDownCopy;
    case Icons.ARROW_DOWN_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_down_left(), arrow_down_left_exports))).IconArrowDownLeft;
    case Icons.ARROW_DOWN_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_down_right(), arrow_down_right_exports))).IconArrowDownRight;
    case Icons.ARROW_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_down(), arrow_down_exports))).IconArrowDown;
    case Icons.ARROW_DOWNLOAD:
      return (await Promise.resolve().then(() => (init_arrow_download(), arrow_download_exports))).IconArrowDownload;
    case Icons.ARROW_HEADED_CORNER_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_headed_corner_down(), arrow_headed_corner_down_exports))).IconArrowHeadedCornerDown;
    case Icons.ARROW_HEADED_CORNER_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_headed_corner_left(), arrow_headed_corner_left_exports))).IconArrowHeadedCornerLeft;
    case Icons.ARROW_HEADED_CORNER_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_headed_corner_right(), arrow_headed_corner_right_exports))).IconArrowHeadedCornerRight;
    case Icons.ARROW_HEADED_CORNER_UP:
      return (await Promise.resolve().then(() => (init_arrow_headed_corner_up(), arrow_headed_corner_up_exports))).IconArrowHeadedCornerUp;
    case Icons.ARROW_HEADED_DIAGONAL_BL_TR_STOP:
      return (await Promise.resolve().then(() => (init_arrow_headed_diagonal_bl_tr_stop(), arrow_headed_diagonal_bl_tr_stop_exports))).IconArrowHeadedDiagonalBlTrStop;
    case Icons.ARROW_HEADED_DIAGONAL_BR_TL_STOP:
      return (await Promise.resolve().then(() => (init_arrow_headed_diagonal_br_tl_stop(), arrow_headed_diagonal_br_tl_stop_exports))).IconArrowHeadedDiagonalBrTlStop;
    case Icons.ARROW_HEADED_DIAGONAL_IN_LT_BR:
      return (await Promise.resolve().then(() => (init_arrow_headed_diagonal_in_lt_br(), arrow_headed_diagonal_in_lt_br_exports))).IconArrowHeadedDiagonalInLtBr;
    case Icons.ARROW_HEADED_DIAGONAL_IN_TR_BL:
      return (await Promise.resolve().then(() => (init_arrow_headed_diagonal_in_tr_bl(), arrow_headed_diagonal_in_tr_bl_exports))).IconArrowHeadedDiagonalInTrBl;
    case Icons.ARROW_HEADED_DIAGONAL_TL_BR_SPLIT:
      return (await Promise.resolve().then(() => (init_arrow_headed_diagonal_tl_br_split(), arrow_headed_diagonal_tl_br_split_exports))).IconArrowHeadedDiagonalTlBrSplit;
    case Icons.ARROW_HEADED_DIAGONAL_TL_BR_STOP:
      return (await Promise.resolve().then(() => (init_arrow_headed_diagonal_tl_br_stop(), arrow_headed_diagonal_tl_br_stop_exports))).IconArrowHeadedDiagonalTlBrStop;
    case Icons.ARROW_HEADED_DIAGONAL_TL_BR:
      return (await Promise.resolve().then(() => (init_arrow_headed_diagonal_tl_br(), arrow_headed_diagonal_tl_br_exports))).IconArrowHeadedDiagonalTlBr;
    case Icons.ARROW_HEADED_DIAGONAL_TR_BL_SPLIT:
      return (await Promise.resolve().then(() => (init_arrow_headed_diagonal_tr_bl_split(), arrow_headed_diagonal_tr_bl_split_exports))).IconArrowHeadedDiagonalTrBlSplit;
    case Icons.ARROW_HEADED_DIAGONAL_TR_BL_STOP:
      return (await Promise.resolve().then(() => (init_arrow_headed_diagonal_tr_bl_stop(), arrow_headed_diagonal_tr_bl_stop_exports))).IconArrowHeadedDiagonalTrBlStop;
    case Icons.ARROW_HEADED_DIAGONAL_TR_BL:
      return (await Promise.resolve().then(() => (init_arrow_headed_diagonal_tr_bl(), arrow_headed_diagonal_tr_bl_exports))).IconArrowHeadedDiagonalTrBl;
    case Icons.ARROW_HEADED_DOWN_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_headed_down_left(), arrow_headed_down_left_exports))).IconArrowHeadedDownLeft;
    case Icons.ARROW_HEADED_DOWN_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_headed_down_right(), arrow_headed_down_right_exports))).IconArrowHeadedDownRight;
    case Icons.ARROW_HEADED_DOWN_STOP:
      return (await Promise.resolve().then(() => (init_arrow_headed_down_stop(), arrow_headed_down_stop_exports))).IconArrowHeadedDownStop;
    case Icons.ARROW_HEADED_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_headed_down(), arrow_headed_down_exports))).IconArrowHeadedDown;
    case Icons.ARROW_HEADED_DOWNLOAD:
      return (await Promise.resolve().then(() => (init_arrow_headed_download(), arrow_headed_download_exports))).IconArrowHeadedDownload;
    case Icons.ARROW_HEADED_IN_CENTER:
      return (await Promise.resolve().then(() => (init_arrow_headed_in_center(), arrow_headed_in_center_exports))).IconArrowHeadedInCenter;
    case Icons.ARROW_HEADED_IN_DIAGONAL:
      return (await Promise.resolve().then(() => (init_arrow_headed_in_diagonal(), arrow_headed_in_diagonal_exports))).IconArrowHeadedInDiagonal;
    case Icons.ARROW_HEADED_IN:
      return (await Promise.resolve().then(() => (init_arrow_headed_in(), arrow_headed_in_exports))).IconArrowHeadedIn;
    case Icons.ARROW_HEADED_LEFT_RIGHT_SPLIT:
      return (await Promise.resolve().then(() => (init_arrow_headed_left_right_split(), arrow_headed_left_right_split_exports))).IconArrowHeadedLeftRightSplit;
    case Icons.ARROW_HEADED_LEFT_RIGHT_STOP:
      return (await Promise.resolve().then(() => (init_arrow_headed_left_right_stop(), arrow_headed_left_right_stop_exports))).IconArrowHeadedLeftRightStop;
    case Icons.ARROW_HEADED_LEFT_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_headed_left_right(), arrow_headed_left_right_exports))).IconArrowHeadedLeftRight;
    case Icons.ARROW_HEADED_LEFT_STOP:
      return (await Promise.resolve().then(() => (init_arrow_headed_left_stop(), arrow_headed_left_stop_exports))).IconArrowHeadedLeftStop;
    case Icons.ARROW_HEADED_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_headed_left(), arrow_headed_left_exports))).IconArrowHeadedLeft;
    case Icons.ARROW_HEADED_OUT_CENTER:
      return (await Promise.resolve().then(() => (init_arrow_headed_out_center(), arrow_headed_out_center_exports))).IconArrowHeadedOutCenter;
    case Icons.ARROW_HEADED_RELOAD_DOWN_UP:
      return (await Promise.resolve().then(() => (init_arrow_headed_reload_down_up(), arrow_headed_reload_down_up_exports))).IconArrowHeadedReloadDownUp;
    case Icons.ARROW_HEADED_RELOAD_LEFT_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_headed_reload_left_right(), arrow_headed_reload_left_right_exports))).IconArrowHeadedReloadLeftRight;
    case Icons.ARROW_HEADED_RELOAD_RIGHT_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_headed_reload_right_left(), arrow_headed_reload_right_left_exports))).IconArrowHeadedReloadRightLeft;
    case Icons.ARROW_HEADED_RELOAD_UP_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_headed_reload_up_down(), arrow_headed_reload_up_down_exports))).IconArrowHeadedReloadUpDown;
    case Icons.ARROW_HEADED_RETURN_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_headed_return_down(), arrow_headed_return_down_exports))).IconArrowHeadedReturnDown;
    case Icons.ARROW_HEADED_RETURN_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_headed_return_left(), arrow_headed_return_left_exports))).IconArrowHeadedReturnLeft;
    case Icons.ARROW_HEADED_RETURN_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_headed_return_right(), arrow_headed_return_right_exports))).IconArrowHeadedReturnRight;
    case Icons.ARROW_HEADED_RETURN_UP:
      return (await Promise.resolve().then(() => (init_arrow_headed_return_up(), arrow_headed_return_up_exports))).IconArrowHeadedReturnUp;
    case Icons.ARROW_HEADED_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_headed_right(), arrow_headed_right_exports))).IconArrowHeadedRight;
    case Icons.ARROW_HEADED_ROTATE_BOTTOM_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_headed_rotate_bottom_left(), arrow_headed_rotate_bottom_left_exports))).IconArrowHeadedRotateBottomLeft;
    case Icons.ARROW_HEADED_ROTATE_BOTTOM_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_headed_rotate_bottom_right(), arrow_headed_rotate_bottom_right_exports))).IconArrowHeadedRotateBottomRight;
    case Icons.ARROW_HEADED_ROTATE_TOP_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_headed_rotate_top_left(), arrow_headed_rotate_top_left_exports))).IconArrowHeadedRotateTopLeft;
    case Icons.ARROW_HEADED_ROTATE_TOP_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_headed_rotate_top_right(), arrow_headed_rotate_top_right_exports))).IconArrowHeadedRotateTopRight;
    case Icons.ARROW_HEADED_ROUNDED_LEFT_UP:
      return (await Promise.resolve().then(() => (init_arrow_headed_rounded_left_up(), arrow_headed_rounded_left_up_exports))).IconArrowHeadedRoundedLeftUp;
    case Icons.ARROW_HEADED_ROUNDED_RIGHT_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_headed_rounded_right_down(), arrow_headed_rounded_right_down_exports))).IconArrowHeadedRoundedRightDown;
    case Icons.ARROW_HEADED_ROUNDED_RIGHT_UP:
      return (await Promise.resolve().then(() => (init_arrow_headed_rounded_right_up(), arrow_headed_rounded_right_up_exports))).IconArrowHeadedRoundedRightUp;
    case Icons.ARROW_HEADED_ROUNED_LEFT_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_headed_rouned_left_down(), arrow_headed_rouned_left_down_exports))).IconArrowHeadedRounedLeftDown;
    case Icons.ARROW_HEADED_SHARE:
      return (await Promise.resolve().then(() => (init_arrow_headed_share(), arrow_headed_share_exports))).IconArrowHeadedShare;
    case Icons.ARROW_HEADED_SPREAD_SPLIT:
      return (await Promise.resolve().then(() => (init_arrow_headed_spread_split(), arrow_headed_spread_split_exports))).IconArrowHeadedSpreadSplit;
    case Icons.ARROW_HEADED_SPREAD:
      return (await Promise.resolve().then(() => (init_arrow_headed_spread(), arrow_headed_spread_exports))).IconArrowHeadedSpread;
    case Icons.ARROW_HEADED_TWOWAY_DIAGONAL_LR:
      return (await Promise.resolve().then(() => (init_arrow_headed_twoway_diagonal_lr(), arrow_headed_twoway_diagonal_lr_exports))).IconArrowHeadedTwowayDiagonalLr;
    case Icons.ARROW_HEADED_TWOWAY_DIAGONAL_RL:
      return (await Promise.resolve().then(() => (init_arrow_headed_twoway_diagonal_rl(), arrow_headed_twoway_diagonal_rl_exports))).IconArrowHeadedTwowayDiagonalRl;
    case Icons.ARROW_HEADED_TWOWAY_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_arrow_headed_twoway_horizontal(), arrow_headed_twoway_horizontal_exports))).IconArrowHeadedTwowayHorizontal;
    case Icons.ARROW_HEADED_TWOWAY_VERTICAL:
      return (await Promise.resolve().then(() => (init_arrow_headed_twoway_vertical(), arrow_headed_twoway_vertical_exports))).IconArrowHeadedTwowayVertical;
    case Icons.ARROW_HEADED_UP_DOWN_SPLIT:
      return (await Promise.resolve().then(() => (init_arrow_headed_up_down_split(), arrow_headed_up_down_split_exports))).IconArrowHeadedUpDownSplit;
    case Icons.ARROW_HEADED_UP_DOWN_STOP:
      return (await Promise.resolve().then(() => (init_arrow_headed_up_down_stop(), arrow_headed_up_down_stop_exports))).IconArrowHeadedUpDownStop;
    case Icons.ARROW_HEADED_UP_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_headed_up_down(), arrow_headed_up_down_exports))).IconArrowHeadedUpDown;
    case Icons.ARROW_HEADED_UP_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_headed_up_left(), arrow_headed_up_left_exports))).IconArrowHeadedUpLeft;
    case Icons.ARROW_HEADED_UP_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_headed_up_right(), arrow_headed_up_right_exports))).IconArrowHeadedUpRight;
    case Icons.ARROW_HEADED_UP_STOP76:
      return (await Promise.resolve().then(() => (init_arrow_headed_up_stop76(), arrow_headed_up_stop76_exports))).IconArrowHeadedUpStop76;
    case Icons.ARROW_HEADED_UP_STOP78:
      return (await Promise.resolve().then(() => (init_arrow_headed_up_stop78(), arrow_headed_up_stop78_exports))).IconArrowHeadedUpStop78;
    case Icons.ARROW_HEADED_UP:
      return (await Promise.resolve().then(() => (init_arrow_headed_up(), arrow_headed_up_exports))).IconArrowHeadedUp;
    case Icons.ARROW_HEADED_UPLOAD:
      return (await Promise.resolve().then(() => (init_arrow_headed_upload(), arrow_headed_upload_exports))).IconArrowHeadedUpload;
    case Icons.ARROW_IN_CENTER:
      return (await Promise.resolve().then(() => (init_arrow_in_center(), arrow_in_center_exports))).IconArrowInCenter;
    case Icons.ARROW_INVERT:
      return (await Promise.resolve().then(() => (init_arrow_invert(), arrow_invert_exports))).IconArrowInvert;
    case Icons.ARROW_LEFT_RIGHT_SPLIT:
      return (await Promise.resolve().then(() => (init_arrow_left_right_split(), arrow_left_right_split_exports))).IconArrowLeftRightSplit;
    case Icons.ARROW_LEFT_RIGHT_STOP:
      return (await Promise.resolve().then(() => (init_arrow_left_right_stop(), arrow_left_right_stop_exports))).IconArrowLeftRightStop;
    case Icons.ARROW_LEFT_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_left_right(), arrow_left_right_exports))).IconArrowLeftRight;
    case Icons.ARROW_LEFT_STOP:
      return (await Promise.resolve().then(() => (init_arrow_left_stop(), arrow_left_stop_exports))).IconArrowLeftStop;
    case Icons.ARROW_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_left(), arrow_left_exports))).IconArrowLeft;
    case Icons.ARROW_OUT_CENTER:
      return (await Promise.resolve().then(() => (init_arrow_out_center(), arrow_out_center_exports))).IconArrowOutCenter;
    case Icons.ARROW_RELOAD_DOWN_UP:
      return (await Promise.resolve().then(() => (init_arrow_reload_down_up(), arrow_reload_down_up_exports))).IconArrowReloadDownUp;
    case Icons.ARROW_RELOAD_LEFT_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_reload_left_right(), arrow_reload_left_right_exports))).IconArrowReloadLeftRight;
    case Icons.ARROW_RELOAD_RIGHT_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_reload_right_left(), arrow_reload_right_left_exports))).IconArrowReloadRightLeft;
    case Icons.ARROW_RELOAD_UP_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_reload_up_down(), arrow_reload_up_down_exports))).IconArrowReloadUpDown;
    case Icons.ARROW_RETURN_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_return_down(), arrow_return_down_exports))).IconArrowReturnDown;
    case Icons.ARROW_RETURN_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_return_left(), arrow_return_left_exports))).IconArrowReturnLeft;
    case Icons.ARROW_RETURN_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_return_right(), arrow_return_right_exports))).IconArrowReturnRight;
    case Icons.ARROW_RETURN_UP:
      return (await Promise.resolve().then(() => (init_arrow_return_up(), arrow_return_up_exports))).IconArrowReturnUp;
    case Icons.ARROW_RIGHT_STOP:
      return (await Promise.resolve().then(() => (init_arrow_right_stop(), arrow_right_stop_exports))).IconArrowRightStop;
    case Icons.ARROW_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_right(), arrow_right_exports))).IconArrowRight;
    case Icons.ARROW_ROATE_BOTTOM_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_roate_bottom_right(), arrow_roate_bottom_right_exports))).IconArrowRoateBottomRight;
    case Icons.ARROW_ROTATE_BOTTOM_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_rotate_bottom_left(), arrow_rotate_bottom_left_exports))).IconArrowRotateBottomLeft;
    case Icons.ARROW_ROTATE_TOP_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_rotate_top_left(), arrow_rotate_top_left_exports))).IconArrowRotateTopLeft;
    case Icons.ARROW_ROTATE_TOP_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_rotate_top_right(), arrow_rotate_top_right_exports))).IconArrowRotateTopRight;
    case Icons.ARROW_ROUNDED_LEFT_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_rounded_left_down(), arrow_rounded_left_down_exports))).IconArrowRoundedLeftDown;
    case Icons.ARROW_ROUNDED_LEFT_UP:
      return (await Promise.resolve().then(() => (init_arrow_rounded_left_up(), arrow_rounded_left_up_exports))).IconArrowRoundedLeftUp;
    case Icons.ARROW_ROUNDED_RIGHT_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_rounded_right_down(), arrow_rounded_right_down_exports))).IconArrowRoundedRightDown;
    case Icons.ARROW_ROUNDED_RIGHT_UP:
      return (await Promise.resolve().then(() => (init_arrow_rounded_right_up(), arrow_rounded_right_up_exports))).IconArrowRoundedRightUp;
    case Icons.ARROW_SHARE:
      return (await Promise.resolve().then(() => (init_arrow_share(), arrow_share_exports))).IconArrowShare;
    case Icons.ARROW_SPREAD_SPLIT:
      return (await Promise.resolve().then(() => (init_arrow_spread_split(), arrow_spread_split_exports))).IconArrowSpreadSplit;
    case Icons.ARROW_SPREAD:
      return (await Promise.resolve().then(() => (init_arrow_spread(), arrow_spread_exports))).IconArrowSpread;
    case Icons.ARROW_THICK_BOTTOM_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_thick_bottom_left(), arrow_thick_bottom_left_exports))).IconArrowThickBottomLeft;
    case Icons.ARROW_THICK_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_thick_down(), arrow_thick_down_exports))).IconArrowThickDown;
    case Icons.ARROW_THICK_LEFT_TOP:
      return (await Promise.resolve().then(() => (init_arrow_thick_left_top(), arrow_thick_left_top_exports))).IconArrowThickLeftTop;
    case Icons.ARROW_THICK_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_thick_left(), arrow_thick_left_exports))).IconArrowThickLeft;
    case Icons.ARROW_THICK_RIGHT_BOTTOM:
      return (await Promise.resolve().then(() => (init_arrow_thick_right_bottom(), arrow_thick_right_bottom_exports))).IconArrowThickRightBottom;
    case Icons.ARROW_THICK_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_thick_right(), arrow_thick_right_exports))).IconArrowThickRight;
    case Icons.ARROW_THICK_TALL_BOTTOM_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_thick_tall_bottom_left(), arrow_thick_tall_bottom_left_exports))).IconArrowThickTallBottomLeft;
    case Icons.ARROW_THICK_TALL_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_thick_tall_down(), arrow_thick_tall_down_exports))).IconArrowThickTallDown;
    case Icons.ARROW_THICK_TALL_LEFT_TOP:
      return (await Promise.resolve().then(() => (init_arrow_thick_tall_left_top(), arrow_thick_tall_left_top_exports))).IconArrowThickTallLeftTop;
    case Icons.ARROW_THICK_TALL_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_thick_tall_left(), arrow_thick_tall_left_exports))).IconArrowThickTallLeft;
    case Icons.ARROW_THICK_TALL_RIGHT_BOTTOM:
      return (await Promise.resolve().then(() => (init_arrow_thick_tall_right_bottom(), arrow_thick_tall_right_bottom_exports))).IconArrowThickTallRightBottom;
    case Icons.ARROW_THICK_TALL_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_thick_tall_right(), arrow_thick_tall_right_exports))).IconArrowThickTallRight;
    case Icons.ARROW_THICK_TALL_TOP_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_thick_tall_top_right(), arrow_thick_tall_top_right_exports))).IconArrowThickTallTopRight;
    case Icons.ARROW_THICK_TALL_UP:
      return (await Promise.resolve().then(() => (init_arrow_thick_tall_up(), arrow_thick_tall_up_exports))).IconArrowThickTallUp;
    case Icons.ARROW_THICK_TOP_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_thick_top_right(), arrow_thick_top_right_exports))).IconArrowThickTopRight;
    case Icons.ARROW_THICK_UP:
      return (await Promise.resolve().then(() => (init_arrow_thick_up(), arrow_thick_up_exports))).IconArrowThickUp;
    case Icons.ARROW_THICK_WIDE_BOTTOM_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_thick_wide_bottom_left(), arrow_thick_wide_bottom_left_exports))).IconArrowThickWideBottomLeft;
    case Icons.ARROW_THICK_WIDE_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_thick_wide_down(), arrow_thick_wide_down_exports))).IconArrowThickWideDown;
    case Icons.ARROW_THICK_WIDE_LEFT_TOP:
      return (await Promise.resolve().then(() => (init_arrow_thick_wide_left_top(), arrow_thick_wide_left_top_exports))).IconArrowThickWideLeftTop;
    case Icons.ARROW_THICK_WIDE_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_thick_wide_left(), arrow_thick_wide_left_exports))).IconArrowThickWideLeft;
    case Icons.ARROW_THICK_WIDE_RIGHT_BOTTOM:
      return (await Promise.resolve().then(() => (init_arrow_thick_wide_right_bottom(), arrow_thick_wide_right_bottom_exports))).IconArrowThickWideRightBottom;
    case Icons.ARROW_THICK_WIDE_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_thick_wide_right(), arrow_thick_wide_right_exports))).IconArrowThickWideRight;
    case Icons.ARROW_THICK_WIDE_TOP_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_thick_wide_top_right(), arrow_thick_wide_top_right_exports))).IconArrowThickWideTopRight;
    case Icons.ARROW_THICK_WIDE_UP:
      return (await Promise.resolve().then(() => (init_arrow_thick_wide_up(), arrow_thick_wide_up_exports))).IconArrowThickWideUp;
    case Icons.ARROW_TRANSFER_BL_TR:
      return (await Promise.resolve().then(() => (init_arrow_transfer_bl_tr(), arrow_transfer_bl_tr_exports))).IconArrowTransferBlTr;
    case Icons.ARROW_TRANSFER_LEFT_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_transfer_left_right(), arrow_transfer_left_right_exports))).IconArrowTransferLeftRight;
    case Icons.ARROW_TRANSFER_LT_BR:
      return (await Promise.resolve().then(() => (init_arrow_transfer_lt_br(), arrow_transfer_lt_br_exports))).IconArrowTransferLtBr;
    case Icons.ARROW_TRANSFER_UP_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_transfer_up_down(), arrow_transfer_up_down_exports))).IconArrowTransferUpDown;
    case Icons.ARROW_TWOWAY_DIAGONAL_LR:
      return (await Promise.resolve().then(() => (init_arrow_twoway_diagonal_lr(), arrow_twoway_diagonal_lr_exports))).IconArrowTwowayDiagonalLr;
    case Icons.ARROW_TWOWAY_DIAGONAL_RL:
      return (await Promise.resolve().then(() => (init_arrow_twoway_diagonal_rl(), arrow_twoway_diagonal_rl_exports))).IconArrowTwowayDiagonalRl;
    case Icons.ARROW_TWOWAY_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_arrow_twoway_horizontal(), arrow_twoway_horizontal_exports))).IconArrowTwowayHorizontal;
    case Icons.ARROW_TWOWAY_VERTICAL:
      return (await Promise.resolve().then(() => (init_arrow_twoway_vertical(), arrow_twoway_vertical_exports))).IconArrowTwowayVertical;
    case Icons.ARROW_UP_COPY:
      return (await Promise.resolve().then(() => (init_arrow_up_copy(), arrow_up_copy_exports))).IconArrowUpCopy;
    case Icons.ARROW_UP_DOWN_SPLIT:
      return (await Promise.resolve().then(() => (init_arrow_up_down_split(), arrow_up_down_split_exports))).IconArrowUpDownSplit;
    case Icons.ARROW_UP_DOWN_STOP:
      return (await Promise.resolve().then(() => (init_arrow_up_down_stop(), arrow_up_down_stop_exports))).IconArrowUpDownStop;
    case Icons.ARROW_UP_DOWN:
      return (await Promise.resolve().then(() => (init_arrow_up_down(), arrow_up_down_exports))).IconArrowUpDown;
    case Icons.ARROW_UP_LEFT:
      return (await Promise.resolve().then(() => (init_arrow_up_left(), arrow_up_left_exports))).IconArrowUpLeft;
    case Icons.ARROW_UP_RIGHT:
      return (await Promise.resolve().then(() => (init_arrow_up_right(), arrow_up_right_exports))).IconArrowUpRight;
    case Icons.ARROW_UP:
      return (await Promise.resolve().then(() => (init_arrow_up(), arrow_up_exports))).IconArrowUp;
    case Icons.ARROW_UPLOAD:
      return (await Promise.resolve().then(() => (init_arrow_upload(), arrow_upload_exports))).IconArrowUpload;
    case Icons.CHEVRON_CONNECT2:
      return (await Promise.resolve().then(() => (init_chevron_connect2(), chevron_connect2_exports))).IconChevronConnect2;
    case Icons.CHEVRON_CONNECT:
      return (await Promise.resolve().then(() => (init_chevron_connect(), chevron_connect_exports))).IconChevronConnect;
    case Icons.CHEVRON_DISCONNECT2:
      return (await Promise.resolve().then(() => (init_chevron_disconnect2(), chevron_disconnect2_exports))).IconChevronDisconnect2;
    case Icons.CHEVRON_DISCONNECT:
      return (await Promise.resolve().then(() => (init_chevron_disconnect(), chevron_disconnect_exports))).IconChevronDisconnect;
    case Icons.CHEVRON_DOUBLE_DOWN:
      return (await Promise.resolve().then(() => (init_chevron_double_down(), chevron_double_down_exports))).IconChevronDoubleDown;
    case Icons.CHEVRON_DOUBLE_LEFT:
      return (await Promise.resolve().then(() => (init_chevron_double_left(), chevron_double_left_exports))).IconChevronDoubleLeft;
    case Icons.CHEVRON_DOUBLE_RIGHT:
      return (await Promise.resolve().then(() => (init_chevron_double_right(), chevron_double_right_exports))).IconChevronDoubleRight;
    case Icons.CHEVRON_DOUBLE_UP:
      return (await Promise.resolve().then(() => (init_chevron_double_up(), chevron_double_up_exports))).IconChevronDoubleUp;
    case Icons.CHEVRON_DOWN:
      return (await Promise.resolve().then(() => (init_chevron_down(), chevron_down_exports))).IconChevronDown;
    case Icons.CHEVRON_LEFT:
      return (await Promise.resolve().then(() => (init_chevron_left(), chevron_left_exports))).IconChevronLeft;
    case Icons.CHEVRON_RIGHT:
      return (await Promise.resolve().then(() => (init_chevron_right(), chevron_right_exports))).IconChevronRight;
    case Icons.CHEVRON_UP:
      return (await Promise.resolve().then(() => (init_chevron_up(), chevron_up_exports))).IconChevronUp;
    case Icons.ICON01:
      return (await Promise.resolve().then(() => (init_icon01(), icon01_exports))).IconIcon01;
    case Icons.BOTTLE:
      return (await Promise.resolve().then(() => (init_bottle(), bottle_exports))).IconBottle;
    case Icons.BOTTLES:
      return (await Promise.resolve().then(() => (init_bottles(), bottles_exports))).IconBottles;
    case Icons.BREAD_SLICE:
      return (await Promise.resolve().then(() => (init_bread_slice(), bread_slice_exports))).IconBreadSlice;
    case Icons.COFFEE_CUP:
      return (await Promise.resolve().then(() => (init_coffee_cup(), coffee_cup_exports))).IconCoffeeCup;
    case Icons.COFFEE_MACHINE:
      return (await Promise.resolve().then(() => (init_coffee_machine(), coffee_machine_exports))).IconCoffeeMachine;
    case Icons.COFFEE_BEANS:
      return (await Promise.resolve().then(() => (init_coffee_beans(), coffee_beans_exports))).IconCoffeeBeans;
    case Icons.COGNAC_GLASS:
      return (await Promise.resolve().then(() => (init_cognac_glass(), cognac_glass_exports))).IconCognacGlass;
    case Icons.ESPRESS_MACHINE2:
      return (await Promise.resolve().then(() => (init_espress_machine2(), espress_machine2_exports))).IconEspressMachine2;
    case Icons.ESPRESSO_MACHINE_E61:
      return (await Promise.resolve().then(() => (init_espresso_machine_e61(), espresso_machine_e61_exports))).IconEspressoMachineE61;
    case Icons.ESPRESSO_MACHINE:
      return (await Promise.resolve().then(() => (init_espresso_machine(), espresso_machine_exports))).IconEspressoMachine;
    case Icons.ESPRESSO_PISTOL:
      return (await Promise.resolve().then(() => (init_espresso_pistol(), espresso_pistol_exports))).IconEspressoPistol;
    case Icons.HAMBURGER:
      return (await Promise.resolve().then(() => (init_hamburger(), hamburger_exports))).IconHamburger;
    case Icons.PERCULATOR:
      return (await Promise.resolve().then(() => (init_perculator(), perculator_exports))).IconPerculator;
    case Icons.WINE_GLASS:
      return (await Promise.resolve().then(() => (init_wine_glass(), wine_glass_exports))).IconWineGlass;
    case Icons.ALARM_BELL2:
      return (await Promise.resolve().then(() => (init_alarm_bell2(), alarm_bell2_exports))).IconAlarmBell2;
    case Icons.ALARM_BELL3:
      return (await Promise.resolve().then(() => (init_alarm_bell3(), alarm_bell3_exports))).IconAlarmBell3;
    case Icons.ALARM_BELL:
      return (await Promise.resolve().then(() => (init_alarm_bell(), alarm_bell_exports))).IconAlarmBell;
    case Icons.ART_SUPPLIES:
      return (await Promise.resolve().then(() => (init_art_supplies(), art_supplies_exports))).IconArtSupplies;
    case Icons.AUDIO_WAVES:
      return (await Promise.resolve().then(() => (init_audio_waves(), audio_waves_exports))).IconAudioWaves;
    case Icons.BLUETOOTH:
      return (await Promise.resolve().then(() => (init_bluetooth(), bluetooth_exports))).IconBluetooth;
    case Icons.CAMERA:
      return (await Promise.resolve().then(() => (init_camera(), camera_exports))).IconCamera;
    case Icons.CLIPBOARD:
      return (await Promise.resolve().then(() => (init_clipboard(), clipboard_exports))).IconClipboard;
    case Icons.COLOR_PALLETTE:
      return (await Promise.resolve().then(() => (init_color_pallette(), color_pallette_exports))).IconColorPallette;
    case Icons.COLOR_RGB:
      return (await Promise.resolve().then(() => (init_color_rgb(), color_rgb_exports))).IconColorRgb;
    case Icons.COLOR_SWATCHES:
      return (await Promise.resolve().then(() => (init_color_swatches(), color_swatches_exports))).IconColorSwatches;
    case Icons.DESKTOP:
      return (await Promise.resolve().then(() => (init_desktop(), desktop_exports))).IconDesktop;
    case Icons.FILMROLL:
      return (await Promise.resolve().then(() => (init_filmroll(), filmroll_exports))).IconFilmroll;
    case Icons.GAMEPAD_CLASSIC:
      return (await Promise.resolve().then(() => (init_gamepad_classic(), gamepad_classic_exports))).IconGamepadClassic;
    case Icons.GAMEPAD:
      return (await Promise.resolve().then(() => (init_gamepad(), gamepad_exports))).IconGamepad;
    case Icons.HEADPHONES:
      return (await Promise.resolve().then(() => (init_headphones(), headphones_exports))).IconHeadphones;
    case Icons.HIGHLIGHT:
      return (await Promise.resolve().then(() => (init_highlight(), highlight_exports))).IconHighlight;
    case Icons.IMAGE:
      return (await Promise.resolve().then(() => (init_image(), image_exports))).IconImage;
    case Icons.JOYSTICK:
      return (await Promise.resolve().then(() => (init_joystick(), joystick_exports))).IconJoystick;
    case Icons.LAPTOP:
      return (await Promise.resolve().then(() => (init_laptop(), laptop_exports))).IconLaptop;
    case Icons.MAIL_OPEN:
      return (await Promise.resolve().then(() => (init_mail_open(), mail_open_exports))).IconMailOpen;
    case Icons.MAIL:
      return (await Promise.resolve().then(() => (init_mail(), mail_exports))).IconMail;
    case Icons.MEDIA:
      return (await Promise.resolve().then(() => (init_media(), media_exports))).IconMedia;
    case Icons.MICROPHONE:
      return (await Promise.resolve().then(() => (init_microphone(), microphone_exports))).IconMicrophone;
    case Icons.MUSIC_NOTE_SINGLE:
      return (await Promise.resolve().then(() => (init_music_note_single(), music_note_single_exports))).IconMusicNoteSingle;
    case Icons.MUSIC_NOTE:
      return (await Promise.resolve().then(() => (init_music_note(), music_note_exports))).IconMusicNote;
    case Icons.NES_CONTROLLER:
      return (await Promise.resolve().then(() => (init_nes_controller(), nes_controller_exports))).IconNesController;
    case Icons.PACMAN:
      return (await Promise.resolve().then(() => (init_pacman(), pacman_exports))).IconPacman;
    case Icons.PAINT_ROLLER:
      return (await Promise.resolve().then(() => (init_paint_roller(), paint_roller_exports))).IconPaintRoller;
    case Icons.PAPERPLANE:
      return (await Promise.resolve().then(() => (init_paperplane(), paperplane_exports))).IconPaperplane;
    case Icons.PLAYBACK_BACKWARD:
      return (await Promise.resolve().then(() => (init_playback_backward(), playback_backward_exports))).IconPlaybackBackward;
    case Icons.PLAYBACK_END:
      return (await Promise.resolve().then(() => (init_playback_end(), playback_end_exports))).IconPlaybackEnd;
    case Icons.PLAYBACK_FORWARD:
      return (await Promise.resolve().then(() => (init_playback_forward(), playback_forward_exports))).IconPlaybackForward;
    case Icons.PLAYBACK_NEXT:
      return (await Promise.resolve().then(() => (init_playback_next(), playback_next_exports))).IconPlaybackNext;
    case Icons.PLAYBACK_PAUSE:
      return (await Promise.resolve().then(() => (init_playback_pause(), playback_pause_exports))).IconPlaybackPause;
    case Icons.PLAYBACK_PLAY:
      return (await Promise.resolve().then(() => (init_playback_play(), playback_play_exports))).IconPlaybackPlay;
    case Icons.PLAYBACK_PREVIOUS:
      return (await Promise.resolve().then(() => (init_playback_previous(), playback_previous_exports))).IconPlaybackPrevious;
    case Icons.PLAYBACK_START:
      return (await Promise.resolve().then(() => (init_playback_start(), playback_start_exports))).IconPlaybackStart;
    case Icons.PLAYBACK_STOP:
      return (await Promise.resolve().then(() => (init_playback_stop(), playback_stop_exports))).IconPlaybackStop;
    case Icons.PRINTER:
      return (await Promise.resolve().then(() => (init_printer(), printer_exports))).IconPrinter;
    case Icons.RECORD:
      return (await Promise.resolve().then(() => (init_record(), record_exports))).IconRecord;
    case Icons.REELS:
      return (await Promise.resolve().then(() => (init_reels(), reels_exports))).IconReels;
    case Icons.TABLET_LANDSCAPE:
      return (await Promise.resolve().then(() => (init_tablet_landscape(), tablet_landscape_exports))).IconTabletLandscape;
    case Icons.TABLET:
      return (await Promise.resolve().then(() => (init_tablet(), tablet_exports))).IconTablet;
    case Icons.TELEVISION:
      return (await Promise.resolve().then(() => (init_television(), television_exports))).IconTelevision;
    case Icons.TERMINAL:
      return (await Promise.resolve().then(() => (init_terminal(), terminal_exports))).IconTerminal;
    case Icons.VIDEO_CAMERA:
      return (await Promise.resolve().then(() => (init_video_camera(), video_camera_exports))).IconVideoCamera;
    case Icons.VIDEOS:
      return (await Promise.resolve().then(() => (init_videos(), videos_exports))).IconVideos;
    case Icons.VOLUME_I:
      return (await Promise.resolve().then(() => (init_volume_i(), volume_i_exports))).IconVolumeI;
    case Icons.VOLUME_II:
      return (await Promise.resolve().then(() => (init_volume_ii(), volume_ii_exports))).IconVolumeIi;
    case Icons.VOLUME_III:
      return (await Promise.resolve().then(() => (init_volume_iii(), volume_iii_exports))).IconVolumeIii;
    case Icons.VOLUME_MUTE:
      return (await Promise.resolve().then(() => (init_volume_mute(), volume_mute_exports))).IconVolumeMute;
    case Icons.VOLUME_OFF:
      return (await Promise.resolve().then(() => (init_volume_off(), volume_off_exports))).IconVolumeOff;
    case Icons.WEBSITE:
      return (await Promise.resolve().then(() => (init_website(), website_exports))).IconWebsite;
    case Icons.WIFI2:
      return (await Promise.resolve().then(() => (init_wifi2(), wifi2_exports))).IconWifi2;
    case Icons.WIFI3:
      return (await Promise.resolve().then(() => (init_wifi3(), wifi3_exports))).IconWifi3;
    case Icons.WIFI_ROUNDED:
      return (await Promise.resolve().then(() => (init_wifi_rounded(), wifi_rounded_exports))).IconWifiRounded;
    case Icons.WIFI:
      return (await Promise.resolve().then(() => (init_wifi(), wifi_exports))).IconWifi;
    case Icons.AI_FACE:
      return (await Promise.resolve().then(() => (init_ai_face(), ai_face_exports))).IconAiFace;
    case Icons.AI_LETTERS_BLOCKED:
      return (await Promise.resolve().then(() => (init_ai_letters_blocked(), ai_letters_blocked_exports))).IconAiLettersBlocked;
    case Icons.AI_LETTERS_CIRCLED:
      return (await Promise.resolve().then(() => (init_ai_letters_circled(), ai_letters_circled_exports))).IconAiLettersCircled;
    case Icons.AI_LETTERS:
      return (await Promise.resolve().then(() => (init_ai_letters(), ai_letters_exports))).IconAiLetters;
    case Icons.AFRAME:
      return (await Promise.resolve().then(() => (init_aframe(), aframe_exports))).IconAframe;
    case Icons.ARTWORK_FRAME:
      return (await Promise.resolve().then(() => (init_artwork_frame(), artwork_frame_exports))).IconArtworkFrame;
    case Icons.BARBECUE:
      return (await Promise.resolve().then(() => (init_barbecue(), barbecue_exports))).IconBarbecue;
    case Icons.BATHROOM_ESSENTIALS:
      return (await Promise.resolve().then(() => (init_bathroom_essentials(), bathroom_essentials_exports))).IconBathroomEssentials;
    case Icons.BINOCULARS:
      return (await Promise.resolve().then(() => (init_binoculars(), binoculars_exports))).IconBinoculars;
    case Icons.BLENDER:
      return (await Promise.resolve().then(() => (init_blender(), blender_exports))).IconBlender;
    case Icons.BOOKCASE:
      return (await Promise.resolve().then(() => (init_bookcase(), bookcase_exports))).IconBookcase;
    case Icons.BRAIN:
      return (await Promise.resolve().then(() => (init_brain(), brain_exports))).IconBrain;
    case Icons.BRANCH2:
      return (await Promise.resolve().then(() => (init_branch2(), branch2_exports))).IconBranch2;
    case Icons.BRANCH3:
      return (await Promise.resolve().then(() => (init_branch3(), branch3_exports))).IconBranch3;
    case Icons.BRANCH:
      return (await Promise.resolve().then(() => (init_branch(), branch_exports))).IconBranch;
    case Icons.BULB:
      return (await Promise.resolve().then(() => (init_bulb(), bulb_exports))).IconBulb;
    case Icons.CACTUS:
      return (await Promise.resolve().then(() => (init_cactus(), cactus_exports))).IconCactus;
    case Icons.CAMPER:
      return (await Promise.resolve().then(() => (init_camper(), camper_exports))).IconCamper;
    case Icons.CARAVAN:
      return (await Promise.resolve().then(() => (init_caravan(), caravan_exports))).IconCaravan;
    case Icons.CHIP:
      return (await Promise.resolve().then(() => (init_chip(), chip_exports))).IconChip;
    case Icons.CLEANING_BUCKET:
      return (await Promise.resolve().then(() => (init_cleaning_bucket(), cleaning_bucket_exports))).IconCleaningBucket;
    case Icons.CLEANING_SPRAY:
      return (await Promise.resolve().then(() => (init_cleaning_spray(), cleaning_spray_exports))).IconCleaningSpray;
    case Icons.CLOSET:
      return (await Promise.resolve().then(() => (init_closet(), closet_exports))).IconCloset;
    case Icons.COINS:
      return (await Promise.resolve().then(() => (init_coins(), coins_exports))).IconCoins;
    case Icons.COMPASS2:
      return (await Promise.resolve().then(() => (init_compass2(), compass2_exports))).IconCompass2;
    case Icons.COMPASS:
      return (await Promise.resolve().then(() => (init_compass(), compass_exports))).IconCompass;
    case Icons.CUBE3D:
      return (await Promise.resolve().then(() => (init_cube3d(), cube3d_exports))).IconCube3d;
    case Icons.EDUCATION:
      return (await Promise.resolve().then(() => (init_education(), education_exports))).IconEducation;
    case Icons.FACTORY_ARM:
      return (await Promise.resolve().then(() => (init_factory_arm(), factory_arm_exports))).IconFactoryArm;
    case Icons.FACTORY_BELT:
      return (await Promise.resolve().then(() => (init_factory_belt(), factory_belt_exports))).IconFactoryBelt;
    case Icons.FACTORY:
      return (await Promise.resolve().then(() => (init_factory(), factory_exports))).IconFactory;
    case Icons.FINGERPRINT:
      return (await Promise.resolve().then(() => (init_fingerprint(), fingerprint_exports))).IconFingerprint;
    case Icons.FIRE:
      return (await Promise.resolve().then(() => (init_fire(), fire_exports))).IconFire;
    case Icons.FRIDGE:
      return (await Promise.resolve().then(() => (init_fridge(), fridge_exports))).IconFridge;
    case Icons.FURNITURE_BED2:
      return (await Promise.resolve().then(() => (init_furniture_bed2(), furniture_bed2_exports))).IconFurnitureBed2;
    case Icons.FURNITURE_BED_KING2:
      return (await Promise.resolve().then(() => (init_furniture_bed_king2(), furniture_bed_king2_exports))).IconFurnitureBedKing2;
    case Icons.FURNITURE_BED_KING:
      return (await Promise.resolve().then(() => (init_furniture_bed_king(), furniture_bed_king_exports))).IconFurnitureBedKing;
    case Icons.FURNITURE_BED_SINGLE2:
      return (await Promise.resolve().then(() => (init_furniture_bed_single2(), furniture_bed_single2_exports))).IconFurnitureBedSingle2;
    case Icons.FURNITURE_BED_SINGLE:
      return (await Promise.resolve().then(() => (init_furniture_bed_single(), furniture_bed_single_exports))).IconFurnitureBedSingle;
    case Icons.FURNITURE_BED:
      return (await Promise.resolve().then(() => (init_furniture_bed(), furniture_bed_exports))).IconFurnitureBed;
    case Icons.FURNITURE_BEDSIDE_TABLE:
      return (await Promise.resolve().then(() => (init_furniture_bedside_table(), furniture_bedside_table_exports))).IconFurnitureBedsideTable;
    case Icons.FURNITURE_CHAIR2:
      return (await Promise.resolve().then(() => (init_furniture_chair2(), furniture_chair2_exports))).IconFurnitureChair2;
    case Icons.FURNITURE_CHAIR3:
      return (await Promise.resolve().then(() => (init_furniture_chair3(), furniture_chair3_exports))).IconFurnitureChair3;
    case Icons.FURNITURE_CHAIR4:
      return (await Promise.resolve().then(() => (init_furniture_chair4(), furniture_chair4_exports))).IconFurnitureChair4;
    case Icons.FURNITURE_CHAIR:
      return (await Promise.resolve().then(() => (init_furniture_chair(), furniture_chair_exports))).IconFurnitureChair;
    case Icons.FURNITURE_COUCH2:
      return (await Promise.resolve().then(() => (init_furniture_couch2(), furniture_couch2_exports))).IconFurnitureCouch2;
    case Icons.FURNITURE_COUCH3:
      return (await Promise.resolve().then(() => (init_furniture_couch3(), furniture_couch3_exports))).IconFurnitureCouch3;
    case Icons.FURNITURE_COUCH4:
      return (await Promise.resolve().then(() => (init_furniture_couch4(), furniture_couch4_exports))).IconFurnitureCouch4;
    case Icons.FURNITURE_COUCH:
      return (await Promise.resolve().then(() => (init_furniture_couch(), furniture_couch_exports))).IconFurnitureCouch;
    case Icons.FURNITURE_DESK:
      return (await Promise.resolve().then(() => (init_furniture_desk(), furniture_desk_exports))).IconFurnitureDesk;
    case Icons.FURNITURE_DRESSOIR:
      return (await Promise.resolve().then(() => (init_furniture_dressoir(), furniture_dressoir_exports))).IconFurnitureDressoir;
    case Icons.GRAPH_UP_ROUND:
      return (await Promise.resolve().then(() => (init_graph_up_round(), graph_up_round_exports))).IconGraphUpRound;
    case Icons.GRAPH_UP:
      return (await Promise.resolve().then(() => (init_graph_up(), graph_up_exports))).IconGraphUp;
    case Icons.HAIRDRYER:
      return (await Promise.resolve().then(() => (init_hairdryer(), hairdryer_exports))).IconHairdryer;
    case Icons.HILL_LANDSCAPE:
      return (await Promise.resolve().then(() => (init_hill_landscape(), hill_landscape_exports))).IconHillLandscape;
    case Icons.IDEA_FACTORY:
      return (await Promise.resolve().then(() => (init_idea_factory(), idea_factory_exports))).IconIdeaFactory;
    case Icons.INDUSTRY3:
      return (await Promise.resolve().then(() => (init_industry3(), industry3_exports))).IconIndustry3;
    case Icons.IRON:
      return (await Promise.resolve().then(() => (init_iron(), iron_exports))).IconIron;
    case Icons.KITCHEN_CUTLERY:
      return (await Promise.resolve().then(() => (init_kitchen_cutlery(), kitchen_cutlery_exports))).IconKitchenCutlery;
    case Icons.KITCHEN_UTENSILS:
      return (await Promise.resolve().then(() => (init_kitchen_utensils(), kitchen_utensils_exports))).IconKitchenUtensils;
    case Icons.LAKE_VIEW:
      return (await Promise.resolve().then(() => (init_lake_view(), lake_view_exports))).IconLakeView;
    case Icons.LEAF2:
      return (await Promise.resolve().then(() => (init_leaf2(), leaf2_exports))).IconLeaf2;
    case Icons.LEAF3:
      return (await Promise.resolve().then(() => (init_leaf3(), leaf3_exports))).IconLeaf3;
    case Icons.LEAF:
      return (await Promise.resolve().then(() => (init_leaf(), leaf_exports))).IconLeaf;
    case Icons.LEAFS:
      return (await Promise.resolve().then(() => (init_leafs(), leafs_exports))).IconLeafs;
    case Icons.LIQUID_SOAP2:
      return (await Promise.resolve().then(() => (init_liquid_soap2(), liquid_soap2_exports))).IconLiquidSoap2;
    case Icons.LIQUID_SOAP:
      return (await Promise.resolve().then(() => (init_liquid_soap(), liquid_soap_exports))).IconLiquidSoap;
    case Icons.LUXE_VILLA:
      return (await Promise.resolve().then(() => (init_luxe_villa(), luxe_villa_exports))).IconLuxeVilla;
    case Icons.MANSION:
      return (await Promise.resolve().then(() => (init_mansion(), mansion_exports))).IconMansion;
    case Icons.MICROWAVE:
      return (await Promise.resolve().then(() => (init_microwave(), microwave_exports))).IconMicrowave;
    case Icons.MONEY:
      return (await Promise.resolve().then(() => (init_money(), money_exports))).IconMoney;
    case Icons.MONEYBAG:
      return (await Promise.resolve().then(() => (init_moneybag(), moneybag_exports))).IconMoneybag;
    case Icons.MOUNTAIN_SCAPE:
      return (await Promise.resolve().then(() => (init_mountain_scape(), mountain_scape_exports))).IconMountainScape;
    case Icons.OVEN:
      return (await Promise.resolve().then(() => (init_oven(), oven_exports))).IconOven;
    case Icons.PLANT:
      return (await Promise.resolve().then(() => (init_plant(), plant_exports))).IconPlant;
    case Icons.POLITICIAN2:
      return (await Promise.resolve().then(() => (init_politician2(), politician2_exports))).IconPolitician2;
    case Icons.POLITICIAN:
      return (await Promise.resolve().then(() => (init_politician(), politician_exports))).IconPolitician;
    case Icons.ROCKET:
      return (await Promise.resolve().then(() => (init_rocket(), rocket_exports))).IconRocket;
    case Icons.ROOM_SHADE:
      return (await Promise.resolve().then(() => (init_room_shade(), room_shade_exports))).IconRoomShade;
    case Icons.SHIELD2_LINE:
      return (await Promise.resolve().then(() => (init_shield2_line(), shield2_line_exports))).IconShield2Line;
    case Icons.SHIELD2:
      return (await Promise.resolve().then(() => (init_shield2(), shield2_exports))).IconShield2;
    case Icons.SHIELD3_LINE:
      return (await Promise.resolve().then(() => (init_shield3_line(), shield3_line_exports))).IconShield3Line;
    case Icons.SHIELD3:
      return (await Promise.resolve().then(() => (init_shield3(), shield3_exports))).IconShield3;
    case Icons.SHIELD4_LINE:
      return (await Promise.resolve().then(() => (init_shield4_line(), shield4_line_exports))).IconShield4Line;
    case Icons.SHIELD4:
      return (await Promise.resolve().then(() => (init_shield4(), shield4_exports))).IconShield4;
    case Icons.SHIELD_LINE:
      return (await Promise.resolve().then(() => (init_shield_line(), shield_line_exports))).IconShieldLine;
    case Icons.SHIELD:
      return (await Promise.resolve().then(() => (init_shield(), shield_exports))).IconShield;
    case Icons.STOVE:
      return (await Promise.resolve().then(() => (init_stove(), stove_exports))).IconStove;
    case Icons.SURFBOARD:
      return (await Promise.resolve().then(() => (init_surfboard(), surfboard_exports))).IconSurfboard;
    case Icons.SWIMMING_POOL:
      return (await Promise.resolve().then(() => (init_swimming_pool(), swimming_pool_exports))).IconSwimmingPool;
    case Icons.TEMPLE2:
      return (await Promise.resolve().then(() => (init_temple2(), temple2_exports))).IconTemple2;
    case Icons.TEMPLE:
      return (await Promise.resolve().then(() => (init_temple(), temple_exports))).IconTemple;
    case Icons.TENT_CAMPING:
      return (await Promise.resolve().then(() => (init_tent_camping(), tent_camping_exports))).IconTentCamping;
    case Icons.TENT:
      return (await Promise.resolve().then(() => (init_tent(), tent_exports))).IconTent;
    case Icons.TOY_BLOCKS2:
      return (await Promise.resolve().then(() => (init_toy_blocks2(), toy_blocks2_exports))).IconToyBlocks2;
    case Icons.TOY_BLOCKS3:
      return (await Promise.resolve().then(() => (init_toy_blocks3(), toy_blocks3_exports))).IconToyBlocks3;
    case Icons.TOY_BLOCKS:
      return (await Promise.resolve().then(() => (init_toy_blocks(), toy_blocks_exports))).IconToyBlocks;
    case Icons.TOY_HEAD:
      return (await Promise.resolve().then(() => (init_toy_head(), toy_head_exports))).IconToyHead;
    case Icons.TREE2:
      return (await Promise.resolve().then(() => (init_tree2(), tree2_exports))).IconTree2;
    case Icons.TREE3:
      return (await Promise.resolve().then(() => (init_tree3(), tree3_exports))).IconTree3;
    case Icons.TREE:
      return (await Promise.resolve().then(() => (init_tree(), tree_exports))).IconTree;
    case Icons.TREEHOUSE:
      return (await Promise.resolve().then(() => (init_treehouse(), treehouse_exports))).IconTreehouse;
    case Icons.TREES2:
      return (await Promise.resolve().then(() => (init_trees2(), trees2_exports))).IconTrees2;
    case Icons.TREES:
      return (await Promise.resolve().then(() => (init_trees(), trees_exports))).IconTrees;
    case Icons.TRUNK1:
      return (await Promise.resolve().then(() => (init_trunk1(), trunk1_exports))).IconTrunk1;
    case Icons.TRUNK2:
      return (await Promise.resolve().then(() => (init_trunk2(), trunk2_exports))).IconTrunk2;
    case Icons.UFO:
      return (await Promise.resolve().then(() => (init_ufo(), ufo_exports))).IconUfo;
    case Icons.VOTE:
      return (await Promise.resolve().then(() => (init_vote(), vote_exports))).IconVote;
    case Icons.WALLET:
      return (await Promise.resolve().then(() => (init_wallet(), wallet_exports))).IconWallet;
    case Icons.WASHING_MACHINE:
      return (await Promise.resolve().then(() => (init_washing_machine(), washing_machine_exports))).IconWashingMachine;
    case Icons.WATERCOOKER:
      return (await Promise.resolve().then(() => (init_watercooker(), watercooker_exports))).IconWatercooker;
    case Icons.YURT:
      return (await Promise.resolve().then(() => (init_yurt(), yurt_exports))).IconYurt;
    case Icons.BABY_STROLLER:
      return (await Promise.resolve().then(() => (init_baby_stroller(), baby_stroller_exports))).IconBabyStroller;
    case Icons.CLOTHING_TSHIRT:
      return (await Promise.resolve().then(() => (init_clothing_tshirt(), clothing_tshirt_exports))).IconClothingTshirt;
    case Icons.COTTON:
      return (await Promise.resolve().then(() => (init_cotton(), cotton_exports))).IconCotton;
    case Icons.HOME_GARDEN:
      return (await Promise.resolve().then(() => (init_home_garden(), home_garden_exports))).IconHomeGarden;
    case Icons.HYPOALLERGENIC:
      return (await Promise.resolve().then(() => (init_hypoallergenic(), hypoallergenic_exports))).IconHypoallergenic;
    case Icons.NO_LEAKS:
      return (await Promise.resolve().then(() => (init_no_leaks(), no_leaks_exports))).IconNoLeaks;
    case Icons.SUITCASE_JOBS:
      return (await Promise.resolve().then(() => (init_suitcase_jobs(), suitcase_jobs_exports))).IconSuitcaseJobs;
    case Icons.SHOPPING_BAG2:
      return (await Promise.resolve().then(() => (init_shopping_bag2(), shopping_bag2_exports))).IconShoppingBag2;
    case Icons.SHOPPING_BAG3:
      return (await Promise.resolve().then(() => (init_shopping_bag3(), shopping_bag3_exports))).IconShoppingBag3;
    case Icons.SHOPPING_BAG_DISCOUNT:
      return (await Promise.resolve().then(() => (init_shopping_bag_discount(), shopping_bag_discount_exports))).IconShoppingBagDiscount;
    case Icons.SHOPPING_BAG:
      return (await Promise.resolve().then(() => (init_shopping_bag(), shopping_bag_exports))).IconShoppingBag;
    case Icons.SHOPPING_BASKET_ROUNDED:
      return (await Promise.resolve().then(() => (init_shopping_basket_rounded(), shopping_basket_rounded_exports))).IconShoppingBasketRounded;
    case Icons.SHOPPING_BASKET:
      return (await Promise.resolve().then(() => (init_shopping_basket(), shopping_basket_exports))).IconShoppingBasket;
    case Icons.SHOPPING_CART_FAST:
      return (await Promise.resolve().then(() => (init_shopping_cart_fast(), shopping_cart_fast_exports))).IconShoppingCartFast;
    case Icons.SHOPPING_CART:
      return (await Promise.resolve().then(() => (init_shopping_cart(), shopping_cart_exports))).IconShoppingCart;
    case Icons.SHOPPING_LABEL:
      return (await Promise.resolve().then(() => (init_shopping_label(), shopping_label_exports))).IconShoppingLabel;
    case Icons.SHOPPING_LABELS:
      return (await Promise.resolve().then(() => (init_shopping_labels(), shopping_labels_exports))).IconShoppingLabels;
    case Icons.ICON43:
      return (await Promise.resolve().then(() => (init_icon43(), icon43_exports))).IconIcon43;
    case Icons.BAHT_SYMBOL:
      return (await Promise.resolve().then(() => (init_baht_symbol(), baht_symbol_exports))).IconBahtSymbol;
    case Icons.DICE1:
      return (await Promise.resolve().then(() => (init_dice1(), dice1_exports))).IconDice1;
    case Icons.DICE2:
      return (await Promise.resolve().then(() => (init_dice2(), dice2_exports))).IconDice2;
    case Icons.DICE3:
      return (await Promise.resolve().then(() => (init_dice3(), dice3_exports))).IconDice3;
    case Icons.DICE4:
      return (await Promise.resolve().then(() => (init_dice4(), dice4_exports))).IconDice4;
    case Icons.DICE5:
      return (await Promise.resolve().then(() => (init_dice5(), dice5_exports))).IconDice5;
    case Icons.DICE6:
      return (await Promise.resolve().then(() => (init_dice6(), dice6_exports))).IconDice6;
    case Icons.DICE7:
      return (await Promise.resolve().then(() => (init_dice7(), dice7_exports))).IconDice7;
    case Icons.DICE8:
      return (await Promise.resolve().then(() => (init_dice8(), dice8_exports))).IconDice8;
    case Icons.DICE9:
      return (await Promise.resolve().then(() => (init_dice9(), dice9_exports))).IconDice9;
    case Icons.DIGIT_DIGITAL1:
      return (await Promise.resolve().then(() => (init_digit_digital1(), digit_digital1_exports))).IconDigitDigital1;
    case Icons.DIGIT_DIGITAL2:
      return (await Promise.resolve().then(() => (init_digit_digital2(), digit_digital2_exports))).IconDigitDigital2;
    case Icons.DIGIT_DIGITAL3:
      return (await Promise.resolve().then(() => (init_digit_digital3(), digit_digital3_exports))).IconDigitDigital3;
    case Icons.DIGIT_DIGITAL4:
      return (await Promise.resolve().then(() => (init_digit_digital4(), digit_digital4_exports))).IconDigitDigital4;
    case Icons.DIGIT_DIGITAL5:
      return (await Promise.resolve().then(() => (init_digit_digital5(), digit_digital5_exports))).IconDigitDigital5;
    case Icons.DIGIT_DIGITAL6:
      return (await Promise.resolve().then(() => (init_digit_digital6(), digit_digital6_exports))).IconDigitDigital6;
    case Icons.DIGIT_DIGITAL7:
      return (await Promise.resolve().then(() => (init_digit_digital7(), digit_digital7_exports))).IconDigitDigital7;
    case Icons.DIGIT_DIGITAL8:
      return (await Promise.resolve().then(() => (init_digit_digital8(), digit_digital8_exports))).IconDigitDigital8;
    case Icons.DIGIT_DIGITAL9:
      return (await Promise.resolve().then(() => (init_digit_digital9(), digit_digital9_exports))).IconDigitDigital9;
    case Icons.DIGIT_DIGTAL0:
      return (await Promise.resolve().then(() => (init_digit_digtal0(), digit_digtal0_exports))).IconDigitDigtal0;
    case Icons.DOLLAR:
      return (await Promise.resolve().then(() => (init_dollar(), dollar_exports))).IconDollar;
    case Icons.EURO:
      return (await Promise.resolve().then(() => (init_euro(), euro_exports))).IconEuro;
    case Icons.PERCENTAGE:
      return (await Promise.resolve().then(() => (init_percentage(), percentage_exports))).IconPercentage;
    case Icons.POUND_SYMBOL:
      return (await Promise.resolve().then(() => (init_pound_symbol(), pound_symbol_exports))).IconPoundSymbol;
    case Icons.PROMILLE:
      return (await Promise.resolve().then(() => (init_promille(), promille_exports))).IconPromille;
    case Icons.RUBLES_SYMBOL:
      return (await Promise.resolve().then(() => (init_rubles_symbol(), rubles_symbol_exports))).IconRublesSymbol;
    case Icons.RUPEE_SYMBOL_COPY:
      return (await Promise.resolve().then(() => (init_rupee_symbol_copy(), rupee_symbol_copy_exports))).IconRupeeSymbolCopy;
    case Icons.RUPEE_SYMBOL:
      return (await Promise.resolve().then(() => (init_rupee_symbol(), rupee_symbol_exports))).IconRupeeSymbol;
    case Icons.SYMBOL_FEMALE:
      return (await Promise.resolve().then(() => (init_symbol_female(), symbol_female_exports))).IconSymbolFemale;
    case Icons.SYMBOL_MALE:
      return (await Promise.resolve().then(() => (init_symbol_male(), symbol_male_exports))).IconSymbolMale;
    case Icons.SYMBOL_UNISEX:
      return (await Promise.resolve().then(() => (init_symbol_unisex(), symbol_unisex_exports))).IconSymbolUnisex;
    case Icons.THREE_DOTS_DIAGONAL_MAJOR:
      return (await Promise.resolve().then(() => (init_three_dots_diagonal_major(), three_dots_diagonal_major_exports))).IconThreeDotsDiagonalMajor;
    case Icons.THREE_DOTS_DIAGONAL_MINOR:
      return (await Promise.resolve().then(() => (init_three_dots_diagonal_minor(), three_dots_diagonal_minor_exports))).IconThreeDotsDiagonalMinor;
    case Icons.THREE_DOTS_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_three_dots_horizontal(), three_dots_horizontal_exports))).IconThreeDotsHorizontal;
    case Icons.THREE_DOTS_LINES:
      return (await Promise.resolve().then(() => (init_three_dots_lines(), three_dots_lines_exports))).IconThreeDotsLines;
    case Icons.THREE_DOTS_VERTICAL:
      return (await Promise.resolve().then(() => (init_three_dots_vertical(), three_dots_vertical_exports))).IconThreeDotsVertical;
    case Icons.TWO_DOTS_DIAGONAL_MAJOR:
      return (await Promise.resolve().then(() => (init_two_dots_diagonal_major(), two_dots_diagonal_major_exports))).IconTwoDotsDiagonalMajor;
    case Icons.TWO_DOTS_DIAGONAL_MINOR:
      return (await Promise.resolve().then(() => (init_two_dots_diagonal_minor(), two_dots_diagonal_minor_exports))).IconTwoDotsDiagonalMinor;
    case Icons.TWO_DOTS_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_two_dots_horizontal(), two_dots_horizontal_exports))).IconTwoDotsHorizontal;
    case Icons.TWO_DOTS_LINES:
      return (await Promise.resolve().then(() => (init_two_dots_lines(), two_dots_lines_exports))).IconTwoDotsLines;
    case Icons.TWO_DOTS_VERTICAL:
      return (await Promise.resolve().then(() => (init_two_dots_vertical(), two_dots_vertical_exports))).IconTwoDotsVertical;
    case Icons.YEN:
      return (await Promise.resolve().then(() => (init_yen(), yen_exports))).IconYen;
    case Icons.BALL_BASKETBALL:
      return (await Promise.resolve().then(() => (init_ball_basketball(), ball_basketball_exports))).IconBallBasketball;
    case Icons.BALL_FOOTBALL:
      return (await Promise.resolve().then(() => (init_ball_football(), ball_football_exports))).IconBallFootball;
    case Icons.BALL_RUGBY:
      return (await Promise.resolve().then(() => (init_ball_rugby(), ball_rugby_exports))).IconBallRugby;
    case Icons.BALL_TENNIS:
      return (await Promise.resolve().then(() => (init_ball_tennis(), ball_tennis_exports))).IconBallTennis;
    case Icons.ACCESSIBILITY_PERSON_CIRCLED:
      return (await Promise.resolve().then(() => (init_accessibility_person_circled(), accessibility_person_circled_exports))).IconAccessibilityPersonCircled;
    case Icons.ACCESSIBILITY_PERSON:
      return (await Promise.resolve().then(() => (init_accessibility_person(), accessibility_person_exports))).IconAccessibilityPerson;
    case Icons.ADD_FAT:
      return (await Promise.resolve().then(() => (init_add_fat(), add_fat_exports))).IconAddFat;
    case Icons.ADD_L:
      return (await Promise.resolve().then(() => (init_add_l(), add_l_exports))).IconAddL;
    case Icons.ADD_LINES:
      return (await Promise.resolve().then(() => (init_add_lines(), add_lines_exports))).IconAddLines;
    case Icons.ADD_M:
      return (await Promise.resolve().then(() => (init_add_m(), add_m_exports))).IconAddM;
    case Icons.ADD_S:
      return (await Promise.resolve().then(() => (init_add_s(), add_s_exports))).IconAddS;
    case Icons.AT_SIGN:
      return (await Promise.resolve().then(() => (init_at_sign(), at_sign_exports))).IconAtSign;
    case Icons.BLOCK_PARTIALS:
      return (await Promise.resolve().then(() => (init_block_partials(), block_partials_exports))).IconBlockPartials;
    case Icons.BOARD_ADD2:
      return (await Promise.resolve().then(() => (init_board_add2(), board_add2_exports))).IconBoardAdd2;
    case Icons.BOARD_MULTI2_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_board_multi2_horizontal(), board_multi2_horizontal_exports))).IconBoardMulti2Horizontal;
    case Icons.BOARD_MULTI2_VERTICAL:
      return (await Promise.resolve().then(() => (init_board_multi2_vertical(), board_multi2_vertical_exports))).IconBoardMulti2Vertical;
    case Icons.BOARD_MULTI_DASHBOARD:
      return (await Promise.resolve().then(() => (init_board_multi_dashboard(), board_multi_dashboard_exports))).IconBoardMultiDashboard;
    case Icons.BOARD_MULTI_T_DOWN:
      return (await Promise.resolve().then(() => (init_board_multi_t_down(), board_multi_t_down_exports))).IconBoardMultiTDown;
    case Icons.BOARD_MULTI_T_LEFT:
      return (await Promise.resolve().then(() => (init_board_multi_t_left(), board_multi_t_left_exports))).IconBoardMultiTLeft;
    case Icons.BOARD_MULTI_T_RIGHT:
      return (await Promise.resolve().then(() => (init_board_multi_t_right(), board_multi_t_right_exports))).IconBoardMultiTRight;
    case Icons.BOARD_MULTI_T_UP:
      return (await Promise.resolve().then(() => (init_board_multi_t_up(), board_multi_t_up_exports))).IconBoardMultiTUp;
    case Icons.BOARD_MULTI:
      return (await Promise.resolve().then(() => (init_board_multi(), board_multi_exports))).IconBoardMulti;
    case Icons.BOARD_MULTIPLY2:
      return (await Promise.resolve().then(() => (init_board_multiply2(), board_multiply2_exports))).IconBoardMultiply2;
    case Icons.BOARD_SPLIT13_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_board_split13_horizontal(), board_split13_horizontal_exports))).IconBoardSplit13Horizontal;
    case Icons.BOARD_SPLIT13_VERTICAL:
      return (await Promise.resolve().then(() => (init_board_split13_vertical(), board_split13_vertical_exports))).IconBoardSplit13Vertical;
    case Icons.BOARD_SPLIT2_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_board_split2_horizontal(), board_split2_horizontal_exports))).IconBoardSplit2Horizontal;
    case Icons.BOARD_SPLIT2_VERTICAL:
      return (await Promise.resolve().then(() => (init_board_split2_vertical(), board_split2_vertical_exports))).IconBoardSplit2Vertical;
    case Icons.BOARD_SPLIT31_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_board_split31_horizontal(), board_split31_horizontal_exports))).IconBoardSplit31Horizontal;
    case Icons.BOARD_SPLIT31_VERTICAL:
      return (await Promise.resolve().then(() => (init_board_split31_vertical(), board_split31_vertical_exports))).IconBoardSplit31Vertical;
    case Icons.BOARD_SPLIT3_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_board_split3_horizontal(), board_split3_horizontal_exports))).IconBoardSplit3Horizontal;
    case Icons.BOARD_SPLIT3_VERTICAL:
      return (await Promise.resolve().then(() => (init_board_split3_vertical(), board_split3_vertical_exports))).IconBoardSplit3Vertical;
    case Icons.BOARD_SPLIT4_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_board_split4_horizontal(), board_split4_horizontal_exports))).IconBoardSplit4Horizontal;
    case Icons.BOARD_SPLIT4_VERTICAL:
      return (await Promise.resolve().then(() => (init_board_split4_vertical(), board_split4_vertical_exports))).IconBoardSplit4Vertical;
    case Icons.BOARD_SPLIT_T_DOWN:
      return (await Promise.resolve().then(() => (init_board_split_t_down(), board_split_t_down_exports))).IconBoardSplitTDown;
    case Icons.BOARD_SPLIT_T_LEFT:
      return (await Promise.resolve().then(() => (init_board_split_t_left(), board_split_t_left_exports))).IconBoardSplitTLeft;
    case Icons.BOARD_SPLIT_T_RIGHT:
      return (await Promise.resolve().then(() => (init_board_split_t_right(), board_split_t_right_exports))).IconBoardSplitTRight;
    case Icons.BOARD_SPLIT_T_UP:
      return (await Promise.resolve().then(() => (init_board_split_t_up(), board_split_t_up_exports))).IconBoardSplitTUp;
    case Icons.BOARD_SUBTRACT2:
      return (await Promise.resolve().then(() => (init_board_subtract2(), board_subtract2_exports))).IconBoardSubtract2;
    case Icons.BOARD:
      return (await Promise.resolve().then(() => (init_board(), board_exports))).IconBoard;
    case Icons.BOX_IN:
      return (await Promise.resolve().then(() => (init_box_in(), box_in_exports))).IconBoxIn;
    case Icons.BOX_OUT:
      return (await Promise.resolve().then(() => (init_box_out(), box_out_exports))).IconBoxOut;
    case Icons.BOX:
      return (await Promise.resolve().then(() => (init_box(), box_exports))).IconBox;
    case Icons.BOY:
      return (await Promise.resolve().then(() => (init_boy(), boy_exports))).IconBoy;
    case Icons.BROKEN_HEART_F:
      return (await Promise.resolve().then(() => (init_broken_heart_f(), broken_heart_f_exports))).IconBrokenHeartF;
    case Icons.BROKEN_HEART_L:
      return (await Promise.resolve().then(() => (init_broken_heart_l(), broken_heart_l_exports))).IconBrokenHeartL;
    case Icons.BROKEN_HEART_M:
      return (await Promise.resolve().then(() => (init_broken_heart_m(), broken_heart_m_exports))).IconBrokenHeartM;
    case Icons.BUILDING_CHURCH:
      return (await Promise.resolve().then(() => (init_building_church(), building_church_exports))).IconBuildingChurch;
    case Icons.BUILDING_HOUSE2:
      return (await Promise.resolve().then(() => (init_building_house2(), building_house2_exports))).IconBuildingHouse2;
    case Icons.BUILDING_HOUSE:
      return (await Promise.resolve().then(() => (init_building_house(), building_house_exports))).IconBuildingHouse;
    case Icons.BUILDING_SHOP:
      return (await Promise.resolve().then(() => (init_building_shop(), building_shop_exports))).IconBuildingShop;
    case Icons.BUTTON_ADD:
      return (await Promise.resolve().then(() => (init_button_add(), button_add_exports))).IconButtonAdd;
    case Icons.BUTTON_BROKEN_HEART2:
      return (await Promise.resolve().then(() => (init_button_broken_heart2(), button_broken_heart2_exports))).IconButtonBrokenHeart2;
    case Icons.BUTTON_BROKEN_HEART:
      return (await Promise.resolve().then(() => (init_button_broken_heart(), button_broken_heart_exports))).IconButtonBrokenHeart;
    case Icons.BUTTON_CHECK2:
      return (await Promise.resolve().then(() => (init_button_check2(), button_check2_exports))).IconButtonCheck2;
    case Icons.BUTTON_CHECK:
      return (await Promise.resolve().then(() => (init_button_check(), button_check_exports))).IconButtonCheck;
    case Icons.BUTTON_EDIT2:
      return (await Promise.resolve().then(() => (init_button_edit2(), button_edit2_exports))).IconButtonEdit2;
    case Icons.BUTTON_EDIT:
      return (await Promise.resolve().then(() => (init_button_edit(), button_edit_exports))).IconButtonEdit;
    case Icons.BUTTON_EXCLAMATION_MARK2:
      return (await Promise.resolve().then(() => (init_button_exclamation_mark2(), button_exclamation_mark2_exports))).IconButtonExclamationMark2;
    case Icons.BUTTON_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_button_exclamation_mark(), button_exclamation_mark_exports))).IconButtonExclamationMark;
    case Icons.BUTTON_HEART2:
      return (await Promise.resolve().then(() => (init_button_heart2(), button_heart2_exports))).IconButtonHeart2;
    case Icons.BUTTON_HEART:
      return (await Promise.resolve().then(() => (init_button_heart(), button_heart_exports))).IconButtonHeart;
    case Icons.BUTTON_INFO2:
      return (await Promise.resolve().then(() => (init_button_info2(), button_info2_exports))).IconButtonInfo2;
    case Icons.BUTTON_INFO:
      return (await Promise.resolve().then(() => (init_button_info(), button_info_exports))).IconButtonInfo;
    case Icons.BUTTON_INVISIBLE2:
      return (await Promise.resolve().then(() => (init_button_invisible2(), button_invisible2_exports))).IconButtonInvisible2;
    case Icons.BUTTON_INVISIBLE:
      return (await Promise.resolve().then(() => (init_button_invisible(), button_invisible_exports))).IconButtonInvisible;
    case Icons.BUTTON_MULTIPLY:
      return (await Promise.resolve().then(() => (init_button_multiply(), button_multiply_exports))).IconButtonMultiply;
    case Icons.BUTTON_QUESTION_MARK2:
      return (await Promise.resolve().then(() => (init_button_question_mark2(), button_question_mark2_exports))).IconButtonQuestionMark2;
    case Icons.BUTTON_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_button_question_mark(), button_question_mark_exports))).IconButtonQuestionMark;
    case Icons.BUTTON_SEARCH2:
      return (await Promise.resolve().then(() => (init_button_search2(), button_search2_exports))).IconButtonSearch2;
    case Icons.BUTTON_SEARCH:
      return (await Promise.resolve().then(() => (init_button_search(), button_search_exports))).IconButtonSearch;
    case Icons.BUTTON_STAR2:
      return (await Promise.resolve().then(() => (init_button_star2(), button_star2_exports))).IconButtonStar2;
    case Icons.BUTTON_STAR:
      return (await Promise.resolve().then(() => (init_button_star(), button_star_exports))).IconButtonStar;
    case Icons.BUTTON_SUBTRACT:
      return (await Promise.resolve().then(() => (init_button_subtract(), button_subtract_exports))).IconButtonSubtract;
    case Icons.BUTTON_VISIBLE2:
      return (await Promise.resolve().then(() => (init_button_visible2(), button_visible2_exports))).IconButtonVisible2;
    case Icons.BUTTON_VISIBLE:
      return (await Promise.resolve().then(() => (init_button_visible(), button_visible_exports))).IconButtonVisible;
    case Icons.BUTTON:
      return (await Promise.resolve().then(() => (init_button(), button_exports))).IconButton;
    case Icons.CALENDAR2:
      return (await Promise.resolve().then(() => (init_calendar2(), calendar2_exports))).IconCalendar2;
    case Icons.CALENDAR:
      return (await Promise.resolve().then(() => (init_calendar(), calendar_exports))).IconCalendar;
    case Icons.CHART_BARS_SQUARED:
      return (await Promise.resolve().then(() => (init_chart_bars_squared(), chart_bars_squared_exports))).IconChartBarsSquared;
    case Icons.CHART_BUBBLES:
      return (await Promise.resolve().then(() => (init_chart_bubbles(), chart_bubbles_exports))).IconChartBubbles;
    case Icons.CHART_CANDLES:
      return (await Promise.resolve().then(() => (init_chart_candles(), chart_candles_exports))).IconChartCandles;
    case Icons.CHART_HALF_CIRCLE:
      return (await Promise.resolve().then(() => (init_chart_half_circle(), chart_half_circle_exports))).IconChartHalfCircle;
    case Icons.CHART_LINE_SQUARED:
      return (await Promise.resolve().then(() => (init_chart_line_squared(), chart_line_squared_exports))).IconChartLineSquared;
    case Icons.CHART_LINE:
      return (await Promise.resolve().then(() => (init_chart_line(), chart_line_exports))).IconChartLine;
    case Icons.CHART_PIE:
      return (await Promise.resolve().then(() => (init_chart_pie(), chart_pie_exports))).IconChartPie;
    case Icons.CHECK_FAT:
      return (await Promise.resolve().then(() => (init_check_fat(), check_fat_exports))).IconCheckFat;
    case Icons.CHECK_L:
      return (await Promise.resolve().then(() => (init_check_l(), check_l_exports))).IconCheckL;
    case Icons.CHECK_LIST:
      return (await Promise.resolve().then(() => (init_check_list(), check_list_exports))).IconCheckList;
    case Icons.CHECK_M:
      return (await Promise.resolve().then(() => (init_check_m(), check_m_exports))).IconCheckM;
    case Icons.CHECK_S:
      return (await Promise.resolve().then(() => (init_check_s(), check_s_exports))).IconCheckS;
    case Icons.CIRCLE_INVISIBLE:
      return (await Promise.resolve().then(() => (init_circle_invisible(), circle_invisible_exports))).IconCircleInvisible;
    case Icons.CIRCLE_SUBTRACT:
      return (await Promise.resolve().then(() => (init_circle_subtract(), circle_subtract_exports))).IconCircleSubtract;
    case Icons.CIRCLED_ADD:
      return (await Promise.resolve().then(() => (init_circled_add(), circled_add_exports))).IconCircledAdd;
    case Icons.CIRCLED_BROKEN_HEART:
      return (await Promise.resolve().then(() => (init_circled_broken_heart(), circled_broken_heart_exports))).IconCircledBrokenHeart;
    case Icons.CIRCLED_CHECK:
      return (await Promise.resolve().then(() => (init_circled_check(), circled_check_exports))).IconCircledCheck;
    case Icons.CIRCLED_EDIT:
      return (await Promise.resolve().then(() => (init_circled_edit(), circled_edit_exports))).IconCircledEdit;
    case Icons.CIRCLED_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_circled_exclamation_mark(), circled_exclamation_mark_exports))).IconCircledExclamationMark;
    case Icons.CIRCLED_HEART:
      return (await Promise.resolve().then(() => (init_circled_heart(), circled_heart_exports))).IconCircledHeart;
    case Icons.CIRCLED_INFO:
      return (await Promise.resolve().then(() => (init_circled_info(), circled_info_exports))).IconCircledInfo;
    case Icons.CIRCLED_MULTIPLY:
      return (await Promise.resolve().then(() => (init_circled_multiply(), circled_multiply_exports))).IconCircledMultiply;
    case Icons.CIRCLED_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_circled_question_mark(), circled_question_mark_exports))).IconCircledQuestionMark;
    case Icons.CIRCLED_SEARCH:
      return (await Promise.resolve().then(() => (init_circled_search(), circled_search_exports))).IconCircledSearch;
    case Icons.CIRCLED_STAR:
      return (await Promise.resolve().then(() => (init_circled_star(), circled_star_exports))).IconCircledStar;
    case Icons.CIRCLED_VISIBLE:
      return (await Promise.resolve().then(() => (init_circled_visible(), circled_visible_exports))).IconCircledVisible;
    case Icons.CIRCLED:
      return (await Promise.resolve().then(() => (init_circled(), circled_exports))).IconCircled;
    case Icons.CIRCULAR_LOADER:
      return (await Promise.resolve().then(() => (init_circular_loader(), circular_loader_exports))).IconCircularLoader;
    case Icons.CLOCK:
      return (await Promise.resolve().then(() => (init_clock(), clock_exports))).IconClock;
    case Icons.CODE_BRACKETS_CIRCLED:
      return (await Promise.resolve().then(() => (init_code_brackets_circled(), code_brackets_circled_exports))).IconCodeBracketsCircled;
    case Icons.CODE_BRACKETS:
      return (await Promise.resolve().then(() => (init_code_brackets(), code_brackets_exports))).IconCodeBrackets;
    case Icons.CODE_CHEVRONS_CIRCLED:
      return (await Promise.resolve().then(() => (init_code_chevrons_circled(), code_chevrons_circled_exports))).IconCodeChevronsCircled;
    case Icons.CODE_CHEVRONS_OPEN_CIRCLED:
      return (await Promise.resolve().then(() => (init_code_chevrons_open_circled(), code_chevrons_open_circled_exports))).IconCodeChevronsOpenCircled;
    case Icons.CODE_CHEVRONS_OPEN:
      return (await Promise.resolve().then(() => (init_code_chevrons_open(), code_chevrons_open_exports))).IconCodeChevronsOpen;
    case Icons.CODE_CHEVRONS:
      return (await Promise.resolve().then(() => (init_code_chevrons(), code_chevrons_exports))).IconCodeChevrons;
    case Icons.COMPANY:
      return (await Promise.resolve().then(() => (init_company(), company_exports))).IconCompany;
    case Icons.DISLIKE:
      return (await Promise.resolve().then(() => (init_dislike(), dislike_exports))).IconDislike;
    case Icons.EDIT_FAT:
      return (await Promise.resolve().then(() => (init_edit_fat(), edit_fat_exports))).IconEditFat;
    case Icons.EDIT_L:
      return (await Promise.resolve().then(() => (init_edit_l(), edit_l_exports))).IconEditL;
    case Icons.EDIT_LINE_SWIRL:
      return (await Promise.resolve().then(() => (init_edit_line_swirl(), edit_line_swirl_exports))).IconEditLineSwirl;
    case Icons.EDIT_LINE:
      return (await Promise.resolve().then(() => (init_edit_line(), edit_line_exports))).IconEditLine;
    case Icons.EDIT_M:
      return (await Promise.resolve().then(() => (init_edit_m(), edit_m_exports))).IconEditM;
    case Icons.EDIT_S:
      return (await Promise.resolve().then(() => (init_edit_s(), edit_s_exports))).IconEditS;
    case Icons.EXCLAMATION_MARK_FAT:
      return (await Promise.resolve().then(() => (init_exclamation_mark_fat(), exclamation_mark_fat_exports))).IconExclamationMarkFat;
    case Icons.EXCLAMATION_MARK_L:
      return (await Promise.resolve().then(() => (init_exclamation_mark_l(), exclamation_mark_l_exports))).IconExclamationMarkL;
    case Icons.EXCLAMATION_MARK_M:
      return (await Promise.resolve().then(() => (init_exclamation_mark_m(), exclamation_mark_m_exports))).IconExclamationMarkM;
    case Icons.EXCLAMATION_MARK_S:
      return (await Promise.resolve().then(() => (init_exclamation_mark_s(), exclamation_mark_s_exports))).IconExclamationMarkS;
    case Icons.FEMALE_SIMPLIFIED:
      return (await Promise.resolve().then(() => (init_female_simplified(), female_simplified_exports))).IconFemaleSimplified;
    case Icons.FILE_ADD267:
      return (await Promise.resolve().then(() => (init_file_add267(), file_add267_exports))).IconFileAdd267;
    case Icons.FILE_ADD269:
      return (await Promise.resolve().then(() => (init_file_add269(), file_add269_exports))).IconFileAdd269;
    case Icons.FILE_ADD:
      return (await Promise.resolve().then(() => (init_file_add(), file_add_exports))).IconFileAdd;
    case Icons.FILE_ARCHIVE:
      return (await Promise.resolve().then(() => (init_file_archive(), file_archive_exports))).IconFileArchive;
    case Icons.FILE_ARROW_UP:
      return (await Promise.resolve().then(() => (init_file_arrow_up(), file_arrow_up_exports))).IconFileArrowUp;
    case Icons.FILE_BINARY:
      return (await Promise.resolve().then(() => (init_file_binary(), file_binary_exports))).IconFileBinary;
    case Icons.FILE_BROKEN_HEART2:
      return (await Promise.resolve().then(() => (init_file_broken_heart2(), file_broken_heart2_exports))).IconFileBrokenHeart2;
    case Icons.FILE_BROKEN_HEART:
      return (await Promise.resolve().then(() => (init_file_broken_heart(), file_broken_heart_exports))).IconFileBrokenHeart;
    case Icons.FILE_CHECK2:
      return (await Promise.resolve().then(() => (init_file_check2(), file_check2_exports))).IconFileCheck2;
    case Icons.FILE_CHECK:
      return (await Promise.resolve().then(() => (init_file_check(), file_check_exports))).IconFileCheck;
    case Icons.FILE_CLOUD:
      return (await Promise.resolve().then(() => (init_file_cloud(), file_cloud_exports))).IconFileCloud;
    case Icons.FILE_CODE:
      return (await Promise.resolve().then(() => (init_file_code(), file_code_exports))).IconFileCode;
    case Icons.FILE_COLUMNS:
      return (await Promise.resolve().then(() => (init_file_columns(), file_columns_exports))).IconFileColumns;
    case Icons.FILE_EDIT2:
      return (await Promise.resolve().then(() => (init_file_edit2(), file_edit2_exports))).IconFileEdit2;
    case Icons.FILE_EDIT:
      return (await Promise.resolve().then(() => (init_file_edit(), file_edit_exports))).IconFileEdit;
    case Icons.FILE_EXCLAMATION_MARK2:
      return (await Promise.resolve().then(() => (init_file_exclamation_mark2(), file_exclamation_mark2_exports))).IconFileExclamationMark2;
    case Icons.FILE_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_file_exclamation_mark(), file_exclamation_mark_exports))).IconFileExclamationMark;
    case Icons.FILE_GRAPHS:
      return (await Promise.resolve().then(() => (init_file_graphs(), file_graphs_exports))).IconFileGraphs;
    case Icons.FILE_HEART2:
      return (await Promise.resolve().then(() => (init_file_heart2(), file_heart2_exports))).IconFileHeart2;
    case Icons.FILE_HEART:
      return (await Promise.resolve().then(() => (init_file_heart(), file_heart_exports))).IconFileHeart;
    case Icons.FILE_INFO2:
      return (await Promise.resolve().then(() => (init_file_info2(), file_info2_exports))).IconFileInfo2;
    case Icons.FILE_INFO:
      return (await Promise.resolve().then(() => (init_file_info(), file_info_exports))).IconFileInfo;
    case Icons.FILE_INVISIBLE2:
      return (await Promise.resolve().then(() => (init_file_invisible2(), file_invisible2_exports))).IconFileInvisible2;
    case Icons.FILE_INVISIBLE:
      return (await Promise.resolve().then(() => (init_file_invisible(), file_invisible_exports))).IconFileInvisible;
    case Icons.FILE_MULTIPLY:
      return (await Promise.resolve().then(() => (init_file_multiply(), file_multiply_exports))).IconFileMultiply;
    case Icons.FILE_QUESTION_MARK2:
      return (await Promise.resolve().then(() => (init_file_question_mark2(), file_question_mark2_exports))).IconFileQuestionMark2;
    case Icons.FILE_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_file_question_mark(), file_question_mark_exports))).IconFileQuestionMark;
    case Icons.FILE_SEARCH2:
      return (await Promise.resolve().then(() => (init_file_search2(), file_search2_exports))).IconFileSearch2;
    case Icons.FILE_SEARCH:
      return (await Promise.resolve().then(() => (init_file_search(), file_search_exports))).IconFileSearch;
    case Icons.FILE_STAR2:
      return (await Promise.resolve().then(() => (init_file_star2(), file_star2_exports))).IconFileStar2;
    case Icons.FILE_STAR:
      return (await Promise.resolve().then(() => (init_file_star(), file_star_exports))).IconFileStar;
    case Icons.FILE_SUBTRACT2:
      return (await Promise.resolve().then(() => (init_file_subtract2(), file_subtract2_exports))).IconFileSubtract2;
    case Icons.FILE_SUBTRACT:
      return (await Promise.resolve().then(() => (init_file_subtract(), file_subtract_exports))).IconFileSubtract;
    case Icons.FILE_TEXT:
      return (await Promise.resolve().then(() => (init_file_text(), file_text_exports))).IconFileText;
    case Icons.FILE_TRAY_STACK:
      return (await Promise.resolve().then(() => (init_file_tray_stack(), file_tray_stack_exports))).IconFileTrayStack;
    case Icons.FILE_TRAY:
      return (await Promise.resolve().then(() => (init_file_tray(), file_tray_exports))).IconFileTray;
    case Icons.FILE_VISIBLE2:
      return (await Promise.resolve().then(() => (init_file_visible2(), file_visible2_exports))).IconFileVisible2;
    case Icons.FILE_VISIBLE:
      return (await Promise.resolve().then(() => (init_file_visible(), file_visible_exports))).IconFileVisible;
    case Icons.FILE:
      return (await Promise.resolve().then(() => (init_file(), file_exports))).IconFile;
    case Icons.FOLDER_ADD2:
      return (await Promise.resolve().then(() => (init_folder_add2(), folder_add2_exports))).IconFolderAdd2;
    case Icons.FOLDER_ADD:
      return (await Promise.resolve().then(() => (init_folder_add(), folder_add_exports))).IconFolderAdd;
    case Icons.FOLDER_BROKEN_HEART2:
      return (await Promise.resolve().then(() => (init_folder_broken_heart2(), folder_broken_heart2_exports))).IconFolderBrokenHeart2;
    case Icons.FOLDER_BROKEN_HEART:
      return (await Promise.resolve().then(() => (init_folder_broken_heart(), folder_broken_heart_exports))).IconFolderBrokenHeart;
    case Icons.FOLDER_CHECK2:
      return (await Promise.resolve().then(() => (init_folder_check2(), folder_check2_exports))).IconFolderCheck2;
    case Icons.FOLDER_CHECK:
      return (await Promise.resolve().then(() => (init_folder_check(), folder_check_exports))).IconFolderCheck;
    case Icons.FOLDER_EDIT2:
      return (await Promise.resolve().then(() => (init_folder_edit2(), folder_edit2_exports))).IconFolderEdit2;
    case Icons.FOLDER_EDIT:
      return (await Promise.resolve().then(() => (init_folder_edit(), folder_edit_exports))).IconFolderEdit;
    case Icons.FOLDER_EXCLAMATION_MARK2:
      return (await Promise.resolve().then(() => (init_folder_exclamation_mark2(), folder_exclamation_mark2_exports))).IconFolderExclamationMark2;
    case Icons.FOLDER_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_folder_exclamation_mark(), folder_exclamation_mark_exports))).IconFolderExclamationMark;
    case Icons.FOLDER_HEART2:
      return (await Promise.resolve().then(() => (init_folder_heart2(), folder_heart2_exports))).IconFolderHeart2;
    case Icons.FOLDER_HEART:
      return (await Promise.resolve().then(() => (init_folder_heart(), folder_heart_exports))).IconFolderHeart;
    case Icons.FOLDER_INFO2:
      return (await Promise.resolve().then(() => (init_folder_info2(), folder_info2_exports))).IconFolderInfo2;
    case Icons.FOLDER_INFO:
      return (await Promise.resolve().then(() => (init_folder_info(), folder_info_exports))).IconFolderInfo;
    case Icons.FOLDER_INVISIBLE2:
      return (await Promise.resolve().then(() => (init_folder_invisible2(), folder_invisible2_exports))).IconFolderInvisible2;
    case Icons.FOLDER_INVISIBLE:
      return (await Promise.resolve().then(() => (init_folder_invisible(), folder_invisible_exports))).IconFolderInvisible;
    case Icons.FOLDER_MULTIPLY2:
      return (await Promise.resolve().then(() => (init_folder_multiply2(), folder_multiply2_exports))).IconFolderMultiply2;
    case Icons.FOLDER_MULTIPLY:
      return (await Promise.resolve().then(() => (init_folder_multiply(), folder_multiply_exports))).IconFolderMultiply;
    case Icons.FOLDER_QUESTION_MARK2:
      return (await Promise.resolve().then(() => (init_folder_question_mark2(), folder_question_mark2_exports))).IconFolderQuestionMark2;
    case Icons.FOLDER_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_folder_question_mark(), folder_question_mark_exports))).IconFolderQuestionMark;
    case Icons.FOLDER_SEARCH2:
      return (await Promise.resolve().then(() => (init_folder_search2(), folder_search2_exports))).IconFolderSearch2;
    case Icons.FOLDER_SEARCH:
      return (await Promise.resolve().then(() => (init_folder_search(), folder_search_exports))).IconFolderSearch;
    case Icons.FOLDER_STAR2:
      return (await Promise.resolve().then(() => (init_folder_star2(), folder_star2_exports))).IconFolderStar2;
    case Icons.FOLDER_STAR:
      return (await Promise.resolve().then(() => (init_folder_star(), folder_star_exports))).IconFolderStar;
    case Icons.FOLDER_SUBTRACT2:
      return (await Promise.resolve().then(() => (init_folder_subtract2(), folder_subtract2_exports))).IconFolderSubtract2;
    case Icons.FOLDER_SUBTRACT:
      return (await Promise.resolve().then(() => (init_folder_subtract(), folder_subtract_exports))).IconFolderSubtract;
    case Icons.FOLDER_VISIBLE2:
      return (await Promise.resolve().then(() => (init_folder_visible2(), folder_visible2_exports))).IconFolderVisible2;
    case Icons.FOLDER_VISIBLE:
      return (await Promise.resolve().then(() => (init_folder_visible(), folder_visible_exports))).IconFolderVisible;
    case Icons.FOLDER:
      return (await Promise.resolve().then(() => (init_folder(), folder_exports))).IconFolder;
    case Icons.GIRL:
      return (await Promise.resolve().then(() => (init_girl(), girl_exports))).IconGirl;
    case Icons.GIT_BRANCH:
      return (await Promise.resolve().then(() => (init_git_branch(), git_branch_exports))).IconGitBranch;
    case Icons.GIT_COMPARE:
      return (await Promise.resolve().then(() => (init_git_compare(), git_compare_exports))).IconGitCompare;
    case Icons.GIT_MERGE_QUEUE:
      return (await Promise.resolve().then(() => (init_git_merge_queue(), git_merge_queue_exports))).IconGitMergeQueue;
    case Icons.GIT_MERGE:
      return (await Promise.resolve().then(() => (init_git_merge(), git_merge_exports))).IconGitMerge;
    case Icons.GIT_PULL_REQUEST_CLOSED:
      return (await Promise.resolve().then(() => (init_git_pull_request_closed(), git_pull_request_closed_exports))).IconGitPullRequestClosed;
    case Icons.GIT_PULL_REQUEST_DRAFT:
      return (await Promise.resolve().then(() => (init_git_pull_request_draft(), git_pull_request_draft_exports))).IconGitPullRequestDraft;
    case Icons.GIT_PULL_REQUEST:
      return (await Promise.resolve().then(() => (init_git_pull_request(), git_pull_request_exports))).IconGitPullRequest;
    case Icons.GIT_REPO_FORK:
      return (await Promise.resolve().then(() => (init_git_repo_fork(), git_repo_fork_exports))).IconGitRepoFork;
    case Icons.HEART_BROKEN_SMALL:
      return (await Promise.resolve().then(() => (init_heart_broken_small(), heart_broken_small_exports))).IconHeartBrokenSmall;
    case Icons.HEART_FAT:
      return (await Promise.resolve().then(() => (init_heart_fat(), heart_fat_exports))).IconHeartFat;
    case Icons.HEART_L:
      return (await Promise.resolve().then(() => (init_heart_l(), heart_l_exports))).IconHeartL;
    case Icons.HEART_M:
      return (await Promise.resolve().then(() => (init_heart_m(), heart_m_exports))).IconHeartM;
    case Icons.HEART_SMALL:
      return (await Promise.resolve().then(() => (init_heart_small(), heart_small_exports))).IconHeartSmall;
    case Icons.INFO_FAT:
      return (await Promise.resolve().then(() => (init_info_fat(), info_fat_exports))).IconInfoFat;
    case Icons.INFO_L:
      return (await Promise.resolve().then(() => (init_info_l(), info_l_exports))).IconInfoL;
    case Icons.INFO_M:
      return (await Promise.resolve().then(() => (init_info_m(), info_m_exports))).IconInfoM;
    case Icons.INFO_S:
      return (await Promise.resolve().then(() => (init_info_s(), info_s_exports))).IconInfoS;
    case Icons.INVISIBLE_FAT:
      return (await Promise.resolve().then(() => (init_invisible_fat(), invisible_fat_exports))).IconInvisibleFat;
    case Icons.INVISIBLE_L:
      return (await Promise.resolve().then(() => (init_invisible_l(), invisible_l_exports))).IconInvisibleL;
    case Icons.INVISIBLE_M:
      return (await Promise.resolve().then(() => (init_invisible_m(), invisible_m_exports))).IconInvisibleM;
    case Icons.INVISIBLE_S:
      return (await Promise.resolve().then(() => (init_invisible_s(), invisible_s_exports))).IconInvisibleS;
    case Icons.KEY_BACKSPACE:
      return (await Promise.resolve().then(() => (init_key_backspace(), key_backspace_exports))).IconKeyBackspace;
    case Icons.KEY_DELETE:
      return (await Promise.resolve().then(() => (init_key_delete(), key_delete_exports))).IconKeyDelete;
    case Icons.KEY_DOWN:
      return (await Promise.resolve().then(() => (init_key_down(), key_down_exports))).IconKeyDown;
    case Icons.KEY_EJECT:
      return (await Promise.resolve().then(() => (init_key_eject(), key_eject_exports))).IconKeyEject;
    case Icons.KEY_ENTER:
      return (await Promise.resolve().then(() => (init_key_enter(), key_enter_exports))).IconKeyEnter;
    case Icons.KEY_FUNCTION:
      return (await Promise.resolve().then(() => (init_key_function(), key_function_exports))).IconKeyFunction;
    case Icons.KEY_MAC_COMMAND:
      return (await Promise.resolve().then(() => (init_key_mac_command(), key_mac_command_exports))).IconKeyMacCommand;
    case Icons.KEY_OPTION:
      return (await Promise.resolve().then(() => (init_key_option(), key_option_exports))).IconKeyOption;
    case Icons.KEY_PAGE_DOWN:
      return (await Promise.resolve().then(() => (init_key_page_down(), key_page_down_exports))).IconKeyPageDown;
    case Icons.KEY_PAGE_NEXT:
      return (await Promise.resolve().then(() => (init_key_page_next(), key_page_next_exports))).IconKeyPageNext;
    case Icons.KEY_PAGE_UP:
      return (await Promise.resolve().then(() => (init_key_page_up(), key_page_up_exports))).IconKeyPageUp;
    case Icons.KEY_PREVIOUS_UP:
      return (await Promise.resolve().then(() => (init_key_previous_up(), key_previous_up_exports))).IconKeyPreviousUp;
    case Icons.KEY_SHIFT:
      return (await Promise.resolve().then(() => (init_key_shift(), key_shift_exports))).IconKeyShift;
    case Icons.KEY_TAB:
      return (await Promise.resolve().then(() => (init_key_tab(), key_tab_exports))).IconKeyTab;
    case Icons.KEY_UP:
      return (await Promise.resolve().then(() => (init_key_up(), key_up_exports))).IconKeyUp;
    case Icons.LIKE:
      return (await Promise.resolve().then(() => (init_like(), like_exports))).IconLike;
    case Icons.LINK:
      return (await Promise.resolve().then(() => (init_link(), link_exports))).IconLink;
    case Icons.LOADER_DOTS2:
      return (await Promise.resolve().then(() => (init_loader_dots2(), loader_dots2_exports))).IconLoaderDots2;
    case Icons.LOADER_DOTS:
      return (await Promise.resolve().then(() => (init_loader_dots(), loader_dots_exports))).IconLoaderDots;
    case Icons.MALE_SIMPLIFIED:
      return (await Promise.resolve().then(() => (init_male_simplified(), male_simplified_exports))).IconMaleSimplified;
    case Icons.MOVING_BLOCK:
      return (await Promise.resolve().then(() => (init_moving_block(), moving_block_exports))).IconMovingBlock;
    case Icons.MULTIPLY_FAT:
      return (await Promise.resolve().then(() => (init_multiply_fat(), multiply_fat_exports))).IconMultiplyFat;
    case Icons.MULTIPLY_L:
      return (await Promise.resolve().then(() => (init_multiply_l(), multiply_l_exports))).IconMultiplyL;
    case Icons.MULTIPLY_M:
      return (await Promise.resolve().then(() => (init_multiply_m(), multiply_m_exports))).IconMultiplyM;
    case Icons.MULTIPLY_S:
      return (await Promise.resolve().then(() => (init_multiply_s(), multiply_s_exports))).IconMultiplyS;
    case Icons.NOTE_ADD2:
      return (await Promise.resolve().then(() => (init_note_add2(), note_add2_exports))).IconNoteAdd2;
    case Icons.NOTE_ADD:
      return (await Promise.resolve().then(() => (init_note_add(), note_add_exports))).IconNoteAdd;
    case Icons.NOTE_BROKEN_HEART2:
      return (await Promise.resolve().then(() => (init_note_broken_heart2(), note_broken_heart2_exports))).IconNoteBrokenHeart2;
    case Icons.NOTE_BROKEN_HEART:
      return (await Promise.resolve().then(() => (init_note_broken_heart(), note_broken_heart_exports))).IconNoteBrokenHeart;
    case Icons.NOTE_CHECK2:
      return (await Promise.resolve().then(() => (init_note_check2(), note_check2_exports))).IconNoteCheck2;
    case Icons.NOTE_CHECK:
      return (await Promise.resolve().then(() => (init_note_check(), note_check_exports))).IconNoteCheck;
    case Icons.NOTE_EDIT2:
      return (await Promise.resolve().then(() => (init_note_edit2(), note_edit2_exports))).IconNoteEdit2;
    case Icons.NOTE_EDIT:
      return (await Promise.resolve().then(() => (init_note_edit(), note_edit_exports))).IconNoteEdit;
    case Icons.NOTE_EXCLAMATION_MARK2:
      return (await Promise.resolve().then(() => (init_note_exclamation_mark2(), note_exclamation_mark2_exports))).IconNoteExclamationMark2;
    case Icons.NOTE_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_note_exclamation_mark(), note_exclamation_mark_exports))).IconNoteExclamationMark;
    case Icons.NOTE_HEART2:
      return (await Promise.resolve().then(() => (init_note_heart2(), note_heart2_exports))).IconNoteHeart2;
    case Icons.NOTE_HEART:
      return (await Promise.resolve().then(() => (init_note_heart(), note_heart_exports))).IconNoteHeart;
    case Icons.NOTE_INFO2:
      return (await Promise.resolve().then(() => (init_note_info2(), note_info2_exports))).IconNoteInfo2;
    case Icons.NOTE_INFO:
      return (await Promise.resolve().then(() => (init_note_info(), note_info_exports))).IconNoteInfo;
    case Icons.NOTE_INVISIBLE2:
      return (await Promise.resolve().then(() => (init_note_invisible2(), note_invisible2_exports))).IconNoteInvisible2;
    case Icons.NOTE_INVISIBLE:
      return (await Promise.resolve().then(() => (init_note_invisible(), note_invisible_exports))).IconNoteInvisible;
    case Icons.NOTE_MULTIPLY2:
      return (await Promise.resolve().then(() => (init_note_multiply2(), note_multiply2_exports))).IconNoteMultiply2;
    case Icons.NOTE_MULTIPLY:
      return (await Promise.resolve().then(() => (init_note_multiply(), note_multiply_exports))).IconNoteMultiply;
    case Icons.NOTE_QUESTION_MARK2:
      return (await Promise.resolve().then(() => (init_note_question_mark2(), note_question_mark2_exports))).IconNoteQuestionMark2;
    case Icons.NOTE_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_note_question_mark(), note_question_mark_exports))).IconNoteQuestionMark;
    case Icons.NOTE_SEARCH2:
      return (await Promise.resolve().then(() => (init_note_search2(), note_search2_exports))).IconNoteSearch2;
    case Icons.NOTE_SEARCH:
      return (await Promise.resolve().then(() => (init_note_search(), note_search_exports))).IconNoteSearch;
    case Icons.NOTE_STAR2:
      return (await Promise.resolve().then(() => (init_note_star2(), note_star2_exports))).IconNoteStar2;
    case Icons.NOTE_STAR:
      return (await Promise.resolve().then(() => (init_note_star(), note_star_exports))).IconNoteStar;
    case Icons.NOTE_SUBTRACT2:
      return (await Promise.resolve().then(() => (init_note_subtract2(), note_subtract2_exports))).IconNoteSubtract2;
    case Icons.NOTE_SUBTRACT:
      return (await Promise.resolve().then(() => (init_note_subtract(), note_subtract_exports))).IconNoteSubtract;
    case Icons.NOTE_VISIBLE2:
      return (await Promise.resolve().then(() => (init_note_visible2(), note_visible2_exports))).IconNoteVisible2;
    case Icons.NOTE_VISIBLE:
      return (await Promise.resolve().then(() => (init_note_visible(), note_visible_exports))).IconNoteVisible;
    case Icons.NOTE:
      return (await Promise.resolve().then(() => (init_note(), note_exports))).IconNote;
    case Icons.ON_TARGET:
      return (await Promise.resolve().then(() => (init_on_target(), on_target_exports))).IconOnTarget;
    case Icons.PARAGRAPH:
      return (await Promise.resolve().then(() => (init_paragraph(), paragraph_exports))).IconParagraph;
    case Icons.PERFORMANCE2:
      return (await Promise.resolve().then(() => (init_performance2(), performance2_exports))).IconPerformance2;
    case Icons.PERFORMANCE:
      return (await Promise.resolve().then(() => (init_performance(), performance_exports))).IconPerformance;
    case Icons.PIN_TILTED:
      return (await Promise.resolve().then(() => (init_pin_tilted(), pin_tilted_exports))).IconPinTilted;
    case Icons.PIN:
      return (await Promise.resolve().then(() => (init_pin(), pin_exports))).IconPin;
    case Icons.PLANNER:
      return (await Promise.resolve().then(() => (init_planner(), planner_exports))).IconPlanner;
    case Icons.POINTER_ARROW_LINE:
      return (await Promise.resolve().then(() => (init_pointer_arrow_line(), pointer_arrow_line_exports))).IconPointerArrowLine;
    case Icons.POINTER_ARROW:
      return (await Promise.resolve().then(() => (init_pointer_arrow(), pointer_arrow_exports))).IconPointerArrow;
    case Icons.POINTER_CROSS:
      return (await Promise.resolve().then(() => (init_pointer_cross(), pointer_cross_exports))).IconPointerCross;
    case Icons.POINTER_HAND:
      return (await Promise.resolve().then(() => (init_pointer_hand(), pointer_hand_exports))).IconPointerHand;
    case Icons.POINTER_LEFT:
      return (await Promise.resolve().then(() => (init_pointer_left(), pointer_left_exports))).IconPointerLeft;
    case Icons.POINTER_MOUSE:
      return (await Promise.resolve().then(() => (init_pointer_mouse(), pointer_mouse_exports))).IconPointerMouse;
    case Icons.POINTER_PEN:
      return (await Promise.resolve().then(() => (init_pointer_pen(), pointer_pen_exports))).IconPointerPen;
    case Icons.POINTER_TEXT:
      return (await Promise.resolve().then(() => (init_pointer_text(), pointer_text_exports))).IconPointerText;
    case Icons.QUESTION_MARK_FAT:
      return (await Promise.resolve().then(() => (init_question_mark_fat(), question_mark_fat_exports))).IconQuestionMarkFat;
    case Icons.QUESTION_MARK_L:
      return (await Promise.resolve().then(() => (init_question_mark_l(), question_mark_l_exports))).IconQuestionMarkL;
    case Icons.QUESTION_MARK_M:
      return (await Promise.resolve().then(() => (init_question_mark_m(), question_mark_m_exports))).IconQuestionMarkM;
    case Icons.QUESTION_MARK_S:
      return (await Promise.resolve().then(() => (init_question_mark_s(), question_mark_s_exports))).IconQuestionMarkS;
    case Icons.REMOVE_LINES:
      return (await Promise.resolve().then(() => (init_remove_lines(), remove_lines_exports))).IconRemoveLines;
    case Icons.SEARCH_FAT:
      return (await Promise.resolve().then(() => (init_search_fat(), search_fat_exports))).IconSearchFat;
    case Icons.SEARCH_L:
      return (await Promise.resolve().then(() => (init_search_l(), search_l_exports))).IconSearchL;
    case Icons.SEARCH_M:
      return (await Promise.resolve().then(() => (init_search_m(), search_m_exports))).IconSearchM;
    case Icons.SEARCH_SMALL:
      return (await Promise.resolve().then(() => (init_search_small(), search_small_exports))).IconSearchSmall;
    case Icons.SECTION:
      return (await Promise.resolve().then(() => (init_section(), section_exports))).IconSection;
    case Icons.SETTINGS2:
      return (await Promise.resolve().then(() => (init_settings2(), settings2_exports))).IconSettings2;
    case Icons.SETTINGS3:
      return (await Promise.resolve().then(() => (init_settings3(), settings3_exports))).IconSettings3;
    case Icons.SETTINGS4:
      return (await Promise.resolve().then(() => (init_settings4(), settings4_exports))).IconSettings4;
    case Icons.SETTINGS5:
      return (await Promise.resolve().then(() => (init_settings5(), settings5_exports))).IconSettings5;
    case Icons.SETTINGS:
      return (await Promise.resolve().then(() => (init_settings(), settings_exports))).IconSettings;
    case Icons.SPEECH_BALLOON2:
      return (await Promise.resolve().then(() => (init_speech_balloon2(), speech_balloon2_exports))).IconSpeechBalloon2;
    case Icons.SPEECH_BALLOON_SQUARE2:
      return (await Promise.resolve().then(() => (init_speech_balloon_square2(), speech_balloon_square2_exports))).IconSpeechBalloonSquare2;
    case Icons.SPEECH_BALLOON_SQUARE_COPY:
      return (await Promise.resolve().then(() => (init_speech_balloon_square_copy(), speech_balloon_square_copy_exports))).IconSpeechBalloonSquareCopy;
    case Icons.SPEECH_BALLOON_SQUARE_TEXT:
      return (await Promise.resolve().then(() => (init_speech_balloon_square_text(), speech_balloon_square_text_exports))).IconSpeechBalloonSquareText;
    case Icons.SPEECH_BALLOON_SQUARE:
      return (await Promise.resolve().then(() => (init_speech_balloon_square(), speech_balloon_square_exports))).IconSpeechBalloonSquare;
    case Icons.SPEECH_BALLOON:
      return (await Promise.resolve().then(() => (init_speech_balloon(), speech_balloon_exports))).IconSpeechBalloon;
    case Icons.SPEECH_BALLOONS:
      return (await Promise.resolve().then(() => (init_speech_balloons(), speech_balloons_exports))).IconSpeechBalloons;
    case Icons.SQUARED_ADD:
      return (await Promise.resolve().then(() => (init_squared_add(), squared_add_exports))).IconSquaredAdd;
    case Icons.SQUARED_BROKEN_HEART:
      return (await Promise.resolve().then(() => (init_squared_broken_heart(), squared_broken_heart_exports))).IconSquaredBrokenHeart;
    case Icons.SQUARED_CHECK:
      return (await Promise.resolve().then(() => (init_squared_check(), squared_check_exports))).IconSquaredCheck;
    case Icons.SQUARED_EDIT:
      return (await Promise.resolve().then(() => (init_squared_edit(), squared_edit_exports))).IconSquaredEdit;
    case Icons.SQUARED_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_squared_exclamation_mark(), squared_exclamation_mark_exports))).IconSquaredExclamationMark;
    case Icons.SQUARED_HEART:
      return (await Promise.resolve().then(() => (init_squared_heart(), squared_heart_exports))).IconSquaredHeart;
    case Icons.SQUARED_INFO:
      return (await Promise.resolve().then(() => (init_squared_info(), squared_info_exports))).IconSquaredInfo;
    case Icons.SQUARED_INVISIBLE:
      return (await Promise.resolve().then(() => (init_squared_invisible(), squared_invisible_exports))).IconSquaredInvisible;
    case Icons.SQUARED_MULTIPLY:
      return (await Promise.resolve().then(() => (init_squared_multiply(), squared_multiply_exports))).IconSquaredMultiply;
    case Icons.SQUARED_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_squared_question_mark(), squared_question_mark_exports))).IconSquaredQuestionMark;
    case Icons.SQUARED_SEARCH:
      return (await Promise.resolve().then(() => (init_squared_search(), squared_search_exports))).IconSquaredSearch;
    case Icons.SQUARED_STAR:
      return (await Promise.resolve().then(() => (init_squared_star(), squared_star_exports))).IconSquaredStar;
    case Icons.SQUARED_SUBTRACT:
      return (await Promise.resolve().then(() => (init_squared_subtract(), squared_subtract_exports))).IconSquaredSubtract;
    case Icons.SQUARED_VISIBLE:
      return (await Promise.resolve().then(() => (init_squared_visible(), squared_visible_exports))).IconSquaredVisible;
    case Icons.SQUARED:
      return (await Promise.resolve().then(() => (init_squared(), squared_exports))).IconSquared;
    case Icons.STAMP:
      return (await Promise.resolve().then(() => (init_stamp(), stamp_exports))).IconStamp;
    case Icons.STAR_FAT:
      return (await Promise.resolve().then(() => (init_star_fat(), star_fat_exports))).IconStarFat;
    case Icons.STAR_L:
      return (await Promise.resolve().then(() => (init_star_l(), star_l_exports))).IconStarL;
    case Icons.STAR_M:
      return (await Promise.resolve().then(() => (init_star_m(), star_m_exports))).IconStarM;
    case Icons.STAR_SMALL:
      return (await Promise.resolve().then(() => (init_star_small(), star_small_exports))).IconStarSmall;
    case Icons.STICKER:
      return (await Promise.resolve().then(() => (init_sticker(), sticker_exports))).IconSticker;
    case Icons.STOPWATCH:
      return (await Promise.resolve().then(() => (init_stopwatch(), stopwatch_exports))).IconStopwatch;
    case Icons.SUBTRACT_FAT:
      return (await Promise.resolve().then(() => (init_subtract_fat(), subtract_fat_exports))).IconSubtractFat;
    case Icons.SUBTRACT_L:
      return (await Promise.resolve().then(() => (init_subtract_l(), subtract_l_exports))).IconSubtractL;
    case Icons.SUBTRACT_M:
      return (await Promise.resolve().then(() => (init_subtract_m(), subtract_m_exports))).IconSubtractM;
    case Icons.SUBTRACT_S:
      return (await Promise.resolve().then(() => (init_subtract_s(), subtract_s_exports))).IconSubtractS;
    case Icons.TABLES:
      return (await Promise.resolve().then(() => (init_tables(), tables_exports))).IconTables;
    case Icons.TALK_ADD:
      return (await Promise.resolve().then(() => (init_talk_add(), talk_add_exports))).IconTalkAdd;
    case Icons.TALK_CHECK:
      return (await Promise.resolve().then(() => (init_talk_check(), talk_check_exports))).IconTalkCheck;
    case Icons.TALK_DELETE:
      return (await Promise.resolve().then(() => (init_talk_delete(), talk_delete_exports))).IconTalkDelete;
    case Icons.TALK_EDIT:
      return (await Promise.resolve().then(() => (init_talk_edit(), talk_edit_exports))).IconTalkEdit;
    case Icons.TALK_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_talk_exclamation_mark(), talk_exclamation_mark_exports))).IconTalkExclamationMark;
    case Icons.TALK_HEART_BROKEN:
      return (await Promise.resolve().then(() => (init_talk_heart_broken(), talk_heart_broken_exports))).IconTalkHeartBroken;
    case Icons.TALK_HEART:
      return (await Promise.resolve().then(() => (init_talk_heart(), talk_heart_exports))).IconTalkHeart;
    case Icons.TALK_INFO:
      return (await Promise.resolve().then(() => (init_talk_info(), talk_info_exports))).IconTalkInfo;
    case Icons.TALK_INVISIBLE:
      return (await Promise.resolve().then(() => (init_talk_invisible(), talk_invisible_exports))).IconTalkInvisible;
    case Icons.TALK_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_talk_question_mark(), talk_question_mark_exports))).IconTalkQuestionMark;
    case Icons.TALK_SEARCH:
      return (await Promise.resolve().then(() => (init_talk_search(), talk_search_exports))).IconTalkSearch;
    case Icons.TALK_STAR:
      return (await Promise.resolve().then(() => (init_talk_star(), talk_star_exports))).IconTalkStar;
    case Icons.TALK_SUBTRACT:
      return (await Promise.resolve().then(() => (init_talk_subtract(), talk_subtract_exports))).IconTalkSubtract;
    case Icons.TALK_VISIBLE:
      return (await Promise.resolve().then(() => (init_talk_visible(), talk_visible_exports))).IconTalkVisible;
    case Icons.TALK:
      return (await Promise.resolve().then(() => (init_talk(), talk_exports))).IconTalk;
    case Icons.TARGET:
      return (await Promise.resolve().then(() => (init_target(), target_exports))).IconTarget;
    case Icons.TEXT_ALIGN_CENTER:
      return (await Promise.resolve().then(() => (init_text_align_center(), text_align_center_exports))).IconTextAlignCenter;
    case Icons.TEXT_ALIGN_JUSTIFY_CENTERED:
      return (await Promise.resolve().then(() => (init_text_align_justify_centered(), text_align_justify_centered_exports))).IconTextAlignJustifyCentered;
    case Icons.TEXT_ALIGN_JUSTIFY_LEFT:
      return (await Promise.resolve().then(() => (init_text_align_justify_left(), text_align_justify_left_exports))).IconTextAlignJustifyLeft;
    case Icons.TEXT_ALIGN_JUSTIFY_RIGHT:
      return (await Promise.resolve().then(() => (init_text_align_justify_right(), text_align_justify_right_exports))).IconTextAlignJustifyRight;
    case Icons.TEXT_ALIGN_JUSTIFY:
      return (await Promise.resolve().then(() => (init_text_align_justify(), text_align_justify_exports))).IconTextAlignJustify;
    case Icons.TEXT_ALIGN_LEFT:
      return (await Promise.resolve().then(() => (init_text_align_left(), text_align_left_exports))).IconTextAlignLeft;
    case Icons.TEXT_ALIGN_RIGHT_ORDER_DESC:
      return (await Promise.resolve().then(() => (init_text_align_right_order_desc(), text_align_right_order_desc_exports))).IconTextAlignRightOrderDesc;
    case Icons.TEXT_ALIGN_RIGHT:
      return (await Promise.resolve().then(() => (init_text_align_right(), text_align_right_exports))).IconTextAlignRight;
    case Icons.TEXT_BOLD:
      return (await Promise.resolve().then(() => (init_text_bold(), text_bold_exports))).IconTextBold;
    case Icons.TEXT_DETAIL_LIST:
      return (await Promise.resolve().then(() => (init_text_detail_list(), text_detail_list_exports))).IconTextDetailList;
    case Icons.TEXT_INDENT:
      return (await Promise.resolve().then(() => (init_text_indent(), text_indent_exports))).IconTextIndent;
    case Icons.TEXT_ITALIC:
      return (await Promise.resolve().then(() => (init_text_italic(), text_italic_exports))).IconTextItalic;
    case Icons.TEXT_LINE_THROUGH:
      return (await Promise.resolve().then(() => (init_text_line_through(), text_line_through_exports))).IconTextLineThrough;
    case Icons.TEXT_ORDER_ASC114:
      return (await Promise.resolve().then(() => (init_text_order_asc114(), text_order_asc114_exports))).IconTextOrderAsc114;
    case Icons.TEXT_ORDER_ASC118:
      return (await Promise.resolve().then(() => (init_text_order_asc118(), text_order_asc118_exports))).IconTextOrderAsc118;
    case Icons.TEXT_ORDER_DESC_COPY2:
      return (await Promise.resolve().then(() => (init_text_order_desc_copy2(), text_order_desc_copy2_exports))).IconTextOrderDescCopy2;
    case Icons.TEXT_ORDER_DESC_COPY3:
      return (await Promise.resolve().then(() => (init_text_order_desc_copy3(), text_order_desc_copy3_exports))).IconTextOrderDescCopy3;
    case Icons.TEXT_ORDER_DESC_COPY:
      return (await Promise.resolve().then(() => (init_text_order_desc_copy(), text_order_desc_copy_exports))).IconTextOrderDescCopy;
    case Icons.TEXT_ORDER_DESC:
      return (await Promise.resolve().then(() => (init_text_order_desc(), text_order_desc_exports))).IconTextOrderDesc;
    case Icons.TEXT_OUTDENT:
      return (await Promise.resolve().then(() => (init_text_outdent(), text_outdent_exports))).IconTextOutdent;
    case Icons.TEXT_UNDERLINE:
      return (await Promise.resolve().then(() => (init_text_underline(), text_underline_exports))).IconTextUnderline;
    case Icons.TIMER:
      return (await Promise.resolve().then(() => (init_timer(), timer_exports))).IconTimer;
    case Icons.TRASH2:
      return (await Promise.resolve().then(() => (init_trash2(), trash2_exports))).IconTrash2;
    case Icons.TRASH:
      return (await Promise.resolve().then(() => (init_trash(), trash_exports))).IconTrash;
    case Icons.TRIANGLED_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_triangled_exclamation_mark(), triangled_exclamation_mark_exports))).IconTriangledExclamationMark;
    case Icons.TRIANGLED_INFO:
      return (await Promise.resolve().then(() => (init_triangled_info(), triangled_info_exports))).IconTriangledInfo;
    case Icons.TRIANGLED_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_triangled_question_mark(), triangled_question_mark_exports))).IconTriangledQuestionMark;
    case Icons.TRIANGLED:
      return (await Promise.resolve().then(() => (init_triangled(), triangled_exports))).IconTriangled;
    case Icons.USER_ADD:
      return (await Promise.resolve().then(() => (init_user_add(), user_add_exports))).IconUserAdd;
    case Icons.USER_DELETE:
      return (await Promise.resolve().then(() => (init_user_delete(), user_delete_exports))).IconUserDelete;
    case Icons.USER_GROUP:
      return (await Promise.resolve().then(() => (init_user_group(), user_group_exports))).IconUserGroup;
    case Icons.USER:
      return (await Promise.resolve().then(() => (init_user(), user_exports))).IconUser;
    case Icons.USERS:
      return (await Promise.resolve().then(() => (init_users(), users_exports))).IconUsers;
    case Icons.VISIBLE_FAT:
      return (await Promise.resolve().then(() => (init_visible_fat(), visible_fat_exports))).IconVisibleFat;
    case Icons.VISIBLE_L:
      return (await Promise.resolve().then(() => (init_visible_l(), visible_l_exports))).IconVisibleL;
    case Icons.VISIBLE_M:
      return (await Promise.resolve().then(() => (init_visible_m(), visible_m_exports))).IconVisibleM;
    case Icons.VISIBLE_S:
      return (await Promise.resolve().then(() => (init_visible_s(), visible_s_exports))).IconVisibleS;
    case Icons.WHEELCHAIR_ACTION:
      return (await Promise.resolve().then(() => (init_wheelchair_action(), wheelchair_action_exports))).IconWheelchairAction;
    case Icons.WHEELCHAIR:
      return (await Promise.resolve().then(() => (init_wheelchair(), wheelchair_exports))).IconWheelchair;
    case Icons.AIRPLANE_ARRIVALS:
      return (await Promise.resolve().then(() => (init_airplane_arrivals(), airplane_arrivals_exports))).IconAirplaneArrivals;
    case Icons.AIRPLANE_DEPARTURES:
      return (await Promise.resolve().then(() => (init_airplane_departures(), airplane_departures_exports))).IconAirplaneDepartures;
    case Icons.AIRPLANE:
      return (await Promise.resolve().then(() => (init_airplane(), airplane_exports))).IconAirplane;
    case Icons.AIRPORT_CONNECT_FLIGHTS:
      return (await Promise.resolve().then(() => (init_airport_connect_flights(), airport_connect_flights_exports))).IconAirportConnectFlights;
    case Icons.AIRPORT_TRANSFER2:
      return (await Promise.resolve().then(() => (init_airport_transfer2(), airport_transfer2_exports))).IconAirportTransfer2;
    case Icons.AIRPORT_TRANSFER:
      return (await Promise.resolve().then(() => (init_airport_transfer(), airport_transfer_exports))).IconAirportTransfer;
    case Icons.ANCHOR:
      return (await Promise.resolve().then(() => (init_anchor(), anchor_exports))).IconAnchor;
    case Icons.BICYCLE_SURFBOARD:
      return (await Promise.resolve().then(() => (init_bicycle_surfboard(), bicycle_surfboard_exports))).IconBicycleSurfboard;
    case Icons.BICYCLE:
      return (await Promise.resolve().then(() => (init_bicycle(), bicycle_exports))).IconBicycle;
    case Icons.BRIEFCASE_CROSS:
      return (await Promise.resolve().then(() => (init_briefcase_cross(), briefcase_cross_exports))).IconBriefcaseCross;
    case Icons.CAR_PARKING_INDOOR:
      return (await Promise.resolve().then(() => (init_car_parking_indoor(), car_parking_indoor_exports))).IconCarParkingIndoor;
    case Icons.CAR_PARKING_OUTSIDE:
      return (await Promise.resolve().then(() => (init_car_parking_outside(), car_parking_outside_exports))).IconCarParkingOutside;
    case Icons.CAR_PARKING:
      return (await Promise.resolve().then(() => (init_car_parking(), car_parking_exports))).IconCarParking;
    case Icons.CAR:
      return (await Promise.resolve().then(() => (init_car(), car_exports))).IconCar;
    case Icons.CHANGING_AREA:
      return (await Promise.resolve().then(() => (init_changing_area(), changing_area_exports))).IconChangingArea;
    case Icons.CHECK_IN:
      return (await Promise.resolve().then(() => (init_check_in(), check_in_exports))).IconCheckIn;
    case Icons.CITY_BUS:
      return (await Promise.resolve().then(() => (init_city_bus(), city_bus_exports))).IconCityBus;
    case Icons.CROSS_CIRCLED:
      return (await Promise.resolve().then(() => (init_cross_circled(), cross_circled_exports))).IconCrossCircled;
    case Icons.CROSS:
      return (await Promise.resolve().then(() => (init_cross(), cross_exports))).IconCross;
    case Icons.CRUISESHIP:
      return (await Promise.resolve().then(() => (init_cruiseship(), cruiseship_exports))).IconCruiseship;
    case Icons.ELEVATOR1:
      return (await Promise.resolve().then(() => (init_elevator1(), elevator1_exports))).IconElevator1;
    case Icons.ELEVATOR2:
      return (await Promise.resolve().then(() => (init_elevator2(), elevator2_exports))).IconElevator2;
    case Icons.ELEVATOR3:
      return (await Promise.resolve().then(() => (init_elevator3(), elevator3_exports))).IconElevator3;
    case Icons.ELEVATOR4:
      return (await Promise.resolve().then(() => (init_elevator4(), elevator4_exports))).IconElevator4;
    case Icons.ESCALATOR_DOWN:
      return (await Promise.resolve().then(() => (init_escalator_down(), escalator_down_exports))).IconEscalatorDown;
    case Icons.ESCALATOR_UP:
      return (await Promise.resolve().then(() => (init_escalator_up(), escalator_up_exports))).IconEscalatorUp;
    case Icons.ESCALATOR:
      return (await Promise.resolve().then(() => (init_escalator(), escalator_exports))).IconEscalator;
    case Icons.FAMILY:
      return (await Promise.resolve().then(() => (init_family(), family_exports))).IconFamily;
    case Icons.FERRY:
      return (await Promise.resolve().then(() => (init_ferry(), ferry_exports))).IconFerry;
    case Icons.FIRE_EXTINGUISHER:
      return (await Promise.resolve().then(() => (init_fire_extinguisher(), fire_extinguisher_exports))).IconFireExtinguisher;
    case Icons.FIRE_FLAME:
      return (await Promise.resolve().then(() => (init_fire_flame(), fire_flame_exports))).IconFireFlame;
    case Icons.FIRE_HOSE:
      return (await Promise.resolve().then(() => (init_fire_hose(), fire_hose_exports))).IconFireHose;
    case Icons.GRAVESTONE2:
      return (await Promise.resolve().then(() => (init_gravestone2(), gravestone2_exports))).IconGravestone2;
    case Icons.GRAVESTONE3:
      return (await Promise.resolve().then(() => (init_gravestone3(), gravestone3_exports))).IconGravestone3;
    case Icons.GRAVESTONE:
      return (await Promise.resolve().then(() => (init_gravestone(), gravestone_exports))).IconGravestone;
    case Icons.HELLO_GOODBYE:
      return (await Promise.resolve().then(() => (init_hello_goodbye(), hello_goodbye_exports))).IconHelloGoodbye;
    case Icons.LOCATION_MARKER:
      return (await Promise.resolve().then(() => (init_location_marker(), location_marker_exports))).IconLocationMarker;
    case Icons.LOCATION_PATH2:
      return (await Promise.resolve().then(() => (init_location_path2(), location_path2_exports))).IconLocationPath2;
    case Icons.LOCATION_PATH:
      return (await Promise.resolve().then(() => (init_location_path(), location_path_exports))).IconLocationPath;
    case Icons.LOCATION_PIN:
      return (await Promise.resolve().then(() => (init_location_pin(), location_pin_exports))).IconLocationPin;
    case Icons.LOUNGE:
      return (await Promise.resolve().then(() => (init_lounge(), lounge_exports))).IconLounge;
    case Icons.LUGGAGE_BELT:
      return (await Promise.resolve().then(() => (init_luggage_belt(), luggage_belt_exports))).IconLuggageBelt;
    case Icons.LUGGAGE_LOCKER:
      return (await Promise.resolve().then(() => (init_luggage_locker(), luggage_locker_exports))).IconLuggageLocker;
    case Icons.LUGGAGE_TROLLEY:
      return (await Promise.resolve().then(() => (init_luggage_trolley(), luggage_trolley_exports))).IconLuggageTrolley;
    case Icons.LUGGAGE:
      return (await Promise.resolve().then(() => (init_luggage(), luggage_exports))).IconLuggage;
    case Icons.MAP:
      return (await Promise.resolve().then(() => (init_map(), map_exports))).IconMap;
    case Icons.MAP2:
      return (await Promise.resolve().then(() => (init_map2(), map2_exports))).IconMap2;
    case Icons.MAP3:
      return (await Promise.resolve().then(() => (init_map3(), map3_exports))).IconMap3;
    case Icons.METRO2:
      return (await Promise.resolve().then(() => (init_metro2(), metro2_exports))).IconMetro2;
    case Icons.METRO:
      return (await Promise.resolve().then(() => (init_metro(), metro_exports))).IconMetro;
    case Icons.NO_SMOKING_CIRCLED:
      return (await Promise.resolve().then(() => (init_no_smoking_circled(), no_smoking_circled_exports))).IconNoSmokingCircled;
    case Icons.NO_SMOKING:
      return (await Promise.resolve().then(() => (init_no_smoking(), no_smoking_exports))).IconNoSmoking;
    case Icons.OFFICE_SPACE:
      return (await Promise.resolve().then(() => (init_office_space(), office_space_exports))).IconOfficeSpace;
    case Icons.PALMTREE_ISLAND_WAVE:
      return (await Promise.resolve().then(() => (init_palmtree_island_wave(), palmtree_island_wave_exports))).IconPalmtreeIslandWave;
    case Icons.PALMTREE_ISLAND:
      return (await Promise.resolve().then(() => (init_palmtree_island(), palmtree_island_exports))).IconPalmtreeIsland;
    case Icons.PALMTREE:
      return (await Promise.resolve().then(() => (init_palmtree(), palmtree_exports))).IconPalmtree;
    case Icons.PARASOL_ISLAND_WAVE:
      return (await Promise.resolve().then(() => (init_parasol_island_wave(), parasol_island_wave_exports))).IconParasolIslandWave;
    case Icons.PARASOL_ISLAND:
      return (await Promise.resolve().then(() => (init_parasol_island(), parasol_island_exports))).IconParasolIsland;
    case Icons.PARASOL:
      return (await Promise.resolve().then(() => (init_parasol(), parasol_exports))).IconParasol;
    case Icons.PLASTER:
      return (await Promise.resolve().then(() => (init_plaster(), plaster_exports))).IconPlaster;
    case Icons.PLASTERS:
      return (await Promise.resolve().then(() => (init_plasters(), plasters_exports))).IconPlasters;
    case Icons.POINTER_TARGET:
      return (await Promise.resolve().then(() => (init_pointer_target(), pointer_target_exports))).IconPointerTarget;
    case Icons.RENTAL_CAR:
      return (await Promise.resolve().then(() => (init_rental_car(), rental_car_exports))).IconRentalCar;
    case Icons.RESTROOM:
      return (await Promise.resolve().then(() => (init_restroom(), restroom_exports))).IconRestroom;
    case Icons.SECURITY_CAMERA2:
      return (await Promise.resolve().then(() => (init_security_camera2(), security_camera2_exports))).IconSecurityCamera2;
    case Icons.SECURITY_CAMERA3:
      return (await Promise.resolve().then(() => (init_security_camera3(), security_camera3_exports))).IconSecurityCamera3;
    case Icons.SECURITY_CAMERA:
      return (await Promise.resolve().then(() => (init_security_camera(), security_camera_exports))).IconSecurityCamera;
    case Icons.SECURITY_CHECK:
      return (await Promise.resolve().then(() => (init_security_check(), security_check_exports))).IconSecurityCheck;
    case Icons.SHIP:
      return (await Promise.resolve().then(() => (init_ship(), ship_exports))).IconShip;
    case Icons.SIGNPOST2:
      return (await Promise.resolve().then(() => (init_signpost2(), signpost2_exports))).IconSignpost2;
    case Icons.SIGNPOST:
      return (await Promise.resolve().then(() => (init_signpost(), signpost_exports))).IconSignpost;
    case Icons.SMOKING:
      return (await Promise.resolve().then(() => (init_smoking(), smoking_exports))).IconSmoking;
    case Icons.STAIRS_DOWN:
      return (await Promise.resolve().then(() => (init_stairs_down(), stairs_down_exports))).IconStairsDown;
    case Icons.STAIRS_UP:
      return (await Promise.resolve().then(() => (init_stairs_up(), stairs_up_exports))).IconStairsUp;
    case Icons.STAIRS:
      return (await Promise.resolve().then(() => (init_stairs(), stairs_exports))).IconStairs;
    case Icons.TAXI_STOP:
      return (await Promise.resolve().then(() => (init_taxi_stop(), taxi_stop_exports))).IconTaxiStop;
    case Icons.TAXI:
      return (await Promise.resolve().then(() => (init_taxi(), taxi_exports))).IconTaxi;
    case Icons.TRAIN_TRACK:
      return (await Promise.resolve().then(() => (init_train_track(), train_track_exports))).IconTrainTrack;
    case Icons.TRAIN:
      return (await Promise.resolve().then(() => (init_train(), train_exports))).IconTrain;
    case Icons.WALKING2:
      return (await Promise.resolve().then(() => (init_walking2(), walking2_exports))).IconWalking2;
    case Icons.WALKING:
      return (await Promise.resolve().then(() => (init_walking(), walking_exports))).IconWalking;
    case Icons.CLOUD_LIGHTNING:
      return (await Promise.resolve().then(() => (init_cloud_lightning(), cloud_lightning_exports))).IconCloudLightning;
    case Icons.CLOUD_RAIN2:
      return (await Promise.resolve().then(() => (init_cloud_rain2(), cloud_rain2_exports))).IconCloudRain2;
    case Icons.CLOUD_SMALL_RAIN:
      return (await Promise.resolve().then(() => (init_cloud_small_rain(), cloud_small_rain_exports))).IconCloudSmallRain;
    case Icons.CLOUD_SUN:
      return (await Promise.resolve().then(() => (init_cloud_sun(), cloud_sun_exports))).IconCloudSun;
    case Icons.CLOUD_THERMOMETER:
      return (await Promise.resolve().then(() => (init_cloud_thermometer(), cloud_thermometer_exports))).IconCloudThermometer;
    case Icons.CLOUD:
      return (await Promise.resolve().then(() => (init_cloud(), cloud_exports))).IconCloud;
    case Icons.LIGHT_DARK_MODE2:
      return (await Promise.resolve().then(() => (init_light_dark_mode2(), light_dark_mode2_exports))).IconLightDarkMode2;
    case Icons.LIGHT_DARK_MODE3:
      return (await Promise.resolve().then(() => (init_light_dark_mode3(), light_dark_mode3_exports))).IconLightDarkMode3;
    case Icons.LIGHTNING_FLASH:
      return (await Promise.resolve().then(() => (init_lightning_flash(), lightning_flash_exports))).IconLightningFlash;
    case Icons.MOON01:
      return (await Promise.resolve().then(() => (init_moon01(), moon01_exports))).IconMoon01;
    case Icons.MOON19:
      return (await Promise.resolve().then(() => (init_moon19(), moon19_exports))).IconMoon19;
    case Icons.MOON_DARK_MODE:
      return (await Promise.resolve().then(() => (init_moon_dark_mode(), moon_dark_mode_exports))).IconMoonDarkMode;
    case Icons.SIMPLE_SUN:
      return (await Promise.resolve().then(() => (init_simple_sun(), simple_sun_exports))).IconSimpleSun;
    case Icons.SUN2:
      return (await Promise.resolve().then(() => (init_sun2(), sun2_exports))).IconSun2;
    case Icons.SUN_LIGHT_MODE:
      return (await Promise.resolve().then(() => (init_sun_light_mode(), sun_light_mode_exports))).IconSunLightMode;
    case Icons.SUN:
      return (await Promise.resolve().then(() => (init_sun(), sun_exports))).IconSun;
    case Icons.THERMOMETER_COLD:
      return (await Promise.resolve().then(() => (init_thermometer_cold(), thermometer_cold_exports))).IconThermometerCold;
    case Icons.THERMOMETER_HOT:
      return (await Promise.resolve().then(() => (init_thermometer_hot(), thermometer_hot_exports))).IconThermometerHot;
    case Icons.THERMOMETER:
      return (await Promise.resolve().then(() => (init_thermometer(), thermometer_exports))).IconThermometer;
    default:
      return "";
  }
};
var findIt = (needle, haystack) => {
  const needles = (Array.isArray(needle) ? needle : [needle]).map((str) => str.toLowerCase());
  const haystacks = (Array.isArray(haystack) ? haystack : [haystack]).map((str) => str.toLowerCase());
  return needles.some((n) => haystacks.some((h) => h.includes(n)));
};
var iconExists = (icon) => {
  const iconKeys = Object.keys(Icons).filter((key) => isNaN(Number(key)));
  const lowerCaseKeys = iconKeys.map((key) => key.toLowerCase());
  return lowerCaseKeys.includes(icon.toLowerCase());
};
var searchIcon = (term, searchIn = void 0) => {
  const meta914 = {};
  const mergedIcons = Object.keys(Icons).map((key) => ({
    id: key,
    name: Icons[key],
    ...meta914[key]
  }));
  const searchFields = searchIn ? [searchIn] : ["name", "category", "tag", "description", "title"];
  return mergedIcons.filter(
    (icon) => searchFields.some((field) => findIt(term, icon[field]))
  );
};

// lib/meta/categories.ts
var IconCategories = [
  "Animals",
  "Arrows",
  "Interface",
  "Shapes",
  "Symbol",
  "Food & Drinks",
  "Food-Drinks",
  "Household",
  "Things",
  "Appliance",
  "Media",
  "Food",
  "Tools",
  "Kitchen",
  "Furniture",
  "Nature",
  "Plants",
  "Misc",
  "Transport",
  "Weather",
  "Industry",
  "Wayfinding",
  "Landscapes",
  "Travel",
  "Gardening",
  "Hygiene",
  "Bathroom",
  "Miscellaneous",
  "Property",
  "Symbols",
  "Finance",
  "Architecture",
  "Religion",
  "Home",
  "Product",
  "Apparel",
  "Shopping",
  "Special Characters",
  "Text",
  "Sports",
  "Accessibility",
  "Tile",
  "UI",
  "Document",
  "Emergency",
  "Medical"
];

// lib/meta/tags.ts
var IconTags = [
  "movement",
  "progress",
  "wildlife",
  "nature",
  "step",
  "walking",
  "hiking",
  "motion",
  "conservation",
  "insect",
  "beauty",
  "transformation",
  "growth",
  "wings",
  "graceful",
  "flutter",
  "symbol",
  "cat",
  "pet",
  "feline",
  "kitten",
  "whiskers",
  "cute",
  "adorable",
  "animal lover",
  "domestic",
  "mammal",
  "head",
  "playful",
  "mascot",
  "ears",
  "big eyes",
  "domestic animals",
  "meow",
  "purr",
  "fluffy",
  "aquatic",
  "marine life",
  "sea creature",
  "aquarium",
  "fishing",
  "aquatic animal",
  "underwater",
  "ocean",
  "river",
  "fish",
  "swimming",
  "water",
  "ocean life",
  "marine biology",
  "jelly",
  "tentacles",
  "marine animal",
  "seafood",
  "claws",
  "crustacean",
  "delicacy",
  "vibrant",
  "sea",
  "blowfish",
  "spiky",
  "pufferfish",
  "ocean creature",
  "star shape",
  "marine fauna",
  "marine organism",
  "marine species",
  "creature",
  "mollusk",
  "cephalopod",
  "stingray",
  "cartilaginous fish",
  "flat body",
  "barbed stinger",
  "sea ray",
  "shark",
  "reptile",
  "slow",
  "patience",
  "wisdom",
  "longevity",
  "shell",
  "animal",
  "whale",
  "marine",
  "oceanography",
  "arrow",
  "navigation",
  "direction",
  "pointer",
  "24x24",
  "icon",
  "interface",
  "graphic",
  "down",
  "corner",
  "turn",
  "angular",
  "shape",
  "left",
  "navigate",
  "back",
  "previous",
  "right",
  "up",
  "scroll",
  "point",
  "indicator",
  "web",
  "button",
  "pause",
  "stop",
  "diagonal",
  "pointing",
  "interruption",
  "termination",
  "diagonal arrow",
  "end",
  "terminating arrow",
  "arrow icon",
  "bottom-left",
  "top right",
  "bottom left",
  "split arrow",
  "top-left",
  "bottom-right",
  "tl",
  "br",
  "halt",
  "top left",
  "bottom right",
  "split",
  "user interface",
  "interaction",
  "directional",
  "transition",
  "arrow down",
  "copy",
  "duplicate",
  "downward",
  "action",
  "content",
  "move",
  "item",
  "UI",
  "scrolling",
  "download",
  "downwards",
  "file transfer",
  "data transfer",
  "corner arrow",
  "arrow head",
  "pointing down",
  "angle",
  "upward",
  "rightward",
  "arrow-headed",
  "upwards",
  "UI design",
  "graphic design",
  "moving upwards",
  "higher level",
  "progression",
  "design",
  "top-right",
  "dynamic",
  "separation",
  "division",
  "bottom",
  "top",
  "triangle",
  "arrowhead",
  "down arrow",
  "instruction",
  "decrease",
  "triangular",
  "arrow-headed-download",
  "technology",
  "internet",
  "centered",
  "focus",
  "central",
  "location",
  "guidance",
  "pointy",
  "vector",
  "inward",
  "options",
  "choice",
  "switch",
  "interface design",
  "app",
  "traffic",
  "warning",
  "sign",
  "safety",
  "Left arrow",
  "Pointing",
  "Direction",
  "Navigation",
  "Back",
  "Symbol",
  "Arrowhead",
  "Simple",
  "Minimalistic",
  "expansion",
  "zoom out",
  "external",
  "refresh",
  "reload",
  "circular motion",
  "digital design",
  "circular arrow",
  "update",
  "opposite direction",
  "loop",
  "restart",
  "circular",
  "symmetric",
  "opposite",
  "sync",
  "return",
  "revert",
  "undo",
  "website",
  "reverse",
  "forward",
  "next",
  "simple",
  "minimalist",
  "basic",
  "rotate",
  "counter-clockwise",
  "rotate icon",
  "rotation",
  "angled",
  "change",
  "previous state",
  "rotate object",
  "rotate element",
  "rounded",
  "share",
  "transfer",
  "spread",
  "communication",
  "social media",
  "networking",
  "information",
  "flowchart",
  "divergence",
  "paths",
  "splitting",
  "branching",
  "diagrams",
  "expand",
  "distribution",
  "two-way",
  "lr",
  "bidirectional",
  "exchange",
  "twoway",
  "Horizontal",
  "Two-way",
  "Arrowheads",
  "Movement",
  "Interaction",
  "Opposite directions",
  "Directional",
  "Communication",
  "vertical",
  "toggle",
  "sorting",
  "dual",
  "transport",
  "control",
  "alert",
  "upload",
  "send",
  "uploading icon",
  "center",
  "arrows",
  "inwards",
  "invert",
  "arrow left",
  "arrow right",
  "left arrow",
  "stop sign",
  "Left",
  "Previous",
  "Move",
  "Navigate",
  "Button",
  "outward",
  "renew",
  "renewal",
  "up arrow",
  "bi-directional",
  "curve",
  "back to top",
  "go to top",
  "cancel",
  "horizontal",
  "proceed",
  "clockwise",
  "spin",
  "turning",
  "reposition",
  "leftwards",
  "connection",
  "collaboration",
  "branching out",
  "directions",
  "decision",
  "separate",
  "diverge",
  "thick",
  "web design",
  "click",
  "moving",
  "thick arrow",
  "bold arrow",
  "bold",
  "icon design",
  "UX",
  "continue",
  "tall",
  "page",
  "document",
  "tall arrow",
  "move up",
  "increase",
  "Arrow",
  "Top",
  "Right",
  "Pointer",
  "Vertical",
  "Thick",
  "wide",
  "chevron",
  "shift",
  "flow",
  "swap",
  "mirror",
  "relocation",
  "position",
  "leftright",
  "right to left",
  "horizontal arrow",
  "reversible",
  "cycle",
  "collapse",
  "selection",
  "Sort",
  "Scroll",
  "UpDown",
  "User Interface",
  "elevate",
  "ascend",
  "data",
  "file",
  "connect",
  "link",
  "arrowheads",
  "interactive",
  "network",
  "disconnect",
  "remove",
  "modern",
  "sleek",
  "chevron double down",
  "reveal",
  "double arrow",
  "arrow symbol",
  "double",
  "process",
  "stacked",
  "show more",
  "dropdown",
  "menu",
  "select",
  "restaurant",
  "beverage",
  "culinary",
  "refreshment",
  "eatery",
  "bar",
  "cooking",
  "dining",
  "snack",
  "drink container",
  "liquids",
  "container",
  "hydration",
  "glassware",
  "liquid storage",
  "drinking",
  "water bottle",
  "drink containers",
  "beverages",
  "plastic bottles",
  "storage",
  "refreshments",
  "containers",
  "drinks",
  "bread slice",
  "bread",
  "slice",
  "food",
  "bakery",
  "sandwich",
  "breakfast",
  "carbohydrate",
  "toast",
  "coffee",
  "cafe",
  "morning",
  "drink",
  "hot",
  "relaxation",
  "mug",
  "brew",
  "machine",
  "brewing",
  "dispensing",
  "hot drinks",
  "home appliance",
  "office equipment",
  "coffee shop",
  "Coffee",
  "Beverage",
  "Caffeine",
  "Drink",
  "Ingredient",
  "Roasted",
  "Aroma",
  "Morning",
  "Espresso",
  "Bean",
  "alcohol",
  "drinkware",
  "liquor",
  "celebrate",
  "party",
  "luxury",
  "cocktail",
  "espresso",
  "coffee culture",
  "morning routines",
  "caffeine",
  "espresso maker",
  "Machine",
  "E61",
  "Barista",
  "Brewing",
  "Cafe",
  "Hot Beverage",
  "Bar",
  "barista",
  "hot drink",
  "kitchen appliance",
  "pistol",
  "burger",
  "fast food",
  "digital",
  "popular",
  "device",
  "hot beverage",
  "coffee maker",
  "celebration",
  "nightlife",
  "winery",
  "alarm",
  "bell",
  "notification",
  "reminder",
  "sound",
  "ringing",
  "emergency",
  "clock",
  "loud",
  "urgent",
  "attention",
  "media",
  "art supplies",
  "painting",
  "drawing",
  "creative",
  "artists",
  "crafting",
  "materials",
  "tools",
  "inspiration",
  "hobby",
  "audio waves",
  "sound waves",
  "music",
  "audio visualizer",
  "waveform",
  "song",
  "audio",
  "music player",
  "acoustic",
  "connectivity",
  "wireless",
  "smart devices",
  "short range",
  "electronics",
  "photography",
  "video recording",
  "multimedia",
  "picture",
  "film",
  "capture",
  "snapshot",
  "paste",
  "notes",
  "record",
  "save",
  "text",
  "art",
  "color selection",
  "creativity",
  "digital art",
  "palette",
  "color picker",
  "RGB",
  "color channels",
  "spectrum",
  "editing",
  "graphics",
  "visual",
  "color",
  "swatches",
  "tool",
  "artist",
  "computer",
  "desktop",
  "icons",
  "shortcuts",
  "files",
  "organization",
  "screen",
  "computing",
  "camera",
  "analog",
  "vintage",
  "photo",
  "photograph",
  "retro",
  "cinema",
  "roll",
  "video games",
  "gaming",
  "console",
  "controller",
  "joystick",
  "entertainment",
  "classic",
  "arcade",
  "leisure",
  "fun",
  "listening",
  "headset",
  "earphones",
  "devices",
  "streaming",
  "highlight",
  "mark",
  "emphasis",
  "important",
  "images",
  "artwork",
  "player",
  "portable",
  "work",
  "laptop",
  "keyboard",
  "email",
  "envelope",
  "message",
  "inbox",
  "correspondence",
  "open",
  "letter",
  "outbox",
  "contact",
  "video",
  "microphone",
  "voice command",
  "sound input",
  "messaging",
  "recording device",
  "note",
  "single",
  "melody",
  "musical",
  "tune",
  "listen",
  "nes",
  "video game",
  "buttons",
  "character",
  "yellow",
  "eating",
  "maze",
  "ghosts",
  "paint",
  "roller",
  "decoration",
  "renovation",
  "craft",
  "project",
  "flight",
  "backward",
  "skip",
  "media player",
  "rewind",
  "play",
  "skip forward",
  "fast forward",
  "advance",
  "track",
  "playlist",
  "playback",
  "pause button",
  "start",
  "media control",
  "beginning",
  "office",
  "equipment",
  "printing",
  "paper",
  "paperwork",
  "output",
  "print job",
  "record button",
  "movies",
  "videos",
  "film reel",
  "old-fashioned",
  "nostalgia",
  "projection",
  "traditional",
  "tablet",
  "landscape",
  "display",
  "touchscreen",
  "gadget",
  "television",
  "broadcast",
  "watching",
  "shows",
  "channel",
  "program",
  "code",
  "programming",
  "command",
  "developer",
  "system",
  "administrator",
  "IT",
  "recording",
  "recordings",
  "clips",
  "footage",
  "mute",
  "speaker",
  "volume",
  "adjust",
  "level",
  "sound control",
  "volume up",
  "volume down",
  "audible",
  "third level",
  "silence",
  "no sound",
  "quiet",
  "no volume",
  "volume control",
  "mute icon",
  "Internet",
  "Online",
  "Web design",
  "Digital",
  "Technology",
  "Browser",
  "Homepage",
  "URL",
  "Hyperlink",
  "Search",
  "wifi",
  "signal",
  "bars",
  "signal strength",
  "round",
  "strength",
  "AI",
  "artificial intelligence",
  "futuristic",
  "robot",
  "smart",
  "innovation",
  "mind",
  "blocked",
  "letters",
  "obstacles",
  "limitations",
  "access",
  "difficulty",
  "restrictions",
  "challenges",
  "Letters",
  "Circles",
  "Artificial intelligence",
  "Alphabet",
  "Symbolic",
  "Science",
  "merge",
  "logo",
  "typing",
  "web development",
  "virtual reality",
  "HTML",
  "framework",
  "VR experience",
  "A-Frame",
  "3D modeling",
  "web components",
  "immersive",
  "Artwork",
  "Frame",
  "Decoration",
  "Picture",
  "Gallery",
  "Display",
  "Interior design",
  "Home decor",
  "Wall art",
  "Design element",
  "cookout",
  "grill",
  "outdoor cooking",
  "picnic",
  "barbecue tools",
  "summer",
  "searing",
  "flame",
  "bathroom essentials",
  "toiletries",
  "personal care",
  "hygiene",
  "products",
  "shower",
  "bath",
  "cleanliness",
  "amenities",
  "restroom",
  "exploration",
  "adventure",
  "observation",
  "view",
  "search",
  "find",
  "zoom",
  "distance",
  "magnify",
  "optics",
  "appliance",
  "kitchen",
  "mixing",
  "blending",
  "food preparation",
  "electric",
  "motor",
  "kitchenware",
  "books",
  "shelves",
  "library",
  "home",
  "decor",
  "literature",
  "reading",
  "intelligence",
  "knowledge",
  "education",
  "science",
  "psychology",
  "medicine",
  "cognition",
  "memory",
  "branch",
  "leaves",
  "environment",
  "ecology",
  "organic",
  "tree",
  "plant",
  "extension",
  "floral",
  "botanical",
  "leaf",
  "flora",
  "foliage",
  "light bulb",
  "ideas",
  "electricity",
  "illumination",
  "energy",
  "solution",
  "invention",
  "desert",
  "succulent",
  "thorny",
  "arid climate",
  "botany",
  "camping",
  "vehicle",
  "recreation",
  "vacation",
  "holiday",
  "road trip",
  "outdoors",
  "caravan",
  "travel",
  "group",
  "journey",
  "expedition",
  "pack",
  "semiconductor",
  "microchip",
  "silicon chip",
  "processor",
  "component",
  "circuit",
  "cleaning",
  "household",
  "chores",
  "bucket",
  "soap",
  "cleanup",
  "sanitation",
  "maintenance",
  "spray",
  "cleaning product",
  "sanitize",
  "disinfect",
  "Storage",
  "Wardrobe",
  "Home",
  "Organization",
  "Room",
  "Household",
  "Clothes",
  "Shoes",
  "Personal items",
  "money",
  "wealth",
  "currency",
  "business",
  "financial",
  "savings",
  "earnings",
  "transactions",
  "finance",
  "economy",
  "orientation",
  "mapping",
  "geography",
  "north",
  "south",
  "east",
  "west",
  "geometry",
  "dimensional",
  "volumetric",
  "space",
  "perspective",
  "solid",
  "structure",
  "learning",
  "school",
  "graduation",
  "pencils",
  "study",
  "teaching",
  "lesson",
  "Factory",
  "Arm",
  "Manufacturing",
  "Production",
  "Industries",
  "Automation",
  "Machinery",
  "Assembly lines",
  "Industrial revolution",
  "factory",
  "industrial",
  "manufacturing",
  "machinery",
  "automation",
  "production",
  "assembly line",
  "conveyor belt",
  "mechanical",
  "building",
  "facility",
  "workplace",
  "biometric",
  "security",
  "authentication",
  "identification",
  "privacy",
  "scan",
  "digit",
  "unique",
  "danger",
  "exit",
  "heat",
  "emergency evacuation",
  "cooling",
  "food storage",
  "chill",
  "refrigeration",
  "fridge",
  "bed",
  "double bed",
  "bedroom",
  "furniture",
  "interior",
  "sleep",
  "cozy",
  "rest",
  "comfort",
  "king",
  "interior design",
  "home decor",
  "accommodation",
  "hotel",
  "Bed",
  "Sleep",
  "Rest",
  "Comfort",
  "Furniture",
  "Interior",
  "Decor",
  "Relaxation",
  "bedside",
  "table",
  "nightstand",
  "room",
  "chair",
  "seating",
  "furnishings",
  "living room",
  "seat",
  "furnishing",
  "comfortable",
  "style",
  "contemporary",
  "Chair",
  "Seat",
  "Sitting",
  "Living room",
  "couch",
  "lounge",
  "stylish",
  "home furnishings",
  "4-seater",
  "sofa",
  "Desk",
  "Table",
  "Wooden",
  "Office",
  "Workspace",
  "Workstation",
  "Home office",
  "Furniture ",
  "cabinet",
  "drawers",
  "wood",
  "organize",
  "analysis",
  "chart",
  "statistics",
  "graph",
  "upward trend",
  "data analysis",
  "presentation",
  "report",
  "hairdryer",
  "hair styling",
  "hair care",
  "blow dryer",
  "grooming",
  "salon",
  "hair tools",
  "hair accessories",
  "Hill",
  "Landscape",
  "Nature",
  "Scenery",
  "Outdoors",
  "Tranquility",
  "Mountains",
  "Beautiful",
  "View",
  "Background",
  "brainstorming",
  "creative thinking",
  "imagination",
  "strategy",
  "concept",
  "chimney",
  "smoke",
  "industrialization",
  "industry",
  "engineering",
  "metal",
  "material",
  "heavy",
  "silver",
  "construction",
  "iron",
  "workmanship",
  "strong",
  "cutlery",
  "utensils",
  "meal",
  "preparation",
  "silverware",
  "kitchen tools",
  "scenic",
  "mountains",
  "trees",
  "reflection",
  "serene",
  "calm",
  "relaxing",
  "panoramic",
  "green",
  "fresh",
  "plants",
  "natural",
  "soap dispenser",
  "liquid soap",
  "bathroom accessory",
  "household item",
  "body wash",
  "hand sanitizer",
  "disinfectant",
  "handwashing",
  "bathroom",
  "healthcare",
  "villa",
  "resort",
  "house",
  "estate",
  "architecture",
  "property",
  "residence",
  "real estate",
  "heating",
  "electromagnetic radiation",
  "meal prep",
  "quick",
  "convenient",
  "leftovers",
  "cash",
  "banking",
  "payment",
  "prosperity",
  "Wealth",
  "Finance",
  "Prosperity",
  "Savings",
  "Investments",
  "Business",
  "Riches",
  "Currency",
  "Earnings",
  "Cash",
  "mountain",
  "tranquility",
  "Kitchen",
  "Appliance",
  "Cooking",
  "Baking",
  "Food",
  "Heat",
  "Temperature",
  "eco-friendly",
  "freshness",
  "sustainability",
  "politician",
  "government",
  "leadership",
  "elections",
  "public speaking",
  "speech",
  "public appearance",
  "politics",
  "politician icon",
  "political event",
  "authority",
  "election",
  "official",
  "candidate",
  "decision-making",
  "launch",
  "spacecraft",
  "rocketship",
  "fast",
  "outer space",
  "window covering",
  "shades",
  "protection",
  "light filtering",
  "room decor",
  "sunlight control",
  "shield",
  "defense",
  "armor",
  "guard",
  "safeguard",
  "sentry",
  "shielding",
  "secure",
  "safe",
  "secure environment",
  "fortress",
  "shield wall",
  "armour",
  "shield logo",
  "secure icon",
  "line",
  "resilience",
  "Oven",
  "Burner",
  "Cuisine",
  "Chef",
  "surfing",
  "beach",
  "sports",
  "waves",
  "pool",
  "swim",
  "religion",
  "worship",
  "faith",
  "culture",
  "historical",
  "ancient",
  "sacred",
  "spirituality",
  "Religious",
  "Spiritual",
  "Building",
  "Worship",
  "Faith",
  "Culture",
  "Tradition",
  "Sacred",
  "Architecture",
  "Icon",
  "tent",
  "wilderness",
  "outdoor",
  "shelter",
  "campsite",
  "explore",
  "toy",
  "blocks",
  "children",
  "toys",
  "educational",
  "kids",
  "playtime",
  "childhood",
  "games",
  "colors",
  "stacking",
  "game",
  "toy head",
  "forest",
  "branches",
  "park",
  "Rustic",
  "Cozy",
  "Living space",
  "Unique",
  "Tree",
  "House",
  "Shelter",
  "Cabin",
  "Outdoor",
  "greenery",
  "scenery",
  "woodland",
  "trunk",
  "stylized",
  "minimal",
  "tree trunk",
  "forestry",
  "texture",
  "rings",
  "timber",
  "alien",
  "flying saucer",
  "science fiction",
  "extraterrestrial",
  "flying object",
  "ballot",
  "survey",
  "voting",
  "choose",
  "poll",
  "shopping",
  "pocket",
  "credit card",
  "personal belongings",
  "wallet",
  "laundry",
  "clothing",
  "fabric",
  "detergent",
  "washing",
  "electric kettle",
  "boiling water",
  "hot beverages",
  "tea",
  "instant noodles",
  "Yurt",
  "Nomadic",
  "Central Asia",
  "Portable",
  "Tent",
  "Traditional",
  "Dwelling",
  "Round",
  "Skins",
  "Felt",
  "baby stroller",
  "parenting",
  "family",
  "childcare",
  "infant",
  "baby products",
  "pram",
  "baby carriage",
  "stroller",
  "baby gear",
  "T-shirt",
  "Clothing",
  "Fashion",
  "Style",
  "Apparel",
  "Casual",
  "Wearable",
  "Garment",
  "textile",
  "fiber",
  "fashion",
  "soft",
  "gardening",
  "outdoor living",
  "home improvement",
  "landscaping",
  "flowers",
  "patio",
  "allergies",
  "sensitive skin",
  "irritation-free",
  "hypoallergenic",
  "skin care",
  "cosmetics",
  "wellness",
  "gentle",
  "no leaks",
  "leak-proof",
  "leak-resistant",
  "prevention",
  "guarantee",
  "quality",
  "repair",
  "job",
  "career",
  "briefcase",
  "luggage",
  "professional",
  "employment",
  "Bag",
  "Cart",
  "Handle",
  "Online shopping",
  "E-commerce",
  "Retail",
  "Purchase",
  "Consumerism",
  "Market",
  "Shop",
  "Store",
  "Add to cart",
  "Buy",
  "Commerce",
  "Discount",
  "Sale",
  "Offer",
  "Shopping Bag",
  "Promotion",
  "Shopping Cart",
  "Value",
  "Marketplace",
  "Shopaholic",
  "Basket",
  "Items",
  "shopping basket",
  "cart",
  "online shopping",
  "ecommerce",
  "add to cart",
  "purchase",
  "digital shopping",
  "shopping icon",
  "retail",
  "virtual basket",
  "e-commerce",
  "speedy checkout",
  "fast delivery",
  "shopping app",
  "digital commerce",
  "ecommerce website",
  "online",
  "store",
  "shop",
  "buy",
  "items",
  "price",
  "sale",
  "label",
  "product",
  "tag",
  "labels",
  "prices",
  "promotions",
  "marketing",
  "special",
  "decorative",
  "artistic",
  "distinctive",
  "baht",
  "Thai",
  "foreign exchange",
  "currency symbol",
  "Thailand",
  "dice",
  "random",
  "number",
  "one",
  "luck",
  "casino",
  "probability",
  "chance",
  "two",
  "gambling",
  "dice roll",
  "three",
  "randomness",
  "dice game",
  "board game",
  "cube",
  "rolling",
  "numeric",
  "numbers",
  "board games",
  "activity",
  "seven",
  "random number",
  "game interface",
  "nine",
  "2",
  "numeral",
  "tech",
  "Three",
  "Number",
  "Counting",
  "Digit",
  "Modern",
  "Sleek",
  "Typography",
  "Numeric",
  "four",
  "quantity",
  "value",
  "counter",
  "digital style",
  "textbox",
  "five",
  "counting",
  "six",
  "special character",
  "calculator",
  "electronic",
  "eight",
  "score",
  "typography",
  "zero",
  "dollar sign",
  "cost",
  "eurozone",
  "Europe",
  "math",
  "percentage",
  "ratio",
  "proportion",
  "pound",
  "hash",
  "number sign",
  "coding",
  "punctuation",
  "permillage",
  "concentration",
  "blood alcohol content",
  "mathematics",
  "unit",
  "measurement",
  "fraction",
  "Russia",
  "ruble",
  "Russian rubles",
  "Indian rupee",
  "INR",
  "monetary unit",
  "India",
  "monetary",
  "female",
  "gender",
  "woman",
  "feminine",
  "ladies",
  "feminist",
  "equality",
  "women's rights",
  "Male",
  "Gender",
  "Masculinity",
  "Men",
  "Man",
  "Characteristic",
  "Information",
  "Identity",
  "gender-neutral",
  "male",
  "inclusive",
  "signage",
  "unisex",
  "dots",
  "more",
  "settings",
  "actions",
  "ellipsis",
  "three dots",
  "list",
  "context menu",
  "option",
  "kebab",
  "major",
  "points",
  "special characters",
  "minor",
  "intersection",
  "elements",
  "break",
  "spacing",
  "divider",
  "lines",
  "design element",
  "eye-catching",
  "Japan",
  "currency-symbol",
  "yen",
  "Japanese",
  "Asian",
  "basketball",
  "ball",
  "sport",
  "hoop",
  "dribble",
  "team",
  "competition",
  "athlete",
  "football",
  "soccer",
  "sporting equipment",
  "team sport",
  "athletics",
  "goal",
  "rugby",
  "rugby ball",
  "sports equipment",
  "oval",
  "leather",
  "synthetic",
  "field sport",
  "contact sport",
  "tennis",
  "athleticism",
  "sportsmanship",
  "racket",
  "person",
  "accessibility",
  "circle",
  "user-friendly",
  "disabled",
  "special needs",
  "easy access",
  "universal design",
  "Person",
  "Inclusivity",
  "Disability",
  "Diversity",
  "Assistance",
  "Support",
  "User-friendly",
  "Equality",
  "Inclusive design",
  "Adaptive",
  "plus",
  "join",
  "insert",
  "create",
  "fat",
  "add",
  "append",
  "new",
  "plus sign",
  "square",
  "address",
  "username",
  "handle",
  "email address",
  "block",
  "partials",
  "sections",
  "arrange",
  "grouping",
  "board",
  "section",
  "multi-column",
  "layout",
  "dashboard",
  "boards",
  "vertical layout",
  "application",
  "multiple",
  "analytics",
  "expandable",
  "multi-directional",
  "multi",
  "columns",
  "grid",
  "panels",
  "tiles",
  "ui",
  "tabs",
  "multi-tab",
  "arrangement",
  "workspace",
  "multiply",
  "operation",
  "calculation",
  "calculators",
  "mathematical",
  "divided",
  "three columns",
  "divide",
  "partition",
  "interface element",
  "components",
  "segmented",
  "template",
  "effect",
  "element",
  "split view",
  "split screen",
  "segments",
  "subtraction",
  "delete",
  "minus",
  "deduct",
  "physical",
  "box",
  "enclosed",
  "packing",
  "inside",
  "packaging",
  "restricted",
  "context",
  "package",
  "placeholder",
  "rectangle",
  "containment",
  "child",
  "youth",
  "avatar",
  "kid",
  "profile",
  "human",
  "heartbreak",
  "sadness",
  "emotions",
  "love",
  "relationship",
  "romantic",
  "disappointment",
  "broken heart",
  "heart",
  "broken",
  "romance",
  "feelings",
  "place of worship",
  "holy",
  "Christianity",
  "religious symbol",
  "Residential",
  "Real Estate",
  "Housing",
  "Property",
  "Construction",
  "Roof",
  "dwelling",
  "commercial",
  "marketplace",
  "clickable",
  "task",
  "relationships",
  "check mark",
  "confirmation",
  "completion",
  "approval",
  "form",
  "check",
  "confirm",
  "submit",
  "approve",
  "validate",
  "edit",
  "pencil",
  "modify",
  "edit button",
  "editable",
  "exclamation mark",
  "like",
  "favorite",
  "emotion",
  "info",
  "details",
  "help",
  "tooltip",
  "informational",
  "hidden",
  "inactive",
  "unclickable",
  "ui element",
  "invisible",
  "interact",
  "unseen",
  "concealed",
  "arithmetic",
  "question mark",
  "support",
  "faq",
  "query",
  "FAQ",
  "assistance",
  "search engine",
  "magnifying glass",
  "search button",
  "search function",
  "input field",
  "search bar",
  "UI icon",
  "lookup",
  "star",
  "rating",
  "outline",
  "rate",
  "subtract",
  "calculate",
  "visible element",
  "visible",
  "graphical user interface",
  "UI element",
  "calendar",
  "date",
  "schedule",
  "appointment",
  "event",
  "planner",
  "time management",
  "deadline",
  "time",
  "tracking",
  "visualization",
  "bubbles",
  "data visualization",
  "infographic",
  "stock market",
  "investment",
  "candlestick chart",
  "charting",
  "Graph",
  "Data visualization",
  "Analytics",
  "Statistics",
  "Report",
  "Presentation",
  "Dashboard",
  "Diagram",
  "trends",
  "metrics",
  "reporting",
  "line chart",
  "plot",
  "pie",
  "tick",
  "complete",
  "confirmed",
  "success",
  "verification",
  "checkbox",
  "verified",
  "validated",
  "acceptance",
  "tasks",
  "planning",
  "progress tracking",
  "to-do list",
  "management",
  "productivity",
  "validation",
  "approved",
  "correct",
  "unknown",
  "secret",
  "mask",
  "eliminate",
  "function",
  "addition",
  "include",
  "feature",
  "emoticon",
  "illustration",
  "ui design",
  "circled",
  "completed",
  "acknowledgment",
  "pen",
  "write",
  "hazard",
  "caution",
  "error",
  "exclamation",
  "affection",
  "like button",
  "favorite button",
  "valentine",
  "heart shape",
  "question",
  "multiplication",
  "FAQs",
  "discover",
  "importance",
  "eye",
  "visibility",
  "Enclosed",
  "Highlight",
  "Emphasis",
  "Attention-grabbing",
  "Circular",
  "Outline",
  "Graphic design",
  "loading",
  "spinner",
  "animation",
  "waiting",
  "loading indicator",
  "plan",
  "hour",
  "minute",
  "second",
  "timing",
  "Code",
  "Coding",
  "Programming",
  "Development",
  "Brackets",
  "Circle",
  "Syntax",
  "Snippet",
  "Syntax Highlighting",
  "development",
  "syntax",
  "brackets",
  "code editor",
  "software",
  "coding standards",
  "chevrons",
  "nested",
  "open chevrons",
  "Commands",
  "Instructions",
  "Code Blocks",
  "Software",
  "Sequence",
  "Arrows",
  "corporate",
  "enterprise",
  "company logo",
  "branding",
  "dislike",
  "thumb down",
  "unlike",
  "reject",
  "thumbs",
  "negative",
  "feedback",
  "expression",
  "edit content",
  "document editing",
  "customize",
  "edit tool",
  "editor",
  "swirl",
  "writing",
  "edit icon",
  "simplified",
  "user",
  "minimalistic",
  "file system",
  "data management",
  "folder",
  "zip",
  "compress",
  "format",
  "archive",
  "compressed",
  "zipped",
  "binary",
  "corrupted",
  "inaccessible",
  "data loss",
  "problem",
  "depression",
  "status",
  "cloud computing",
  "backup",
  "script",
  "programming language",
  "spreadsheet",
  "revision",
  "modification",
  "notify",
  "graphs",
  "charts",
  "attachment",
  "file-heart",
  "inspection",
  "file info",
  "metadata",
  "file type",
  "information icon",
  "confidential",
  "discreet",
  "encrypted",
  "private",
  "replicate",
  "uncertainty",
  "unsuppored",
  "browse",
  "search tool",
  "searching",
  "favorite file",
  "starred",
  "marker",
  "file management",
  "File",
  "Text",
  "Document",
  "Content",
  "Page",
  "Edit",
  "Write",
  "Read",
  "documents",
  "stack",
  "tray",
  "collection",
  "records",
  "accessible",
  "visible file",
  "show",
  "directory",
  "folders",
  "Folder",
  "Broken heart",
  "Emotion",
  "Sadness",
  "Loss",
  "Sentimental",
  "User interface",
  "Folder icon",
  "Heart icon",
  "Symbol icon",
  "emotional",
  "distress",
  "loss",
  "symbolic",
  "checkmark",
  "folder icon",
  "document icon",
  "file verification",
  "folder check",
  "folder validation",
  "bulk",
  "file manager",
  "bulk delete",
  "multiple items",
  "clean up",
  "enquiry",
  "unclear",
  "confusion",
  "magnifier",
  "explorer",
  "Subtract",
  "Delete",
  "Directory",
  "Management",
  "flap",
  "contents",
  "expanded",
  "hierarchy",
  "organized",
  "digital organization",
  "people",
  "representation",
  "version control",
  "repository",
  "git",
  "workflow",
  "commit",
  "comparison",
  "difference",
  "changes",
  "queue",
  "versioning",
  "VCS",
  "merge process",
  "code changes",
  "pull request",
  "closed",
  "source code",
  "draft",
  "work in progress",
  "code review",
  "GitLab",
  "Bitbucket",
  "GitHub",
  "review",
  "source control",
  "fork",
  "small",
  "Valentine's Day",
  "dating",
  "health",
  "medical",
  "instructions",
  "notice",
  "guide",
  "advice",
  "tips",
  "explanation",
  "Hidden",
  "Inactive",
  "Concealed",
  "Invisible element",
  "Transparent",
  "Unseen",
  "Concealed feature",
  "Concealed content",
  "hide",
  "eyes",
  "conceal",
  "stealth",
  "camouflage",
  "cloaked",
  "backspace",
  "shortcut",
  "input",
  "text editing",
  "key",
  "lock",
  "press",
  "eject",
  "safely remove",
  "log out",
  "enter key",
  "setting",
  "mac",
  "preferences",
  "entry",
  "page down",
  "pagination",
  "webpage",
  "modifier",
  "tab key",
  "arrow key",
  "thumb",
  "react",
  "positive",
  "appreciation",
  "hyperlink",
  "redirect",
  "loading animation",
  "loading process",
  "loader",
  "wait",
  "loading screen",
  "sequence",
  "man",
  "masculinity",
  "widget",
  "math symbol",
  "equation",
  "algorithm",
  "computation",
  "algebra",
  "close",
  "compose",
  "write down",
  "notebook",
  "memo",
  "checked",
  "edit notes",
  "note-taking",
  "documentation",
  "edit option",
  "card",
  "additional",
  "annotate",
  "invisible note",
  "hidden information",
  "silent",
  "undisclosed",
  "note multiply",
  "notation",
  "inquiry",
  "research",
  "bookmark",
  "erase",
  "viewable",
  "sticky note",
  "comment",
  "achievement",
  "accuracy",
  "bullseye",
  "aim",
  "hit",
  "performance",
  "accomplish",
  "article",
  "blog",
  "efficiency",
  "speed",
  "optimization",
  "efficient",
  "speedometer",
  "pin",
  "gps",
  "map",
  "point of interest",
  "geo",
  "destination",
  "place",
  "clean",
  "line icon",
  "Indicator",
  "Guide",
  "Element",
  "Design",
  "crosshair",
  "cursor",
  "target",
  "hand",
  "applications",
  "websites",
  "fat style",
  "puzzle",
  "interrogation",
  "seek",
  "segment",
  "categorization",
  "segmentation",
  "gear",
  "cogwheel",
  "configuration",
  "settings menu",
  "preferences menu",
  "adjustments",
  "controls",
  "gears",
  "setup",
  "customization",
  "chat",
  "conversation",
  "dialogue",
  "bubble",
  "talk",
  "speech bubble",
  "texting",
  "comments",
  "text bubble",
  "speech balloon",
  "chatting",
  "commenting",
  "conversations",
  "messages",
  "conversation bubbles",
  "creation",
  "unhappy",
  "done",
  "selected",
  "acknowledged",
  "iconography",
  "secrecy",
  "transparency",
  "disguise",
  "Question mark",
  "Help",
  "Query",
  "Question",
  "Inquiry",
  "Sign",
  "squared",
  "functionality",
  "availability",
  "active",
  "visible option",
  "enabled",
  "equal sides",
  "certification",
  "seal",
  "fat icon",
  "star icon",
  "favorite icon",
  "rating icon",
  "rating system",
  "outlined",
  "letter m",
  "image",
  "sticker",
  "timer",
  "countdown",
  "stopwatch",
  "watch",
  "clear",
  "reduce",
  "conversation deletion",
  "sad",
  "disappointed",
  "brokenhearted",
  "discussion",
  "precision",
  "aiming",
  "concentric circles",
  "alignment",
  "formatting",
  "word processing",
  "alignment tool",
  "align",
  "paragraph",
  "text box",
  "justify",
  "text-align",
  "justification",
  "design tool",
  "text formatting",
  "adjustment",
  "order",
  "desc",
  "descending",
  "text align",
  "indentation",
  "CSS",
  "text content",
  "indent",
  "font",
  "italic",
  "strike",
  "annotation",
  "ascending",
  "alphabetic",
  "alphabetical",
  "sort",
  "alphabet",
  "text data",
  "ascending order",
  "Descending order",
  "Alphabetical",
  "List",
  "Data",
  "Arrangement",
  "descending order",
  "alphabetically",
  "numerically",
  "Z to A",
  "large to small",
  "filter",
  "text manipulation",
  "paragraphs",
  "underline",
  "font style",
  "time tracking",
  "discard",
  "bin",
  "garbage",
  "waste",
  "dispose",
  "trash",
  "trash can",
  "info icon",
  "play button",
  "geometric",
  "register",
  "sign up",
  "member",
  "account",
  "new user",
  "admin",
  "permission",
  "users",
  "social",
  "community",
  "customer",
  "login",
  "personality",
  "individual",
  "members",
  "noticeable",
  "prominent",
  "seeing",
  "see",
  "insight",
  "expose",
  "observe",
  "sight",
  "wheelchair",
  "mobility",
  "disability",
  "inclusion",
  "assistive technology",
  "diversity",
  "inclusivity",
  "handicap",
  "airport",
  "arrival",
  "airplane",
  "terminal",
  "landing",
  "wayfinding",
  "transportation",
  "visitor",
  "departures",
  "flights",
  "aircraft",
  "tourism",
  "departure",
  "airline",
  "boarding",
  "Airport",
  "Transfer",
  "Terminal",
  "Service",
  "Transportation",
  "Travel",
  "Wayfinding",
  "airport transfer",
  "shuttle",
  "airport shuttle",
  "transfer service",
  "transit",
  "pickup",
  "Water",
  "Maritime",
  "Point of interest",
  "Location",
  "Sea",
  "Ocean",
  "Sailor",
  "Boat",
  "Bicycle",
  "Surfboard",
  "Rental",
  "Station",
  "Tourism",
  "Beach",
  "Adventure",
  "Recreation",
  "bike",
  "cycling",
  "route",
  "path",
  "exercise",
  "cross",
  "unavailable",
  "service",
  "Indoor",
  "Parking",
  "Car",
  "Vehicles",
  "Directions",
  "Guidance",
  "Automobiles",
  "Garage",
  "car",
  "parking",
  "parking lot",
  "street",
  "road",
  "lot",
  "Vehicle",
  "Automobile",
  "Road",
  "Driving",
  "Car park",
  "Traffic",
  "Route",
  "changing area",
  "clothes",
  "attire",
  "dressing room",
  "locker room",
  "changing room",
  "personal space",
  "Check in",
  "Registration",
  "Marker",
  "City bus",
  "Public transportation",
  "Urban",
  "Bus stop",
  "Transit system",
  "Crossed out",
  "Canceled",
  "Unavailable",
  "Not accessible",
  "Map",
  "Destination",
  "Signage",
  "cruise",
  "ship",
  "boat",
  "nautical",
  "passenger",
  "Elevator",
  "Floor",
  "Lift",
  "Accessibility",
  "Elevator 2",
  "Indication",
  "Maps",
  "Facility",
  "Levels",
  "Escalator",
  "Down",
  "Stairs",
  "Public",
  "Public spaces",
  "Unity",
  "Togetherness",
  "Community",
  "Parents",
  "Children",
  "Safety",
  "Love",
  "Nuclear family",
  "sail",
  "vessel",
  "Emergency",
  "Equipment",
  "Extinguish",
  "Protection",
  "Fire Safety",
  "Emergency Procedure",
  "Fire Prevention",
  "First Aid",
  "burning",
  "inferno",
  "campfire",
  "Fire",
  "Hose",
  "Spray",
  "Flowing",
  "Rescue",
  "Firefighting",
  "Gravestone",
  "Cemetery",
  "Burial ground",
  "Memorial",
  "Death",
  "Tombstone",
  "Old",
  "Vintage",
  "Rest in peace",
  "Burial",
  "Funeral",
  "Headstone",
  "RIP",
  "grave",
  "tombstone",
  "memorial",
  "death",
  "burial",
  "funeral",
  "cemetery",
  "remembrance",
  "mourning",
  "headstone",
  "greeting",
  "farewell",
  "roadmap",
  "welcome",
  "Path",
  "Journey",
  "GPS",
  "Explore",
  "geolocation",
  "socialization",
  "waiting area",
  "public space",
  "hospitality",
  "luggage belt",
  "baggage claim",
  "suitcase",
  "Luggage",
  "Locker",
  "Baggage",
  "Security",
  "Railway",
  "Trolley",
  "Train station",
  "baggage",
  "trip",
  "Pinpoint",
  "Exploration",
  "Cartography",
  "Landmarks",
  "Geographical",
  "Roads",
  "Points of Interest",
  "routes",
  "pathfinding",
  "Metro",
  "Subway",
  "Public Transport",
  "Underground",
  "Transportation symbol",
  "Digital interface",
  "Wayfinding system",
  "no smoking",
  "no smoking sign",
  "cigarette free",
  "smoking ban",
  "public area",
  "prohibition",
  "Cigarette",
  "Prohibition",
  "Health",
  "Warning",
  "Rule",
  "Forbidden",
  "Smoking Ban",
  "Policy",
  "Anti-smoking",
  "palm tree",
  "island",
  "wave",
  "tropical",
  "seaside",
  "Vacation",
  "Tropical",
  "Exotic",
  "Resort",
  "Parasol",
  "Island",
  "Wave",
  "Scenic",
  "parasol",
  "sun",
  "umbrella",
  "sun protection",
  "plaster",
  "first aid",
  "healing",
  "injury",
  "treatment",
  "bandage",
  "care",
  "hospital",
  "First aid",
  "Injury",
  "Medical supplies",
  "Treatment",
  "Healthcare",
  "Medical facilities",
  "targeting",
  "mouse pointer",
  "rental",
  "hire",
  "temporary",
  "Bathroom",
  "Toilet",
  "Washroom",
  "Restroom sign",
  "Public facility",
  "Hygiene",
  "Sanitation",
  "Gender-neutral restroom",
  "Restroom icon",
  "surveillance",
  "monitoring",
  "CCTV",
  "security system",
  "watchful",
  "checkpoint",
  "security measures",
  "access control",
  "authorization",
  "secure area",
  "entry point",
  "Pathfinding",
  "Orientation",
  "smoking",
  "designated area",
  "public spaces",
  "cigarette",
  "allowed",
  "stairs",
  "lower level",
  "basement",
  "directional signage",
  "levels",
  "indoor navigation",
  "steps",
  "escalator",
  "taxi stop",
  "pick up point",
  "public transportation",
  "map icon",
  "urban travel",
  "city life",
  "taxi",
  "ride",
  "cab",
  "urban",
  "public",
  "Train",
  "Track",
  "Public transport",
  "public transport",
  "railway",
  "station",
  "public transit",
  "platform",
  "Walking",
  "Hiking",
  "Pedestrian",
  "People",
  "pedestrian",
  "cloud",
  "lightning",
  "storm",
  "thunderstorm",
  "weather",
  "forecast",
  "climate",
  "meteorology",
  "rain",
  "precipitation",
  "rainy day",
  "weather forecast",
  "sky",
  "season",
  "partly cloudy",
  "sunshine",
  "thermometer",
  "temperature",
  "light mode",
  "dark mode",
  "weather app",
  "light",
  "dark",
  "mode",
  "variation",
  "weather website",
  "flash",
  "power",
  "moon",
  "nighttime",
  "clear skies",
  "dreams",
  "night",
  "crescent moon",
  "lunar",
  "astronomy",
  "crescent",
  "clear sky",
  "daylight",
  "warmth",
  "positivity",
  "bright",
  "day",
  "sunny",
  "Sun",
  "Light mode",
  "Sunny",
  "Weather forecast",
  "Brightness",
  "Clear sky",
  "Daytime",
  "Climate",
  "Meteorology",
  "cold",
  "freezing",
  "winter",
  "chilly",
  "temperature gauge",
  "temperature icon"
];

// lib/meta/index.ts
var getMeta = async (icon) => {
  switch (icon) {
    case Icons.ANIMAL_STEP:
      return (await Promise.resolve().then(() => (init_icon_animal_step_svg(), icon_animal_step_svg_exports))).default;
    case Icons.BUTTERFLY:
      return (await Promise.resolve().then(() => (init_icon_butterfly_svg(), icon_butterfly_svg_exports))).default;
    case Icons.CAT_HEAD:
      return (await Promise.resolve().then(() => (init_icon_cat_head_svg(), icon_cat_head_svg_exports))).default;
    case Icons.CAT_HEAD2:
      return (await Promise.resolve().then(() => (init_icon_cat_head2_svg(), icon_cat_head2_svg_exports))).default;
    case Icons.CAT:
      return (await Promise.resolve().then(() => (init_icon_cat_svg(), icon_cat_svg_exports))).default;
    case Icons.CAT2:
      return (await Promise.resolve().then(() => (init_icon_cat2_svg(), icon_cat2_svg_exports))).default;
    case Icons.CAT3:
      return (await Promise.resolve().then(() => (init_icon_cat3_svg(), icon_cat3_svg_exports))).default;
    case Icons.FISH:
      return (await Promise.resolve().then(() => (init_icon_fish_svg(), icon_fish_svg_exports))).default;
    case Icons.FISH2:
      return (await Promise.resolve().then(() => (init_icon_fish2_svg(), icon_fish2_svg_exports))).default;
    case Icons.JELLYFISH:
      return (await Promise.resolve().then(() => (init_icon_jellyfish_svg(), icon_jellyfish_svg_exports))).default;
    case Icons.LOBSTER:
      return (await Promise.resolve().then(() => (init_icon_lobster_svg(), icon_lobster_svg_exports))).default;
    case Icons.PUFFERFISH:
      return (await Promise.resolve().then(() => (init_icon_pufferfish_svg(), icon_pufferfish_svg_exports))).default;
    case Icons.SEA_STAR:
      return (await Promise.resolve().then(() => (init_icon_sea_star_svg(), icon_sea_star_svg_exports))).default;
    case Icons.SQUID:
      return (await Promise.resolve().then(() => (init_icon_squid_svg(), icon_squid_svg_exports))).default;
    case Icons.STINGRAY:
      return (await Promise.resolve().then(() => (init_icon_stingray_svg(), icon_stingray_svg_exports))).default;
    case Icons.TURTLE:
      return (await Promise.resolve().then(() => (init_icon_turtle_svg(), icon_turtle_svg_exports))).default;
    case Icons.WHALE:
      return (await Promise.resolve().then(() => (init_icon_whale_svg(), icon_whale_svg_exports))).default;
    case Icons.ICON24:
      return (await Promise.resolve().then(() => (init_icon_24_svg(), icon_24_svg_exports))).default;
    case Icons.ARROW_CORNER_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_corner_down_svg(), icon_arrow_corner_down_svg_exports))).default;
    case Icons.ARROW_CORNER_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_corner_left_svg(), icon_arrow_corner_left_svg_exports))).default;
    case Icons.ARROW_CORNER_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_corner_right_svg(), icon_arrow_corner_right_svg_exports))).default;
    case Icons.ARROW_CORNER_UP:
      return (await Promise.resolve().then(() => (init_icon_arrow_corner_up_svg(), icon_arrow_corner_up_svg_exports))).default;
    case Icons.ARROW_DIAGONAL_BL_TR_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_diagonal_bl_tr_stop_svg(), icon_arrow_diagonal_bl_tr_stop_svg_exports))).default;
    case Icons.ARROW_DIAGONAL_BR_TL_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_diagonal_br_tl_stop_svg(), icon_arrow_diagonal_br_tl_stop_svg_exports))).default;
    case Icons.ARROW_DIAGONAL_IN_LT_BR:
      return (await Promise.resolve().then(() => (init_icon_arrow_diagonal_in_lt_br_svg(), icon_arrow_diagonal_in_lt_br_svg_exports))).default;
    case Icons.ARROW_DIAGONAL_IN_TR_BL:
      return (await Promise.resolve().then(() => (init_icon_arrow_diagonal_in_tr_bl_svg(), icon_arrow_diagonal_in_tr_bl_svg_exports))).default;
    case Icons.ARROW_DIAGONAL_TL_BR_SPLIT:
      return (await Promise.resolve().then(() => (init_icon_arrow_diagonal_tl_br_split_svg(), icon_arrow_diagonal_tl_br_split_svg_exports))).default;
    case Icons.ARROW_DIAGONAL_TL_BR_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_diagonal_tl_br_stop_svg(), icon_arrow_diagonal_tl_br_stop_svg_exports))).default;
    case Icons.ARROW_DIAGONAL_TL_BR:
      return (await Promise.resolve().then(() => (init_icon_arrow_diagonal_tl_br_svg(), icon_arrow_diagonal_tl_br_svg_exports))).default;
    case Icons.ARROW_DIAGONAL_TR_BL_SPLIT:
      return (await Promise.resolve().then(() => (init_icon_arrow_diagonal_tr_bl_split_svg(), icon_arrow_diagonal_tr_bl_split_svg_exports))).default;
    case Icons.ARROW_DIAGONAL_TR_BL_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_diagonal_tr_bl_stop_svg(), icon_arrow_diagonal_tr_bl_stop_svg_exports))).default;
    case Icons.ARROW_DIAGONAL_TR_BL:
      return (await Promise.resolve().then(() => (init_icon_arrow_diagonal_tr_bl_svg(), icon_arrow_diagonal_tr_bl_svg_exports))).default;
    case Icons.ARROW_DOWN_COPY:
      return (await Promise.resolve().then(() => (init_icon_arrow_down_copy_svg(), icon_arrow_down_copy_svg_exports))).default;
    case Icons.ARROW_DOWN_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_down_left_svg(), icon_arrow_down_left_svg_exports))).default;
    case Icons.ARROW_DOWN_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_down_right_svg(), icon_arrow_down_right_svg_exports))).default;
    case Icons.ARROW_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_down_svg(), icon_arrow_down_svg_exports))).default;
    case Icons.ARROW_DOWNLOAD:
      return (await Promise.resolve().then(() => (init_icon_arrow_download_svg(), icon_arrow_download_svg_exports))).default;
    case Icons.ARROW_HEADED_CORNER_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_corner_down_svg(), icon_arrow_headed_corner_down_svg_exports))).default;
    case Icons.ARROW_HEADED_CORNER_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_corner_left_svg(), icon_arrow_headed_corner_left_svg_exports))).default;
    case Icons.ARROW_HEADED_CORNER_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_corner_right_svg(), icon_arrow_headed_corner_right_svg_exports))).default;
    case Icons.ARROW_HEADED_CORNER_UP:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_corner_up_svg(), icon_arrow_headed_corner_up_svg_exports))).default;
    case Icons.ARROW_HEADED_DIAGONAL_BL_TR_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_diagonal_bl_tr_stop_svg(), icon_arrow_headed_diagonal_bl_tr_stop_svg_exports))).default;
    case Icons.ARROW_HEADED_DIAGONAL_BR_TL_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_diagonal_br_tl_stop_svg(), icon_arrow_headed_diagonal_br_tl_stop_svg_exports))).default;
    case Icons.ARROW_HEADED_DIAGONAL_IN_LT_BR:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_diagonal_in_lt_br_svg(), icon_arrow_headed_diagonal_in_lt_br_svg_exports))).default;
    case Icons.ARROW_HEADED_DIAGONAL_IN_TR_BL:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_diagonal_in_tr_bl_svg(), icon_arrow_headed_diagonal_in_tr_bl_svg_exports))).default;
    case Icons.ARROW_HEADED_DIAGONAL_TL_BR_SPLIT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_diagonal_tl_br_split_svg(), icon_arrow_headed_diagonal_tl_br_split_svg_exports))).default;
    case Icons.ARROW_HEADED_DIAGONAL_TL_BR_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_diagonal_tl_br_stop_svg(), icon_arrow_headed_diagonal_tl_br_stop_svg_exports))).default;
    case Icons.ARROW_HEADED_DIAGONAL_TL_BR:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_diagonal_tl_br_svg(), icon_arrow_headed_diagonal_tl_br_svg_exports))).default;
    case Icons.ARROW_HEADED_DIAGONAL_TR_BL_SPLIT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_diagonal_tr_bl_split_svg(), icon_arrow_headed_diagonal_tr_bl_split_svg_exports))).default;
    case Icons.ARROW_HEADED_DIAGONAL_TR_BL_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_diagonal_tr_bl_stop_svg(), icon_arrow_headed_diagonal_tr_bl_stop_svg_exports))).default;
    case Icons.ARROW_HEADED_DIAGONAL_TR_BL:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_diagonal_tr_bl_svg(), icon_arrow_headed_diagonal_tr_bl_svg_exports))).default;
    case Icons.ARROW_HEADED_DOWN_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_down_left_svg(), icon_arrow_headed_down_left_svg_exports))).default;
    case Icons.ARROW_HEADED_DOWN_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_down_right_svg(), icon_arrow_headed_down_right_svg_exports))).default;
    case Icons.ARROW_HEADED_DOWN_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_down_stop_svg(), icon_arrow_headed_down_stop_svg_exports))).default;
    case Icons.ARROW_HEADED_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_down_svg(), icon_arrow_headed_down_svg_exports))).default;
    case Icons.ARROW_HEADED_DOWNLOAD:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_download_svg(), icon_arrow_headed_download_svg_exports))).default;
    case Icons.ARROW_HEADED_IN_CENTER:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_in_center_svg(), icon_arrow_headed_in_center_svg_exports))).default;
    case Icons.ARROW_HEADED_IN_DIAGONAL:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_in_diagonal_svg(), icon_arrow_headed_in_diagonal_svg_exports))).default;
    case Icons.ARROW_HEADED_IN:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_in_svg(), icon_arrow_headed_in_svg_exports))).default;
    case Icons.ARROW_HEADED_LEFT_RIGHT_SPLIT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_left_right_split_svg(), icon_arrow_headed_left_right_split_svg_exports))).default;
    case Icons.ARROW_HEADED_LEFT_RIGHT_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_left_right_stop_svg(), icon_arrow_headed_left_right_stop_svg_exports))).default;
    case Icons.ARROW_HEADED_LEFT_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_left_right_svg(), icon_arrow_headed_left_right_svg_exports))).default;
    case Icons.ARROW_HEADED_LEFT_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_left_stop_svg(), icon_arrow_headed_left_stop_svg_exports))).default;
    case Icons.ARROW_HEADED_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_left_svg(), icon_arrow_headed_left_svg_exports))).default;
    case Icons.ARROW_HEADED_OUT_CENTER:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_out_center_svg(), icon_arrow_headed_out_center_svg_exports))).default;
    case Icons.ARROW_HEADED_RELOAD_DOWN_UP:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_reload_down_up_svg(), icon_arrow_headed_reload_down_up_svg_exports))).default;
    case Icons.ARROW_HEADED_RELOAD_LEFT_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_reload_left_right_svg(), icon_arrow_headed_reload_left_right_svg_exports))).default;
    case Icons.ARROW_HEADED_RELOAD_RIGHT_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_reload_right_left_svg(), icon_arrow_headed_reload_right_left_svg_exports))).default;
    case Icons.ARROW_HEADED_RELOAD_UP_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_reload_up_down_svg(), icon_arrow_headed_reload_up_down_svg_exports))).default;
    case Icons.ARROW_HEADED_RETURN_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_return_down_svg(), icon_arrow_headed_return_down_svg_exports))).default;
    case Icons.ARROW_HEADED_RETURN_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_return_left_svg(), icon_arrow_headed_return_left_svg_exports))).default;
    case Icons.ARROW_HEADED_RETURN_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_return_right_svg(), icon_arrow_headed_return_right_svg_exports))).default;
    case Icons.ARROW_HEADED_RETURN_UP:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_return_up_svg(), icon_arrow_headed_return_up_svg_exports))).default;
    case Icons.ARROW_HEADED_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_right_svg(), icon_arrow_headed_right_svg_exports))).default;
    case Icons.ARROW_HEADED_ROTATE_BOTTOM_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_rotate_bottom_left_svg(), icon_arrow_headed_rotate_bottom_left_svg_exports))).default;
    case Icons.ARROW_HEADED_ROTATE_BOTTOM_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_rotate_bottom_right_svg(), icon_arrow_headed_rotate_bottom_right_svg_exports))).default;
    case Icons.ARROW_HEADED_ROTATE_TOP_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_rotate_top_left_svg(), icon_arrow_headed_rotate_top_left_svg_exports))).default;
    case Icons.ARROW_HEADED_ROTATE_TOP_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_rotate_top_right_svg(), icon_arrow_headed_rotate_top_right_svg_exports))).default;
    case Icons.ARROW_HEADED_ROUNDED_LEFT_UP:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_rounded_left_up_svg(), icon_arrow_headed_rounded_left_up_svg_exports))).default;
    case Icons.ARROW_HEADED_ROUNDED_RIGHT_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_rounded_right_down_svg(), icon_arrow_headed_rounded_right_down_svg_exports))).default;
    case Icons.ARROW_HEADED_ROUNDED_RIGHT_UP:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_rounded_right_up_svg(), icon_arrow_headed_rounded_right_up_svg_exports))).default;
    case Icons.ARROW_HEADED_ROUNED_LEFT_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_rouned_left_down_svg(), icon_arrow_headed_rouned_left_down_svg_exports))).default;
    case Icons.ARROW_HEADED_SHARE:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_share_svg(), icon_arrow_headed_share_svg_exports))).default;
    case Icons.ARROW_HEADED_SPREAD_SPLIT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_spread_split_svg(), icon_arrow_headed_spread_split_svg_exports))).default;
    case Icons.ARROW_HEADED_SPREAD:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_spread_svg(), icon_arrow_headed_spread_svg_exports))).default;
    case Icons.ARROW_HEADED_TWOWAY_DIAGONAL_LR:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_twoway_diagonal_lr_svg(), icon_arrow_headed_twoway_diagonal_lr_svg_exports))).default;
    case Icons.ARROW_HEADED_TWOWAY_DIAGONAL_RL:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_twoway_diagonal_rl_svg(), icon_arrow_headed_twoway_diagonal_rl_svg_exports))).default;
    case Icons.ARROW_HEADED_TWOWAY_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_twoway_horizontal_svg(), icon_arrow_headed_twoway_horizontal_svg_exports))).default;
    case Icons.ARROW_HEADED_TWOWAY_VERTICAL:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_twoway_vertical_svg(), icon_arrow_headed_twoway_vertical_svg_exports))).default;
    case Icons.ARROW_HEADED_UP_DOWN_SPLIT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_up_down_split_svg(), icon_arrow_headed_up_down_split_svg_exports))).default;
    case Icons.ARROW_HEADED_UP_DOWN_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_up_down_stop_svg(), icon_arrow_headed_up_down_stop_svg_exports))).default;
    case Icons.ARROW_HEADED_UP_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_up_down_svg(), icon_arrow_headed_up_down_svg_exports))).default;
    case Icons.ARROW_HEADED_UP_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_up_left_svg(), icon_arrow_headed_up_left_svg_exports))).default;
    case Icons.ARROW_HEADED_UP_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_up_right_svg(), icon_arrow_headed_up_right_svg_exports))).default;
    case Icons.ARROW_HEADED_UP_STOP76:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_up_stop_76_svg(), icon_arrow_headed_up_stop_76_svg_exports))).default;
    case Icons.ARROW_HEADED_UP_STOP78:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_up_stop_78_svg(), icon_arrow_headed_up_stop_78_svg_exports))).default;
    case Icons.ARROW_HEADED_UP:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_up_svg(), icon_arrow_headed_up_svg_exports))).default;
    case Icons.ARROW_HEADED_UPLOAD:
      return (await Promise.resolve().then(() => (init_icon_arrow_headed_upload_svg(), icon_arrow_headed_upload_svg_exports))).default;
    case Icons.ARROW_IN_CENTER:
      return (await Promise.resolve().then(() => (init_icon_arrow_in_center_svg(), icon_arrow_in_center_svg_exports))).default;
    case Icons.ARROW_INVERT:
      return (await Promise.resolve().then(() => (init_icon_arrow_invert_svg(), icon_arrow_invert_svg_exports))).default;
    case Icons.ARROW_LEFT_RIGHT_SPLIT:
      return (await Promise.resolve().then(() => (init_icon_arrow_left_right_split_svg(), icon_arrow_left_right_split_svg_exports))).default;
    case Icons.ARROW_LEFT_RIGHT_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_left_right_stop_svg(), icon_arrow_left_right_stop_svg_exports))).default;
    case Icons.ARROW_LEFT_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_left_right_svg(), icon_arrow_left_right_svg_exports))).default;
    case Icons.ARROW_LEFT_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_left_stop_svg(), icon_arrow_left_stop_svg_exports))).default;
    case Icons.ARROW_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_left_svg(), icon_arrow_left_svg_exports))).default;
    case Icons.ARROW_OUT_CENTER:
      return (await Promise.resolve().then(() => (init_icon_arrow_out_center_svg(), icon_arrow_out_center_svg_exports))).default;
    case Icons.ARROW_RELOAD_DOWN_UP:
      return (await Promise.resolve().then(() => (init_icon_arrow_reload_down_up_svg(), icon_arrow_reload_down_up_svg_exports))).default;
    case Icons.ARROW_RELOAD_LEFT_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_reload_left_right_svg(), icon_arrow_reload_left_right_svg_exports))).default;
    case Icons.ARROW_RELOAD_RIGHT_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_reload_right_left_svg(), icon_arrow_reload_right_left_svg_exports))).default;
    case Icons.ARROW_RELOAD_UP_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_reload_up_down_svg(), icon_arrow_reload_up_down_svg_exports))).default;
    case Icons.ARROW_RETURN_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_return_down_svg(), icon_arrow_return_down_svg_exports))).default;
    case Icons.ARROW_RETURN_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_return_left_svg(), icon_arrow_return_left_svg_exports))).default;
    case Icons.ARROW_RETURN_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_return_right_svg(), icon_arrow_return_right_svg_exports))).default;
    case Icons.ARROW_RETURN_UP:
      return (await Promise.resolve().then(() => (init_icon_arrow_return_up_svg(), icon_arrow_return_up_svg_exports))).default;
    case Icons.ARROW_RIGHT_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_right_stop_svg(), icon_arrow_right_stop_svg_exports))).default;
    case Icons.ARROW_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_right_svg(), icon_arrow_right_svg_exports))).default;
    case Icons.ARROW_ROATE_BOTTOM_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_roate_bottom_right_svg(), icon_arrow_roate_bottom_right_svg_exports))).default;
    case Icons.ARROW_ROTATE_BOTTOM_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_rotate_bottom_left_svg(), icon_arrow_rotate_bottom_left_svg_exports))).default;
    case Icons.ARROW_ROTATE_TOP_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_rotate_top_left_svg(), icon_arrow_rotate_top_left_svg_exports))).default;
    case Icons.ARROW_ROTATE_TOP_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_rotate_top_right_svg(), icon_arrow_rotate_top_right_svg_exports))).default;
    case Icons.ARROW_ROUNDED_LEFT_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_rounded_left_down_svg(), icon_arrow_rounded_left_down_svg_exports))).default;
    case Icons.ARROW_ROUNDED_LEFT_UP:
      return (await Promise.resolve().then(() => (init_icon_arrow_rounded_left_up_svg(), icon_arrow_rounded_left_up_svg_exports))).default;
    case Icons.ARROW_ROUNDED_RIGHT_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_rounded_right_down_svg(), icon_arrow_rounded_right_down_svg_exports))).default;
    case Icons.ARROW_ROUNDED_RIGHT_UP:
      return (await Promise.resolve().then(() => (init_icon_arrow_rounded_right_up_svg(), icon_arrow_rounded_right_up_svg_exports))).default;
    case Icons.ARROW_SHARE:
      return (await Promise.resolve().then(() => (init_icon_arrow_share_svg(), icon_arrow_share_svg_exports))).default;
    case Icons.ARROW_SPREAD_SPLIT:
      return (await Promise.resolve().then(() => (init_icon_arrow_spread_split_svg(), icon_arrow_spread_split_svg_exports))).default;
    case Icons.ARROW_SPREAD:
      return (await Promise.resolve().then(() => (init_icon_arrow_spread_svg(), icon_arrow_spread_svg_exports))).default;
    case Icons.ARROW_THICK_BOTTOM_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_bottom_left_svg(), icon_arrow_thick_bottom_left_svg_exports))).default;
    case Icons.ARROW_THICK_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_down_svg(), icon_arrow_thick_down_svg_exports))).default;
    case Icons.ARROW_THICK_LEFT_TOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_left_top_svg(), icon_arrow_thick_left_top_svg_exports))).default;
    case Icons.ARROW_THICK_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_left_svg(), icon_arrow_thick_left_svg_exports))).default;
    case Icons.ARROW_THICK_RIGHT_BOTTOM:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_right_bottom_svg(), icon_arrow_thick_right_bottom_svg_exports))).default;
    case Icons.ARROW_THICK_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_right_svg(), icon_arrow_thick_right_svg_exports))).default;
    case Icons.ARROW_THICK_TALL_BOTTOM_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_tall_bottom_left_svg(), icon_arrow_thick_tall_bottom_left_svg_exports))).default;
    case Icons.ARROW_THICK_TALL_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_tall_down_svg(), icon_arrow_thick_tall_down_svg_exports))).default;
    case Icons.ARROW_THICK_TALL_LEFT_TOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_tall_left_top_svg(), icon_arrow_thick_tall_left_top_svg_exports))).default;
    case Icons.ARROW_THICK_TALL_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_tall_left_svg(), icon_arrow_thick_tall_left_svg_exports))).default;
    case Icons.ARROW_THICK_TALL_RIGHT_BOTTOM:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_tall_right_bottom_svg(), icon_arrow_thick_tall_right_bottom_svg_exports))).default;
    case Icons.ARROW_THICK_TALL_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_tall_right_svg(), icon_arrow_thick_tall_right_svg_exports))).default;
    case Icons.ARROW_THICK_TALL_TOP_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_tall_top_right_svg(), icon_arrow_thick_tall_top_right_svg_exports))).default;
    case Icons.ARROW_THICK_TALL_UP:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_tall_up_svg(), icon_arrow_thick_tall_up_svg_exports))).default;
    case Icons.ARROW_THICK_TOP_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_top_right_svg(), icon_arrow_thick_top_right_svg_exports))).default;
    case Icons.ARROW_THICK_UP:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_up_svg(), icon_arrow_thick_up_svg_exports))).default;
    case Icons.ARROW_THICK_WIDE_BOTTOM_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_wide_bottom_left_svg(), icon_arrow_thick_wide_bottom_left_svg_exports))).default;
    case Icons.ARROW_THICK_WIDE_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_wide_down_svg(), icon_arrow_thick_wide_down_svg_exports))).default;
    case Icons.ARROW_THICK_WIDE_LEFT_TOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_wide_left_top_svg(), icon_arrow_thick_wide_left_top_svg_exports))).default;
    case Icons.ARROW_THICK_WIDE_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_wide_left_svg(), icon_arrow_thick_wide_left_svg_exports))).default;
    case Icons.ARROW_THICK_WIDE_RIGHT_BOTTOM:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_wide_right_bottom_svg(), icon_arrow_thick_wide_right_bottom_svg_exports))).default;
    case Icons.ARROW_THICK_WIDE_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_wide_right_svg(), icon_arrow_thick_wide_right_svg_exports))).default;
    case Icons.ARROW_THICK_WIDE_TOP_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_wide_top_right_svg(), icon_arrow_thick_wide_top_right_svg_exports))).default;
    case Icons.ARROW_THICK_WIDE_UP:
      return (await Promise.resolve().then(() => (init_icon_arrow_thick_wide_up_svg(), icon_arrow_thick_wide_up_svg_exports))).default;
    case Icons.ARROW_TRANSFER_BL_TR:
      return (await Promise.resolve().then(() => (init_icon_arrow_transfer_bl_tr_svg(), icon_arrow_transfer_bl_tr_svg_exports))).default;
    case Icons.ARROW_TRANSFER_LEFT_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_transfer_left_right_svg(), icon_arrow_transfer_left_right_svg_exports))).default;
    case Icons.ARROW_TRANSFER_LT_BR:
      return (await Promise.resolve().then(() => (init_icon_arrow_transfer_lt_br_svg(), icon_arrow_transfer_lt_br_svg_exports))).default;
    case Icons.ARROW_TRANSFER_UP_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_transfer_up_down_svg(), icon_arrow_transfer_up_down_svg_exports))).default;
    case Icons.ARROW_TWOWAY_DIAGONAL_LR:
      return (await Promise.resolve().then(() => (init_icon_arrow_twoway_diagonal_lr_svg(), icon_arrow_twoway_diagonal_lr_svg_exports))).default;
    case Icons.ARROW_TWOWAY_DIAGONAL_RL:
      return (await Promise.resolve().then(() => (init_icon_arrow_twoway_diagonal_rl_svg(), icon_arrow_twoway_diagonal_rl_svg_exports))).default;
    case Icons.ARROW_TWOWAY_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_icon_arrow_twoway_horizontal_svg(), icon_arrow_twoway_horizontal_svg_exports))).default;
    case Icons.ARROW_TWOWAY_VERTICAL:
      return (await Promise.resolve().then(() => (init_icon_arrow_twoway_vertical_svg(), icon_arrow_twoway_vertical_svg_exports))).default;
    case Icons.ARROW_UP_COPY:
      return (await Promise.resolve().then(() => (init_icon_arrow_up_copy_svg(), icon_arrow_up_copy_svg_exports))).default;
    case Icons.ARROW_UP_DOWN_SPLIT:
      return (await Promise.resolve().then(() => (init_icon_arrow_up_down_split_svg(), icon_arrow_up_down_split_svg_exports))).default;
    case Icons.ARROW_UP_DOWN_STOP:
      return (await Promise.resolve().then(() => (init_icon_arrow_up_down_stop_svg(), icon_arrow_up_down_stop_svg_exports))).default;
    case Icons.ARROW_UP_DOWN:
      return (await Promise.resolve().then(() => (init_icon_arrow_up_down_svg(), icon_arrow_up_down_svg_exports))).default;
    case Icons.ARROW_UP_LEFT:
      return (await Promise.resolve().then(() => (init_icon_arrow_up_left_svg(), icon_arrow_up_left_svg_exports))).default;
    case Icons.ARROW_UP_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_arrow_up_right_svg(), icon_arrow_up_right_svg_exports))).default;
    case Icons.ARROW_UP:
      return (await Promise.resolve().then(() => (init_icon_arrow_up_svg(), icon_arrow_up_svg_exports))).default;
    case Icons.ARROW_UPLOAD:
      return (await Promise.resolve().then(() => (init_icon_arrow_upload_svg(), icon_arrow_upload_svg_exports))).default;
    case Icons.CHEVRON_CONNECT2:
      return (await Promise.resolve().then(() => (init_icon_chevron_connect_2_svg(), icon_chevron_connect_2_svg_exports))).default;
    case Icons.CHEVRON_CONNECT:
      return (await Promise.resolve().then(() => (init_icon_chevron_connect_svg(), icon_chevron_connect_svg_exports))).default;
    case Icons.CHEVRON_DISCONNECT2:
      return (await Promise.resolve().then(() => (init_icon_chevron_disconnect_2_svg(), icon_chevron_disconnect_2_svg_exports))).default;
    case Icons.CHEVRON_DISCONNECT:
      return (await Promise.resolve().then(() => (init_icon_chevron_disconnect_svg(), icon_chevron_disconnect_svg_exports))).default;
    case Icons.CHEVRON_DOUBLE_DOWN:
      return (await Promise.resolve().then(() => (init_icon_chevron_double_down_svg(), icon_chevron_double_down_svg_exports))).default;
    case Icons.CHEVRON_DOUBLE_LEFT:
      return (await Promise.resolve().then(() => (init_icon_chevron_double_left_svg(), icon_chevron_double_left_svg_exports))).default;
    case Icons.CHEVRON_DOUBLE_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_chevron_double_right_svg(), icon_chevron_double_right_svg_exports))).default;
    case Icons.CHEVRON_DOUBLE_UP:
      return (await Promise.resolve().then(() => (init_icon_chevron_double_up_svg(), icon_chevron_double_up_svg_exports))).default;
    case Icons.CHEVRON_DOWN:
      return (await Promise.resolve().then(() => (init_icon_chevron_down_svg(), icon_chevron_down_svg_exports))).default;
    case Icons.CHEVRON_LEFT:
      return (await Promise.resolve().then(() => (init_icon_chevron_left_svg(), icon_chevron_left_svg_exports))).default;
    case Icons.CHEVRON_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_chevron_right_svg(), icon_chevron_right_svg_exports))).default;
    case Icons.CHEVRON_UP:
      return (await Promise.resolve().then(() => (init_icon_chevron_up_svg(), icon_chevron_up_svg_exports))).default;
    case Icons.ICON01:
      return (await Promise.resolve().then(() => (init_icon_01_svg(), icon_01_svg_exports))).default;
    case Icons.BOTTLE:
      return (await Promise.resolve().then(() => (init_icon_bottle_svg(), icon_bottle_svg_exports))).default;
    case Icons.BOTTLES:
      return (await Promise.resolve().then(() => (init_icon_bottles_svg(), icon_bottles_svg_exports))).default;
    case Icons.BREAD_SLICE:
      return (await Promise.resolve().then(() => (init_icon_bread_slice_svg(), icon_bread_slice_svg_exports))).default;
    case Icons.COFFEE_CUP:
      return (await Promise.resolve().then(() => (init_icon_coffee_cup_svg(), icon_coffee_cup_svg_exports))).default;
    case Icons.COFFEE_MACHINE:
      return (await Promise.resolve().then(() => (init_icon_coffee_machine_svg(), icon_coffee_machine_svg_exports))).default;
    case Icons.COFFEE_BEANS:
      return (await Promise.resolve().then(() => (init_icon_coffee_beans_svg(), icon_coffee_beans_svg_exports))).default;
    case Icons.COGNAC_GLASS:
      return (await Promise.resolve().then(() => (init_icon_cognac_glass_svg(), icon_cognac_glass_svg_exports))).default;
    case Icons.ESPRESS_MACHINE2:
      return (await Promise.resolve().then(() => (init_icon_espress_machine_2_svg(), icon_espress_machine_2_svg_exports))).default;
    case Icons.ESPRESSO_MACHINE_E61:
      return (await Promise.resolve().then(() => (init_icon_espresso_machine_e61_svg(), icon_espresso_machine_e61_svg_exports))).default;
    case Icons.ESPRESSO_MACHINE:
      return (await Promise.resolve().then(() => (init_icon_espresso_machine_svg(), icon_espresso_machine_svg_exports))).default;
    case Icons.ESPRESSO_PISTOL:
      return (await Promise.resolve().then(() => (init_icon_espresso_pistol_svg(), icon_espresso_pistol_svg_exports))).default;
    case Icons.HAMBURGER:
      return (await Promise.resolve().then(() => (init_icon_hamburger_svg(), icon_hamburger_svg_exports))).default;
    case Icons.PERCULATOR:
      return (await Promise.resolve().then(() => (init_icon_perculator_svg(), icon_perculator_svg_exports))).default;
    case Icons.WINE_GLASS:
      return (await Promise.resolve().then(() => (init_icon_wine_glass_svg(), icon_wine_glass_svg_exports))).default;
    case Icons.ALARM_BELL2:
      return (await Promise.resolve().then(() => (init_icon_alarm_bell_2_svg(), icon_alarm_bell_2_svg_exports))).default;
    case Icons.ALARM_BELL3:
      return (await Promise.resolve().then(() => (init_icon_alarm_bell_3_svg(), icon_alarm_bell_3_svg_exports))).default;
    case Icons.ALARM_BELL:
      return (await Promise.resolve().then(() => (init_icon_alarm_bell_svg(), icon_alarm_bell_svg_exports))).default;
    case Icons.ART_SUPPLIES:
      return (await Promise.resolve().then(() => (init_icon_art_supplies_svg(), icon_art_supplies_svg_exports))).default;
    case Icons.AUDIO_WAVES:
      return (await Promise.resolve().then(() => (init_icon_audio_waves_svg(), icon_audio_waves_svg_exports))).default;
    case Icons.BLUETOOTH:
      return (await Promise.resolve().then(() => (init_icon_bluetooth_svg(), icon_bluetooth_svg_exports))).default;
    case Icons.CAMERA:
      return (await Promise.resolve().then(() => (init_icon_camera_svg(), icon_camera_svg_exports))).default;
    case Icons.CLIPBOARD:
      return (await Promise.resolve().then(() => (init_icon_clipboard_svg(), icon_clipboard_svg_exports))).default;
    case Icons.COLOR_PALLETTE:
      return (await Promise.resolve().then(() => (init_icon_color_pallette_svg(), icon_color_pallette_svg_exports))).default;
    case Icons.COLOR_RGB:
      return (await Promise.resolve().then(() => (init_icon_color_rgb_svg(), icon_color_rgb_svg_exports))).default;
    case Icons.COLOR_SWATCHES:
      return (await Promise.resolve().then(() => (init_icon_color_swatches_svg(), icon_color_swatches_svg_exports))).default;
    case Icons.DESKTOP:
      return (await Promise.resolve().then(() => (init_icon_desktop_svg(), icon_desktop_svg_exports))).default;
    case Icons.FILMROLL:
      return (await Promise.resolve().then(() => (init_icon_filmroll_svg(), icon_filmroll_svg_exports))).default;
    case Icons.GAMEPAD_CLASSIC:
      return (await Promise.resolve().then(() => (init_icon_gamepad_classic_svg(), icon_gamepad_classic_svg_exports))).default;
    case Icons.GAMEPAD:
      return (await Promise.resolve().then(() => (init_icon_gamepad_svg(), icon_gamepad_svg_exports))).default;
    case Icons.HEADPHONES:
      return (await Promise.resolve().then(() => (init_icon_headphones_svg(), icon_headphones_svg_exports))).default;
    case Icons.HIGHLIGHT:
      return (await Promise.resolve().then(() => (init_icon_highlight_svg(), icon_highlight_svg_exports))).default;
    case Icons.IMAGE:
      return (await Promise.resolve().then(() => (init_icon_image_svg(), icon_image_svg_exports))).default;
    case Icons.JOYSTICK:
      return (await Promise.resolve().then(() => (init_icon_joystick_svg(), icon_joystick_svg_exports))).default;
    case Icons.LAPTOP:
      return (await Promise.resolve().then(() => (init_icon_laptop_svg(), icon_laptop_svg_exports))).default;
    case Icons.MAIL_OPEN:
      return (await Promise.resolve().then(() => (init_icon_mail_open_svg(), icon_mail_open_svg_exports))).default;
    case Icons.MAIL:
      return (await Promise.resolve().then(() => (init_icon_mail_svg(), icon_mail_svg_exports))).default;
    case Icons.MEDIA:
      return (await Promise.resolve().then(() => (init_icon_media_svg(), icon_media_svg_exports))).default;
    case Icons.MICROPHONE:
      return (await Promise.resolve().then(() => (init_icon_microphone_svg(), icon_microphone_svg_exports))).default;
    case Icons.MUSIC_NOTE_SINGLE:
      return (await Promise.resolve().then(() => (init_icon_music_note_single_svg(), icon_music_note_single_svg_exports))).default;
    case Icons.MUSIC_NOTE:
      return (await Promise.resolve().then(() => (init_icon_music_note_svg(), icon_music_note_svg_exports))).default;
    case Icons.NES_CONTROLLER:
      return (await Promise.resolve().then(() => (init_icon_nes_controller_svg(), icon_nes_controller_svg_exports))).default;
    case Icons.PACMAN:
      return (await Promise.resolve().then(() => (init_icon_pacman_svg(), icon_pacman_svg_exports))).default;
    case Icons.PAINT_ROLLER:
      return (await Promise.resolve().then(() => (init_icon_paint_roller_svg(), icon_paint_roller_svg_exports))).default;
    case Icons.PAPERPLANE:
      return (await Promise.resolve().then(() => (init_icon_paperplane_svg(), icon_paperplane_svg_exports))).default;
    case Icons.PLAYBACK_BACKWARD:
      return (await Promise.resolve().then(() => (init_icon_playback_backward_svg(), icon_playback_backward_svg_exports))).default;
    case Icons.PLAYBACK_END:
      return (await Promise.resolve().then(() => (init_icon_playback_end_svg(), icon_playback_end_svg_exports))).default;
    case Icons.PLAYBACK_FORWARD:
      return (await Promise.resolve().then(() => (init_icon_playback_forward_svg(), icon_playback_forward_svg_exports))).default;
    case Icons.PLAYBACK_NEXT:
      return (await Promise.resolve().then(() => (init_icon_playback_next_svg(), icon_playback_next_svg_exports))).default;
    case Icons.PLAYBACK_PAUSE:
      return (await Promise.resolve().then(() => (init_icon_playback_pause_svg(), icon_playback_pause_svg_exports))).default;
    case Icons.PLAYBACK_PLAY:
      return (await Promise.resolve().then(() => (init_icon_playback_play_svg(), icon_playback_play_svg_exports))).default;
    case Icons.PLAYBACK_PREVIOUS:
      return (await Promise.resolve().then(() => (init_icon_playback_previous_svg(), icon_playback_previous_svg_exports))).default;
    case Icons.PLAYBACK_START:
      return (await Promise.resolve().then(() => (init_icon_playback_start_svg(), icon_playback_start_svg_exports))).default;
    case Icons.PLAYBACK_STOP:
      return (await Promise.resolve().then(() => (init_icon_playback_stop_svg(), icon_playback_stop_svg_exports))).default;
    case Icons.PRINTER:
      return (await Promise.resolve().then(() => (init_icon_printer_svg(), icon_printer_svg_exports))).default;
    case Icons.RECORD:
      return (await Promise.resolve().then(() => (init_icon_record_svg(), icon_record_svg_exports))).default;
    case Icons.REELS:
      return (await Promise.resolve().then(() => (init_icon_reels_svg(), icon_reels_svg_exports))).default;
    case Icons.TABLET_LANDSCAPE:
      return (await Promise.resolve().then(() => (init_icon_tablet_landscape_svg(), icon_tablet_landscape_svg_exports))).default;
    case Icons.TABLET:
      return (await Promise.resolve().then(() => (init_icon_tablet_svg(), icon_tablet_svg_exports))).default;
    case Icons.TELEVISION:
      return (await Promise.resolve().then(() => (init_icon_television_svg(), icon_television_svg_exports))).default;
    case Icons.TERMINAL:
      return (await Promise.resolve().then(() => (init_icon_terminal_svg(), icon_terminal_svg_exports))).default;
    case Icons.VIDEO_CAMERA:
      return (await Promise.resolve().then(() => (init_icon_video_camera_svg(), icon_video_camera_svg_exports))).default;
    case Icons.VIDEOS:
      return (await Promise.resolve().then(() => (init_icon_videos_svg(), icon_videos_svg_exports))).default;
    case Icons.VOLUME_I:
      return (await Promise.resolve().then(() => (init_icon_volume_i_svg(), icon_volume_i_svg_exports))).default;
    case Icons.VOLUME_II:
      return (await Promise.resolve().then(() => (init_icon_volume_ii_svg(), icon_volume_ii_svg_exports))).default;
    case Icons.VOLUME_III:
      return (await Promise.resolve().then(() => (init_icon_volume_iii_svg(), icon_volume_iii_svg_exports))).default;
    case Icons.VOLUME_MUTE:
      return (await Promise.resolve().then(() => (init_icon_volume_mute_svg(), icon_volume_mute_svg_exports))).default;
    case Icons.VOLUME_OFF:
      return (await Promise.resolve().then(() => (init_icon_volume_off_svg(), icon_volume_off_svg_exports))).default;
    case Icons.WEBSITE:
      return (await Promise.resolve().then(() => (init_icon_website_svg(), icon_website_svg_exports))).default;
    case Icons.WIFI2:
      return (await Promise.resolve().then(() => (init_icon_wifi_2_svg(), icon_wifi_2_svg_exports))).default;
    case Icons.WIFI3:
      return (await Promise.resolve().then(() => (init_icon_wifi_3_svg(), icon_wifi_3_svg_exports))).default;
    case Icons.WIFI_ROUNDED:
      return (await Promise.resolve().then(() => (init_icon_wifi_rounded_svg(), icon_wifi_rounded_svg_exports))).default;
    case Icons.WIFI:
      return (await Promise.resolve().then(() => (init_icon_wifi_svg(), icon_wifi_svg_exports))).default;
    case Icons.AI_FACE:
      return (await Promise.resolve().then(() => (init_icon_ai_face_svg(), icon_ai_face_svg_exports))).default;
    case Icons.AI_LETTERS_BLOCKED:
      return (await Promise.resolve().then(() => (init_icon_ai_letters_blocked_svg(), icon_ai_letters_blocked_svg_exports))).default;
    case Icons.AI_LETTERS_CIRCLED:
      return (await Promise.resolve().then(() => (init_icon_ai_letters_circled_svg(), icon_ai_letters_circled_svg_exports))).default;
    case Icons.AI_LETTERS:
      return (await Promise.resolve().then(() => (init_icon_ai_letters_svg(), icon_ai_letters_svg_exports))).default;
    case Icons.AFRAME:
      return (await Promise.resolve().then(() => (init_icon_aframe_svg(), icon_aframe_svg_exports))).default;
    case Icons.ARTWORK_FRAME:
      return (await Promise.resolve().then(() => (init_icon_artwork_frame_svg(), icon_artwork_frame_svg_exports))).default;
    case Icons.BARBECUE:
      return (await Promise.resolve().then(() => (init_icon_barbecue_svg(), icon_barbecue_svg_exports))).default;
    case Icons.BATHROOM_ESSENTIALS:
      return (await Promise.resolve().then(() => (init_icon_bathroom_essentials_svg(), icon_bathroom_essentials_svg_exports))).default;
    case Icons.BINOCULARS:
      return (await Promise.resolve().then(() => (init_icon_binoculars_svg(), icon_binoculars_svg_exports))).default;
    case Icons.BLENDER:
      return (await Promise.resolve().then(() => (init_icon_blender_svg(), icon_blender_svg_exports))).default;
    case Icons.BOOKCASE:
      return (await Promise.resolve().then(() => (init_icon_bookcase_svg(), icon_bookcase_svg_exports))).default;
    case Icons.BRAIN:
      return (await Promise.resolve().then(() => (init_icon_brain_svg(), icon_brain_svg_exports))).default;
    case Icons.BRANCH2:
      return (await Promise.resolve().then(() => (init_icon_branch_2_svg(), icon_branch_2_svg_exports))).default;
    case Icons.BRANCH3:
      return (await Promise.resolve().then(() => (init_icon_branch_3_svg(), icon_branch_3_svg_exports))).default;
    case Icons.BRANCH:
      return (await Promise.resolve().then(() => (init_icon_branch_svg(), icon_branch_svg_exports))).default;
    case Icons.BULB:
      return (await Promise.resolve().then(() => (init_icon_bulb_svg(), icon_bulb_svg_exports))).default;
    case Icons.CACTUS:
      return (await Promise.resolve().then(() => (init_icon_cactus_svg(), icon_cactus_svg_exports))).default;
    case Icons.CAMPER:
      return (await Promise.resolve().then(() => (init_icon_camper_svg(), icon_camper_svg_exports))).default;
    case Icons.CARAVAN:
      return (await Promise.resolve().then(() => (init_icon_caravan_svg(), icon_caravan_svg_exports))).default;
    case Icons.CHIP:
      return (await Promise.resolve().then(() => (init_icon_chip_svg(), icon_chip_svg_exports))).default;
    case Icons.CLEANING_BUCKET:
      return (await Promise.resolve().then(() => (init_icon_cleaning_bucket_svg(), icon_cleaning_bucket_svg_exports))).default;
    case Icons.CLEANING_SPRAY:
      return (await Promise.resolve().then(() => (init_icon_cleaning_spray_svg(), icon_cleaning_spray_svg_exports))).default;
    case Icons.CLOSET:
      return (await Promise.resolve().then(() => (init_icon_closet_svg(), icon_closet_svg_exports))).default;
    case Icons.COINS:
      return (await Promise.resolve().then(() => (init_icon_coins_svg(), icon_coins_svg_exports))).default;
    case Icons.COMPASS2:
      return (await Promise.resolve().then(() => (init_icon_compass_2_svg(), icon_compass_2_svg_exports))).default;
    case Icons.COMPASS:
      return (await Promise.resolve().then(() => (init_icon_compass_svg(), icon_compass_svg_exports))).default;
    case Icons.CUBE3D:
      return (await Promise.resolve().then(() => (init_icon_cube_3d_svg(), icon_cube_3d_svg_exports))).default;
    case Icons.EDUCATION:
      return (await Promise.resolve().then(() => (init_icon_education_svg(), icon_education_svg_exports))).default;
    case Icons.FACTORY_ARM:
      return (await Promise.resolve().then(() => (init_icon_factory_arm_svg(), icon_factory_arm_svg_exports))).default;
    case Icons.FACTORY_BELT:
      return (await Promise.resolve().then(() => (init_icon_factory_belt_svg(), icon_factory_belt_svg_exports))).default;
    case Icons.FACTORY:
      return (await Promise.resolve().then(() => (init_icon_factory_svg(), icon_factory_svg_exports))).default;
    case Icons.FINGERPRINT:
      return (await Promise.resolve().then(() => (init_icon_fingerprint_svg(), icon_fingerprint_svg_exports))).default;
    case Icons.FIRE:
      return (await Promise.resolve().then(() => (init_icon_fire_svg(), icon_fire_svg_exports))).default;
    case Icons.FRIDGE:
      return (await Promise.resolve().then(() => (init_icon_fridge_svg(), icon_fridge_svg_exports))).default;
    case Icons.FURNITURE_BED2:
      return (await Promise.resolve().then(() => (init_icon_furniture_bed_2_svg(), icon_furniture_bed_2_svg_exports))).default;
    case Icons.FURNITURE_BED_KING2:
      return (await Promise.resolve().then(() => (init_icon_furniture_bed_king_2_svg(), icon_furniture_bed_king_2_svg_exports))).default;
    case Icons.FURNITURE_BED_KING:
      return (await Promise.resolve().then(() => (init_icon_furniture_bed_king_svg(), icon_furniture_bed_king_svg_exports))).default;
    case Icons.FURNITURE_BED_SINGLE2:
      return (await Promise.resolve().then(() => (init_icon_furniture_bed_single_2_svg(), icon_furniture_bed_single_2_svg_exports))).default;
    case Icons.FURNITURE_BED_SINGLE:
      return (await Promise.resolve().then(() => (init_icon_furniture_bed_single_svg(), icon_furniture_bed_single_svg_exports))).default;
    case Icons.FURNITURE_BED:
      return (await Promise.resolve().then(() => (init_icon_furniture_bed_svg(), icon_furniture_bed_svg_exports))).default;
    case Icons.FURNITURE_BEDSIDE_TABLE:
      return (await Promise.resolve().then(() => (init_icon_furniture_bedside_table_svg(), icon_furniture_bedside_table_svg_exports))).default;
    case Icons.FURNITURE_CHAIR2:
      return (await Promise.resolve().then(() => (init_icon_furniture_chair_2_svg(), icon_furniture_chair_2_svg_exports))).default;
    case Icons.FURNITURE_CHAIR3:
      return (await Promise.resolve().then(() => (init_icon_furniture_chair_3_svg(), icon_furniture_chair_3_svg_exports))).default;
    case Icons.FURNITURE_CHAIR4:
      return (await Promise.resolve().then(() => (init_icon_furniture_chair_4_svg(), icon_furniture_chair_4_svg_exports))).default;
    case Icons.FURNITURE_CHAIR:
      return (await Promise.resolve().then(() => (init_icon_furniture_chair_svg(), icon_furniture_chair_svg_exports))).default;
    case Icons.FURNITURE_COUCH2:
      return (await Promise.resolve().then(() => (init_icon_furniture_couch_2_svg(), icon_furniture_couch_2_svg_exports))).default;
    case Icons.FURNITURE_COUCH3:
      return (await Promise.resolve().then(() => (init_icon_furniture_couch_3_svg(), icon_furniture_couch_3_svg_exports))).default;
    case Icons.FURNITURE_COUCH4:
      return (await Promise.resolve().then(() => (init_icon_furniture_couch_4_svg(), icon_furniture_couch_4_svg_exports))).default;
    case Icons.FURNITURE_COUCH:
      return (await Promise.resolve().then(() => (init_icon_furniture_couch_svg(), icon_furniture_couch_svg_exports))).default;
    case Icons.FURNITURE_DESK:
      return (await Promise.resolve().then(() => (init_icon_furniture_desk_svg(), icon_furniture_desk_svg_exports))).default;
    case Icons.FURNITURE_DRESSOIR:
      return (await Promise.resolve().then(() => (init_icon_furniture_dressoir_svg(), icon_furniture_dressoir_svg_exports))).default;
    case Icons.GRAPH_UP_ROUND:
      return (await Promise.resolve().then(() => (init_icon_graph_up_round_svg(), icon_graph_up_round_svg_exports))).default;
    case Icons.GRAPH_UP:
      return (await Promise.resolve().then(() => (init_icon_graph_up_svg(), icon_graph_up_svg_exports))).default;
    case Icons.HAIRDRYER:
      return (await Promise.resolve().then(() => (init_icon_hairdryer_svg(), icon_hairdryer_svg_exports))).default;
    case Icons.HILL_LANDSCAPE:
      return (await Promise.resolve().then(() => (init_icon_hill_landscape_svg(), icon_hill_landscape_svg_exports))).default;
    case Icons.IDEA_FACTORY:
      return (await Promise.resolve().then(() => (init_icon_idea_factory_svg(), icon_idea_factory_svg_exports))).default;
    case Icons.INDUSTRY3:
      return (await Promise.resolve().then(() => (init_icon_industry_3_svg(), icon_industry_3_svg_exports))).default;
    case Icons.IRON:
      return (await Promise.resolve().then(() => (init_icon_iron_svg(), icon_iron_svg_exports))).default;
    case Icons.KITCHEN_CUTLERY:
      return (await Promise.resolve().then(() => (init_icon_kitchen_cutlery_svg(), icon_kitchen_cutlery_svg_exports))).default;
    case Icons.KITCHEN_UTENSILS:
      return (await Promise.resolve().then(() => (init_icon_kitchen_utensils_svg(), icon_kitchen_utensils_svg_exports))).default;
    case Icons.LAKE_VIEW:
      return (await Promise.resolve().then(() => (init_icon_lake_view_svg(), icon_lake_view_svg_exports))).default;
    case Icons.LEAF2:
      return (await Promise.resolve().then(() => (init_icon_leaf_2_svg(), icon_leaf_2_svg_exports))).default;
    case Icons.LEAF3:
      return (await Promise.resolve().then(() => (init_icon_leaf_3_svg(), icon_leaf_3_svg_exports))).default;
    case Icons.LEAF:
      return (await Promise.resolve().then(() => (init_icon_leaf_svg(), icon_leaf_svg_exports))).default;
    case Icons.LEAFS:
      return (await Promise.resolve().then(() => (init_icon_leafs_svg(), icon_leafs_svg_exports))).default;
    case Icons.LIQUID_SOAP2:
      return (await Promise.resolve().then(() => (init_icon_liquid_soap_2_svg(), icon_liquid_soap_2_svg_exports))).default;
    case Icons.LIQUID_SOAP:
      return (await Promise.resolve().then(() => (init_icon_liquid_soap_svg(), icon_liquid_soap_svg_exports))).default;
    case Icons.LUXE_VILLA:
      return (await Promise.resolve().then(() => (init_icon_luxe_villa_svg(), icon_luxe_villa_svg_exports))).default;
    case Icons.MANSION:
      return (await Promise.resolve().then(() => (init_icon_mansion_svg(), icon_mansion_svg_exports))).default;
    case Icons.MICROWAVE:
      return (await Promise.resolve().then(() => (init_icon_microwave_svg(), icon_microwave_svg_exports))).default;
    case Icons.MONEY:
      return (await Promise.resolve().then(() => (init_icon_money_svg(), icon_money_svg_exports))).default;
    case Icons.MONEYBAG:
      return (await Promise.resolve().then(() => (init_icon_moneybag_svg(), icon_moneybag_svg_exports))).default;
    case Icons.MOUNTAIN_SCAPE:
      return (await Promise.resolve().then(() => (init_icon_mountain_scape_svg(), icon_mountain_scape_svg_exports))).default;
    case Icons.OVEN:
      return (await Promise.resolve().then(() => (init_icon_oven_svg(), icon_oven_svg_exports))).default;
    case Icons.PLANT:
      return (await Promise.resolve().then(() => (init_icon_plant_svg(), icon_plant_svg_exports))).default;
    case Icons.POLITICIAN2:
      return (await Promise.resolve().then(() => (init_icon_politician_2_svg(), icon_politician_2_svg_exports))).default;
    case Icons.POLITICIAN:
      return (await Promise.resolve().then(() => (init_icon_politician_svg(), icon_politician_svg_exports))).default;
    case Icons.ROCKET:
      return (await Promise.resolve().then(() => (init_icon_rocket_svg(), icon_rocket_svg_exports))).default;
    case Icons.ROOM_SHADE:
      return (await Promise.resolve().then(() => (init_icon_room_shade_svg(), icon_room_shade_svg_exports))).default;
    case Icons.SHIELD2_LINE:
      return (await Promise.resolve().then(() => (init_icon_shield_2_line_svg(), icon_shield_2_line_svg_exports))).default;
    case Icons.SHIELD2:
      return (await Promise.resolve().then(() => (init_icon_shield_2_svg(), icon_shield_2_svg_exports))).default;
    case Icons.SHIELD3_LINE:
      return (await Promise.resolve().then(() => (init_icon_shield_3_line_svg(), icon_shield_3_line_svg_exports))).default;
    case Icons.SHIELD3:
      return (await Promise.resolve().then(() => (init_icon_shield_3_svg(), icon_shield_3_svg_exports))).default;
    case Icons.SHIELD4_LINE:
      return (await Promise.resolve().then(() => (init_icon_shield_4_line_svg(), icon_shield_4_line_svg_exports))).default;
    case Icons.SHIELD4:
      return (await Promise.resolve().then(() => (init_icon_shield_4_svg(), icon_shield_4_svg_exports))).default;
    case Icons.SHIELD_LINE:
      return (await Promise.resolve().then(() => (init_icon_shield_line_svg(), icon_shield_line_svg_exports))).default;
    case Icons.SHIELD:
      return (await Promise.resolve().then(() => (init_icon_shield_svg(), icon_shield_svg_exports))).default;
    case Icons.STOVE:
      return (await Promise.resolve().then(() => (init_icon_stove_svg(), icon_stove_svg_exports))).default;
    case Icons.SURFBOARD:
      return (await Promise.resolve().then(() => (init_icon_surfboard_svg(), icon_surfboard_svg_exports))).default;
    case Icons.SWIMMING_POOL:
      return (await Promise.resolve().then(() => (init_icon_swimming_pool_svg(), icon_swimming_pool_svg_exports))).default;
    case Icons.TEMPLE2:
      return (await Promise.resolve().then(() => (init_icon_temple_2_svg(), icon_temple_2_svg_exports))).default;
    case Icons.TEMPLE:
      return (await Promise.resolve().then(() => (init_icon_temple_svg(), icon_temple_svg_exports))).default;
    case Icons.TENT_CAMPING:
      return (await Promise.resolve().then(() => (init_icon_tent_camping_svg(), icon_tent_camping_svg_exports))).default;
    case Icons.TENT:
      return (await Promise.resolve().then(() => (init_icon_tent_svg(), icon_tent_svg_exports))).default;
    case Icons.TOY_BLOCKS2:
      return (await Promise.resolve().then(() => (init_icon_toy_blocks_2_svg(), icon_toy_blocks_2_svg_exports))).default;
    case Icons.TOY_BLOCKS3:
      return (await Promise.resolve().then(() => (init_icon_toy_blocks_3_svg(), icon_toy_blocks_3_svg_exports))).default;
    case Icons.TOY_BLOCKS:
      return (await Promise.resolve().then(() => (init_icon_toy_blocks_svg(), icon_toy_blocks_svg_exports))).default;
    case Icons.TOY_HEAD:
      return (await Promise.resolve().then(() => (init_icon_toy_head_svg(), icon_toy_head_svg_exports))).default;
    case Icons.TREE2:
      return (await Promise.resolve().then(() => (init_icon_tree_2_svg(), icon_tree_2_svg_exports))).default;
    case Icons.TREE3:
      return (await Promise.resolve().then(() => (init_icon_tree_3_svg(), icon_tree_3_svg_exports))).default;
    case Icons.TREE:
      return (await Promise.resolve().then(() => (init_icon_tree_svg(), icon_tree_svg_exports))).default;
    case Icons.TREEHOUSE:
      return (await Promise.resolve().then(() => (init_icon_treehouse_svg(), icon_treehouse_svg_exports))).default;
    case Icons.TREES2:
      return (await Promise.resolve().then(() => (init_icon_trees_2_svg(), icon_trees_2_svg_exports))).default;
    case Icons.TREES:
      return (await Promise.resolve().then(() => (init_icon_trees_svg(), icon_trees_svg_exports))).default;
    case Icons.TRUNK1:
      return (await Promise.resolve().then(() => (init_icon_trunk_1_svg(), icon_trunk_1_svg_exports))).default;
    case Icons.TRUNK2:
      return (await Promise.resolve().then(() => (init_icon_trunk_2_svg(), icon_trunk_2_svg_exports))).default;
    case Icons.UFO:
      return (await Promise.resolve().then(() => (init_icon_ufo_svg(), icon_ufo_svg_exports))).default;
    case Icons.VOTE:
      return (await Promise.resolve().then(() => (init_icon_vote_svg(), icon_vote_svg_exports))).default;
    case Icons.WALLET:
      return (await Promise.resolve().then(() => (init_icon_wallet_svg(), icon_wallet_svg_exports))).default;
    case Icons.WASHING_MACHINE:
      return (await Promise.resolve().then(() => (init_icon_washing_machine_svg(), icon_washing_machine_svg_exports))).default;
    case Icons.WATERCOOKER:
      return (await Promise.resolve().then(() => (init_icon_watercooker_svg(), icon_watercooker_svg_exports))).default;
    case Icons.YURT:
      return (await Promise.resolve().then(() => (init_icon_yurt_svg(), icon_yurt_svg_exports))).default;
    case Icons.BABY_STROLLER:
      return (await Promise.resolve().then(() => (init_icon_baby_stroller_svg(), icon_baby_stroller_svg_exports))).default;
    case Icons.CLOTHING_TSHIRT:
      return (await Promise.resolve().then(() => (init_icon_clothing_tshirt_svg(), icon_clothing_tshirt_svg_exports))).default;
    case Icons.COTTON:
      return (await Promise.resolve().then(() => (init_icon_cotton_svg(), icon_cotton_svg_exports))).default;
    case Icons.HOME_GARDEN:
      return (await Promise.resolve().then(() => (init_icon_home_garden_svg(), icon_home_garden_svg_exports))).default;
    case Icons.HYPOALLERGENIC:
      return (await Promise.resolve().then(() => (init_icon_hypoallergenic_svg(), icon_hypoallergenic_svg_exports))).default;
    case Icons.NO_LEAKS:
      return (await Promise.resolve().then(() => (init_icon_no_leaks_svg(), icon_no_leaks_svg_exports))).default;
    case Icons.SUITCASE_JOBS:
      return (await Promise.resolve().then(() => (init_icon_suitcase_jobs_svg(), icon_suitcase_jobs_svg_exports))).default;
    case Icons.SHOPPING_BAG2:
      return (await Promise.resolve().then(() => (init_icon_shopping_bag_2_svg(), icon_shopping_bag_2_svg_exports))).default;
    case Icons.SHOPPING_BAG3:
      return (await Promise.resolve().then(() => (init_icon_shopping_bag_3_svg(), icon_shopping_bag_3_svg_exports))).default;
    case Icons.SHOPPING_BAG_DISCOUNT:
      return (await Promise.resolve().then(() => (init_icon_shopping_bag_discount_svg(), icon_shopping_bag_discount_svg_exports))).default;
    case Icons.SHOPPING_BAG:
      return (await Promise.resolve().then(() => (init_icon_shopping_bag_svg(), icon_shopping_bag_svg_exports))).default;
    case Icons.SHOPPING_BASKET_ROUNDED:
      return (await Promise.resolve().then(() => (init_icon_shopping_basket_rounded_svg(), icon_shopping_basket_rounded_svg_exports))).default;
    case Icons.SHOPPING_BASKET:
      return (await Promise.resolve().then(() => (init_icon_shopping_basket_svg(), icon_shopping_basket_svg_exports))).default;
    case Icons.SHOPPING_CART_FAST:
      return (await Promise.resolve().then(() => (init_icon_shopping_cart_fast_svg(), icon_shopping_cart_fast_svg_exports))).default;
    case Icons.SHOPPING_CART:
      return (await Promise.resolve().then(() => (init_icon_shopping_cart_svg(), icon_shopping_cart_svg_exports))).default;
    case Icons.SHOPPING_LABEL:
      return (await Promise.resolve().then(() => (init_icon_shopping_label_svg(), icon_shopping_label_svg_exports))).default;
    case Icons.SHOPPING_LABELS:
      return (await Promise.resolve().then(() => (init_icon_shopping_labels_svg(), icon_shopping_labels_svg_exports))).default;
    case Icons.ICON43:
      return (await Promise.resolve().then(() => (init_icon_43_svg(), icon_43_svg_exports))).default;
    case Icons.BAHT_SYMBOL:
      return (await Promise.resolve().then(() => (init_icon_baht_symbol_svg(), icon_baht_symbol_svg_exports))).default;
    case Icons.DICE1:
      return (await Promise.resolve().then(() => (init_icon_dice_1_svg(), icon_dice_1_svg_exports))).default;
    case Icons.DICE2:
      return (await Promise.resolve().then(() => (init_icon_dice_2_svg(), icon_dice_2_svg_exports))).default;
    case Icons.DICE3:
      return (await Promise.resolve().then(() => (init_icon_dice_3_svg(), icon_dice_3_svg_exports))).default;
    case Icons.DICE4:
      return (await Promise.resolve().then(() => (init_icon_dice_4_svg(), icon_dice_4_svg_exports))).default;
    case Icons.DICE5:
      return (await Promise.resolve().then(() => (init_icon_dice_5_svg(), icon_dice_5_svg_exports))).default;
    case Icons.DICE6:
      return (await Promise.resolve().then(() => (init_icon_dice_6_svg(), icon_dice_6_svg_exports))).default;
    case Icons.DICE7:
      return (await Promise.resolve().then(() => (init_icon_dice_7_svg(), icon_dice_7_svg_exports))).default;
    case Icons.DICE8:
      return (await Promise.resolve().then(() => (init_icon_dice_8_svg(), icon_dice_8_svg_exports))).default;
    case Icons.DICE9:
      return (await Promise.resolve().then(() => (init_icon_dice_9_svg(), icon_dice_9_svg_exports))).default;
    case Icons.DIGIT_DIGITAL1:
      return (await Promise.resolve().then(() => (init_icon_digit_digital_1_svg(), icon_digit_digital_1_svg_exports))).default;
    case Icons.DIGIT_DIGITAL2:
      return (await Promise.resolve().then(() => (init_icon_digit_digital_2_svg(), icon_digit_digital_2_svg_exports))).default;
    case Icons.DIGIT_DIGITAL3:
      return (await Promise.resolve().then(() => (init_icon_digit_digital_3_svg(), icon_digit_digital_3_svg_exports))).default;
    case Icons.DIGIT_DIGITAL4:
      return (await Promise.resolve().then(() => (init_icon_digit_digital_4_svg(), icon_digit_digital_4_svg_exports))).default;
    case Icons.DIGIT_DIGITAL5:
      return (await Promise.resolve().then(() => (init_icon_digit_digital_5_svg(), icon_digit_digital_5_svg_exports))).default;
    case Icons.DIGIT_DIGITAL6:
      return (await Promise.resolve().then(() => (init_icon_digit_digital_6_svg(), icon_digit_digital_6_svg_exports))).default;
    case Icons.DIGIT_DIGITAL7:
      return (await Promise.resolve().then(() => (init_icon_digit_digital_7_svg(), icon_digit_digital_7_svg_exports))).default;
    case Icons.DIGIT_DIGITAL8:
      return (await Promise.resolve().then(() => (init_icon_digit_digital_8_svg(), icon_digit_digital_8_svg_exports))).default;
    case Icons.DIGIT_DIGITAL9:
      return (await Promise.resolve().then(() => (init_icon_digit_digital_9_svg(), icon_digit_digital_9_svg_exports))).default;
    case Icons.DIGIT_DIGTAL0:
      return (await Promise.resolve().then(() => (init_icon_digit_digtal_0_svg(), icon_digit_digtal_0_svg_exports))).default;
    case Icons.DOLLAR:
      return (await Promise.resolve().then(() => (init_icon_dollar_svg(), icon_dollar_svg_exports))).default;
    case Icons.EURO:
      return (await Promise.resolve().then(() => (init_icon_euro_svg(), icon_euro_svg_exports))).default;
    case Icons.PERCENTAGE:
      return (await Promise.resolve().then(() => (init_icon_percentage_svg(), icon_percentage_svg_exports))).default;
    case Icons.POUND_SYMBOL:
      return (await Promise.resolve().then(() => (init_icon_pound_symbol_svg(), icon_pound_symbol_svg_exports))).default;
    case Icons.PROMILLE:
      return (await Promise.resolve().then(() => (init_icon_promille_svg(), icon_promille_svg_exports))).default;
    case Icons.RUBLES_SYMBOL:
      return (await Promise.resolve().then(() => (init_icon_rubles_symbol_svg(), icon_rubles_symbol_svg_exports))).default;
    case Icons.RUPEE_SYMBOL_COPY:
      return (await Promise.resolve().then(() => (init_icon_rupee_symbol_copy_svg(), icon_rupee_symbol_copy_svg_exports))).default;
    case Icons.RUPEE_SYMBOL:
      return (await Promise.resolve().then(() => (init_icon_rupee_symbol_svg(), icon_rupee_symbol_svg_exports))).default;
    case Icons.SYMBOL_FEMALE:
      return (await Promise.resolve().then(() => (init_icon_symbol_female_svg(), icon_symbol_female_svg_exports))).default;
    case Icons.SYMBOL_MALE:
      return (await Promise.resolve().then(() => (init_icon_symbol_male_svg(), icon_symbol_male_svg_exports))).default;
    case Icons.SYMBOL_UNISEX:
      return (await Promise.resolve().then(() => (init_icon_symbol_unisex_svg(), icon_symbol_unisex_svg_exports))).default;
    case Icons.THREE_DOTS_DIAGONAL_MAJOR:
      return (await Promise.resolve().then(() => (init_icon_three_dots_diagonal_major_svg(), icon_three_dots_diagonal_major_svg_exports))).default;
    case Icons.THREE_DOTS_DIAGONAL_MINOR:
      return (await Promise.resolve().then(() => (init_icon_three_dots_diagonal_minor_svg(), icon_three_dots_diagonal_minor_svg_exports))).default;
    case Icons.THREE_DOTS_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_icon_three_dots_horizontal_svg(), icon_three_dots_horizontal_svg_exports))).default;
    case Icons.THREE_DOTS_LINES:
      return (await Promise.resolve().then(() => (init_icon_three_dots_lines_svg(), icon_three_dots_lines_svg_exports))).default;
    case Icons.THREE_DOTS_VERTICAL:
      return (await Promise.resolve().then(() => (init_icon_three_dots_vertical_svg(), icon_three_dots_vertical_svg_exports))).default;
    case Icons.TWO_DOTS_DIAGONAL_MAJOR:
      return (await Promise.resolve().then(() => (init_icon_two_dots_diagonal_major_svg(), icon_two_dots_diagonal_major_svg_exports))).default;
    case Icons.TWO_DOTS_DIAGONAL_MINOR:
      return (await Promise.resolve().then(() => (init_icon_two_dots_diagonal_minor_svg(), icon_two_dots_diagonal_minor_svg_exports))).default;
    case Icons.TWO_DOTS_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_icon_two_dots_horizontal_svg(), icon_two_dots_horizontal_svg_exports))).default;
    case Icons.TWO_DOTS_LINES:
      return (await Promise.resolve().then(() => (init_icon_two_dots_lines_svg(), icon_two_dots_lines_svg_exports))).default;
    case Icons.TWO_DOTS_VERTICAL:
      return (await Promise.resolve().then(() => (init_icon_two_dots_vertical_svg(), icon_two_dots_vertical_svg_exports))).default;
    case Icons.YEN:
      return (await Promise.resolve().then(() => (init_icon_yen_svg(), icon_yen_svg_exports))).default;
    case Icons.BALL_BASKETBALL:
      return (await Promise.resolve().then(() => (init_icon_ball_basketball_svg(), icon_ball_basketball_svg_exports))).default;
    case Icons.BALL_FOOTBALL:
      return (await Promise.resolve().then(() => (init_icon_ball_football_svg(), icon_ball_football_svg_exports))).default;
    case Icons.BALL_RUGBY:
      return (await Promise.resolve().then(() => (init_icon_ball_rugby_svg(), icon_ball_rugby_svg_exports))).default;
    case Icons.BALL_TENNIS:
      return (await Promise.resolve().then(() => (init_icon_ball_tennis_svg(), icon_ball_tennis_svg_exports))).default;
    case Icons.ACCESSIBILITY_PERSON_CIRCLED:
      return (await Promise.resolve().then(() => (init_icon_accessibility_person_circled_svg(), icon_accessibility_person_circled_svg_exports))).default;
    case Icons.ACCESSIBILITY_PERSON:
      return (await Promise.resolve().then(() => (init_icon_accessibility_person_svg(), icon_accessibility_person_svg_exports))).default;
    case Icons.ADD_FAT:
      return (await Promise.resolve().then(() => (init_icon_add_fat_svg(), icon_add_fat_svg_exports))).default;
    case Icons.ADD_L:
      return (await Promise.resolve().then(() => (init_icon_add_l_svg(), icon_add_l_svg_exports))).default;
    case Icons.ADD_LINES:
      return (await Promise.resolve().then(() => (init_icon_add_lines_svg(), icon_add_lines_svg_exports))).default;
    case Icons.ADD_M:
      return (await Promise.resolve().then(() => (init_icon_add_m_svg(), icon_add_m_svg_exports))).default;
    case Icons.ADD_S:
      return (await Promise.resolve().then(() => (init_icon_add_s_svg(), icon_add_s_svg_exports))).default;
    case Icons.AT_SIGN:
      return (await Promise.resolve().then(() => (init_icon_at_sign_svg(), icon_at_sign_svg_exports))).default;
    case Icons.BLOCK_PARTIALS:
      return (await Promise.resolve().then(() => (init_icon_block_partials_svg(), icon_block_partials_svg_exports))).default;
    case Icons.BOARD_ADD2:
      return (await Promise.resolve().then(() => (init_icon_board_add_2_svg(), icon_board_add_2_svg_exports))).default;
    case Icons.BOARD_MULTI2_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_icon_board_multi_2_horizontal_svg(), icon_board_multi_2_horizontal_svg_exports))).default;
    case Icons.BOARD_MULTI2_VERTICAL:
      return (await Promise.resolve().then(() => (init_icon_board_multi_2_vertical_svg(), icon_board_multi_2_vertical_svg_exports))).default;
    case Icons.BOARD_MULTI_DASHBOARD:
      return (await Promise.resolve().then(() => (init_icon_board_multi_dashboard_svg(), icon_board_multi_dashboard_svg_exports))).default;
    case Icons.BOARD_MULTI_T_DOWN:
      return (await Promise.resolve().then(() => (init_icon_board_multi_t_down_svg(), icon_board_multi_t_down_svg_exports))).default;
    case Icons.BOARD_MULTI_T_LEFT:
      return (await Promise.resolve().then(() => (init_icon_board_multi_t_left_svg(), icon_board_multi_t_left_svg_exports))).default;
    case Icons.BOARD_MULTI_T_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_board_multi_t_right_svg(), icon_board_multi_t_right_svg_exports))).default;
    case Icons.BOARD_MULTI_T_UP:
      return (await Promise.resolve().then(() => (init_icon_board_multi_t_up_svg(), icon_board_multi_t_up_svg_exports))).default;
    case Icons.BOARD_MULTI:
      return (await Promise.resolve().then(() => (init_icon_board_multi_svg(), icon_board_multi_svg_exports))).default;
    case Icons.BOARD_MULTIPLY2:
      return (await Promise.resolve().then(() => (init_icon_board_multiply_2_svg(), icon_board_multiply_2_svg_exports))).default;
    case Icons.BOARD_SPLIT13_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_icon_board_split_1_3_horizontal_svg(), icon_board_split_1_3_horizontal_svg_exports))).default;
    case Icons.BOARD_SPLIT13_VERTICAL:
      return (await Promise.resolve().then(() => (init_icon_board_split_1_3_vertical_svg(), icon_board_split_1_3_vertical_svg_exports))).default;
    case Icons.BOARD_SPLIT2_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_icon_board_split_2_horizontal_svg(), icon_board_split_2_horizontal_svg_exports))).default;
    case Icons.BOARD_SPLIT2_VERTICAL:
      return (await Promise.resolve().then(() => (init_icon_board_split_2_vertical_svg(), icon_board_split_2_vertical_svg_exports))).default;
    case Icons.BOARD_SPLIT31_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_icon_board_split_3_1_horizontal_svg(), icon_board_split_3_1_horizontal_svg_exports))).default;
    case Icons.BOARD_SPLIT31_VERTICAL:
      return (await Promise.resolve().then(() => (init_icon_board_split_3_1_vertical_svg(), icon_board_split_3_1_vertical_svg_exports))).default;
    case Icons.BOARD_SPLIT3_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_icon_board_split_3_horizontal_svg(), icon_board_split_3_horizontal_svg_exports))).default;
    case Icons.BOARD_SPLIT3_VERTICAL:
      return (await Promise.resolve().then(() => (init_icon_board_split_3_vertical_svg(), icon_board_split_3_vertical_svg_exports))).default;
    case Icons.BOARD_SPLIT4_HORIZONTAL:
      return (await Promise.resolve().then(() => (init_icon_board_split_4_horizontal_svg(), icon_board_split_4_horizontal_svg_exports))).default;
    case Icons.BOARD_SPLIT4_VERTICAL:
      return (await Promise.resolve().then(() => (init_icon_board_split_4_vertical_svg(), icon_board_split_4_vertical_svg_exports))).default;
    case Icons.BOARD_SPLIT_T_DOWN:
      return (await Promise.resolve().then(() => (init_icon_board_split_t_down_svg(), icon_board_split_t_down_svg_exports))).default;
    case Icons.BOARD_SPLIT_T_LEFT:
      return (await Promise.resolve().then(() => (init_icon_board_split_t_left_svg(), icon_board_split_t_left_svg_exports))).default;
    case Icons.BOARD_SPLIT_T_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_board_split_t_right_svg(), icon_board_split_t_right_svg_exports))).default;
    case Icons.BOARD_SPLIT_T_UP:
      return (await Promise.resolve().then(() => (init_icon_board_split_t_up_svg(), icon_board_split_t_up_svg_exports))).default;
    case Icons.BOARD_SUBTRACT2:
      return (await Promise.resolve().then(() => (init_icon_board_subtract_2_svg(), icon_board_subtract_2_svg_exports))).default;
    case Icons.BOARD:
      return (await Promise.resolve().then(() => (init_icon_board_svg(), icon_board_svg_exports))).default;
    case Icons.BOX_IN:
      return (await Promise.resolve().then(() => (init_icon_box_in_svg(), icon_box_in_svg_exports))).default;
    case Icons.BOX_OUT:
      return (await Promise.resolve().then(() => (init_icon_box_out_svg(), icon_box_out_svg_exports))).default;
    case Icons.BOX:
      return (await Promise.resolve().then(() => (init_icon_box_svg(), icon_box_svg_exports))).default;
    case Icons.BOY:
      return (await Promise.resolve().then(() => (init_icon_boy_svg(), icon_boy_svg_exports))).default;
    case Icons.BROKEN_HEART_F:
      return (await Promise.resolve().then(() => (init_icon_broken_heart_f_svg(), icon_broken_heart_f_svg_exports))).default;
    case Icons.BROKEN_HEART_L:
      return (await Promise.resolve().then(() => (init_icon_broken_heart_l_svg(), icon_broken_heart_l_svg_exports))).default;
    case Icons.BROKEN_HEART_M:
      return (await Promise.resolve().then(() => (init_icon_broken_heart_m_svg(), icon_broken_heart_m_svg_exports))).default;
    case Icons.BUILDING_CHURCH:
      return (await Promise.resolve().then(() => (init_icon_building_church_svg(), icon_building_church_svg_exports))).default;
    case Icons.BUILDING_HOUSE2:
      return (await Promise.resolve().then(() => (init_icon_building_house_2_svg(), icon_building_house_2_svg_exports))).default;
    case Icons.BUILDING_HOUSE:
      return (await Promise.resolve().then(() => (init_icon_building_house_svg(), icon_building_house_svg_exports))).default;
    case Icons.BUILDING_SHOP:
      return (await Promise.resolve().then(() => (init_icon_building_shop_svg(), icon_building_shop_svg_exports))).default;
    case Icons.BUTTON_ADD:
      return (await Promise.resolve().then(() => (init_icon_button_add_svg(), icon_button_add_svg_exports))).default;
    case Icons.BUTTON_BROKEN_HEART2:
      return (await Promise.resolve().then(() => (init_icon_button_broken_heart_2_svg(), icon_button_broken_heart_2_svg_exports))).default;
    case Icons.BUTTON_BROKEN_HEART:
      return (await Promise.resolve().then(() => (init_icon_button_broken_heart_svg(), icon_button_broken_heart_svg_exports))).default;
    case Icons.BUTTON_CHECK2:
      return (await Promise.resolve().then(() => (init_icon_button_check_2_svg(), icon_button_check_2_svg_exports))).default;
    case Icons.BUTTON_CHECK:
      return (await Promise.resolve().then(() => (init_icon_button_check_svg(), icon_button_check_svg_exports))).default;
    case Icons.BUTTON_EDIT2:
      return (await Promise.resolve().then(() => (init_icon_button_edit_2_svg(), icon_button_edit_2_svg_exports))).default;
    case Icons.BUTTON_EDIT:
      return (await Promise.resolve().then(() => (init_icon_button_edit_svg(), icon_button_edit_svg_exports))).default;
    case Icons.BUTTON_EXCLAMATION_MARK2:
      return (await Promise.resolve().then(() => (init_icon_button_exclamation_mark_2_svg(), icon_button_exclamation_mark_2_svg_exports))).default;
    case Icons.BUTTON_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_icon_button_exclamation_mark_svg(), icon_button_exclamation_mark_svg_exports))).default;
    case Icons.BUTTON_HEART2:
      return (await Promise.resolve().then(() => (init_icon_button_heart_2_svg(), icon_button_heart_2_svg_exports))).default;
    case Icons.BUTTON_HEART:
      return (await Promise.resolve().then(() => (init_icon_button_heart_svg(), icon_button_heart_svg_exports))).default;
    case Icons.BUTTON_INFO2:
      return (await Promise.resolve().then(() => (init_icon_button_info_2_svg(), icon_button_info_2_svg_exports))).default;
    case Icons.BUTTON_INFO:
      return (await Promise.resolve().then(() => (init_icon_button_info_svg(), icon_button_info_svg_exports))).default;
    case Icons.BUTTON_INVISIBLE2:
      return (await Promise.resolve().then(() => (init_icon_button_invisible_2_svg(), icon_button_invisible_2_svg_exports))).default;
    case Icons.BUTTON_INVISIBLE:
      return (await Promise.resolve().then(() => (init_icon_button_invisible_svg(), icon_button_invisible_svg_exports))).default;
    case Icons.BUTTON_MULTIPLY:
      return (await Promise.resolve().then(() => (init_icon_button_multiply_svg(), icon_button_multiply_svg_exports))).default;
    case Icons.BUTTON_QUESTION_MARK2:
      return (await Promise.resolve().then(() => (init_icon_button_question_mark_2_svg(), icon_button_question_mark_2_svg_exports))).default;
    case Icons.BUTTON_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_icon_button_question_mark_svg(), icon_button_question_mark_svg_exports))).default;
    case Icons.BUTTON_SEARCH2:
      return (await Promise.resolve().then(() => (init_icon_button_search_2_svg(), icon_button_search_2_svg_exports))).default;
    case Icons.BUTTON_SEARCH:
      return (await Promise.resolve().then(() => (init_icon_button_search_svg(), icon_button_search_svg_exports))).default;
    case Icons.BUTTON_STAR2:
      return (await Promise.resolve().then(() => (init_icon_button_star_2_svg(), icon_button_star_2_svg_exports))).default;
    case Icons.BUTTON_STAR:
      return (await Promise.resolve().then(() => (init_icon_button_star_svg(), icon_button_star_svg_exports))).default;
    case Icons.BUTTON_SUBTRACT:
      return (await Promise.resolve().then(() => (init_icon_button_subtract_svg(), icon_button_subtract_svg_exports))).default;
    case Icons.BUTTON_VISIBLE2:
      return (await Promise.resolve().then(() => (init_icon_button_visible_2_svg(), icon_button_visible_2_svg_exports))).default;
    case Icons.BUTTON_VISIBLE:
      return (await Promise.resolve().then(() => (init_icon_button_visible_svg(), icon_button_visible_svg_exports))).default;
    case Icons.BUTTON:
      return (await Promise.resolve().then(() => (init_icon_button_svg(), icon_button_svg_exports))).default;
    case Icons.CALENDAR2:
      return (await Promise.resolve().then(() => (init_icon_calendar_2_svg(), icon_calendar_2_svg_exports))).default;
    case Icons.CALENDAR:
      return (await Promise.resolve().then(() => (init_icon_calendar_svg(), icon_calendar_svg_exports))).default;
    case Icons.CHART_BARS_SQUARED:
      return (await Promise.resolve().then(() => (init_icon_chart_bars_squared_svg(), icon_chart_bars_squared_svg_exports))).default;
    case Icons.CHART_BUBBLES:
      return (await Promise.resolve().then(() => (init_icon_chart_bubbles_svg(), icon_chart_bubbles_svg_exports))).default;
    case Icons.CHART_CANDLES:
      return (await Promise.resolve().then(() => (init_icon_chart_candles_svg(), icon_chart_candles_svg_exports))).default;
    case Icons.CHART_HALF_CIRCLE:
      return (await Promise.resolve().then(() => (init_icon_chart_half_circle_svg(), icon_chart_half_circle_svg_exports))).default;
    case Icons.CHART_LINE_SQUARED:
      return (await Promise.resolve().then(() => (init_icon_chart_line_squared_svg(), icon_chart_line_squared_svg_exports))).default;
    case Icons.CHART_LINE:
      return (await Promise.resolve().then(() => (init_icon_chart_line_svg(), icon_chart_line_svg_exports))).default;
    case Icons.CHART_PIE:
      return (await Promise.resolve().then(() => (init_icon_chart_pie_svg(), icon_chart_pie_svg_exports))).default;
    case Icons.CHECK_FAT:
      return (await Promise.resolve().then(() => (init_icon_check_fat_svg(), icon_check_fat_svg_exports))).default;
    case Icons.CHECK_L:
      return (await Promise.resolve().then(() => (init_icon_check_l_svg(), icon_check_l_svg_exports))).default;
    case Icons.CHECK_LIST:
      return (await Promise.resolve().then(() => (init_icon_check_list_svg(), icon_check_list_svg_exports))).default;
    case Icons.CHECK_M:
      return (await Promise.resolve().then(() => (init_icon_check_m_svg(), icon_check_m_svg_exports))).default;
    case Icons.CHECK_S:
      return (await Promise.resolve().then(() => (init_icon_check_s_svg(), icon_check_s_svg_exports))).default;
    case Icons.CIRCLE_INVISIBLE:
      return (await Promise.resolve().then(() => (init_icon_circle_invisible_svg(), icon_circle_invisible_svg_exports))).default;
    case Icons.CIRCLE_SUBTRACT:
      return (await Promise.resolve().then(() => (init_icon_circle_subtract_svg(), icon_circle_subtract_svg_exports))).default;
    case Icons.CIRCLED_ADD:
      return (await Promise.resolve().then(() => (init_icon_circled_add_svg(), icon_circled_add_svg_exports))).default;
    case Icons.CIRCLED_BROKEN_HEART:
      return (await Promise.resolve().then(() => (init_icon_circled_broken_heart_svg(), icon_circled_broken_heart_svg_exports))).default;
    case Icons.CIRCLED_CHECK:
      return (await Promise.resolve().then(() => (init_icon_circled_check_svg(), icon_circled_check_svg_exports))).default;
    case Icons.CIRCLED_EDIT:
      return (await Promise.resolve().then(() => (init_icon_circled_edit_svg(), icon_circled_edit_svg_exports))).default;
    case Icons.CIRCLED_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_icon_circled_exclamation_mark_svg(), icon_circled_exclamation_mark_svg_exports))).default;
    case Icons.CIRCLED_HEART:
      return (await Promise.resolve().then(() => (init_icon_circled_heart_svg(), icon_circled_heart_svg_exports))).default;
    case Icons.CIRCLED_INFO:
      return (await Promise.resolve().then(() => (init_icon_circled_info_svg(), icon_circled_info_svg_exports))).default;
    case Icons.CIRCLED_MULTIPLY:
      return (await Promise.resolve().then(() => (init_icon_circled_multiply_svg(), icon_circled_multiply_svg_exports))).default;
    case Icons.CIRCLED_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_icon_circled_question_mark_svg(), icon_circled_question_mark_svg_exports))).default;
    case Icons.CIRCLED_SEARCH:
      return (await Promise.resolve().then(() => (init_icon_circled_search_svg(), icon_circled_search_svg_exports))).default;
    case Icons.CIRCLED_STAR:
      return (await Promise.resolve().then(() => (init_icon_circled_star_svg(), icon_circled_star_svg_exports))).default;
    case Icons.CIRCLED_VISIBLE:
      return (await Promise.resolve().then(() => (init_icon_circled_visible_svg(), icon_circled_visible_svg_exports))).default;
    case Icons.CIRCLED:
      return (await Promise.resolve().then(() => (init_icon_circled_svg(), icon_circled_svg_exports))).default;
    case Icons.CIRCULAR_LOADER:
      return (await Promise.resolve().then(() => (init_icon_circular_loader_svg(), icon_circular_loader_svg_exports))).default;
    case Icons.CLOCK:
      return (await Promise.resolve().then(() => (init_icon_clock_svg(), icon_clock_svg_exports))).default;
    case Icons.CODE_BRACKETS_CIRCLED:
      return (await Promise.resolve().then(() => (init_icon_code_brackets_circled_svg(), icon_code_brackets_circled_svg_exports))).default;
    case Icons.CODE_BRACKETS:
      return (await Promise.resolve().then(() => (init_icon_code_brackets_svg(), icon_code_brackets_svg_exports))).default;
    case Icons.CODE_CHEVRONS_CIRCLED:
      return (await Promise.resolve().then(() => (init_icon_code_chevrons_circled_svg(), icon_code_chevrons_circled_svg_exports))).default;
    case Icons.CODE_CHEVRONS_OPEN_CIRCLED:
      return (await Promise.resolve().then(() => (init_icon_code_chevrons_open_circled_svg(), icon_code_chevrons_open_circled_svg_exports))).default;
    case Icons.CODE_CHEVRONS_OPEN:
      return (await Promise.resolve().then(() => (init_icon_code_chevrons_open_svg(), icon_code_chevrons_open_svg_exports))).default;
    case Icons.CODE_CHEVRONS:
      return (await Promise.resolve().then(() => (init_icon_code_chevrons_svg(), icon_code_chevrons_svg_exports))).default;
    case Icons.COMPANY:
      return (await Promise.resolve().then(() => (init_icon_company_svg(), icon_company_svg_exports))).default;
    case Icons.DISLIKE:
      return (await Promise.resolve().then(() => (init_icon_dislike_svg(), icon_dislike_svg_exports))).default;
    case Icons.EDIT_FAT:
      return (await Promise.resolve().then(() => (init_icon_edit_fat_svg(), icon_edit_fat_svg_exports))).default;
    case Icons.EDIT_L:
      return (await Promise.resolve().then(() => (init_icon_edit_l_svg(), icon_edit_l_svg_exports))).default;
    case Icons.EDIT_LINE_SWIRL:
      return (await Promise.resolve().then(() => (init_icon_edit_line_swirl_svg(), icon_edit_line_swirl_svg_exports))).default;
    case Icons.EDIT_LINE:
      return (await Promise.resolve().then(() => (init_icon_edit_line_svg(), icon_edit_line_svg_exports))).default;
    case Icons.EDIT_M:
      return (await Promise.resolve().then(() => (init_icon_edit_m_svg(), icon_edit_m_svg_exports))).default;
    case Icons.EDIT_S:
      return (await Promise.resolve().then(() => (init_icon_edit_s_svg(), icon_edit_s_svg_exports))).default;
    case Icons.EXCLAMATION_MARK_FAT:
      return (await Promise.resolve().then(() => (init_icon_exclamation_mark_fat_svg(), icon_exclamation_mark_fat_svg_exports))).default;
    case Icons.EXCLAMATION_MARK_L:
      return (await Promise.resolve().then(() => (init_icon_exclamation_mark_l_svg(), icon_exclamation_mark_l_svg_exports))).default;
    case Icons.EXCLAMATION_MARK_M:
      return (await Promise.resolve().then(() => (init_icon_exclamation_mark_m_svg(), icon_exclamation_mark_m_svg_exports))).default;
    case Icons.EXCLAMATION_MARK_S:
      return (await Promise.resolve().then(() => (init_icon_exclamation_mark_s_svg(), icon_exclamation_mark_s_svg_exports))).default;
    case Icons.FEMALE_SIMPLIFIED:
      return (await Promise.resolve().then(() => (init_icon_female_simplified_svg(), icon_female_simplified_svg_exports))).default;
    case Icons.FILE_ADD267:
      return (await Promise.resolve().then(() => (init_icon_file_add_2_67_svg(), icon_file_add_2_67_svg_exports))).default;
    case Icons.FILE_ADD269:
      return (await Promise.resolve().then(() => (init_icon_file_add_2_69_svg(), icon_file_add_2_69_svg_exports))).default;
    case Icons.FILE_ADD:
      return (await Promise.resolve().then(() => (init_icon_file_add_svg(), icon_file_add_svg_exports))).default;
    case Icons.FILE_ARCHIVE:
      return (await Promise.resolve().then(() => (init_icon_file_archive_svg(), icon_file_archive_svg_exports))).default;
    case Icons.FILE_ARROW_UP:
      return (await Promise.resolve().then(() => (init_icon_file_arrow_up_svg(), icon_file_arrow_up_svg_exports))).default;
    case Icons.FILE_BINARY:
      return (await Promise.resolve().then(() => (init_icon_file_binary_svg(), icon_file_binary_svg_exports))).default;
    case Icons.FILE_BROKEN_HEART2:
      return (await Promise.resolve().then(() => (init_icon_file_broken_heart_2_svg(), icon_file_broken_heart_2_svg_exports))).default;
    case Icons.FILE_BROKEN_HEART:
      return (await Promise.resolve().then(() => (init_icon_file_broken_heart_svg(), icon_file_broken_heart_svg_exports))).default;
    case Icons.FILE_CHECK2:
      return (await Promise.resolve().then(() => (init_icon_file_check_2_svg(), icon_file_check_2_svg_exports))).default;
    case Icons.FILE_CHECK:
      return (await Promise.resolve().then(() => (init_icon_file_check_svg(), icon_file_check_svg_exports))).default;
    case Icons.FILE_CLOUD:
      return (await Promise.resolve().then(() => (init_icon_file_cloud_svg(), icon_file_cloud_svg_exports))).default;
    case Icons.FILE_CODE:
      return (await Promise.resolve().then(() => (init_icon_file_code_svg(), icon_file_code_svg_exports))).default;
    case Icons.FILE_COLUMNS:
      return (await Promise.resolve().then(() => (init_icon_file_columns_svg(), icon_file_columns_svg_exports))).default;
    case Icons.FILE_EDIT2:
      return (await Promise.resolve().then(() => (init_icon_file_edit_2_svg(), icon_file_edit_2_svg_exports))).default;
    case Icons.FILE_EDIT:
      return (await Promise.resolve().then(() => (init_icon_file_edit_svg(), icon_file_edit_svg_exports))).default;
    case Icons.FILE_EXCLAMATION_MARK2:
      return (await Promise.resolve().then(() => (init_icon_file_exclamation_mark_2_svg(), icon_file_exclamation_mark_2_svg_exports))).default;
    case Icons.FILE_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_icon_file_exclamation_mark_svg(), icon_file_exclamation_mark_svg_exports))).default;
    case Icons.FILE_GRAPHS:
      return (await Promise.resolve().then(() => (init_icon_file_graphs_svg(), icon_file_graphs_svg_exports))).default;
    case Icons.FILE_HEART2:
      return (await Promise.resolve().then(() => (init_icon_file_heart_2_svg(), icon_file_heart_2_svg_exports))).default;
    case Icons.FILE_HEART:
      return (await Promise.resolve().then(() => (init_icon_file_heart_svg(), icon_file_heart_svg_exports))).default;
    case Icons.FILE_INFO2:
      return (await Promise.resolve().then(() => (init_icon_file_info_2_svg(), icon_file_info_2_svg_exports))).default;
    case Icons.FILE_INFO:
      return (await Promise.resolve().then(() => (init_icon_file_info_svg(), icon_file_info_svg_exports))).default;
    case Icons.FILE_INVISIBLE2:
      return (await Promise.resolve().then(() => (init_icon_file_invisible_2_svg(), icon_file_invisible_2_svg_exports))).default;
    case Icons.FILE_INVISIBLE:
      return (await Promise.resolve().then(() => (init_icon_file_invisible_svg(), icon_file_invisible_svg_exports))).default;
    case Icons.FILE_MULTIPLY:
      return (await Promise.resolve().then(() => (init_icon_file_multiply_svg(), icon_file_multiply_svg_exports))).default;
    case Icons.FILE_QUESTION_MARK2:
      return (await Promise.resolve().then(() => (init_icon_file_question_mark_2_svg(), icon_file_question_mark_2_svg_exports))).default;
    case Icons.FILE_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_icon_file_question_mark_svg(), icon_file_question_mark_svg_exports))).default;
    case Icons.FILE_SEARCH2:
      return (await Promise.resolve().then(() => (init_icon_file_search_2_svg(), icon_file_search_2_svg_exports))).default;
    case Icons.FILE_SEARCH:
      return (await Promise.resolve().then(() => (init_icon_file_search_svg(), icon_file_search_svg_exports))).default;
    case Icons.FILE_STAR2:
      return (await Promise.resolve().then(() => (init_icon_file_star_2_svg(), icon_file_star_2_svg_exports))).default;
    case Icons.FILE_STAR:
      return (await Promise.resolve().then(() => (init_icon_file_star_svg(), icon_file_star_svg_exports))).default;
    case Icons.FILE_SUBTRACT2:
      return (await Promise.resolve().then(() => (init_icon_file_subtract_2_svg(), icon_file_subtract_2_svg_exports))).default;
    case Icons.FILE_SUBTRACT:
      return (await Promise.resolve().then(() => (init_icon_file_subtract_svg(), icon_file_subtract_svg_exports))).default;
    case Icons.FILE_TEXT:
      return (await Promise.resolve().then(() => (init_icon_file_text_svg(), icon_file_text_svg_exports))).default;
    case Icons.FILE_TRAY_STACK:
      return (await Promise.resolve().then(() => (init_icon_file_tray_stack_svg(), icon_file_tray_stack_svg_exports))).default;
    case Icons.FILE_TRAY:
      return (await Promise.resolve().then(() => (init_icon_file_tray_svg(), icon_file_tray_svg_exports))).default;
    case Icons.FILE_VISIBLE2:
      return (await Promise.resolve().then(() => (init_icon_file_visible_2_svg(), icon_file_visible_2_svg_exports))).default;
    case Icons.FILE_VISIBLE:
      return (await Promise.resolve().then(() => (init_icon_file_visible_svg(), icon_file_visible_svg_exports))).default;
    case Icons.FILE:
      return (await Promise.resolve().then(() => (init_icon_file_svg(), icon_file_svg_exports))).default;
    case Icons.FOLDER_ADD2:
      return (await Promise.resolve().then(() => (init_icon_folder_add_2_svg(), icon_folder_add_2_svg_exports))).default;
    case Icons.FOLDER_ADD:
      return (await Promise.resolve().then(() => (init_icon_folder_add_svg(), icon_folder_add_svg_exports))).default;
    case Icons.FOLDER_BROKEN_HEART2:
      return (await Promise.resolve().then(() => (init_icon_folder_broken_heart_2_svg(), icon_folder_broken_heart_2_svg_exports))).default;
    case Icons.FOLDER_BROKEN_HEART:
      return (await Promise.resolve().then(() => (init_icon_folder_broken_heart_svg(), icon_folder_broken_heart_svg_exports))).default;
    case Icons.FOLDER_CHECK2:
      return (await Promise.resolve().then(() => (init_icon_folder_check_2_svg(), icon_folder_check_2_svg_exports))).default;
    case Icons.FOLDER_CHECK:
      return (await Promise.resolve().then(() => (init_icon_folder_check_svg(), icon_folder_check_svg_exports))).default;
    case Icons.FOLDER_EDIT2:
      return (await Promise.resolve().then(() => (init_icon_folder_edit_2_svg(), icon_folder_edit_2_svg_exports))).default;
    case Icons.FOLDER_EDIT:
      return (await Promise.resolve().then(() => (init_icon_folder_edit_svg(), icon_folder_edit_svg_exports))).default;
    case Icons.FOLDER_EXCLAMATION_MARK2:
      return (await Promise.resolve().then(() => (init_icon_folder_exclamation_mark_2_svg(), icon_folder_exclamation_mark_2_svg_exports))).default;
    case Icons.FOLDER_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_icon_folder_exclamation_mark_svg(), icon_folder_exclamation_mark_svg_exports))).default;
    case Icons.FOLDER_HEART2:
      return (await Promise.resolve().then(() => (init_icon_folder_heart_2_svg(), icon_folder_heart_2_svg_exports))).default;
    case Icons.FOLDER_HEART:
      return (await Promise.resolve().then(() => (init_icon_folder_heart_svg(), icon_folder_heart_svg_exports))).default;
    case Icons.FOLDER_INFO2:
      return (await Promise.resolve().then(() => (init_icon_folder_info_2_svg(), icon_folder_info_2_svg_exports))).default;
    case Icons.FOLDER_INFO:
      return (await Promise.resolve().then(() => (init_icon_folder_info_svg(), icon_folder_info_svg_exports))).default;
    case Icons.FOLDER_INVISIBLE2:
      return (await Promise.resolve().then(() => (init_icon_folder_invisible_2_svg(), icon_folder_invisible_2_svg_exports))).default;
    case Icons.FOLDER_INVISIBLE:
      return (await Promise.resolve().then(() => (init_icon_folder_invisible_svg(), icon_folder_invisible_svg_exports))).default;
    case Icons.FOLDER_MULTIPLY2:
      return (await Promise.resolve().then(() => (init_icon_folder_multiply_2_svg(), icon_folder_multiply_2_svg_exports))).default;
    case Icons.FOLDER_MULTIPLY:
      return (await Promise.resolve().then(() => (init_icon_folder_multiply_svg(), icon_folder_multiply_svg_exports))).default;
    case Icons.FOLDER_QUESTION_MARK2:
      return (await Promise.resolve().then(() => (init_icon_folder_question_mark_2_svg(), icon_folder_question_mark_2_svg_exports))).default;
    case Icons.FOLDER_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_icon_folder_question_mark_svg(), icon_folder_question_mark_svg_exports))).default;
    case Icons.FOLDER_SEARCH2:
      return (await Promise.resolve().then(() => (init_icon_folder_search_2_svg(), icon_folder_search_2_svg_exports))).default;
    case Icons.FOLDER_SEARCH:
      return (await Promise.resolve().then(() => (init_icon_folder_search_svg(), icon_folder_search_svg_exports))).default;
    case Icons.FOLDER_STAR2:
      return (await Promise.resolve().then(() => (init_icon_folder_star_2_svg(), icon_folder_star_2_svg_exports))).default;
    case Icons.FOLDER_STAR:
      return (await Promise.resolve().then(() => (init_icon_folder_star_svg(), icon_folder_star_svg_exports))).default;
    case Icons.FOLDER_SUBTRACT2:
      return (await Promise.resolve().then(() => (init_icon_folder_subtract_2_svg(), icon_folder_subtract_2_svg_exports))).default;
    case Icons.FOLDER_SUBTRACT:
      return (await Promise.resolve().then(() => (init_icon_folder_subtract_svg(), icon_folder_subtract_svg_exports))).default;
    case Icons.FOLDER_VISIBLE2:
      return (await Promise.resolve().then(() => (init_icon_folder_visible_2_svg(), icon_folder_visible_2_svg_exports))).default;
    case Icons.FOLDER_VISIBLE:
      return (await Promise.resolve().then(() => (init_icon_folder_visible_svg(), icon_folder_visible_svg_exports))).default;
    case Icons.FOLDER:
      return (await Promise.resolve().then(() => (init_icon_folder_svg(), icon_folder_svg_exports))).default;
    case Icons.GIRL:
      return (await Promise.resolve().then(() => (init_icon_girl_svg(), icon_girl_svg_exports))).default;
    case Icons.GIT_BRANCH:
      return (await Promise.resolve().then(() => (init_icon_git_branch_svg(), icon_git_branch_svg_exports))).default;
    case Icons.GIT_COMPARE:
      return (await Promise.resolve().then(() => (init_icon_git_compare_svg(), icon_git_compare_svg_exports))).default;
    case Icons.GIT_MERGE_QUEUE:
      return (await Promise.resolve().then(() => (init_icon_git_merge_queue_svg(), icon_git_merge_queue_svg_exports))).default;
    case Icons.GIT_MERGE:
      return (await Promise.resolve().then(() => (init_icon_git_merge_svg(), icon_git_merge_svg_exports))).default;
    case Icons.GIT_PULL_REQUEST_CLOSED:
      return (await Promise.resolve().then(() => (init_icon_git_pull_request_closed_svg(), icon_git_pull_request_closed_svg_exports))).default;
    case Icons.GIT_PULL_REQUEST_DRAFT:
      return (await Promise.resolve().then(() => (init_icon_git_pull_request_draft_svg(), icon_git_pull_request_draft_svg_exports))).default;
    case Icons.GIT_PULL_REQUEST:
      return (await Promise.resolve().then(() => (init_icon_git_pull_request_svg(), icon_git_pull_request_svg_exports))).default;
    case Icons.GIT_REPO_FORK:
      return (await Promise.resolve().then(() => (init_icon_git_repo_fork_svg(), icon_git_repo_fork_svg_exports))).default;
    case Icons.HEART_BROKEN_SMALL:
      return (await Promise.resolve().then(() => (init_icon_heart_broken_small_svg(), icon_heart_broken_small_svg_exports))).default;
    case Icons.HEART_FAT:
      return (await Promise.resolve().then(() => (init_icon_heart_fat_svg(), icon_heart_fat_svg_exports))).default;
    case Icons.HEART_L:
      return (await Promise.resolve().then(() => (init_icon_heart_l_svg(), icon_heart_l_svg_exports))).default;
    case Icons.HEART_M:
      return (await Promise.resolve().then(() => (init_icon_heart_m_svg(), icon_heart_m_svg_exports))).default;
    case Icons.HEART_SMALL:
      return (await Promise.resolve().then(() => (init_icon_heart_small_svg(), icon_heart_small_svg_exports))).default;
    case Icons.INFO_FAT:
      return (await Promise.resolve().then(() => (init_icon_info_fat_svg(), icon_info_fat_svg_exports))).default;
    case Icons.INFO_L:
      return (await Promise.resolve().then(() => (init_icon_info_l_svg(), icon_info_l_svg_exports))).default;
    case Icons.INFO_M:
      return (await Promise.resolve().then(() => (init_icon_info_m_svg(), icon_info_m_svg_exports))).default;
    case Icons.INFO_S:
      return (await Promise.resolve().then(() => (init_icon_info_s_svg(), icon_info_s_svg_exports))).default;
    case Icons.INVISIBLE_FAT:
      return (await Promise.resolve().then(() => (init_icon_invisible_fat_svg(), icon_invisible_fat_svg_exports))).default;
    case Icons.INVISIBLE_L:
      return (await Promise.resolve().then(() => (init_icon_invisible_l_svg(), icon_invisible_l_svg_exports))).default;
    case Icons.INVISIBLE_M:
      return (await Promise.resolve().then(() => (init_icon_invisible_m_svg(), icon_invisible_m_svg_exports))).default;
    case Icons.INVISIBLE_S:
      return (await Promise.resolve().then(() => (init_icon_invisible_s_svg(), icon_invisible_s_svg_exports))).default;
    case Icons.KEY_BACKSPACE:
      return (await Promise.resolve().then(() => (init_icon_key_backspace_svg(), icon_key_backspace_svg_exports))).default;
    case Icons.KEY_DELETE:
      return (await Promise.resolve().then(() => (init_icon_key_delete_svg(), icon_key_delete_svg_exports))).default;
    case Icons.KEY_DOWN:
      return (await Promise.resolve().then(() => (init_icon_key_down_svg(), icon_key_down_svg_exports))).default;
    case Icons.KEY_EJECT:
      return (await Promise.resolve().then(() => (init_icon_key_eject_svg(), icon_key_eject_svg_exports))).default;
    case Icons.KEY_ENTER:
      return (await Promise.resolve().then(() => (init_icon_key_enter_svg(), icon_key_enter_svg_exports))).default;
    case Icons.KEY_FUNCTION:
      return (await Promise.resolve().then(() => (init_icon_key_function_svg(), icon_key_function_svg_exports))).default;
    case Icons.KEY_MAC_COMMAND:
      return (await Promise.resolve().then(() => (init_icon_key_mac_command_svg(), icon_key_mac_command_svg_exports))).default;
    case Icons.KEY_OPTION:
      return (await Promise.resolve().then(() => (init_icon_key_option_svg(), icon_key_option_svg_exports))).default;
    case Icons.KEY_PAGE_DOWN:
      return (await Promise.resolve().then(() => (init_icon_key_page_down_svg(), icon_key_page_down_svg_exports))).default;
    case Icons.KEY_PAGE_NEXT:
      return (await Promise.resolve().then(() => (init_icon_key_page_next_svg(), icon_key_page_next_svg_exports))).default;
    case Icons.KEY_PAGE_UP:
      return (await Promise.resolve().then(() => (init_icon_key_page_up_svg(), icon_key_page_up_svg_exports))).default;
    case Icons.KEY_PREVIOUS_UP:
      return (await Promise.resolve().then(() => (init_icon_key_previous_up_svg(), icon_key_previous_up_svg_exports))).default;
    case Icons.KEY_SHIFT:
      return (await Promise.resolve().then(() => (init_icon_key_shift_svg(), icon_key_shift_svg_exports))).default;
    case Icons.KEY_TAB:
      return (await Promise.resolve().then(() => (init_icon_key_tab_svg(), icon_key_tab_svg_exports))).default;
    case Icons.KEY_UP:
      return (await Promise.resolve().then(() => (init_icon_key_up_svg(), icon_key_up_svg_exports))).default;
    case Icons.LIKE:
      return (await Promise.resolve().then(() => (init_icon_like_svg(), icon_like_svg_exports))).default;
    case Icons.LINK:
      return (await Promise.resolve().then(() => (init_icon_link_svg(), icon_link_svg_exports))).default;
    case Icons.LOADER_DOTS2:
      return (await Promise.resolve().then(() => (init_icon_loader_dots_2_svg(), icon_loader_dots_2_svg_exports))).default;
    case Icons.LOADER_DOTS:
      return (await Promise.resolve().then(() => (init_icon_loader_dots_svg(), icon_loader_dots_svg_exports))).default;
    case Icons.MALE_SIMPLIFIED:
      return (await Promise.resolve().then(() => (init_icon_male_simplified_svg(), icon_male_simplified_svg_exports))).default;
    case Icons.MOVING_BLOCK:
      return (await Promise.resolve().then(() => (init_icon_moving_block_svg(), icon_moving_block_svg_exports))).default;
    case Icons.MULTIPLY_FAT:
      return (await Promise.resolve().then(() => (init_icon_multiply_fat_svg(), icon_multiply_fat_svg_exports))).default;
    case Icons.MULTIPLY_L:
      return (await Promise.resolve().then(() => (init_icon_multiply_l_svg(), icon_multiply_l_svg_exports))).default;
    case Icons.MULTIPLY_M:
      return (await Promise.resolve().then(() => (init_icon_multiply_m_svg(), icon_multiply_m_svg_exports))).default;
    case Icons.MULTIPLY_S:
      return (await Promise.resolve().then(() => (init_icon_multiply_s_svg(), icon_multiply_s_svg_exports))).default;
    case Icons.NOTE_ADD2:
      return (await Promise.resolve().then(() => (init_icon_note_add_2_svg(), icon_note_add_2_svg_exports))).default;
    case Icons.NOTE_ADD:
      return (await Promise.resolve().then(() => (init_icon_note_add_svg(), icon_note_add_svg_exports))).default;
    case Icons.NOTE_BROKEN_HEART2:
      return (await Promise.resolve().then(() => (init_icon_note_broken_heart_2_svg(), icon_note_broken_heart_2_svg_exports))).default;
    case Icons.NOTE_BROKEN_HEART:
      return (await Promise.resolve().then(() => (init_icon_note_broken_heart_svg(), icon_note_broken_heart_svg_exports))).default;
    case Icons.NOTE_CHECK2:
      return (await Promise.resolve().then(() => (init_icon_note_check_2_svg(), icon_note_check_2_svg_exports))).default;
    case Icons.NOTE_CHECK:
      return (await Promise.resolve().then(() => (init_icon_note_check_svg(), icon_note_check_svg_exports))).default;
    case Icons.NOTE_EDIT2:
      return (await Promise.resolve().then(() => (init_icon_note_edit_2_svg(), icon_note_edit_2_svg_exports))).default;
    case Icons.NOTE_EDIT:
      return (await Promise.resolve().then(() => (init_icon_note_edit_svg(), icon_note_edit_svg_exports))).default;
    case Icons.NOTE_EXCLAMATION_MARK2:
      return (await Promise.resolve().then(() => (init_icon_note_exclamation_mark_2_svg(), icon_note_exclamation_mark_2_svg_exports))).default;
    case Icons.NOTE_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_icon_note_exclamation_mark_svg(), icon_note_exclamation_mark_svg_exports))).default;
    case Icons.NOTE_HEART2:
      return (await Promise.resolve().then(() => (init_icon_note_heart_2_svg(), icon_note_heart_2_svg_exports))).default;
    case Icons.NOTE_HEART:
      return (await Promise.resolve().then(() => (init_icon_note_heart_svg(), icon_note_heart_svg_exports))).default;
    case Icons.NOTE_INFO2:
      return (await Promise.resolve().then(() => (init_icon_note_info_2_svg(), icon_note_info_2_svg_exports))).default;
    case Icons.NOTE_INFO:
      return (await Promise.resolve().then(() => (init_icon_note_info_svg(), icon_note_info_svg_exports))).default;
    case Icons.NOTE_INVISIBLE2:
      return (await Promise.resolve().then(() => (init_icon_note_invisible_2_svg(), icon_note_invisible_2_svg_exports))).default;
    case Icons.NOTE_INVISIBLE:
      return (await Promise.resolve().then(() => (init_icon_note_invisible_svg(), icon_note_invisible_svg_exports))).default;
    case Icons.NOTE_MULTIPLY2:
      return (await Promise.resolve().then(() => (init_icon_note_multiply_2_svg(), icon_note_multiply_2_svg_exports))).default;
    case Icons.NOTE_MULTIPLY:
      return (await Promise.resolve().then(() => (init_icon_note_multiply_svg(), icon_note_multiply_svg_exports))).default;
    case Icons.NOTE_QUESTION_MARK2:
      return (await Promise.resolve().then(() => (init_icon_note_question_mark_2_svg(), icon_note_question_mark_2_svg_exports))).default;
    case Icons.NOTE_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_icon_note_question_mark_svg(), icon_note_question_mark_svg_exports))).default;
    case Icons.NOTE_SEARCH2:
      return (await Promise.resolve().then(() => (init_icon_note_search_2_svg(), icon_note_search_2_svg_exports))).default;
    case Icons.NOTE_SEARCH:
      return (await Promise.resolve().then(() => (init_icon_note_search_svg(), icon_note_search_svg_exports))).default;
    case Icons.NOTE_STAR2:
      return (await Promise.resolve().then(() => (init_icon_note_star_2_svg(), icon_note_star_2_svg_exports))).default;
    case Icons.NOTE_STAR:
      return (await Promise.resolve().then(() => (init_icon_note_star_svg(), icon_note_star_svg_exports))).default;
    case Icons.NOTE_SUBTRACT2:
      return (await Promise.resolve().then(() => (init_icon_note_subtract_2_svg(), icon_note_subtract_2_svg_exports))).default;
    case Icons.NOTE_SUBTRACT:
      return (await Promise.resolve().then(() => (init_icon_note_subtract_svg(), icon_note_subtract_svg_exports))).default;
    case Icons.NOTE_VISIBLE2:
      return (await Promise.resolve().then(() => (init_icon_note_visible_2_svg(), icon_note_visible_2_svg_exports))).default;
    case Icons.NOTE_VISIBLE:
      return (await Promise.resolve().then(() => (init_icon_note_visible_svg(), icon_note_visible_svg_exports))).default;
    case Icons.NOTE:
      return (await Promise.resolve().then(() => (init_icon_note_svg(), icon_note_svg_exports))).default;
    case Icons.ON_TARGET:
      return (await Promise.resolve().then(() => (init_icon_on_target_svg(), icon_on_target_svg_exports))).default;
    case Icons.PARAGRAPH:
      return (await Promise.resolve().then(() => (init_icon_paragraph_svg(), icon_paragraph_svg_exports))).default;
    case Icons.PERFORMANCE2:
      return (await Promise.resolve().then(() => (init_icon_performance_2_svg(), icon_performance_2_svg_exports))).default;
    case Icons.PERFORMANCE:
      return (await Promise.resolve().then(() => (init_icon_performance_svg(), icon_performance_svg_exports))).default;
    case Icons.PIN_TILTED:
      return (await Promise.resolve().then(() => (init_icon_pin_tilted_svg(), icon_pin_tilted_svg_exports))).default;
    case Icons.PIN:
      return (await Promise.resolve().then(() => (init_icon_pin_svg(), icon_pin_svg_exports))).default;
    case Icons.PLANNER:
      return (await Promise.resolve().then(() => (init_icon_planner_svg(), icon_planner_svg_exports))).default;
    case Icons.POINTER_ARROW_LINE:
      return (await Promise.resolve().then(() => (init_icon_pointer_arrow_line_svg(), icon_pointer_arrow_line_svg_exports))).default;
    case Icons.POINTER_ARROW:
      return (await Promise.resolve().then(() => (init_icon_pointer_arrow_svg(), icon_pointer_arrow_svg_exports))).default;
    case Icons.POINTER_CROSS:
      return (await Promise.resolve().then(() => (init_icon_pointer_cross_svg(), icon_pointer_cross_svg_exports))).default;
    case Icons.POINTER_HAND:
      return (await Promise.resolve().then(() => (init_icon_pointer_hand_svg(), icon_pointer_hand_svg_exports))).default;
    case Icons.POINTER_LEFT:
      return (await Promise.resolve().then(() => (init_icon_pointer_left_svg(), icon_pointer_left_svg_exports))).default;
    case Icons.POINTER_MOUSE:
      return (await Promise.resolve().then(() => (init_icon_pointer_mouse_svg(), icon_pointer_mouse_svg_exports))).default;
    case Icons.POINTER_PEN:
      return (await Promise.resolve().then(() => (init_icon_pointer_pen_svg(), icon_pointer_pen_svg_exports))).default;
    case Icons.POINTER_TEXT:
      return (await Promise.resolve().then(() => (init_icon_pointer_text_svg(), icon_pointer_text_svg_exports))).default;
    case Icons.QUESTION_MARK_FAT:
      return (await Promise.resolve().then(() => (init_icon_question_mark_fat_svg(), icon_question_mark_fat_svg_exports))).default;
    case Icons.QUESTION_MARK_L:
      return (await Promise.resolve().then(() => (init_icon_question_mark_l_svg(), icon_question_mark_l_svg_exports))).default;
    case Icons.QUESTION_MARK_M:
      return (await Promise.resolve().then(() => (init_icon_question_mark_m_svg(), icon_question_mark_m_svg_exports))).default;
    case Icons.QUESTION_MARK_S:
      return (await Promise.resolve().then(() => (init_icon_question_mark_s_svg(), icon_question_mark_s_svg_exports))).default;
    case Icons.REMOVE_LINES:
      return (await Promise.resolve().then(() => (init_icon_remove_lines_svg(), icon_remove_lines_svg_exports))).default;
    case Icons.SEARCH_FAT:
      return (await Promise.resolve().then(() => (init_icon_search_fat_svg(), icon_search_fat_svg_exports))).default;
    case Icons.SEARCH_L:
      return (await Promise.resolve().then(() => (init_icon_search_l_svg(), icon_search_l_svg_exports))).default;
    case Icons.SEARCH_M:
      return (await Promise.resolve().then(() => (init_icon_search_m_svg(), icon_search_m_svg_exports))).default;
    case Icons.SEARCH_SMALL:
      return (await Promise.resolve().then(() => (init_icon_search_small_svg(), icon_search_small_svg_exports))).default;
    case Icons.SECTION:
      return (await Promise.resolve().then(() => (init_icon_section_svg(), icon_section_svg_exports))).default;
    case Icons.SETTINGS2:
      return (await Promise.resolve().then(() => (init_icon_settings_2_svg(), icon_settings_2_svg_exports))).default;
    case Icons.SETTINGS3:
      return (await Promise.resolve().then(() => (init_icon_settings_3_svg(), icon_settings_3_svg_exports))).default;
    case Icons.SETTINGS4:
      return (await Promise.resolve().then(() => (init_icon_settings_4_svg(), icon_settings_4_svg_exports))).default;
    case Icons.SETTINGS5:
      return (await Promise.resolve().then(() => (init_icon_settings_5_svg(), icon_settings_5_svg_exports))).default;
    case Icons.SETTINGS:
      return (await Promise.resolve().then(() => (init_icon_settings_svg(), icon_settings_svg_exports))).default;
    case Icons.SPEECH_BALLOON2:
      return (await Promise.resolve().then(() => (init_icon_speech_balloon_2_svg(), icon_speech_balloon_2_svg_exports))).default;
    case Icons.SPEECH_BALLOON_SQUARE2:
      return (await Promise.resolve().then(() => (init_icon_speech_balloon_square_2_svg(), icon_speech_balloon_square_2_svg_exports))).default;
    case Icons.SPEECH_BALLOON_SQUARE_COPY:
      return (await Promise.resolve().then(() => (init_icon_speech_balloon_square_copy_svg(), icon_speech_balloon_square_copy_svg_exports))).default;
    case Icons.SPEECH_BALLOON_SQUARE_TEXT:
      return (await Promise.resolve().then(() => (init_icon_speech_balloon_square_text_svg(), icon_speech_balloon_square_text_svg_exports))).default;
    case Icons.SPEECH_BALLOON_SQUARE:
      return (await Promise.resolve().then(() => (init_icon_speech_balloon_square_svg(), icon_speech_balloon_square_svg_exports))).default;
    case Icons.SPEECH_BALLOON:
      return (await Promise.resolve().then(() => (init_icon_speech_balloon_svg(), icon_speech_balloon_svg_exports))).default;
    case Icons.SPEECH_BALLOONS:
      return (await Promise.resolve().then(() => (init_icon_speech_balloons_svg(), icon_speech_balloons_svg_exports))).default;
    case Icons.SQUARED_ADD:
      return (await Promise.resolve().then(() => (init_icon_squared_add_svg(), icon_squared_add_svg_exports))).default;
    case Icons.SQUARED_BROKEN_HEART:
      return (await Promise.resolve().then(() => (init_icon_squared_broken_heart_svg(), icon_squared_broken_heart_svg_exports))).default;
    case Icons.SQUARED_CHECK:
      return (await Promise.resolve().then(() => (init_icon_squared_check_svg(), icon_squared_check_svg_exports))).default;
    case Icons.SQUARED_EDIT:
      return (await Promise.resolve().then(() => (init_icon_squared_edit_svg(), icon_squared_edit_svg_exports))).default;
    case Icons.SQUARED_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_icon_squared_exclamation_mark_svg(), icon_squared_exclamation_mark_svg_exports))).default;
    case Icons.SQUARED_HEART:
      return (await Promise.resolve().then(() => (init_icon_squared_heart_svg(), icon_squared_heart_svg_exports))).default;
    case Icons.SQUARED_INFO:
      return (await Promise.resolve().then(() => (init_icon_squared_info_svg(), icon_squared_info_svg_exports))).default;
    case Icons.SQUARED_INVISIBLE:
      return (await Promise.resolve().then(() => (init_icon_squared_invisible_svg(), icon_squared_invisible_svg_exports))).default;
    case Icons.SQUARED_MULTIPLY:
      return (await Promise.resolve().then(() => (init_icon_squared_multiply_svg(), icon_squared_multiply_svg_exports))).default;
    case Icons.SQUARED_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_icon_squared_question_mark_svg(), icon_squared_question_mark_svg_exports))).default;
    case Icons.SQUARED_SEARCH:
      return (await Promise.resolve().then(() => (init_icon_squared_search_svg(), icon_squared_search_svg_exports))).default;
    case Icons.SQUARED_STAR:
      return (await Promise.resolve().then(() => (init_icon_squared_star_svg(), icon_squared_star_svg_exports))).default;
    case Icons.SQUARED_SUBTRACT:
      return (await Promise.resolve().then(() => (init_icon_squared_subtract_svg(), icon_squared_subtract_svg_exports))).default;
    case Icons.SQUARED_VISIBLE:
      return (await Promise.resolve().then(() => (init_icon_squared_visible_svg(), icon_squared_visible_svg_exports))).default;
    case Icons.SQUARED:
      return (await Promise.resolve().then(() => (init_icon_squared_svg(), icon_squared_svg_exports))).default;
    case Icons.STAMP:
      return (await Promise.resolve().then(() => (init_icon_stamp_svg(), icon_stamp_svg_exports))).default;
    case Icons.STAR_FAT:
      return (await Promise.resolve().then(() => (init_icon_star_fat_svg(), icon_star_fat_svg_exports))).default;
    case Icons.STAR_L:
      return (await Promise.resolve().then(() => (init_icon_star_l_svg(), icon_star_l_svg_exports))).default;
    case Icons.STAR_M:
      return (await Promise.resolve().then(() => (init_icon_star_m_svg(), icon_star_m_svg_exports))).default;
    case Icons.STAR_SMALL:
      return (await Promise.resolve().then(() => (init_icon_star_small_svg(), icon_star_small_svg_exports))).default;
    case Icons.STICKER:
      return (await Promise.resolve().then(() => (init_icon_sticker_svg(), icon_sticker_svg_exports))).default;
    case Icons.STOPWATCH:
      return (await Promise.resolve().then(() => (init_icon_stopwatch_svg(), icon_stopwatch_svg_exports))).default;
    case Icons.SUBTRACT_FAT:
      return (await Promise.resolve().then(() => (init_icon_subtract_fat_svg(), icon_subtract_fat_svg_exports))).default;
    case Icons.SUBTRACT_L:
      return (await Promise.resolve().then(() => (init_icon_subtract_l_svg(), icon_subtract_l_svg_exports))).default;
    case Icons.SUBTRACT_M:
      return (await Promise.resolve().then(() => (init_icon_subtract_m_svg(), icon_subtract_m_svg_exports))).default;
    case Icons.SUBTRACT_S:
      return (await Promise.resolve().then(() => (init_icon_subtract_s_svg(), icon_subtract_s_svg_exports))).default;
    case Icons.TABLES:
      return (await Promise.resolve().then(() => (init_icon_tables_svg(), icon_tables_svg_exports))).default;
    case Icons.TALK_ADD:
      return (await Promise.resolve().then(() => (init_icon_talk_add_svg(), icon_talk_add_svg_exports))).default;
    case Icons.TALK_CHECK:
      return (await Promise.resolve().then(() => (init_icon_talk_check_svg(), icon_talk_check_svg_exports))).default;
    case Icons.TALK_DELETE:
      return (await Promise.resolve().then(() => (init_icon_talk_delete_svg(), icon_talk_delete_svg_exports))).default;
    case Icons.TALK_EDIT:
      return (await Promise.resolve().then(() => (init_icon_talk_edit_svg(), icon_talk_edit_svg_exports))).default;
    case Icons.TALK_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_icon_talk_exclamation_mark_svg(), icon_talk_exclamation_mark_svg_exports))).default;
    case Icons.TALK_HEART_BROKEN:
      return (await Promise.resolve().then(() => (init_icon_talk_heart_broken_svg(), icon_talk_heart_broken_svg_exports))).default;
    case Icons.TALK_HEART:
      return (await Promise.resolve().then(() => (init_icon_talk_heart_svg(), icon_talk_heart_svg_exports))).default;
    case Icons.TALK_INFO:
      return (await Promise.resolve().then(() => (init_icon_talk_info_svg(), icon_talk_info_svg_exports))).default;
    case Icons.TALK_INVISIBLE:
      return (await Promise.resolve().then(() => (init_icon_talk_invisible_svg(), icon_talk_invisible_svg_exports))).default;
    case Icons.TALK_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_icon_talk_question_mark_svg(), icon_talk_question_mark_svg_exports))).default;
    case Icons.TALK_SEARCH:
      return (await Promise.resolve().then(() => (init_icon_talk_search_svg(), icon_talk_search_svg_exports))).default;
    case Icons.TALK_STAR:
      return (await Promise.resolve().then(() => (init_icon_talk_star_svg(), icon_talk_star_svg_exports))).default;
    case Icons.TALK_SUBTRACT:
      return (await Promise.resolve().then(() => (init_icon_talk_subtract_svg(), icon_talk_subtract_svg_exports))).default;
    case Icons.TALK_VISIBLE:
      return (await Promise.resolve().then(() => (init_icon_talk_visible_svg(), icon_talk_visible_svg_exports))).default;
    case Icons.TALK:
      return (await Promise.resolve().then(() => (init_icon_talk_svg(), icon_talk_svg_exports))).default;
    case Icons.TARGET:
      return (await Promise.resolve().then(() => (init_icon_target_svg(), icon_target_svg_exports))).default;
    case Icons.TEXT_ALIGN_CENTER:
      return (await Promise.resolve().then(() => (init_icon_text_align_center_svg(), icon_text_align_center_svg_exports))).default;
    case Icons.TEXT_ALIGN_JUSTIFY_CENTERED:
      return (await Promise.resolve().then(() => (init_icon_text_align_justify_centered_svg(), icon_text_align_justify_centered_svg_exports))).default;
    case Icons.TEXT_ALIGN_JUSTIFY_LEFT:
      return (await Promise.resolve().then(() => (init_icon_text_align_justify_left_svg(), icon_text_align_justify_left_svg_exports))).default;
    case Icons.TEXT_ALIGN_JUSTIFY_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_text_align_justify_right_svg(), icon_text_align_justify_right_svg_exports))).default;
    case Icons.TEXT_ALIGN_JUSTIFY:
      return (await Promise.resolve().then(() => (init_icon_text_align_justify_svg(), icon_text_align_justify_svg_exports))).default;
    case Icons.TEXT_ALIGN_LEFT:
      return (await Promise.resolve().then(() => (init_icon_text_align_left_svg(), icon_text_align_left_svg_exports))).default;
    case Icons.TEXT_ALIGN_RIGHT_ORDER_DESC:
      return (await Promise.resolve().then(() => (init_icon_text_align_right_order_desc_svg(), icon_text_align_right_order_desc_svg_exports))).default;
    case Icons.TEXT_ALIGN_RIGHT:
      return (await Promise.resolve().then(() => (init_icon_text_align_right_svg(), icon_text_align_right_svg_exports))).default;
    case Icons.TEXT_BOLD:
      return (await Promise.resolve().then(() => (init_icon_text_bold_svg(), icon_text_bold_svg_exports))).default;
    case Icons.TEXT_DETAIL_LIST:
      return (await Promise.resolve().then(() => (init_icon_text_detail_list_svg(), icon_text_detail_list_svg_exports))).default;
    case Icons.TEXT_INDENT:
      return (await Promise.resolve().then(() => (init_icon_text_indent_svg(), icon_text_indent_svg_exports))).default;
    case Icons.TEXT_ITALIC:
      return (await Promise.resolve().then(() => (init_icon_text_italic_svg(), icon_text_italic_svg_exports))).default;
    case Icons.TEXT_LINE_THROUGH:
      return (await Promise.resolve().then(() => (init_icon_text_line_through_svg(), icon_text_line_through_svg_exports))).default;
    case Icons.TEXT_ORDER_ASC114:
      return (await Promise.resolve().then(() => (init_icon_text_order_asc_114_svg(), icon_text_order_asc_114_svg_exports))).default;
    case Icons.TEXT_ORDER_ASC118:
      return (await Promise.resolve().then(() => (init_icon_text_order_asc_118_svg(), icon_text_order_asc_118_svg_exports))).default;
    case Icons.TEXT_ORDER_DESC_COPY2:
      return (await Promise.resolve().then(() => (init_icon_text_order_desc_copy_2_svg(), icon_text_order_desc_copy_2_svg_exports))).default;
    case Icons.TEXT_ORDER_DESC_COPY3:
      return (await Promise.resolve().then(() => (init_icon_text_order_desc_copy_3_svg(), icon_text_order_desc_copy_3_svg_exports))).default;
    case Icons.TEXT_ORDER_DESC_COPY:
      return (await Promise.resolve().then(() => (init_icon_text_order_desc_copy_svg(), icon_text_order_desc_copy_svg_exports))).default;
    case Icons.TEXT_ORDER_DESC:
      return (await Promise.resolve().then(() => (init_icon_text_order_desc_svg(), icon_text_order_desc_svg_exports))).default;
    case Icons.TEXT_OUTDENT:
      return (await Promise.resolve().then(() => (init_icon_text_outdent_svg(), icon_text_outdent_svg_exports))).default;
    case Icons.TEXT_UNDERLINE:
      return (await Promise.resolve().then(() => (init_icon_text_underline_svg(), icon_text_underline_svg_exports))).default;
    case Icons.TIMER:
      return (await Promise.resolve().then(() => (init_icon_timer_svg(), icon_timer_svg_exports))).default;
    case Icons.TRASH2:
      return (await Promise.resolve().then(() => (init_icon_trash_2_svg(), icon_trash_2_svg_exports))).default;
    case Icons.TRASH:
      return (await Promise.resolve().then(() => (init_icon_trash_svg(), icon_trash_svg_exports))).default;
    case Icons.TRIANGLED_EXCLAMATION_MARK:
      return (await Promise.resolve().then(() => (init_icon_triangled_exclamation_mark_svg(), icon_triangled_exclamation_mark_svg_exports))).default;
    case Icons.TRIANGLED_INFO:
      return (await Promise.resolve().then(() => (init_icon_triangled_info_svg(), icon_triangled_info_svg_exports))).default;
    case Icons.TRIANGLED_QUESTION_MARK:
      return (await Promise.resolve().then(() => (init_icon_triangled_question_mark_svg(), icon_triangled_question_mark_svg_exports))).default;
    case Icons.TRIANGLED:
      return (await Promise.resolve().then(() => (init_icon_triangled_svg(), icon_triangled_svg_exports))).default;
    case Icons.USER_ADD:
      return (await Promise.resolve().then(() => (init_icon_user_add_svg(), icon_user_add_svg_exports))).default;
    case Icons.USER_DELETE:
      return (await Promise.resolve().then(() => (init_icon_user_delete_svg(), icon_user_delete_svg_exports))).default;
    case Icons.USER_GROUP:
      return (await Promise.resolve().then(() => (init_icon_user_group_svg(), icon_user_group_svg_exports))).default;
    case Icons.USER:
      return (await Promise.resolve().then(() => (init_icon_user_svg(), icon_user_svg_exports))).default;
    case Icons.USERS:
      return (await Promise.resolve().then(() => (init_icon_users_svg(), icon_users_svg_exports))).default;
    case Icons.VISIBLE_FAT:
      return (await Promise.resolve().then(() => (init_icon_visible_fat_svg(), icon_visible_fat_svg_exports))).default;
    case Icons.VISIBLE_L:
      return (await Promise.resolve().then(() => (init_icon_visible_l_svg(), icon_visible_l_svg_exports))).default;
    case Icons.VISIBLE_M:
      return (await Promise.resolve().then(() => (init_icon_visible_m_svg(), icon_visible_m_svg_exports))).default;
    case Icons.VISIBLE_S:
      return (await Promise.resolve().then(() => (init_icon_visible_s_svg(), icon_visible_s_svg_exports))).default;
    case Icons.WHEELCHAIR_ACTION:
      return (await Promise.resolve().then(() => (init_icon_wheelchair_action_svg(), icon_wheelchair_action_svg_exports))).default;
    case Icons.WHEELCHAIR:
      return (await Promise.resolve().then(() => (init_icon_wheelchair_svg(), icon_wheelchair_svg_exports))).default;
    case Icons.AIRPLANE_ARRIVALS:
      return (await Promise.resolve().then(() => (init_icon_airplane_arrivals_svg(), icon_airplane_arrivals_svg_exports))).default;
    case Icons.AIRPLANE_DEPARTURES:
      return (await Promise.resolve().then(() => (init_icon_airplane_departures_svg(), icon_airplane_departures_svg_exports))).default;
    case Icons.AIRPLANE:
      return (await Promise.resolve().then(() => (init_icon_airplane_svg(), icon_airplane_svg_exports))).default;
    case Icons.AIRPORT_CONNECT_FLIGHTS:
      return (await Promise.resolve().then(() => (init_icon_airport_connect_flights_svg(), icon_airport_connect_flights_svg_exports))).default;
    case Icons.AIRPORT_TRANSFER2:
      return (await Promise.resolve().then(() => (init_icon_airport_transfer_2_svg(), icon_airport_transfer_2_svg_exports))).default;
    case Icons.AIRPORT_TRANSFER:
      return (await Promise.resolve().then(() => (init_icon_airport_transfer_svg(), icon_airport_transfer_svg_exports))).default;
    case Icons.ANCHOR:
      return (await Promise.resolve().then(() => (init_icon_anchor_svg(), icon_anchor_svg_exports))).default;
    case Icons.BICYCLE_SURFBOARD:
      return (await Promise.resolve().then(() => (init_icon_bicycle_surfboard_svg(), icon_bicycle_surfboard_svg_exports))).default;
    case Icons.BICYCLE:
      return (await Promise.resolve().then(() => (init_icon_bicycle_svg(), icon_bicycle_svg_exports))).default;
    case Icons.BRIEFCASE_CROSS:
      return (await Promise.resolve().then(() => (init_icon_briefcase_cross_svg(), icon_briefcase_cross_svg_exports))).default;
    case Icons.CAR_PARKING_INDOOR:
      return (await Promise.resolve().then(() => (init_icon_car_parking_indoor_svg(), icon_car_parking_indoor_svg_exports))).default;
    case Icons.CAR_PARKING_OUTSIDE:
      return (await Promise.resolve().then(() => (init_icon_car_parking_outside_svg(), icon_car_parking_outside_svg_exports))).default;
    case Icons.CAR_PARKING:
      return (await Promise.resolve().then(() => (init_icon_car_parking_svg(), icon_car_parking_svg_exports))).default;
    case Icons.CAR:
      return (await Promise.resolve().then(() => (init_icon_car_svg(), icon_car_svg_exports))).default;
    case Icons.CHANGING_AREA:
      return (await Promise.resolve().then(() => (init_icon_changing_area_svg(), icon_changing_area_svg_exports))).default;
    case Icons.CHECK_IN:
      return (await Promise.resolve().then(() => (init_icon_check_in_svg(), icon_check_in_svg_exports))).default;
    case Icons.CITY_BUS:
      return (await Promise.resolve().then(() => (init_icon_city_bus_svg(), icon_city_bus_svg_exports))).default;
    case Icons.CROSS_CIRCLED:
      return (await Promise.resolve().then(() => (init_icon_cross_circled_svg(), icon_cross_circled_svg_exports))).default;
    case Icons.CROSS:
      return (await Promise.resolve().then(() => (init_icon_cross_svg(), icon_cross_svg_exports))).default;
    case Icons.CRUISESHIP:
      return (await Promise.resolve().then(() => (init_icon_cruiseship_svg(), icon_cruiseship_svg_exports))).default;
    case Icons.ELEVATOR1:
      return (await Promise.resolve().then(() => (init_icon_elevator_1_svg(), icon_elevator_1_svg_exports))).default;
    case Icons.ELEVATOR2:
      return (await Promise.resolve().then(() => (init_icon_elevator_2_svg(), icon_elevator_2_svg_exports))).default;
    case Icons.ELEVATOR3:
      return (await Promise.resolve().then(() => (init_icon_elevator_3_svg(), icon_elevator_3_svg_exports))).default;
    case Icons.ELEVATOR4:
      return (await Promise.resolve().then(() => (init_icon_elevator_4_svg(), icon_elevator_4_svg_exports))).default;
    case Icons.ESCALATOR_DOWN:
      return (await Promise.resolve().then(() => (init_icon_escalator_down_svg(), icon_escalator_down_svg_exports))).default;
    case Icons.ESCALATOR_UP:
      return (await Promise.resolve().then(() => (init_icon_escalator_up_svg(), icon_escalator_up_svg_exports))).default;
    case Icons.ESCALATOR:
      return (await Promise.resolve().then(() => (init_icon_escalator_svg(), icon_escalator_svg_exports))).default;
    case Icons.FAMILY:
      return (await Promise.resolve().then(() => (init_icon_family_svg(), icon_family_svg_exports))).default;
    case Icons.FERRY:
      return (await Promise.resolve().then(() => (init_icon_ferry_svg(), icon_ferry_svg_exports))).default;
    case Icons.FIRE_EXTINGUISHER:
      return (await Promise.resolve().then(() => (init_icon_fire_extinguisher_svg(), icon_fire_extinguisher_svg_exports))).default;
    case Icons.FIRE_FLAME:
      return (await Promise.resolve().then(() => (init_icon_fire_flame_svg(), icon_fire_flame_svg_exports))).default;
    case Icons.FIRE_HOSE:
      return (await Promise.resolve().then(() => (init_icon_fire_hose_svg(), icon_fire_hose_svg_exports))).default;
    case Icons.GRAVESTONE2:
      return (await Promise.resolve().then(() => (init_icon_gravestone_2_svg(), icon_gravestone_2_svg_exports))).default;
    case Icons.GRAVESTONE3:
      return (await Promise.resolve().then(() => (init_icon_gravestone_3_svg(), icon_gravestone_3_svg_exports))).default;
    case Icons.GRAVESTONE:
      return (await Promise.resolve().then(() => (init_icon_gravestone_svg(), icon_gravestone_svg_exports))).default;
    case Icons.HELLO_GOODBYE:
      return (await Promise.resolve().then(() => (init_icon_hello_goodbye_svg(), icon_hello_goodbye_svg_exports))).default;
    case Icons.LOCATION_MARKER:
      return (await Promise.resolve().then(() => (init_icon_location_marker_svg(), icon_location_marker_svg_exports))).default;
    case Icons.LOCATION_PATH2:
      return (await Promise.resolve().then(() => (init_icon_location_path_2_svg(), icon_location_path_2_svg_exports))).default;
    case Icons.LOCATION_PATH:
      return (await Promise.resolve().then(() => (init_icon_location_path_svg(), icon_location_path_svg_exports))).default;
    case Icons.LOCATION_PIN:
      return (await Promise.resolve().then(() => (init_icon_location_pin_svg(), icon_location_pin_svg_exports))).default;
    case Icons.LOUNGE:
      return (await Promise.resolve().then(() => (init_icon_lounge_svg(), icon_lounge_svg_exports))).default;
    case Icons.LUGGAGE_BELT:
      return (await Promise.resolve().then(() => (init_icon_luggage_belt_svg(), icon_luggage_belt_svg_exports))).default;
    case Icons.LUGGAGE_LOCKER:
      return (await Promise.resolve().then(() => (init_icon_luggage_locker_svg(), icon_luggage_locker_svg_exports))).default;
    case Icons.LUGGAGE_TROLLEY:
      return (await Promise.resolve().then(() => (init_icon_luggage_trolley_svg(), icon_luggage_trolley_svg_exports))).default;
    case Icons.LUGGAGE:
      return (await Promise.resolve().then(() => (init_icon_luggage_svg(), icon_luggage_svg_exports))).default;
    case Icons.MAP:
      return (await Promise.resolve().then(() => (init_icon_map_svg(), icon_map_svg_exports))).default;
    case Icons.MAP2:
      return (await Promise.resolve().then(() => (init_icon_map2_svg(), icon_map2_svg_exports))).default;
    case Icons.MAP3:
      return (await Promise.resolve().then(() => (init_icon_map3_svg(), icon_map3_svg_exports))).default;
    case Icons.METRO2:
      return (await Promise.resolve().then(() => (init_icon_metro_2_svg(), icon_metro_2_svg_exports))).default;
    case Icons.METRO:
      return (await Promise.resolve().then(() => (init_icon_metro_svg(), icon_metro_svg_exports))).default;
    case Icons.NO_SMOKING_CIRCLED:
      return (await Promise.resolve().then(() => (init_icon_no_smoking_circled_svg(), icon_no_smoking_circled_svg_exports))).default;
    case Icons.NO_SMOKING:
      return (await Promise.resolve().then(() => (init_icon_no_smoking_svg(), icon_no_smoking_svg_exports))).default;
    case Icons.OFFICE_SPACE:
      return (await Promise.resolve().then(() => (init_icon_office_space_svg(), icon_office_space_svg_exports))).default;
    case Icons.PALMTREE_ISLAND_WAVE:
      return (await Promise.resolve().then(() => (init_icon_palmtree_island_wave_svg(), icon_palmtree_island_wave_svg_exports))).default;
    case Icons.PALMTREE_ISLAND:
      return (await Promise.resolve().then(() => (init_icon_palmtree_island_svg(), icon_palmtree_island_svg_exports))).default;
    case Icons.PALMTREE:
      return (await Promise.resolve().then(() => (init_icon_palmtree_svg(), icon_palmtree_svg_exports))).default;
    case Icons.PARASOL_ISLAND_WAVE:
      return (await Promise.resolve().then(() => (init_icon_parasol_island_wave_svg(), icon_parasol_island_wave_svg_exports))).default;
    case Icons.PARASOL_ISLAND:
      return (await Promise.resolve().then(() => (init_icon_parasol_island_svg(), icon_parasol_island_svg_exports))).default;
    case Icons.PARASOL:
      return (await Promise.resolve().then(() => (init_icon_parasol_svg(), icon_parasol_svg_exports))).default;
    case Icons.PLASTER:
      return (await Promise.resolve().then(() => (init_icon_plaster_svg(), icon_plaster_svg_exports))).default;
    case Icons.PLASTERS:
      return (await Promise.resolve().then(() => (init_icon_plasters_svg(), icon_plasters_svg_exports))).default;
    case Icons.POINTER_TARGET:
      return (await Promise.resolve().then(() => (init_icon_pointer_target_svg(), icon_pointer_target_svg_exports))).default;
    case Icons.RENTAL_CAR:
      return (await Promise.resolve().then(() => (init_icon_rental_car_svg(), icon_rental_car_svg_exports))).default;
    case Icons.RESTROOM:
      return (await Promise.resolve().then(() => (init_icon_restroom_svg(), icon_restroom_svg_exports))).default;
    case Icons.SECURITY_CAMERA2:
      return (await Promise.resolve().then(() => (init_icon_security_camera_2_svg(), icon_security_camera_2_svg_exports))).default;
    case Icons.SECURITY_CAMERA3:
      return (await Promise.resolve().then(() => (init_icon_security_camera_3_svg(), icon_security_camera_3_svg_exports))).default;
    case Icons.SECURITY_CAMERA:
      return (await Promise.resolve().then(() => (init_icon_security_camera_svg(), icon_security_camera_svg_exports))).default;
    case Icons.SECURITY_CHECK:
      return (await Promise.resolve().then(() => (init_icon_security_check_svg(), icon_security_check_svg_exports))).default;
    case Icons.SHIP:
      return (await Promise.resolve().then(() => (init_icon_ship_svg(), icon_ship_svg_exports))).default;
    case Icons.SIGNPOST2:
      return (await Promise.resolve().then(() => (init_icon_signpost_2_svg(), icon_signpost_2_svg_exports))).default;
    case Icons.SIGNPOST:
      return (await Promise.resolve().then(() => (init_icon_signpost_svg(), icon_signpost_svg_exports))).default;
    case Icons.SMOKING:
      return (await Promise.resolve().then(() => (init_icon_smoking_svg(), icon_smoking_svg_exports))).default;
    case Icons.STAIRS_DOWN:
      return (await Promise.resolve().then(() => (init_icon_stairs_down_svg(), icon_stairs_down_svg_exports))).default;
    case Icons.STAIRS_UP:
      return (await Promise.resolve().then(() => (init_icon_stairs_up_svg(), icon_stairs_up_svg_exports))).default;
    case Icons.STAIRS:
      return (await Promise.resolve().then(() => (init_icon_stairs_svg(), icon_stairs_svg_exports))).default;
    case Icons.TAXI_STOP:
      return (await Promise.resolve().then(() => (init_icon_taxi_stop_svg(), icon_taxi_stop_svg_exports))).default;
    case Icons.TAXI:
      return (await Promise.resolve().then(() => (init_icon_taxi_svg(), icon_taxi_svg_exports))).default;
    case Icons.TRAIN_TRACK:
      return (await Promise.resolve().then(() => (init_icon_train_track_svg(), icon_train_track_svg_exports))).default;
    case Icons.TRAIN:
      return (await Promise.resolve().then(() => (init_icon_train_svg(), icon_train_svg_exports))).default;
    case Icons.WALKING2:
      return (await Promise.resolve().then(() => (init_icon_walking_2_svg(), icon_walking_2_svg_exports))).default;
    case Icons.WALKING:
      return (await Promise.resolve().then(() => (init_icon_walking_svg(), icon_walking_svg_exports))).default;
    case Icons.CLOUD_LIGHTNING:
      return (await Promise.resolve().then(() => (init_icon_cloud_lightning_svg(), icon_cloud_lightning_svg_exports))).default;
    case Icons.CLOUD_RAIN2:
      return (await Promise.resolve().then(() => (init_icon_cloud_rain_2_svg(), icon_cloud_rain_2_svg_exports))).default;
    case Icons.CLOUD_SMALL_RAIN:
      return (await Promise.resolve().then(() => (init_icon_cloud_small_rain_svg(), icon_cloud_small_rain_svg_exports))).default;
    case Icons.CLOUD_SUN:
      return (await Promise.resolve().then(() => (init_icon_cloud_sun_svg(), icon_cloud_sun_svg_exports))).default;
    case Icons.CLOUD_THERMOMETER:
      return (await Promise.resolve().then(() => (init_icon_cloud_thermometer_svg(), icon_cloud_thermometer_svg_exports))).default;
    case Icons.CLOUD:
      return (await Promise.resolve().then(() => (init_icon_cloud_svg(), icon_cloud_svg_exports))).default;
    case Icons.LIGHT_DARK_MODE2:
      return (await Promise.resolve().then(() => (init_icon_light_dark_mode_2_svg(), icon_light_dark_mode_2_svg_exports))).default;
    case Icons.LIGHT_DARK_MODE3:
      return (await Promise.resolve().then(() => (init_icon_light_dark_mode_3_svg(), icon_light_dark_mode_3_svg_exports))).default;
    case Icons.LIGHTNING_FLASH:
      return (await Promise.resolve().then(() => (init_icon_lightning_flash_svg(), icon_lightning_flash_svg_exports))).default;
    case Icons.MOON01:
      return (await Promise.resolve().then(() => (init_icon_moon_01_svg(), icon_moon_01_svg_exports))).default;
    case Icons.MOON19:
      return (await Promise.resolve().then(() => (init_icon_moon_19_svg(), icon_moon_19_svg_exports))).default;
    case Icons.MOON_DARK_MODE:
      return (await Promise.resolve().then(() => (init_icon_moon_dark_mode_svg(), icon_moon_dark_mode_svg_exports))).default;
    case Icons.SIMPLE_SUN:
      return (await Promise.resolve().then(() => (init_icon_simple_sun_svg(), icon_simple_sun_svg_exports))).default;
    case Icons.SUN2:
      return (await Promise.resolve().then(() => (init_icon_sun_2_svg(), icon_sun_2_svg_exports))).default;
    case Icons.SUN_LIGHT_MODE:
      return (await Promise.resolve().then(() => (init_icon_sun_light_mode_svg(), icon_sun_light_mode_svg_exports))).default;
    case Icons.SUN:
      return (await Promise.resolve().then(() => (init_icon_sun_svg(), icon_sun_svg_exports))).default;
    case Icons.THERMOMETER_COLD:
      return (await Promise.resolve().then(() => (init_icon_thermometer_cold_svg(), icon_thermometer_cold_svg_exports))).default;
    case Icons.THERMOMETER_HOT:
      return (await Promise.resolve().then(() => (init_icon_thermometer_hot_svg(), icon_thermometer_hot_svg_exports))).default;
    case Icons.THERMOMETER:
      return (await Promise.resolve().then(() => (init_icon_thermometer_svg(), icon_thermometer_svg_exports))).default;
    default:
      return null;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Aliasses,
  BaseIcons,
  IconCategories,
  IconTags,
  Icons,
  getIcon,
  getMeta,
  iconExists,
  searchIcon
});
